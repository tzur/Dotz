{"version":3,"sources":["eslint"],"names":[],"mappings":";;;;;;;;;AASA,YAAY,CAAC;;;;;;AAMb,IAAI,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,AAAC;IACjD,IAAI,GAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,AAAC;IAC5C,KAAK,GAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,AAAC,CAAC;;;AAGnD,IAAI,KAAK,EAAE;AACP,WAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;CACvC;;;;;;;AAOD,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC;IACjC,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;;;;AAMhC,IAAI,QAAQ,EAAE;AACV,WAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,UAAS,IAAI,EAAE;AAC7D,YAAI;AACA,oBAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC9C,CAAC,OAAO,EAAE,EAAE;AACT,mBAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC1B,mBAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AACxB,oBAAQ,GAAG,CAAC,CAAC;SAChB;KACJ,CAAC,CAAC,CAAC;CACP,MAAM,IAAI,IAAI,EAAE;AACb,QAAI,UAAU,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACtD,cAAU,CAAC,gBAAgB,CAAC,UAAS,GAAG,EAAE;AACtC,YAAI,GAAG,EAAE;AACL,oBAAQ,GAAG,CAAC,CAAC;AACb,mBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC3B,mBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC5B,MAAM;AACH,mBAAO,CAAC,GAAG,CAAC,yCAAyC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACvE,oBAAQ,GAAG,CAAC,CAAC;SAChB;KACJ,CAAC,CAAC;CACN,MAAM;AACH,YAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CACxC;;;;;;AAMD,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,YAAW;AAC1B,WAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;CAC1B,CAAC,CAAC","file":"eslint-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * @fileoverview Main CLI that is run via the eslint command.\n * @author Nicholas C. Zakas\n * @copyright 2013 Nicholas C. Zakas. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar exitCode = 0,\n    useStdIn = (process.argv.indexOf(\"--stdin\") > -1),\n    init = (process.argv.indexOf(\"--init\") > -1),\n    debug = (process.argv.indexOf(\"--debug\") > -1);\n\n// must do this initialization *before* other requires in order to work\nif (debug) {\n    require(\"debug\").enable(\"eslint:*\");\n}\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// now we can safely include the other modules that use debug\nvar concat = require(\"concat-stream\"),\n    cli = require(\"../lib/cli\");\n\n//------------------------------------------------------------------------------\n// Execution\n//------------------------------------------------------------------------------\n\nif (useStdIn) {\n    process.stdin.pipe(concat({ encoding: \"string\" }, function(text) {\n        try {\n            exitCode = cli.execute(process.argv, text);\n        } catch (ex) {\n            console.error(ex.message);\n            console.error(ex.stack);\n            exitCode = 1;\n        }\n    }));\n} else if (init) {\n    var configInit = require(\"../lib/config-initializer\");\n    configInit.initializeConfig(function(err) {\n        if (err) {\n            exitCode = 1;\n            console.error(err.message);\n            console.error(err.stack);\n        } else {\n            console.log(\"Successfully created .eslintrc file in \" + process.cwd());\n            exitCode = 0;\n        }\n    });\n} else {\n    exitCode = cli.execute(process.argv);\n}\n\n/*\n * Wait for the stdout buffer to drain.\n * See https://github.com/eslint/eslint/issues/317\n */\nprocess.on(\"exit\", function() {\n    process.exit(exitCode);\n});\n"]}