{"version":3,"sources":["comment-event-generator.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;;;;;;;;;;AAeb,SAAS,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE;AACtD,QAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;AACrB,gBAAQ,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AAC5B,gBAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnC,gBAAI,KAAK,IAAI,CAAC,EAAE;AACZ,oBAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACzB,MAAM;AACH,oBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,uBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC;aAC7C;SACJ,CAAC,CAAC;KACN;CACJ;;;;;;;;AAQD,SAAS,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE;AAC5C,gBAAY,CACR,QAAQ,EACR,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,gBAAgB,EAC1B,SAAS,CAAC,CAAC;CAClB;;;;;;;;AAQD,SAAS,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE;AAC3C,gBAAY,CACR,QAAQ,EACR,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,eAAe,EACzB,cAAc,CAAC,CAAC;CACvB;;;;;;;;;;;;;;;AAeD,SAAS,qBAAqB,CAAC,sBAAsB,EAAE,UAAU,EAAE;AAC/D,QAAI,CAAC,QAAQ,GAAG,sBAAsB,CAAC;AACvC,QAAI,CAAC,OAAO,GAAG,sBAAsB,CAAC,OAAO,CAAC;AAC9C,QAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,QAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC3B,QAAI,CAAC,eAAe,GAAG,EAAE,CAAC;CAC7B;;AAED,qBAAqB,CAAC,SAAS,GAAG;AAC9B,eAAW,EAAE,qBAAqB;;;;;;;AAOlC,aAAS,EAAE,SAAS,SAAS,CAAC,IAAI,EAAE;AAChC,YAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;AAEjD,yBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC1C,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC9B,yBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC9C;;;;;;;AAOD,aAAS,EAAE,SAAS,SAAS,CAAC,IAAI,EAAE;AAChC,YAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;AAEjD,wBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC1C,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC9B,wBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC5C;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,qBAAqB,CAAC","file":"comment-event-generator-compiled.js","sourcesContent":["/**\n * @fileoverview The event generator for comments.\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Check collection of comments to prevent double event for comment as\n * leading and trailing, then emit event if passing\n * @param {ASTNode[]} comments - Collection of comment nodes\n * @param {EventEmitter} emitter - The event emitter which is the destination of events.\n * @param {Object[]} locs - List of locations of previous comment nodes\n * @param {string} eventName - Event name postfix\n * @returns {void}\n */\nfunction emitComments(comments, emitter, locs, eventName) {\n    if (comments.length > 0) {\n        comments.forEach(function(node) {\n            var index = locs.indexOf(node.loc);\n            if (index >= 0) {\n                locs.splice(index, 1);\n            } else {\n                locs.push(node.loc);\n                emitter.emit(node.type + eventName, node);\n            }\n        });\n    }\n}\n\n/**\n * Shortcut to check and emit enter of comment nodes\n * @param {CommentEventGenerator} generator - A generator to emit.\n * @param {ASTNode[]} comments - Collection of comment nodes\n * @returns {void}\n */\nfunction emitCommentsEnter(generator, comments) {\n    emitComments(\n        comments,\n        generator.emitter,\n        generator.commentLocsEnter,\n        \"Comment\");\n}\n\n/**\n * Shortcut to check and emit exit of comment nodes\n * @param {CommentEventGenerator} generator - A generator to emit.\n * @param {ASTNode[]} comments Collection of comment nodes\n * @returns {void}\n */\nfunction emitCommentsExit(generator, comments) {\n    emitComments(\n        comments,\n        generator.emitter,\n        generator.commentLocsExit,\n        \"Comment:exit\");\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * The event generator for comments.\n * This is the decorator pattern.\n * This generates events of comments before/after events which are generated the original generator.\n *\n * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.\n * @param {SourceCode} sourceCode - A source code which has comments.\n * @returns {CommentEventGenerator} new instance.\n */\nfunction CommentEventGenerator(originalEventGenerator, sourceCode) {\n    this.original = originalEventGenerator;\n    this.emitter = originalEventGenerator.emitter;\n    this.sourceCode = sourceCode;\n    this.commentLocsEnter = [];\n    this.commentLocsExit = [];\n}\n\nCommentEventGenerator.prototype = {\n    constructor: CommentEventGenerator,\n\n    /**\n     * Emits an event of entering comments.\n     * @param {ASTNode} node - A node which was entered.\n     * @returns {void}\n     */\n    enterNode: function enterNode(node) {\n        var comments = this.sourceCode.getComments(node);\n\n        emitCommentsEnter(this, comments.leading);\n        this.original.enterNode(node);\n        emitCommentsEnter(this, comments.trailing);\n    },\n\n    /**\n     * Emits an event of leaving comments.\n     * @param {ASTNode} node - A node which was left.\n     * @returns {void}\n     */\n    leaveNode: function leaveNode(node) {\n        var comments = this.sourceCode.getComments(node);\n\n        emitCommentsExit(this, comments.trailing);\n        this.original.leaveNode(node);\n        emitCommentsExit(this, comments.leading);\n    }\n};\n\nmodule.exports = CommentEventGenerator;\n"]}