{"version":3,"sources":["rule-fixer.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;AAmBb,SAAS,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE;AAC/B,WAAO;AACH,aAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;AACrB,YAAI,EAAE,IAAI;KACb,CAAC;CACL;;;;;;;;;;AAUD,SAAS,SAAS,GAAG;AACjB,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;CACvB;;AAED,SAAS,CAAC,SAAS,GAAG;AAClB,eAAW,EAAE,SAAS;;;;;;;;;AAStB,mBAAe,EAAE,yBAAS,WAAW,EAAE,IAAI,EAAE;AACzC,eAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC7D;;;;;;;;;;AAUD,wBAAoB,EAAE,8BAAS,KAAK,EAAE,IAAI,EAAE;AACxC,eAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KACvC;;;;;;;;;AASD,oBAAgB,EAAE,0BAAS,WAAW,EAAE,IAAI,EAAE;AAC1C,eAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC9D;;;;;;;;;;AAUD,yBAAqB,EAAE,+BAAS,KAAK,EAAE,IAAI,EAAE;AACzC,eAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KACvC;;;;;;;;;AASD,eAAW,EAAE,qBAAS,WAAW,EAAE,IAAI,EAAE;AACrC,eAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACzD;;;;;;;;;;AAUD,oBAAgB,EAAE,0BAAS,KAAK,EAAE,IAAI,EAAE;AACpC,eAAO;AACH,iBAAK,EAAE,KAAK;AACZ,gBAAI,EAAE,IAAI;SACb,CAAC;KACL;;;;;;;;AAQD,UAAM,EAAE,gBAAS,WAAW,EAAE;AAC1B,eAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC9C;;;;;;;;;AASD,eAAW,EAAE,qBAAS,KAAK,EAAE;AACzB,eAAO;AACH,iBAAK,EAAE,KAAK;AACZ,gBAAI,EAAE,EAAE;SACX,CAAC;KACL;;CAEJ,CAAC;;AAGF,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"rule-fixer-compiled.js","sourcesContent":["/**\n * @fileoverview An object that creates fix commands for rules.\n * @author Nicholas C. Zakas\n * @copyright 2015 Nicholas C. Zakas. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// none!\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {int} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {Object} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    return {\n        range: [index, index],\n        text: text\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates code fixing commands for rules.\n * @constructor\n */\nfunction RuleFixer() {\n    Object.freeze(this);\n}\n\nRuleFixer.prototype = {\n    constructor: RuleFixer,\n\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfter: function(nodeOrToken, text) {\n        return this.insertTextAfterRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextAfterRange: function(range, text) {\n        return insertTextAt(range[1], text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBefore: function(nodeOrToken, text) {\n        return this.insertTextBeforeRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    insertTextBeforeRange: function(range, text) {\n        return insertTextAt(range[0], text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceText: function(nodeOrToken, text) {\n        return this.replaceTextRange(nodeOrToken.range, text);\n    },\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     * @param {string} text The text to insert.\n     * @returns {Object} The fix command.\n     */\n    replaceTextRange: function(range, text) {\n        return {\n            range: range,\n            text: text\n        };\n    },\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {ASTNode|Token} nodeOrToken The node or token to remove.\n     * @returns {Object} The fix command.\n     */\n    remove: function(nodeOrToken) {\n        return this.removeRange(nodeOrToken.range);\n    },\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {int[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     * @returns {Object} The fix command.\n     */\n    removeRange: function(range) {\n        return {\n            range: range,\n            text: \"\"\n        };\n    }\n\n};\n\n\nmodule.exports = RuleFixer;\n"]}