{"version":3,"sources":["no-inline-comments.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;AAMvC,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,qBAAqB,CAAC,IAAI,EAAE;;;AAGjC,YAAI,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,YAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEtE,YAAI,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;;;AAGhE,YAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;;;AAG1D,YAAI,WAAW,GAAG,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;;;AAGpD,YAAI,CAAC,WAAW,KAAK,QAAQ,IAAI,SAAS,CAAA,AAAC,EAAE;AACzC,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,sCAAsC,CAAC,CAAC;SAChE;KACJ;;;;;;AAMD,WAAO;;AAEH,qBAAa,EAAE,qBAAqB;AACpC,sBAAc,EAAE,qBAAqB;;KAExC,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-inline-comments-compiled.js","sourcesContent":["/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n * @copyright 2014 Greg Cochard. All rights reserved.\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Will check that comments are not on lines starting with or ending with code\n     * @param {ASTNode} node The comment node to check\n     * @private\n     * @returns {void}\n     */\n    function testCodeAroundComment(node) {\n\n        // Get the whole line and cut it off at the start of the comment\n        var startLine = String(context.getSourceLines()[node.loc.start.line - 1]);\n        var endLine = String(context.getSourceLines()[node.loc.end.line - 1]);\n\n        var preamble = startLine.slice(0, node.loc.start.column).trim();\n\n        // Also check after the comment\n        var postamble = endLine.slice(node.loc.end.column).trim();\n\n        // Check that this comment isn't an ESLint directive\n        var isDirective = astUtils.isDirectiveComment(node);\n\n        // Should be empty if there was only whitespace around the comment\n        if (!isDirective && (preamble || postamble)) {\n            context.report(node, \"Unexpected comment inline with code.\");\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"LineComment\": testCodeAroundComment,\n        \"BlockComment\": testCodeAroundComment\n\n    };\n};\n\nmodule.exports.schema = [];\n"]}