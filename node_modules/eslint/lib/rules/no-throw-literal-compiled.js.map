{"version":3,"sources":["no-throw-literal.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;;;;;;AAWb,SAAS,YAAY;;;;;8BAAO;YAAN,IAAI;;;AACtB,gBAAQ,IAAI,CAAC,IAAI;AACb,iBAAK,YAAY,CAAC;AAClB,iBAAK,gBAAgB,CAAC;AACtB,iBAAK,eAAe,CAAC;AACrB,iBAAK,kBAAkB,CAAC;AACxB,iBAAK,0BAA0B,CAAC;AAChC,iBAAK,iBAAiB;AAClB,uBAAO,IAAI,CAAC;;AAEhB,iBAAK,sBAAsB;qBACH,IAAI,CAAC,KAAK;;;AAAE;AAEpC,iBAAK,oBAAoB;AACrB,oBAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;;8BACtB,KAAK,CAAC,MAAM,KAAK,CAAC;;;;qBAAiB,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;AAD7D,qBAAK;;AAC0D;AAEvE,iBAAK,mBAAmB;4BACb,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;;;;qBAAiB,IAAI,CAAC,KAAK;;AAJrD,qBAAK;;AAIkD;AAE/D,iBAAK,uBAAuB;4BACjB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;;;;qBAAiB,IAAI,CAAC,SAAS;;AAP/D,qBAAK;;AAO4D;AAEzE;AACI,uBAAO,KAAK,CAAC;AAAA,SACpB;KACJ;CAAA;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;;AAEH,wBAAgB,EAAE,wBAAS,IAAI,EAAE;AAC7B,gBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC9B,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;aAC5D,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,EAAE;AAC5C,oBAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW,EAAE;AACpC,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;iBACnD;aACJ;SAEJ;;KAEJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-throw-literal-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to restrict what can be thrown as an exception.\n * @author Dieter Oberkofler\n * @copyright 2015 Ian VanSchooten. All rights reserved.\n * @copyright 2015 Dieter Oberkofler. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determine if a node has a possiblity to be an Error object\n * @param  {ASTNode}  node  ASTNode to check\n * @returns {boolean}       True if there is a chance it contains an Error obj\n */\nfunction couldBeError(node) {\n    switch (node.type) {\n        case \"Identifier\":\n        case \"CallExpression\":\n        case \"NewExpression\":\n        case \"MemberExpression\":\n        case \"TaggedTemplateExpression\":\n        case \"YieldExpression\":\n            return true; // possibly an error object.\n\n        case \"AssignmentExpression\":\n            return couldBeError(node.right);\n\n        case \"SequenceExpression\":\n            var exprs = node.expressions;\n            return exprs.length !== 0 && couldBeError(exprs[exprs.length - 1]);\n\n        case \"LogicalExpression\":\n            return couldBeError(node.left) || couldBeError(node.right);\n\n        case \"ConditionalExpression\":\n            return couldBeError(node.consequent) || couldBeError(node.alternate);\n\n        default:\n            return false;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n\n        \"ThrowStatement\": function(node) {\n            if (!couldBeError(node.argument)) {\n                context.report(node, \"Expected an object to be thrown.\");\n            } else if (node.argument.type === \"Identifier\") {\n                if (node.argument.name === \"undefined\") {\n                    context.report(node, \"Do not throw undefined.\");\n                }\n            }\n\n        }\n\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}