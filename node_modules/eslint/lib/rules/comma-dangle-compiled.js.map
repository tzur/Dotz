{"version":3,"sources":["comma-dangle.js"],"names":[],"mappings":"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","file":"comma-dangle-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to forbid or enforce dangling commas.\n * @author Ian Christian Myers\n * @copyright 2015 Toru Nagashima\n * @copyright 2015 Mathias Schreck\n * @copyright 2013 Ian Christian Myers\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the last element of a given array.\n *\n * @param {*[]} xs - An array to get.\n * @returns {*} The last element, or undefined.\n */\nfunction getLast(xs) {\n    if (xs.length === 0) {\n        return null;\n    }\n    return xs[xs.length - 1];\n}\n\n/**\n * Checks whether or not a trailing comma is allowed in a given node.\n * `ArrayPattern` which has `RestElement` disallows it.\n *\n * @param {ASTNode} node - A node to check.\n * @param {ASTNode} lastItem - The node of the last element in the given node.\n * @returns {boolean} `true` if a trailing comma is allowed.\n */\nfunction isTrailingCommaAllowed(node, lastItem) {\n    switch (node.type) {\n        case \"ArrayPattern\":\n            // TODO(t-nagashima): Remove SpreadElement after https://github.com/eslint/espree/issues/194 was fixed.\n            return (\n                lastItem.type !== \"RestElement\" &&\n                lastItem.type !== \"SpreadElement\"\n            );\n\n        // TODO(t-nagashima): Remove this case after https://github.com/eslint/espree/issues/195 was fixed.\n        case \"ArrayExpression\":\n            return (\n                node.parent.type !== \"ForOfStatement\" ||\n                node.parent.left !== node ||\n                lastItem.type !== \"SpreadElement\"\n            );\n\n        default:\n            return true;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var mode = context.options[0];\n    var UNEXPECTED_MESSAGE = \"Unexpected trailing comma.\";\n    var MISSING_MESSAGE = \"Missing trailing comma.\";\n\n    /**\n     * Checks whether or not a given node is multiline.\n     * This rule handles a given node as multiline when the closing parenthesis\n     * and the last element are not on the same line.\n     *\n     * @param {ASTNode} node - A ndoe to check.\n     * @returns {boolean} `true` if the node is multiline.\n     */\n    function isMultiline(node) {\n        var lastItem = getLast(node.properties || node.elements || node.specifiers);\n        if (!lastItem) {\n            return false;\n        }\n\n        var sourceCode = context.getSourceCode(),\n            penultimateToken = sourceCode.getLastToken(lastItem),\n            lastToken = sourceCode.getLastToken(node);\n\n        if (lastToken.value === \",\") {\n            penultimateToken = lastToken;\n            lastToken = sourceCode.getTokenAfter(lastToken);\n        }\n\n        return lastToken.loc.end.line !== penultimateToken.loc.end.line;\n    }\n\n    /**\n     * Reports a trailing comma if it exists.\n     *\n     * @param {ASTNode} node - A node to check. Its type is one of\n     *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,\n     *   ImportDeclaration, and ExportNamedDeclaration.\n     * @returns {void}\n     */\n    function forbidTrailingComma(node) {\n        var lastItem = getLast(node.properties || node.elements || node.specifiers);\n        if (!lastItem || (node.type === \"ImportDeclaration\" && lastItem.type !== \"ImportSpecifier\")) {\n            return;\n        }\n\n        var sourceCode = context.getSourceCode(),\n            trailingToken;\n\n        // last item can be surrounded by parentheses for object and array literals\n        if (node.type === \"ObjectExpression\" || node.type === \"ArrayExpression\") {\n            trailingToken = sourceCode.getTokenBefore(sourceCode.getLastToken(node));\n        } else {\n            trailingToken = sourceCode.getTokenAfter(lastItem);\n        }\n\n        if (trailingToken.value === \",\") {\n            context.report(\n                lastItem,\n                trailingToken.loc.start,\n                UNEXPECTED_MESSAGE);\n        }\n    }\n\n    /**\n     * Reports the last element of a given node if it does not have a trailing\n     * comma.\n     *\n     * If a given node is `ArrayPattern` which has `RestElement`, the trailing\n     * comma is disallowed, so report if it exists.\n     *\n     * @param {ASTNode} node - A node to check. Its type is one of\n     *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,\n     *   ImportDeclaration, and ExportNamedDeclaration.\n     * @returns {void}\n     */\n    function forceTrailingComma(node) {\n        var lastItem = getLast(node.properties || node.elements || node.specifiers);\n        if (!lastItem || (node.type === \"ImportDeclaration\" && lastItem.type !== \"ImportSpecifier\")) {\n            return;\n        }\n        if (!isTrailingCommaAllowed(node, lastItem)) {\n            forbidTrailingComma(node);\n            return;\n        }\n\n        var sourceCode = context.getSourceCode(),\n            trailingToken;\n\n        // last item can be surrounded by parentheses for object and array literals\n        if (node.type === \"ObjectExpression\" || node.type === \"ArrayExpression\") {\n            trailingToken = sourceCode.getTokenBefore(sourceCode.getLastToken(node));\n        } else {\n            trailingToken = sourceCode.getTokenAfter(lastItem);\n        }\n\n        if (trailingToken.value !== \",\") {\n            context.report(\n                lastItem,\n                lastItem.loc.end,\n                MISSING_MESSAGE);\n        }\n    }\n\n    /**\n     * If a given node is multiline, reports the last element of a given node\n     * when it does not have a trailing comma.\n     * Otherwise, reports a trailing comma if it exists.\n     *\n     * @param {ASTNode} node - A node to check. Its type is one of\n     *   ObjectExpression, ObjectPattern, ArrayExpression, ArrayPattern,\n     *   ImportDeclaration, and ExportNamedDeclaration.\n     * @returns {void}\n     */\n    function forceTrailingCommaIfMultiline(node) {\n        if (isMultiline(node)) {\n            forceTrailingComma(node);\n        } else {\n            forbidTrailingComma(node);\n        }\n    }\n\n    // Chooses a checking function.\n    var checkForTrailingComma;\n    if (mode === \"always\") {\n        checkForTrailingComma = forceTrailingComma;\n    } else if (mode === \"always-multiline\") {\n        checkForTrailingComma = forceTrailingCommaIfMultiline;\n    } else {\n        checkForTrailingComma = forbidTrailingComma;\n    }\n\n    return {\n        \"ObjectExpression\": checkForTrailingComma,\n        \"ObjectPattern\": checkForTrailingComma,\n        \"ArrayExpression\": checkForTrailingComma,\n        \"ArrayPattern\": checkForTrailingComma,\n        \"ImportDeclaration\": checkForTrailingComma,\n        \"ExportNamedDeclaration\": checkForTrailingComma\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"always-multiline\", \"never\"]\n    }\n];\n"]}