{"version":3,"sources":["use-isnan.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;AACH,0BAAkB,EAAE,0BAAS,IAAI,EAAE;AAC/B,gBAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAA,AAAC,EAAE;AACrG,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,6CAA6C,CAAC,CAAC;aACvE;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"use-isnan-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to the value NaN\n * @author James Allardice\n * @copyright 2014 Jordan Harband. All rights reserved.\n * @copyright 2013 James Allardice. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n        \"BinaryExpression\": function(node) {\n            if (/^(?:[<>]|[!=]=)=?$/.test(node.operator) && (node.left.name === \"NaN\" || node.right.name === \"NaN\")) {\n                context.report(node, \"Use the isNaN function to compare with NaN.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}