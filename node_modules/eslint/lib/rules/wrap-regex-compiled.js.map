{"version":3,"sources":["wrap-regex.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;;AAEH,iBAAS,EAAE,iBAAS,IAAI,EAAE;AACtB,gBAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC;gBACnC,QAAQ,GAAG,KAAK,CAAC,IAAI;gBACrB,MAAM;gBACN,WAAW;gBACX,SAAS,CAAC;;AAEd,gBAAI,QAAQ,KAAK,mBAAmB,EAAE;AAClC,sBAAM,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACtC,yBAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AACnC,2BAAW,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAE9C,oBAAI,WAAW,CAAC,IAAI,KAAK,kBAAkB,IAAI,WAAW,CAAC,MAAM,KAAK,IAAI,KACrE,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,KAAK,GAAG,CAAA,AAAC,EAAE;AACnC,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8DAA8D,CAAC,CAAC;iBACxF;aACJ;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"wrap-regex-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n\n        \"Literal\": function(node) {\n            var token = context.getFirstToken(node),\n                nodeType = token.type,\n                source,\n                grandparent,\n                ancestors;\n\n            if (nodeType === \"RegularExpression\") {\n                source = context.getTokenBefore(node);\n                ancestors = context.getAncestors();\n                grandparent = ancestors[ancestors.length - 1];\n\n                if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\n                    (!source || source.value !== \"(\")) {\n                    context.report(node, \"Wrap the regexp literal in parens to disambiguate the slash.\");\n                }\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}