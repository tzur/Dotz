{"version":3,"sources":["strict.js"],"names":[],"mappings":"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","file":"strict-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to control usage of strict mode directives.\n * @author Brandon Mills\n * @copyright 2015 Brandon Mills. All rights reserved.\n * @copyright 2013-2014 Nicholas C. Zakas. All rights reserved.\n * @copyright 2013 Ian Christian Myers. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nvar messages = {\n    function: \"Use the function form of \\\"use strict\\\".\",\n    global: \"Use the global form of \\\"use strict\\\".\",\n    multiple: \"Multiple \\\"use strict\\\" directives.\",\n    never: \"Strict mode is not permitted.\",\n    unnecessary: \"Unnecessary \\\"use strict\\\" directive.\",\n    unnecessaryInModules: \"\\\"use strict\\\" is unnecessary inside of modules.\",\n    unnecessaryInClasses: \"\\\"use strict\\\" is unnecessary inside of classes.\"\n};\n\n/**\n * Gets all of the Use Strict Directives in the Directive Prologue of a group of\n * statements.\n * @param {ASTNode[]} statements Statements in the program or function body.\n * @returns {ASTNode[]} All of the Use Strict Directives.\n */\nfunction getUseStrictDirectives(statements) {\n    var directives = [],\n        i, statement;\n\n    for (i = 0; i < statements.length; i++) {\n        statement = statements[i];\n\n        if (\n            statement.type === \"ExpressionStatement\" &&\n            statement.expression.type === \"Literal\" &&\n            statement.expression.value === \"use strict\"\n        ) {\n            directives[i] = statement;\n        } else {\n            break;\n        }\n    }\n\n    return directives;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var mode = context.options[0];\n\n    /**\n     * Report a node or array of nodes with a given message.\n     * @param {(ASTNode|ASTNode[])} nodes Node or nodes to report.\n     * @param {string} message Message to display.\n     * @returns {void}\n     */\n    function report(nodes, message) {\n        var i;\n\n        if (Array.isArray(nodes)) {\n            for (i = 0; i < nodes.length; i++) {\n                context.report(nodes[i], message);\n            }\n        } else {\n            context.report(nodes, message);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // \"never\" mode\n    //--------------------------------------------------------------------------\n\n    if (mode === \"never\") {\n        return {\n            \"Program\": function(node) {\n                report(getUseStrictDirectives(node.body), messages.never);\n            },\n            \"FunctionDeclaration\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.never);\n            },\n            \"FunctionExpression\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.never);\n            },\n            \"ArrowFunctionExpression\": function(node) {\n                if (node.body.type === \"BlockStatement\") {\n                    report(getUseStrictDirectives(node.body.body), messages.never);\n                }\n            }\n        };\n    }\n\n    //--------------------------------------------------------------------------\n    // If this is modules, all \"use strict\" directives are unnecessary.\n    //--------------------------------------------------------------------------\n\n    if (context.ecmaFeatures.modules) {\n        return {\n            \"Program\": function(node) {\n                report(getUseStrictDirectives(node.body), messages.unnecessaryInModules);\n            },\n            \"FunctionDeclaration\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.unnecessaryInModules);\n            },\n            \"FunctionExpression\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.unnecessaryInModules);\n            },\n            \"ArrowFunctionExpression\": function(node) {\n                if (node.body.type === \"BlockStatement\") {\n                    report(getUseStrictDirectives(node.body.body), messages.unnecessaryInModules);\n                }\n            }\n        };\n    }\n\n    //--------------------------------------------------------------------------\n    // \"global\" mode\n    //--------------------------------------------------------------------------\n\n    if (mode === \"global\") {\n        return {\n            \"Program\": function(node) {\n                var useStrictDirectives = getUseStrictDirectives(node.body);\n\n                if (node.body.length > 0 && useStrictDirectives.length === 0) {\n                    report(node, messages.global);\n                } else {\n                    report(useStrictDirectives.slice(1), messages.multiple);\n                }\n            },\n            \"FunctionDeclaration\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.global);\n            },\n            \"FunctionExpression\": function(node) {\n                report(getUseStrictDirectives(node.body.body), messages.global);\n            },\n            \"ArrowFunctionExpression\": function(node) {\n                if (node.body.type === \"BlockStatement\") {\n                    report(getUseStrictDirectives(node.body.body), messages.global);\n                }\n            }\n        };\n    }\n\n    //--------------------------------------------------------------------------\n    // \"function\" mode (Default)\n    //--------------------------------------------------------------------------\n\n    var scopes = [],\n        classScopes = [];\n\n    /**\n     * Entering a function pushes a new nested scope onto the stack. The new\n     * scope is true if the nested function is strict mode code.\n     * @param {ASTNode} node The function declaration or expression.\n     * @returns {void}\n     */\n    function enterFunction(node) {\n        var isInClass = classScopes.length > 0,\n            isParentGlobal = scopes.length === 0 && classScopes.length === 0,\n            isParentStrict = scopes.length > 0 && scopes[scopes.length - 1],\n            isNotBlock = node.body.type !== \"BlockStatement\",\n            useStrictDirectives = isNotBlock ? [] : getUseStrictDirectives(node.body.body),\n            isStrict = useStrictDirectives.length > 0;\n\n        if (isStrict) {\n            if (isParentStrict) {\n                report(useStrictDirectives[0], messages.unnecessary);\n            } else if (isInClass) {\n                report(useStrictDirectives[0], messages.unnecessaryInClasses);\n            }\n\n            report(useStrictDirectives.slice(1), messages.multiple);\n        } else if (isParentGlobal) {\n            report(node, messages.function);\n        }\n\n        scopes.push(isParentStrict || isStrict);\n    }\n\n    /**\n     * Exiting a function pops its scope off the stack.\n     * @returns {void}\n     */\n    function exitFunction() {\n        scopes.pop();\n    }\n\n    return {\n        \"Program\": function(node) {\n            report(getUseStrictDirectives(node.body), messages.function);\n        },\n\n        // Inside of class bodies are always strict mode.\n        \"ClassBody\": function() {\n            classScopes.push(true);\n        },\n        \"ClassBody:exit\": function() {\n            classScopes.pop();\n        },\n\n        \"FunctionDeclaration\": enterFunction,\n        \"FunctionExpression\": enterFunction,\n        \"ArrowFunctionExpression\": enterFunction,\n\n        \"FunctionDeclaration:exit\": exitFunction,\n        \"FunctionExpression:exit\": exitFunction,\n        \"ArrowFunctionExpression:exit\": exitFunction\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"never\", \"global\", \"function\"]\n    }\n];\n"]}