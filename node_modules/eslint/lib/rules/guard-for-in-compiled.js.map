{"version":3,"sources":["guard-for-in.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;;AAEH,wBAAgB,EAAE,wBAAS,IAAI,EAAE;;;;;;AAM7B,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;;AAE/E,gBAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;AACrC,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,6GAA6G,CAAC,CAAC;aACvI;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"guard-for-in-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n\n        \"ForInStatement\": function(node) {\n\n            /*\n             * If the for-in statement has {}, then the real body is the body\n             * of the BlockStatement. Otherwise, just use body as provided.\n             */\n            var body = node.body.type === \"BlockStatement\" ? node.body.body[0] : node.body;\n\n            if (body && body.type !== \"IfStatement\") {\n                context.report(node, \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}