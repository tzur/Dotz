{"version":3,"sources":["quote-props.js"],"names":[],"mappings":"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","file":"quote-props-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag non-quoted property names in object literals.\n * @author Mathias Bynens <http://mathiasbynens.be/>\n * @copyright 2014 Brandon Mills. All rights reserved.\n * @copyright 2015 Tomasz OlÄ™dzki. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar espree = require(\"espree\"),\n    keywords = require(\"../util/keywords\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var MODE = context.options[0],\n        KEYWORDS = context.options[1] && context.options[1].keywords,\n        CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false,\n        NUMBERS = context.options[1] && context.options[1].numbers,\n\n        MESSAGE_UNNECESSARY = \"Unnecessarily quoted property `{{property}}` found.\",\n        MESSAGE_UNQUOTED = \"Unquoted property `{{property}}` found.\",\n        MESSAGE_NUMERIC = \"Unquoted number literal `{{property}}` used as key.\",\n        MESSAGE_RESERVED = \"Unquoted reserved word `{{property}}` used as key.\";\n\n\n    /**\n     * Checks whether a certain string constitutes an ES3 token\n     * @param   {string} tokenStr - The string to be checked.\n     * @returns {boolean} `true` if it is an ES3 token.\n     */\n    function isKeyword(tokenStr) {\n        return keywords.indexOf(tokenStr) >= 0;\n    }\n\n    /**\n     * Checks if an espree-tokenized key has redundant quotes (i.e. whether quotes are unnecessary)\n     * @param   {espreeTokens} tokens The espree-tokenized node key\n     * @param   {boolean} [skipNumberLiterals=false] Indicates whether number literals should be checked\n     * @returns {boolean} Whether or not a key has redundant quotes.\n     * @private\n     */\n    function areQuotesRedundant(tokens, skipNumberLiterals) {\n        return tokens.length === 1 &&\n            ([\"Identifier\", \"Keyword\", \"Null\", \"Boolean\"].indexOf(tokens[0].type) >= 0 ||\n            (tokens[0].type === \"Numeric\" && !skipNumberLiterals && \"\" + +tokens[0].value === tokens[0].value));\n    }\n\n    /**\n     * Ensures that a property's key is quoted only when necessary\n     * @param   {ASTNode} node Property AST node\n     * @returns {void}\n     */\n    function checkUnnecessaryQuotes(node) {\n        var key = node.key,\n            isKeywordToken,\n            tokens;\n\n        if (node.method || node.computed || node.shorthand) {\n            return;\n        }\n\n        if (key.type === \"Literal\" && typeof key.value === \"string\") {\n            try {\n                tokens = espree.tokenize(key.value);\n            } catch (e) {\n                return;\n            }\n\n            if (tokens.length !== 1) {\n                return;\n            }\n\n            isKeywordToken = isKeyword(tokens[0].value);\n\n            if (isKeywordToken && KEYWORDS) {\n                return;\n            }\n\n            if (CHECK_UNNECESSARY && areQuotesRedundant(tokens, NUMBERS)) {\n                context.report(node, MESSAGE_UNNECESSARY, {property: key.value});\n            }\n        } else if (KEYWORDS && key.type === \"Identifier\" && isKeyword(key.name)) {\n            context.report(node, MESSAGE_RESERVED, {property: key.name});\n        } else if (NUMBERS && key.type === \"Literal\" && typeof key.value === \"number\") {\n            context.report(node, MESSAGE_NUMERIC, {property: key.value});\n        }\n    }\n\n    /**\n     * Ensures that a property's key is quoted\n     * @param   {ASTNode} node Property AST node\n     * @returns {void}\n     */\n    function checkOmittedQuotes(node) {\n        var key = node.key;\n\n        if (!node.method && !node.computed && !node.shorthand && !(key.type === \"Literal\" && typeof key.value === \"string\")) {\n            context.report(node, MESSAGE_UNQUOTED, {\n                property: key.name || key.value\n            });\n        }\n    }\n\n    /**\n     * Ensures that an object's keys are consistently quoted, optionally checks for redundancy of quotes\n     * @param   {ASTNode} node Property AST node\n     * @param   {boolean} checkQuotesRedundancy Whether to check quotes' redundancy\n     * @returns {void}\n     */\n    function checkConsistency(node, checkQuotesRedundancy) {\n        var quotes = false,\n            lackOfQuotes = false,\n            necessaryQuotes = false;\n\n        node.properties.forEach(function(property) {\n            var key = property.key,\n                tokens;\n\n            if (!key || property.method || property.computed || property.shorthand) {\n                return;\n            }\n\n            if (key.type === \"Literal\" && typeof key.value === \"string\") {\n\n                quotes = true;\n\n                if (checkQuotesRedundancy) {\n                    try {\n                        tokens = espree.tokenize(key.value);\n                    } catch (e) {\n                        necessaryQuotes = true;\n                        return;\n                    }\n\n                    necessaryQuotes = necessaryQuotes || !areQuotesRedundant(tokens) || KEYWORDS && isKeyword(tokens[0].value);\n                }\n            } else if (KEYWORDS && checkQuotesRedundancy && key.type === \"Identifier\" && isKeyword(key.name)) {\n                necessaryQuotes = true;\n                context.report(node, \"Properties should be quoted as `{{property}}` is a reserved word.\", {property: key.name});\n            } else {\n                lackOfQuotes = true;\n            }\n\n            if (quotes && lackOfQuotes) {\n                context.report(node, \"Inconsistently quoted property `{{key}}` found.\", {\n                    key: key.name || key.value\n                });\n            }\n        });\n\n        if (checkQuotesRedundancy && quotes && !necessaryQuotes) {\n            context.report(node, \"Properties shouldn't be quoted as all quotes are redundant.\");\n        }\n    }\n\n    return {\n        \"Property\": function(node) {\n            if (MODE === \"always\" || !MODE) {\n                checkOmittedQuotes(node);\n            }\n            if (MODE === \"as-needed\") {\n                checkUnnecessaryQuotes(node);\n            }\n        },\n        \"ObjectExpression\": function(node) {\n            if (MODE === \"consistent\") {\n                checkConsistency(node, false);\n            }\n            if (MODE === \"consistent-as-needed\") {\n                checkConsistency(node, true);\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = {\n    \"anyOf\": [\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 2\n        },\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"always\", \"as-needed\", \"consistent\", \"consistent-as-needed\"]\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"keywords\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"unnecessary\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"numbers\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 3\n        }\n    ]\n};\n"]}