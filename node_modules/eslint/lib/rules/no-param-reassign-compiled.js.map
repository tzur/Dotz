{"version":3,"sources":["no-param-reassign.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,IAAI,eAAe,GAAG,4DAA4D,CAAC;;AAEnF,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;;;;;;;AAQpE,aAAS,WAAW,CAAC,SAAS,EAAE;AAC5B,YAAI,SAAS,CAAC,OAAO,EAAE,EAAE;AACrB,mBAAO,IAAI,CAAC;SACf;;;AAGD,YAAI,KAAK,EAAE;AACP,gBAAI,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC;AAChC,gBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,mBAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACjD,wBAAQ,MAAM,CAAC,IAAI;;AAEf,yBAAK,sBAAsB;AACvB,+BAAO,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;;AAAA;AAGhC,yBAAK,kBAAkB;AACnB,+BAAO,IAAI,CAAC;;AAAA;AAGhB,yBAAK,iBAAiB;AAClB,4BAAI,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC9B,mCAAO,IAAI,CAAC;yBACf;AACD,8BAAM;;AAAA;AAGV,yBAAK,gBAAgB;AACjB,4BAAI,MAAM,CAAC,MAAM,KAAK,IAAI,EAAE;AACxB,mCAAO,KAAK,CAAC;yBAChB;AACD,8BAAM;;AAAA;AAGV,yBAAK,kBAAkB;AACnB,4BAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAE;AAC1B,mCAAO,KAAK,CAAC;yBAChB;AACD,8BAAM;;AAAA,AAEV;AACI,8BAAM;AAAA,iBACb;;AAED,oBAAI,GAAG,MAAM,CAAC;AACd,sBAAM,GAAG,MAAM,CAAC,MAAM,CAAC;aAC1B;SACJ;;AAED,eAAO,KAAK,CAAC;KAChB;;;;;;;;;AASD,aAAS,cAAc,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE;AAClD,YAAI,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;;AAEtC,YAAI,UAAU,IACV,CAAC,SAAS,CAAC,IAAI,IACf,WAAW,CAAC,SAAS,CAAC;;;AAGrB,aAAK,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,UAAU,KAAK,UAAU,CAAA,AAAC,EAClE;AACE,mBAAO,CAAC,MAAM,CACV,UAAU,EACV,8CAA8C,EAC9C,EAAC,IAAI,EAAE,UAAU,CAAC,IAAI,EAAC,CAAC,CAAC;SAChC;KACJ;;;;;;;AAOD,aAAS,aAAa,CAAC,QAAQ,EAAE;AAC7B,YAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,EAAE;AACvC,oBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SAC/C;KACJ;;;;;;;AAOD,aAAS,gBAAgB,CAAC,IAAI,EAAE;AAC5B,eAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;KAC7D;;AAED,WAAO;;AAEH,kCAA0B,EAAE,gBAAgB;AAC5C,iCAAyB,EAAE,gBAAgB;AAC3C,sCAA8B,EAAE,gBAAgB;KACnD,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,QAAQ;AAChB,gBAAY,EAAE;AACV,eAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC;KAC/B;AACD,0BAAsB,EAAE,KAAK;CAChC,CACJ,CAAC","file":"no-param-reassign-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow reassignment of function parameters.\n * @author Nat Burns\n * @copyright 2014 Nat Burns. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar stopNodePattern = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/;\n\nmodule.exports = function(context) {\n    var props = context.options[0] && Boolean(context.options[0].props);\n\n    /**\n     * Checks whether or not a reference modifies its variable.\n     * If the `props` option is `true`, this checks whether or not the reference modifies properties of its variable also.\n     * @param {Reference} reference - A reference to check.\n     * @returns {boolean} Whether or not the reference modifies its variable.\n     */\n    function isModifying(reference) {\n        if (reference.isWrite()) {\n            return true;\n        }\n\n        // Checks whether its property is modified.\n        if (props) {\n            var node = reference.identifier;\n            var parent = node.parent;\n            while (parent && !stopNodePattern.test(parent.type)) {\n                switch (parent.type) {\n                    // e.g. foo.a = 0;\n                    case \"AssignmentExpression\":\n                        return parent.left === node;\n\n                    // e.g. ++foo.a;\n                    case \"UpdateExpression\":\n                        return true;\n\n                    // e.g. delete foo.a;\n                    case \"UnaryExpression\":\n                        if (parent.operator === \"delete\") {\n                            return true;\n                        }\n                        break;\n\n                    // EXCLUDES: e.g. cache.get(foo.a).b = 0;\n                    case \"CallExpression\":\n                        if (parent.callee !== node) {\n                            return false;\n                        }\n                        break;\n\n                    // EXCLUDES: e.g. cache[foo.a] = 0;\n                    case \"MemberExpression\":\n                        if (parent.property === node) {\n                            return false;\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n\n                node = parent;\n                parent = parent.parent;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Reports a reference if is non initializer and writable.\n     * @param {Reference} reference - A reference to check.\n     * @param {int} index - The index of the reference in the references.\n     * @param {Reference[]} references - The array that the reference belongs to.\n     * @returns {void}\n     */\n    function checkReference(reference, index, references) {\n        var identifier = reference.identifier;\n\n        if (identifier &&\n            !reference.init &&\n            isModifying(reference) &&\n            // Destructuring assignments can have multiple default value,\n            // so possibly there are multiple writeable references for the same identifier.\n            (index === 0 || references[index - 1].identifier !== identifier)\n        ) {\n            context.report(\n                identifier,\n                \"Assignment to function parameter '{{name}}'.\",\n                {name: identifier.name});\n        }\n    }\n\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable - A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n        if (variable.defs[0].type === \"Parameter\") {\n            variable.references.forEach(checkReference);\n        }\n    }\n\n    /**\n     * Checks parameters of a given function node.\n     * @param {ASTNode} node - A function node to check.\n     * @returns {void}\n     */\n    function checkForFunction(node) {\n        context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n\n    return {\n        // `:exit` is needed for the `node.parent` property of identifier nodes.\n        \"FunctionDeclaration:exit\": checkForFunction,\n        \"FunctionExpression:exit\": checkForFunction,\n        \"ArrowFunctionExpression:exit\": checkForFunction\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"props\": {\"type\": \"boolean\"}\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}