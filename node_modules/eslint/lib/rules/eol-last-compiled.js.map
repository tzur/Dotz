{"version":3,"sources":["eol-last.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;AAM/B,WAAO;;AAEH,iBAAS,EAAE,SAAS,WAAW,CAAC,IAAI,EAAE;;AAElC,gBAAI,GAAG,GAAG,OAAO,CAAC,SAAS,EAAE;gBAAE,QAAQ,GAAG,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC;;AAEtD,gBAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AAClB,uBAAO;aACV;;AAED,gBAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;;AAE9B,wBAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;AACxC,uBAAO,CAAC,MAAM,CAAC;AACX,wBAAI,EAAE,IAAI;AACV,uBAAG,EAAE,QAAQ;AACb,2BAAO,EAAE,gDAAgD;AACzD,uBAAG,EAAE,aAAS,KAAK,EAAE;AACjB,+BAAO,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;qBAC5D;iBACJ,CAAC,CAAC;aACN;SACJ;;KAEJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"eol-last-compiled.js","sourcesContent":["/**\n * @fileoverview Require file to end with single newline.\n * @author Nodeca Team <https://github.com/nodeca>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"Program\": function checkBadEOF(node) {\n            // Get the whole source code, not for node only.\n            var src = context.getSource(), location = {column: 1};\n\n            if (src.length === 0) {\n                return;\n            }\n\n            if (src[src.length - 1] !== \"\\n\") {\n                // file is not newline-terminated\n                location.line = src.split(/\\n/g).length;\n                context.report({\n                    node: node,\n                    loc: location,\n                    message: \"Newline required at end of file but not found.\",\n                    fix: function(fixer) {\n                        return fixer.insertTextAfterRange([0, src.length], \"\\n\");\n                    }\n                });\n            }\n        }\n\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}