{"version":3,"sources":["comma-style.js"],"names":[],"mappings":"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","file":"comma-style-compiled.js","sourcesContent":["/**\n * @fileoverview Comma style - enforces comma styles of two types: last and first\n * @author Vignesh Anand aka vegetableman\n * @copyright 2014 Vignesh Anand. All rights reserved.\n * @copyright 2015 Evan Simmons. All rights reserved.\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var style = context.options[0] || \"last\",\n        exceptions = {};\n\n    if (context.options.length === 2 && context.options[1].hasOwnProperty(\"exceptions\")) {\n        exceptions = context.options[1].exceptions;\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determines if a given token is a comma operator.\n     * @param {ASTNode} token The token to check.\n     * @returns {boolean} True if the token is a comma, false if not.\n     * @private\n     */\n    function isComma(token) {\n        return !!token && (token.type === \"Punctuator\") && (token.value === \",\");\n    }\n\n    /**\n     * Validates the spacing around single items in lists.\n     * @param {Token} previousItemToken The last token from the previous item.\n     * @param {Token} commaToken The token representing the comma.\n     * @param {Token} currentItemToken The first token of the current item.\n     * @param {Token} reportItem The item to use when reporting an error.\n     * @returns {void}\n     * @private\n     */\n    function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) {\n\n        // if single line\n        if (astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&\n                astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {\n\n            return;\n\n        } else if (!astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&\n                !astUtils.isTokenOnSameLine(previousItemToken, commaToken)) {\n\n            // lone comma\n            context.report(reportItem, {\n                line: commaToken.loc.end.line,\n                column: commaToken.loc.start.column\n            }, \"Bad line breaking before and after ','.\");\n\n        } else if (style === \"first\" && !astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {\n\n            context.report(reportItem, \"',' should be placed first.\");\n\n        } else if (style === \"last\" && astUtils.isTokenOnSameLine(commaToken, currentItemToken)) {\n\n            context.report(reportItem, {\n                line: commaToken.loc.end.line,\n                column: commaToken.loc.end.column\n            }, \"',' should be placed last.\");\n        }\n    }\n\n    /**\n     * Checks the comma placement with regards to a declaration/property/element\n     * @param {ASTNode} node The binary expression node to check\n     * @param {string} property The property of the node containing child nodes.\n     * @private\n     * @returns {void}\n     */\n    function validateComma(node, property) {\n        var items = node[property],\n            arrayLiteral = (node.type === \"ArrayExpression\"),\n            previousItemToken;\n\n        if (items.length > 1 || arrayLiteral) {\n\n            // seed as opening [\n            previousItemToken = context.getFirstToken(node);\n\n            items.forEach(function(item) {\n                var commaToken = item ? context.getTokenBefore(item) : previousItemToken,\n                    currentItemToken = item ? context.getFirstToken(item) : context.getTokenAfter(commaToken),\n                    reportItem = item || currentItemToken;\n\n                /*\n                 * This works by comparing three token locations:\n                 * - previousItemToken is the last token of the previous item\n                 * - commaToken is the location of the comma before the current item\n                 * - currentItemToken is the first token of the current item\n                 *\n                 * These values get switched around if item is undefined.\n                 * previousItemToken will refer to the last token not belonging\n                 * to the current item, which could be a comma or an opening\n                 * square bracket. currentItemToken could be a comma.\n                 *\n                 * All comparisons are done based on these tokens directly, so\n                 * they are always valid regardless of an undefined item.\n                 */\n                if (isComma(commaToken)) {\n                    validateCommaItemSpacing(previousItemToken, commaToken,\n                            currentItemToken, reportItem);\n                }\n\n                previousItemToken = item ? context.getLastToken(item) : previousItemToken;\n            });\n\n            /*\n             * Special case for array literals that have empty last items, such\n             * as [ 1, 2, ]. These arrays only have two items show up in the\n             * AST, so we need to look at the token to verify that there's no\n             * dangling comma.\n             */\n            if (arrayLiteral) {\n\n                var lastToken = context.getLastToken(node),\n                    nextToLastToken = context.getTokenBefore(lastToken);\n\n                if (isComma(nextToLastToken)) {\n                    validateCommaItemSpacing(\n                        context.getTokenBefore(nextToLastToken),\n                        nextToLastToken,\n                        lastToken,\n                        lastToken\n                    );\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    var nodes = {};\n\n    if (!exceptions.VariableDeclaration) {\n        nodes.VariableDeclaration = function(node) {\n            validateComma(node, \"declarations\");\n        };\n    }\n    if (!exceptions.ObjectExpression) {\n        nodes.ObjectExpression = function(node) {\n            validateComma(node, \"properties\");\n        };\n    }\n    if (!exceptions.ArrayExpression) {\n        nodes.ArrayExpression = function(node) {\n            validateComma(node, \"elements\");\n        };\n    }\n\n    return nodes;\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"first\", \"last\"]\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"exceptions\": {\n                \"type\": \"object\",\n                \"additionalProperties\": {\n                    \"type\": \"boolean\"\n                }\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}