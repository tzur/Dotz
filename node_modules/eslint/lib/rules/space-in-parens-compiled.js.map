{"version":3,"sources":["space-in-parens.js"],"names":[],"mappings":"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","file":"space-in-parens-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of parentheses.\n * @author Jonathan Rajavuori\n * @copyright 2014 David Clark. All rights reserved.\n * @copyright 2014 Jonathan Rajavuori. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var MISSING_SPACE_MESSAGE = \"There must be a space inside this paren.\",\n        REJECTED_SPACE_MESSAGE = \"There should be no spaces inside this paren.\",\n        exceptionsArray = (context.options.length === 2) ? context.options[1].exceptions : [],\n        options = {},\n        rejectedSpaceRegExp,\n        missingSpaceRegExp,\n        spaceChecks;\n\n    if (exceptionsArray && exceptionsArray.length) {\n        options.braceException = exceptionsArray.indexOf(\"{}\") !== -1 || false;\n        options.bracketException = exceptionsArray.indexOf(\"[]\") !== -1 || false;\n        options.parenException = exceptionsArray.indexOf(\"()\") !== -1 || false;\n        options.empty = exceptionsArray.indexOf(\"empty\") !== -1 || false;\n    }\n\n    /**\n     * Used with the `never` option to produce, given the exception options,\n     * two regular expressions to check for missing and rejected spaces.\n     * @param {Object} opts The exception options\n     * @returns {Object} `missingSpace` and `rejectedSpace` regular expressions\n     * @private\n     */\n    function getNeverChecks(opts) {\n        var missingSpaceOpeners = [],\n            missingSpaceClosers = [],\n            rejectedSpaceOpeners = [\"\\\\s\"],\n            rejectedSpaceClosers = [\"\\\\s\"],\n            missingSpaceCheck,\n            rejectedSpaceCheck;\n\n        // Populate openers and closers\n        if (opts.braceException) {\n            missingSpaceOpeners.push(\"\\\\{\");\n            missingSpaceClosers.push(\"\\\\}\");\n            rejectedSpaceOpeners.push(\"\\\\{\");\n            rejectedSpaceClosers.push(\"\\\\}\");\n        }\n        if (opts.bracketException) {\n            missingSpaceOpeners.push(\"\\\\[\");\n            missingSpaceClosers.push(\"\\\\]\");\n            rejectedSpaceOpeners.push(\"\\\\[\");\n            rejectedSpaceClosers.push(\"\\\\]\");\n        }\n        if (opts.parenException) {\n            missingSpaceOpeners.push(\"\\\\(\");\n            missingSpaceClosers.push(\"\\\\)\");\n            rejectedSpaceOpeners.push(\"\\\\(\");\n            rejectedSpaceClosers.push(\"\\\\)\");\n        }\n        if (opts.empty) {\n            missingSpaceOpeners.push(\"\\\\)\");\n            missingSpaceClosers.push(\"\\\\(\");\n            rejectedSpaceOpeners.push(\"\\\\)\");\n            rejectedSpaceClosers.push(\"\\\\(\");\n        }\n\n        if (missingSpaceOpeners.length) {\n            missingSpaceCheck = \"\\\\((\" + missingSpaceOpeners.join(\"|\") + \")\";\n            if (missingSpaceClosers.length) {\n                missingSpaceCheck += \"|\";\n            }\n        }\n        if (missingSpaceClosers.length) {\n            missingSpaceCheck += \"(\" + missingSpaceClosers.join(\"|\") + \")\\\\)\";\n        }\n\n        // compose the rejected regexp\n        rejectedSpaceCheck = \"\\\\( +[^\" + rejectedSpaceOpeners.join(\"\") + \"]\";\n        rejectedSpaceCheck += \"|[^\" + rejectedSpaceClosers.join(\"\") + \"] +\\\\)\";\n\n        return {\n            // e.g. \\((\\{)|(\\})\\) --- where {} is an exception\n            missingSpace: missingSpaceCheck || \".^\",\n            // e.g. \\( +[^ \\n\\r\\{]|[^ \\n\\r\\}] +\\) --- where {} is an exception\n            rejectedSpace: rejectedSpaceCheck\n        };\n    }\n\n    /**\n     * Used with the `always` option to produce, given the exception options,\n     * two regular expressions to check for missing and rejected spaces.\n     * @param {Object} opts The exception options\n     * @returns {Object} `missingSpace` and `rejectedSpace` regular expressions\n     * @private\n     */\n    function getAlwaysChecks(opts) {\n        var missingSpaceOpeners = [\"\\\\s\", \"\\\\)\"],\n            missingSpaceClosers = [\"\\\\s\", \"\\\\(\"],\n            rejectedSpaceOpeners = [],\n            rejectedSpaceClosers = [],\n            missingSpaceCheck,\n            rejectedSpaceCheck;\n\n        // Populate openers and closers\n        if (opts.braceException) {\n            missingSpaceOpeners.push(\"\\\\{\");\n            missingSpaceClosers.push(\"\\\\}\");\n            rejectedSpaceOpeners.push(\" \\\\{\");\n            rejectedSpaceClosers.push(\"\\\\} \");\n        }\n        if (opts.bracketException) {\n            missingSpaceOpeners.push(\"\\\\[\");\n            missingSpaceClosers.push(\"\\\\]\");\n            rejectedSpaceOpeners.push(\" \\\\[\");\n            rejectedSpaceClosers.push(\"\\\\] \");\n        }\n        if (opts.parenException) {\n            missingSpaceOpeners.push(\"\\\\(\");\n            missingSpaceClosers.push(\"\\\\)\");\n            rejectedSpaceOpeners.push(\" \\\\(\");\n            rejectedSpaceClosers.push(\"\\\\) \");\n        }\n        if (opts.empty) {\n            rejectedSpaceOpeners.push(\" \\\\)\");\n            rejectedSpaceClosers.push(\"\\\\( \");\n        }\n\n        // compose the allowed regexp\n        missingSpaceCheck = \"\\\\([^\" + missingSpaceOpeners.join(\"\") + \"]\";\n        missingSpaceCheck += \"|[^\" + missingSpaceClosers.join(\"\") + \"]\\\\)\";\n\n        // compose the rejected regexp\n        if (rejectedSpaceOpeners.length) {\n            rejectedSpaceCheck = \"\\\\((\" + rejectedSpaceOpeners.join(\"|\") + \")\";\n            if (rejectedSpaceClosers.length) {\n                rejectedSpaceCheck += \"|\";\n            }\n        }\n        if (rejectedSpaceClosers.length) {\n            rejectedSpaceCheck += \"(\" + rejectedSpaceClosers.join(\"|\") + \")\\\\)\";\n        }\n\n        return {\n            // e.g. \\([^ \\)\\r\\n\\{]|[^ \\(\\r\\n\\}]\\) --- where {} is an exception\n            missingSpace: missingSpaceCheck,\n            // e.g. \\(( \\{})|(\\} )\\) --- where {} is an excpetion\n            rejectedSpace: rejectedSpaceCheck || \".^\"\n        };\n    }\n\n    spaceChecks = (context.options[0] === \"always\") ? getAlwaysChecks(options) : getNeverChecks(options);\n    missingSpaceRegExp = new RegExp(spaceChecks.missingSpace, \"mg\");\n    rejectedSpaceRegExp = new RegExp(spaceChecks.rejectedSpace, \"mg\");\n\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    var skipRanges = [];\n\n    /**\n     * Adds the range of a node to the set to be skipped when checking parens\n     * @param {ASTNode} node The node to skip\n     * @returns {void}\n     * @private\n     */\n    function addSkipRange(node) {\n        skipRanges.push(node.range);\n    }\n\n    /**\n     * Sorts the skipRanges array. Must be called before shouldSkip\n     * @returns {void}\n     * @private\n     */\n    function sortSkipRanges() {\n        skipRanges.sort(function(a, b) {\n            return a[0] - b[0];\n        });\n    }\n\n    /**\n     * Checks if a certain position in the source should be skipped\n     * @param {Number} pos The 0-based index in the source\n     * @returns {boolean} whether the position should be skipped\n     * @private\n     */\n    function shouldSkip(pos) {\n        var i, len, range;\n        for (i = 0, len = skipRanges.length; i < len; i += 1) {\n            range = skipRanges[i];\n            if (pos < range[0]) {\n                break;\n            } else if (pos < range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"Program:exit\": function checkParenSpaces(node) {\n\n            var nextMatch,\n                nextLine,\n                column,\n                line = 1,\n                source = context.getSource(),\n                pos = 0;\n\n            /**\n             * Check the match\n             * @param {object} match Object to match\n             * @param {string} message Message to report\n             * @returns {void}\n             * @private\n             */\n            function checkMatch(match, message) {\n                if (source.charAt(match.index) !== \"(\") {\n                    // Matched a closing paren pattern\n                    match.index += 1;\n                }\n\n                if (!shouldSkip(match.index)) {\n                    while ((nextLine = source.indexOf(\"\\n\", pos)) !== -1 && nextLine < match.index) {\n                        pos = nextLine + 1;\n                        line += 1;\n                    }\n                    column = match.index - pos;\n\n                    context.report(node, { line: line, column: column }, message);\n                }\n            }\n\n            sortSkipRanges();\n\n            while ((nextMatch = rejectedSpaceRegExp.exec(source)) !== null) {\n                checkMatch(nextMatch, REJECTED_SPACE_MESSAGE);\n            }\n\n            while ((nextMatch = missingSpaceRegExp.exec(source)) !== null) {\n                checkMatch(nextMatch, MISSING_SPACE_MESSAGE);\n            }\n\n        },\n\n\n        // These nodes can contain parentheses that this rule doesn't care about\n\n        LineComment: addSkipRange,\n\n        BlockComment: addSkipRange,\n\n        Literal: addSkipRange,\n\n        TemplateElement: addSkipRange\n\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"never\"]\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"exceptions\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"enum\": [\"{}\", \"[]\", \"()\", \"empty\"]\n                },\n                \"uniqueItems\": true\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}