{"version":3,"sources":["no-spaced-func.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,QAAI,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;;;;;;;;AAQzC,aAAS,gBAAgB,CAAC,IAAI,EAAE;AAC5B,YAAI,eAAe,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC;YACtD,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;YACnC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;YACnC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;;AAEtB,eAAO,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE;AACrC,cAAE,CAAC,CAAC;SACP;;AAED,YAAI,CAAC,IAAI,CAAC,EAAE;AACR,mBAAO;SACV;;;AAGD,YAAI,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;AAC3D,mBAAO,CAAC,MAAM,CAAC;AACX,oBAAI,EAAE,IAAI;AACV,mBAAG,EAAE,eAAe,CAAC,GAAG,CAAC,KAAK;AAC9B,uBAAO,EAAE,mDAAmD;AAC5D,mBAAG,EAAE,aAAS,KAAK,EAAE;AACjB,2BAAO,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC1E;aACJ,CAAC,CAAC;SACN;KACJ;;AAED,WAAO;AACH,wBAAgB,EAAE,gBAAgB;AAClC,uBAAe,EAAE,gBAAgB;KACpC,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-spaced-func-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to check that spaced function application\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var sourceCode = context.getSourceCode();\n\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function detectOpenSpaces(node) {\n        var lastCalleeToken = sourceCode.getLastToken(node.callee),\n            tokens = sourceCode.getTokens(node),\n            i = tokens.indexOf(lastCalleeToken),\n            l = tokens.length;\n\n        while (i < l && tokens[i].value !== \"(\") {\n            ++i;\n        }\n\n        if (i >= l) {\n            return;\n        }\n\n        // look for a space between the callee and the open paren\n        if (sourceCode.isSpaceBetweenTokens(tokens[i - 1], tokens[i])) {\n            context.report({\n                node: node,\n                loc: lastCalleeToken.loc.start,\n                message: \"Unexpected space between function name and paren.\",\n                fix: function(fixer) {\n                    return fixer.removeRange([tokens[i - 1].range[1], tokens[i].range[0]]);\n                }\n            });\n        }\n    }\n\n    return {\n        \"CallExpression\": detectOpenSpaces,\n        \"NewExpression\": detectOpenSpaces\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}