{"version":3,"sources":["no-constant-condition.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;;;;;AAY/B,aAAS,UAAU;;;;;kCAAO;gBAAN,IAAI;;;AACpB,oBAAQ,IAAI,CAAC,IAAI;AACb,qBAAK,SAAS,CAAC;AACf,qBAAK,yBAAyB,CAAC;AAC/B,qBAAK,oBAAoB,CAAC;AAC1B,qBAAK,kBAAkB,CAAC;AACxB,qBAAK,iBAAiB;AAClB,2BAAO,IAAI,CAAC;AAAA,AAChB,qBAAK,iBAAiB;yBACA,IAAI,CAAC,QAAQ;;;AAAE;AACrC,qBAAK,kBAAkB,CAAC;AACxB,qBAAK,mBAAmB;kCACb,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;;;;yBAAe,IAAI,CAAC,KAAK;;;AAAE;AAC3D,qBAAK,sBAAsB;kCACf,IAAI,CAAC,QAAQ,KAAK,GAAG;;;;yBAAgB,IAAI,CAAC,KAAK;;;AAAE;AAC7D,qBAAK,oBAAoB;yBACH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;;;AAAE;;aAExE;AACD,mBAAO,KAAK,CAAC;SAChB;KAAA;;;;;;;;AAQD,aAAS,sBAAsB,CAAC,IAAI,EAAE;AAClC,YAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACpC,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAC;SAC1D;KACJ;;;;;;AAMD,WAAO;AACH,+BAAuB,EAAE,sBAAsB;AAC/C,qBAAa,EAAE,sBAAsB;AACrC,wBAAgB,EAAE,sBAAsB;AACxC,0BAAkB,EAAE,sBAAsB;AAC1C,sBAAc,EAAE,sBAAsB;KACzC,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-constant-condition-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use constant conditions\n * @author Christian Schulz <http://rndm.de>\n * @copyright 2014 Christian Schulz. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks if a node has a constant truthiness value.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {Bool} true when node's truthiness is constant\n     * @private\n     */\n    function isConstant(node) {\n        switch (node.type) {\n            case \"Literal\":\n            case \"ArrowFunctionExpression\":\n            case \"FunctionExpression\":\n            case \"ObjectExpression\":\n            case \"ArrayExpression\":\n                return true;\n            case \"UnaryExpression\":\n                return isConstant(node.argument);\n            case \"BinaryExpression\":\n            case \"LogicalExpression\":\n                return isConstant(node.left) && isConstant(node.right);\n            case \"AssignmentExpression\":\n                return (node.operator === \"=\") && isConstant(node.right);\n            case \"SequenceExpression\":\n                return isConstant(node.expressions[node.expressions.length - 1]);\n            // no default\n        }\n        return false;\n    }\n\n    /**\n     * Reports when the given node contains a constant condition.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkConstantCondition(node) {\n        if (node.test && isConstant(node.test)) {\n            context.report(node, \"Unexpected constant condition.\");\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"ConditionalExpression\": checkConstantCondition,\n        \"IfStatement\": checkConstantCondition,\n        \"WhileStatement\": checkConstantCondition,\n        \"DoWhileStatement\": checkConstantCondition,\n        \"ForStatement\": checkConstantCondition\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}