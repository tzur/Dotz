{"version":3,"sources":["no-empty-label.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;;AAEH,0BAAkB,EAAE,0BAAS,IAAI,EAAE;AAC/B,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;AAE1B,gBAAI,IAAI,KAAK,cAAc,IAAI,IAAI,KAAK,gBAAgB,IAAI,IAAI,KAAK,kBAAkB,IAAI,IAAI,KAAK,iBAAiB,IAAI,IAAI,KAAK,gBAAgB,IAAI,IAAI,KAAK,gBAAgB,EAAE;AAC7K,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,4BAA4B,EAAE,EAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC;aAC5E;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-empty-label-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when label is not used for a loop or switch\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n\n        \"LabeledStatement\": function(node) {\n            var type = node.body.type;\n\n            if (type !== \"ForStatement\" && type !== \"WhileStatement\" && type !== \"DoWhileStatement\" && type !== \"SwitchStatement\" && type !== \"ForInStatement\" && type !== \"ForOfStatement\") {\n                context.report(node, \"Unexpected label \\\"{{l}}\\\"\", {l: node.label.name});\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}