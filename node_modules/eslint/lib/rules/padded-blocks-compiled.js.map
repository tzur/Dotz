{"version":3,"sources":["padded-blocks.js"],"names":[],"mappings":"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","file":"padded-blocks-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to ensure blank lines within blocks.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n * @copyright 2014 Mathias Schreck. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var requirePadding = context.options[0] !== \"never\";\n\n    var ALWAYS_MESSAGE = \"Block must be padded by blank lines.\",\n        NEVER_MESSAGE = \"Block must not be padded by blank lines.\";\n\n    /**\n     * Retrieves an array of all comments defined inside the given node.\n     * @param {ASTNode} node The AST node.\n     * @returns {ASTNode[]} An array of comment nodes.\n     */\n    function getCommentsInNode(node) {\n        var allComments = context.getAllComments();\n\n        return allComments.filter(function(comment) {\n            return node.range[0] < comment.range[0] &&\n                node.range[1] > comment.range[1];\n        });\n    }\n\n    /**\n     * Checks if the location of a node or token is before the location of another node or token\n     * @param {ASTNode|Token} a The node or token to check if its location is before b.\n     * @param {ASTNode|Token} b The node or token which will be compared with a.\n     * @returns {boolean} True if a is located before b.\n     */\n    function isLocatedBefore(a, b) {\n        return a.range[1] < b.range[0];\n    }\n\n    /**\n     * Checks if the given non empty block node has a blank line before its first child node.\n     * @param {ASTNode} node The AST node of a BlockStatement.\n     * @returns {boolean} Whether or not the block starts with a blank line.\n     */\n    function isBlockTopPadded(node) {\n        var blockStart = node.loc.start.line,\n            first = node.body[0],\n            firstLine = first.loc.start.line,\n            expectedFirstLine = blockStart + 2,\n            comments = getCommentsInNode(node),\n            firstComment = comments[0];\n\n        if (firstComment && isLocatedBefore(firstComment, first)) {\n            firstLine = firstComment.loc.start.line;\n        }\n\n        return expectedFirstLine <= firstLine;\n    }\n\n    /**\n     * Checks if the given non empty block node has a blank line after its last child node.\n     * @param {ASTNode} node The AST node of a BlockStatement.\n     * @returns {boolean} Whether or not the block ends with a blank line.\n     */\n    function isBlockBottomPadded(node) {\n        var blockEnd = node.loc.end.line,\n            last = node.body[node.body.length - 1],\n            lastToken = context.getLastToken(last),\n            lastLine = lastToken.loc.end.line,\n            expectedLastLine = blockEnd - 2,\n            comments = getCommentsInNode(node),\n            lastComment = comments[comments.length - 1];\n\n        if (lastComment && isLocatedBefore(lastToken, lastComment)) {\n            lastLine = lastComment.loc.end.line;\n        }\n\n        return lastLine <= expectedLastLine;\n    }\n\n    /**\n     * Checks the given BlockStatement node to be padded if the block is not empty.\n     * @param {ASTNode} node The AST node of a BlockStatement.\n     * @returns {void} undefined.\n     */\n    function checkPadding(node) {\n        if (node.body.length > 0) {\n\n            var blockHasTopPadding = isBlockTopPadded(node),\n                blockHasBottomPadding = isBlockBottomPadded(node);\n\n            if (requirePadding) {\n                if (!blockHasTopPadding) {\n                    context.report(node, ALWAYS_MESSAGE);\n                }\n\n                if (!blockHasBottomPadding) {\n                    context.report(node, node.loc.end, ALWAYS_MESSAGE);\n                }\n            } else {\n                if (blockHasTopPadding) {\n                    context.report(node, NEVER_MESSAGE);\n                }\n\n                if (blockHasBottomPadding) {\n                    context.report(node, node.loc.end, NEVER_MESSAGE);\n                }\n            }\n        }\n    }\n\n    return {\n        \"BlockStatement\": checkPadding\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"never\"]\n    }\n];\n"]}