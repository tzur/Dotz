{"version":3,"sources":["no-invalid-regexp.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;AAM/B,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,QAAQ,CAAC,IAAI,EAAE;AACpB,eAAO,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;KAC5E;;;;;;;;AAQD,aAAS,KAAK,CAAC,IAAI,EAAE;AACjB,YAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;AACnG,gBAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;;AAEvE,gBAAI;AACA,qBAAK,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aAC5C,CAAC,OAAO,CAAC,EAAE;AACR,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;aACnC;;AAED,gBAAI,KAAK,EAAE;;AAEP,oBAAI;AACA,0BAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,EAAE,EAAE,YAAY,EAAE,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC;iBACvE,CAAC,OAAO,EAAE,EAAE;AACT,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,gDAAgD,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;iBACxF;aACJ;SAEJ;KACJ;;AAED,WAAO;AACH,wBAAgB,EAAE,KAAK;AACvB,uBAAe,EAAE,KAAK;KACzB,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-invalid-regexp-compiled.js","sourcesContent":["/**\n * @fileoverview Validate strings passed to the RegExp constructor\n * @author Michael Ficarra\n * @copyright 2014 Michael Ficarra. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar espree = require(\"espree\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Check if node is a string\n     * @param {ASTNode} node node to evaluate\n     * @returns {boolean} True if its a string\n     * @private\n     */\n    function isString(node) {\n        return node && node.type === \"Literal\" && typeof node.value === \"string\";\n    }\n\n    /**\n     * Validate strings passed to the RegExp constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function check(node) {\n        if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(node.arguments[0])) {\n            var flags = isString(node.arguments[1]) ? node.arguments[1].value : \"\";\n\n            try {\n                void new RegExp(node.arguments[0].value);\n            } catch (e) {\n                context.report(node, e.message);\n            }\n\n            if (flags) {\n\n                try {\n                    espree.parse(\"/./\" + flags, { ecmaFeatures: context.ecmaFeatures });\n                } catch (ex) {\n                    context.report(node, \"Invalid flags supplied to RegExp constructor '\" + flags + \"'\");\n                }\n            }\n\n        }\n    }\n\n    return {\n        \"CallExpression\": check,\n        \"NewExpression\": check\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}