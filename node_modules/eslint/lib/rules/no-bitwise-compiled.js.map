{"version":3,"sources":["no-bitwise.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,QAAI,iBAAiB,GAAG,CACpB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAChC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EACtC,GAAG,CACN,CAAC;;;;;;;AAOF,aAAS,MAAM,CAAC,IAAI,EAAE;AAClB,eAAO,CAAC,MAAM,CAAC,IAAI,EAAE,mCAAmC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1F;;;;;;;AAOD,aAAS,kBAAkB,CAAC,IAAI,EAAE;AAC9B,eAAO,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KAC1D;;;;;;;AAOD,aAAS,2BAA2B,CAAC,IAAI,EAAE;AACvC,YAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE;AAC1B,kBAAM,CAAC,IAAI,CAAC,CAAC;SAChB;KACJ;;AAED,WAAO;AACH,8BAAsB,EAAE,2BAA2B;AACnD,0BAAkB,EAAE,2BAA2B;AAC/C,yBAAiB,EAAE,2BAA2B;KACjD,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-bitwise-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag bitwise identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var BITWISE_OPERATORS = [\n        \"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\",\n        \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\",\n        \"~\"\n    ];\n\n    /**\n     * Reports an unexpected use of a bitwise operator.\n     * @param   {ASTNode} node Node which contains the bitwise operator.\n     * @returns {void}\n     */\n    function report(node) {\n        context.report(node, \"Unexpected use of '{{operator}}'.\", { operator: node.operator });\n    }\n\n    /**\n     * Checks if the given node has a bitwise operator.\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node has a bitwise operator.\n     */\n    function hasBitwiseOperator(node) {\n        return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n    }\n\n    /**\n     * Report if the given node contains a bitwise operator.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkNodeForBitwiseOperator(node) {\n        if (hasBitwiseOperator(node)) {\n            report(node);\n        }\n    }\n\n    return {\n        \"AssignmentExpression\": checkNodeForBitwiseOperator,\n        \"BinaryExpression\": checkNodeForBitwiseOperator,\n        \"UnaryExpression\": checkNodeForBitwiseOperator\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}