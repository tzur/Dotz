{"version":3,"sources":["accessor-pairs.js"],"names":[],"mappings":"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","file":"accessor-pairs-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag wrapping non-iife in parens\n * @author Gyandeep Singh\n * @copyright 2015 Gyandeep Singh. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is an `Identifier` node which was named a given name.\n * @param {ASTNode} node - A node to check.\n * @param {string} name - An expected name of the node.\n * @returns {boolean} `true` if the node is an `Identifier` node which was named as expected.\n */\nfunction isIdentifier(node, name) {\n    return node.type === \"Identifier\" && node.name === name;\n}\n\n/**\n * Checks whether or not a given node is an argument of a specified method call.\n * @param {ASTNode} node - A node to check.\n * @param {number} index - An expected index of the node in arguments.\n * @param {string} object - An expected name of the object of the method.\n * @param {string} property - An expected name of the method.\n * @returns {boolean} `true` if the node is an argument of the specified method call.\n */\nfunction isArgumentOfMethodCall(node, index, object, property) {\n    var parent = node.parent;\n    return (\n        parent.type === \"CallExpression\" &&\n        parent.callee.type === \"MemberExpression\" &&\n        parent.callee.computed === false &&\n        isIdentifier(parent.callee.object, object) &&\n        isIdentifier(parent.callee.property, property) &&\n        parent.arguments[index] === node\n    );\n}\n\n/**\n * Checks whether or not a given node is a property descriptor.\n * @param {ASTNode} node - A node to check.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node) {\n    // Object.defineProperty(obj, \"foo\", {set: ...})\n    if (isArgumentOfMethodCall(node, 2, \"Object\", \"defineProperty\") ||\n        isArgumentOfMethodCall(node, 2, \"Reflect\", \"defineProperty\")\n    ) {\n        return true;\n    }\n\n    // Object.defineProperties(obj, {foo: {set: ...}})\n    // Object.create(proto, {foo: {set: ...}})\n    node = node.parent.parent;\n    return node.type === \"ObjectExpression\" && (\n        isArgumentOfMethodCall(node, 1, \"Object\", \"create\") ||\n        isArgumentOfMethodCall(node, 1, \"Object\", \"defineProperties\")\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var config = context.options[0] || {};\n    var checkGetWithoutSet = config.getWithoutSet === true;\n    var checkSetWithoutGet = config.setWithoutGet !== false;\n\n    /**\n     * Checks a object expression to see if it has setter and getter both present or none.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkLonelySetGet(node) {\n        var isSetPresent = false;\n        var isGetPresent = false;\n        var isDescriptor = isPropertyDescriptor(node);\n\n        for (var i = 0, end = node.properties.length; i < end; i++) {\n            var property = node.properties[i];\n\n            var propToCheck = \"\";\n            if (property.kind === \"init\") {\n                if (isDescriptor && !property.computed) {\n                    propToCheck = property.key.name;\n                }\n            } else {\n                propToCheck = property.kind;\n            }\n\n            switch (propToCheck) {\n                case \"set\":\n                    isSetPresent = true;\n                    break;\n\n                case \"get\":\n                    isGetPresent = true;\n                    break;\n\n                default:\n                    // Do nothing\n            }\n\n            if (isSetPresent && isGetPresent) {\n                break;\n            }\n        }\n\n        if (checkSetWithoutGet && isSetPresent && !isGetPresent) {\n            context.report(node, \"Getter is not present\");\n        } else if (checkGetWithoutSet && isGetPresent && !isSetPresent) {\n            context.report(node, \"Setter is not present\");\n        }\n    }\n\n    return {\n        \"ObjectExpression\": function(node) {\n            if (checkSetWithoutGet || checkGetWithoutSet) {\n                checkLonelySetGet(node);\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"getWithoutSet\": {\n                \"type\": \"boolean\"\n            },\n            \"setWithoutGet\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}