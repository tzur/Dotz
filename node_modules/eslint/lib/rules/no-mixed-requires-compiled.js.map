{"version":3,"sources":["no-mixed-requires.js"],"names":[],"mappings":"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","file":"no-mixed-requires-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Returns the list of built-in modules.\n     *\n     * @returns {string[]} An array of built-in Node.js modules.\n     */\n    function getBuiltinModules() {\n        // This list is generated using `require(\"repl\")._builtinLibs.concat('repl').sort()`\n        // This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n        return [\n            \"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\",\n            \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\",\n            \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\",\n            \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\",\n            \"url\", \"util\", \"v8\", \"vm\", \"zlib\"\n        ];\n    }\n\n    var BUILTIN_MODULES = getBuiltinModules();\n\n    var DECL_REQUIRE = \"require\",\n        DECL_UNINITIALIZED = \"uninitialized\",\n        DECL_OTHER = \"other\";\n\n    var REQ_CORE = \"core\",\n        REQ_FILE = \"file\",\n        REQ_MODULE = \"module\",\n        REQ_COMPUTED = \"computed\";\n\n    /**\n     * Determines the type of a declaration statement.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The type of declaration represented by the expression.\n     */\n    function getDeclarationType(initExpression) {\n        if (!initExpression) {\n            // \"var x;\"\n            return DECL_UNINITIALIZED;\n        }\n\n        if (initExpression.type === \"CallExpression\" &&\n            initExpression.callee.type === \"Identifier\" &&\n            initExpression.callee.name === \"require\"\n        ) {\n            // \"var x = require('util');\"\n            return DECL_REQUIRE;\n        } else if (initExpression.type === \"MemberExpression\") {\n            // \"var x = require('glob').Glob;\"\n            return getDeclarationType(initExpression.object);\n        }\n\n        // \"var x = 42;\"\n        return DECL_OTHER;\n    }\n\n    /**\n     * Determines the type of module that is loaded via require.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The module type.\n     */\n    function inferModuleType(initExpression) {\n        if (initExpression.type === \"MemberExpression\") {\n            // \"var x = require('glob').Glob;\"\n            return inferModuleType(initExpression.object);\n        } else if (initExpression.arguments.length === 0) {\n            // \"var x = require();\"\n            return REQ_COMPUTED;\n        }\n\n        var arg = initExpression.arguments[0];\n\n        if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n            // \"var x = require(42);\"\n            return REQ_COMPUTED;\n        }\n\n        if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n            // \"var fs = require('fs');\"\n            return REQ_CORE;\n        } else if (/^\\.{0,2}\\//.test(arg.value)) {\n            // \"var utils = require('./utils');\"\n            return REQ_FILE;\n        } else {\n            // \"var async = require('async');\"\n            return REQ_MODULE;\n        }\n    }\n\n    /**\n     * Check if the list of variable declarations is mixed, i.e. whether it\n     * contains both require and other declarations.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are mixed, false if not.\n     */\n    function isMixed(declarations) {\n        var contains = {};\n\n        declarations.forEach(function(declaration) {\n            var type = getDeclarationType(declaration.init);\n            contains[type] = true;\n        });\n\n        return !!(\n            contains[DECL_REQUIRE] &&\n            (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER])\n        );\n    }\n\n    /**\n     * Check if all require declarations in the given list are of the same\n     * type.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are grouped, false if not.\n     */\n    function isGrouped(declarations) {\n        var found = {};\n\n        declarations.forEach(function(declaration) {\n            if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n                found[inferModuleType(declaration.init)] = true;\n            }\n        });\n\n        return Object.keys(found).length <= 1;\n    }\n\n\n    return {\n\n        \"VariableDeclaration\": function(node) {\n            var grouping = false;\n\n            if (typeof context.options[0] === \"object\") {\n                grouping = context.options[0].grouping;\n            } else {\n                grouping = !!context.options[0];\n            }\n\n            if (isMixed(node.declarations)) {\n                context.report(\n                    node,\n                    \"Do not mix 'require' and other declarations.\"\n                );\n            } else if (grouping && !isGrouped(node.declarations)) {\n                context.report(\n                    node,\n                    \"Do not mix core, module, file and computed requires.\"\n                );\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"oneOf\": [\n            {\n                \"type\": \"boolean\"\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"grouping\": {\n                        \"type\": \"boolean\"\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n];\n"]}