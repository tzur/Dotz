{"version":3,"sources":["radix.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;AACH,wBAAgB,EAAE,wBAAS,IAAI,EAAE;;AAE7B,gBAAI,KAAK,CAAC;;AAEV,gBAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,IAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,IACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,CAC3C,AACJ,EAAE;AACC,uBAAO;aACV;;AAED,gBAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;aACpD,MAAM;;AAEH,qBAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;;AAG1B,oBAAI,AAAC,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,IAC3D,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,AAAC,EAC7D;AACE,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;iBACpD;aACJ;SAEJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"radix-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of parseInt without a radix argument\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n        \"CallExpression\": function(node) {\n\n            var radix;\n\n            if (!(node.callee.name === \"parseInt\" || (\n                    node.callee.type === \"MemberExpression\" &&\n                    node.callee.object.name === \"Number\" &&\n                    node.callee.property.name === \"parseInt\"\n                )\n            )) {\n                return;\n            }\n\n            if (node.arguments.length < 2) {\n                context.report(node, \"Missing radix parameter.\");\n            } else {\n\n                radix = node.arguments[1];\n\n                // don't allow non-numeric literals or undefined\n                if ((radix.type === \"Literal\" && typeof radix.value !== \"number\") ||\n                    (radix.type === \"Identifier\" && radix.name === \"undefined\")\n                ) {\n                    context.report(node, \"Invalid radix parameter.\");\n                }\n            }\n\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}