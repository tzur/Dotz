{"version":3,"sources":["dot-notation.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;AAMb,IAAI,eAAe,GAAG,4BAA4B,CAAC;AACnD,IAAI,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAE3C,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACvC,QAAI,aAAa,GAAG,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;;AAEhF,QAAI,YAAY,CAAC;AACjB,QAAI,OAAO,CAAC,YAAY,EAAE;AACtB,oBAAY,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KACnD;;AAED,WAAO;AACH,0BAAkB,EAAE,0BAAS,IAAI,EAAE;AAC/B,gBACI,IAAI,CAAC,QAAQ,IACb,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,SAAS,IAChC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KACxC,aAAa,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA,AAAC,EACtE;AACE,oBAAI,EAAE,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA,AAAC,EAAE;AAC3D,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,sCAAsC,CAAC,CAAC;iBAC5G;aACJ;AACD,gBACI,CAAC,aAAa,IACd,CAAC,IAAI,CAAC,QAAQ,IACd,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAClD;AACE,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,qBAAqB,CAAC,CAAC;aAC1E;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,QAAQ;AAChB,gBAAY,EAAE;AACV,uBAAe,EAAE;AACb,kBAAM,EAAE,SAAS;SACpB;AACD,sBAAc,EAAE;AACZ,kBAAM,EAAE,QAAQ;SACnB;KACJ;AACD,0BAAsB,EAAE,KAAK;CAChC,CACJ,CAAC","file":"dot-notation-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to warn about using dot notation instead of square bracket notation when possible.\n * @author Josh Perez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar validIdentifier = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\nvar keywords = require(\"../util/keywords\");\n\nmodule.exports = function(context) {\n    var options = context.options[0] || {};\n    var allowKeywords = options.allowKeywords === void 0 || !!options.allowKeywords;\n\n    var allowPattern;\n    if (options.allowPattern) {\n        allowPattern = new RegExp(options.allowPattern);\n    }\n\n    return {\n        \"MemberExpression\": function(node) {\n            if (\n                node.computed &&\n                node.property.type === \"Literal\" &&\n                validIdentifier.test(node.property.value) &&\n                (allowKeywords || keywords.indexOf(\"\" + node.property.value) === -1)\n            ) {\n                if (!(allowPattern && allowPattern.test(node.property.value))) {\n                    context.report(node, \"[\" + JSON.stringify(node.property.value) + \"] is better written in dot notation.\");\n                }\n            }\n            if (\n                !allowKeywords &&\n                !node.computed &&\n                keywords.indexOf(\"\" + node.property.name) !== -1\n            ) {\n                context.report(node, \".\" + node.property.name + \" is a syntax error.\");\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"allowKeywords\": {\n                \"type\": \"boolean\"\n            },\n            \"allowPattern\": {\n                \"type\": \"string\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}