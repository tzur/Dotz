{"version":3,"sources":["comma-spacing.js"],"names":[],"mappings":"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","file":"comma-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n * @copyright 2014 Vignesh Anand. All rights reserved.\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var sourceCode = context.getSourceCode();\n\n    var options = {\n        before: context.options[0] ? !!context.options[0].before : false,\n        after: context.options[0] ? !!context.options[0].after : true\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // the index of the last comment that was checked\n    var lastCommentIndex = 0;\n    var allComments;\n\n    // list of comma tokens to ignore for the check of leading whitespace\n    var commaTokensToIgnore = [];\n\n    /**\n     * Determines if a given token is a comma operator.\n     * @param {ASTNode} token The token to check.\n     * @returns {boolean} True if the token is a comma, false if not.\n     * @private\n     */\n    function isComma(token) {\n        return !!token && (token.type === \"Punctuator\") && (token.value === \",\");\n    }\n\n    /**\n     * Reports a spacing error with an appropriate message.\n     * @param {ASTNode} node The binary expression node to report.\n     * @param {string} dir Is the error \"before\" or \"after\" the comma?\n     * @returns {void}\n     * @private\n     */\n    function report(node, dir) {\n        context.report(node, options[dir] ?\n            \"A space is required \" + dir + \" ','.\" :\n            \"There should be no space \" + dir + \" ','.\");\n    }\n\n    /**\n     * Validates the spacing around a comma token.\n     * @param {Object} tokens - The tokens to be validated.\n     * @param {Token} tokens.comma The token representing the comma.\n     * @param {Token} [tokens.left] The last token before the comma.\n     * @param {Token} [tokens.right] The first token after the comma.\n     * @param {Token|ASTNode} reportItem The item to use when reporting an error.\n     * @returns {void}\n     * @private\n     */\n    function validateCommaItemSpacing(tokens, reportItem) {\n        if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&\n                (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))\n        ) {\n            report(reportItem, \"before\");\n        }\n        if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&\n                (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))\n        ) {\n            report(reportItem, \"after\");\n        }\n    }\n\n    /**\n     * Determines if a given source index is in a comment or not by checking\n     * the index against the comment range. Since the check goes straight\n     * through the file, once an index is passed a certain comment, we can\n     * go to the next comment to check that.\n     * @param {int} index The source index to check.\n     * @param {ASTNode[]} comments An array of comment nodes.\n     * @returns {boolean} True if the index is within a comment, false if not.\n     * @private\n     */\n    function isIndexInComment(index, comments) {\n\n        var comment;\n\n        while (lastCommentIndex < comments.length) {\n\n            comment = comments[lastCommentIndex];\n\n            if (comment.range[0] <= index && index < comment.range[1]) {\n                return true;\n            } else if (index > comment.range[1]) {\n                lastCommentIndex++;\n            } else {\n                break;\n            }\n\n        }\n\n        return false;\n    }\n\n    /**\n     * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n     * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n     * @returns {void}\n     */\n    function addNullElementsToIgnoreList(node) {\n        var previousToken = context.getFirstToken(node);\n\n        node.elements.forEach(function(element) {\n            var token;\n\n            if (element === null) {\n                token = context.getTokenAfter(previousToken);\n\n                if (isComma(token)) {\n                    commaTokensToIgnore.push(token);\n                }\n            } else {\n                token = context.getTokenAfter(element);\n            }\n\n            previousToken = token;\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"Program:exit\": function() {\n\n            var source = context.getSource(),\n                pattern = /,/g,\n                commaToken,\n                previousToken,\n                nextToken;\n\n            allComments = context.getAllComments();\n            while (pattern.test(source)) {\n\n                // do not flag anything inside of comments\n                if (!isIndexInComment(pattern.lastIndex, allComments)) {\n                    commaToken = context.getTokenByRangeStart(pattern.lastIndex - 1);\n\n                    if (commaToken && commaToken.type !== \"JSXText\") {\n                        previousToken = context.getTokenBefore(commaToken);\n                        nextToken = context.getTokenAfter(commaToken);\n                        validateCommaItemSpacing({\n                            comma: commaToken,\n                            left: isComma(previousToken) || commaTokensToIgnore.indexOf(commaToken) > -1 ? null : previousToken,\n                            right: isComma(nextToken) ? null : nextToken\n                        }, commaToken);\n                    }\n                }\n            }\n        },\n        \"ArrayExpression\": addNullElementsToIgnoreList,\n        \"ArrayPattern\": addNullElementsToIgnoreList\n\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"before\": {\n                \"type\": \"boolean\"\n            },\n            \"after\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}