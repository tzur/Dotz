{"version":3,"sources":["space-before-keywords.js"],"names":[],"mappings":"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","file":"space-before-keywords-compiled.js","sourcesContent":["/**\n * @fileoverview Require or disallow spaces before keywords\n * @author Marko Raatikka\n * @copyright 2015 Marko Raatikka. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar ERROR_MSG_SPACE_EXPECTED = \"Missing space before keyword \\\"{{keyword}}\\\".\";\nvar ERROR_MSG_NO_SPACE_EXPECTED = \"Unexpected space before keyword \\\"{{keyword}}\\\".\";\n\nmodule.exports = function(context) {\n\n    var sourceCode = context.getSourceCode();\n\n    var SPACE_REQUIRED = context.options[0] !== \"never\";\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Report the error message\n     * @param {ASTNode} node node to report\n     * @param {string} message Error message to be displayed\n     * @param {object} data Data object for the rule message\n     * @returns {void}\n     */\n    function report(node, message, data) {\n        context.report({\n            node: node,\n            message: message,\n            data: data,\n            fix: function(fixer) {\n                if (SPACE_REQUIRED) {\n                    return fixer.insertTextBefore(node, \" \");\n                } else {\n                    var tokenBefore = context.getTokenBefore(node);\n                    return fixer.removeRange([tokenBefore.range[1], node.range[0]]);\n                }\n            }\n        });\n    }\n\n    /**\n     * Check if a token meets the criteria\n     *\n     * @param   {ASTNode} node    The node to check\n     * @param   {Object}  left    The left-hand side token of the node\n     * @param   {Object}  right   The right-hand side token of the node\n     * @param   {Object}  options See check()\n     * @returns {void}\n     */\n    function checkTokens(node, left, right, options) {\n\n        if (!left) {\n            return;\n        }\n\n        if (left.type === \"Keyword\") {\n            return;\n        }\n\n        if (!SPACE_REQUIRED && typeof options.requireSpace === \"undefined\") {\n            return;\n        }\n\n        options = options || {};\n        options.allowedPrecedingChars = options.allowedPrecedingChars || [ \"{\" ];\n        options.requireSpace = typeof options.requireSpace === \"undefined\" ? SPACE_REQUIRED : options.requireSpace;\n\n        var hasSpace = sourceCode.isSpaceBetweenTokens(left, right);\n        var spaceOk = hasSpace === options.requireSpace;\n\n        if (spaceOk) {\n            return;\n        }\n\n        if (!astUtils.isTokenOnSameLine(left, right)) {\n            if (!options.requireSpace) {\n                report(node, ERROR_MSG_NO_SPACE_EXPECTED, { keyword: right.value });\n            }\n            return;\n        }\n\n        if (!options.requireSpace) {\n            report(node, ERROR_MSG_NO_SPACE_EXPECTED, { keyword: right.value });\n            return;\n        }\n\n        if (options.allowedPrecedingChars.indexOf(left.value) !== -1) {\n            return;\n        }\n\n        report(node, ERROR_MSG_SPACE_EXPECTED, { keyword: right.value });\n\n    }\n\n    /**\n     * Get right and left tokens of a node and check to see if they meet the given criteria\n     *\n     * @param   {ASTNode}  node                          The node to check\n     * @param   {Object}   options                       Options to validate the node against\n     * @param   {Array}    options.allowedPrecedingChars Characters that can precede the right token\n     * @param   {Boolean}  options.requireSpace          Whether or not the right token needs to be\n     *                                                   preceded by a space\n     * @returns {void}\n     */\n    function check(node, options) {\n\n        options = options || {};\n\n        var left = context.getTokenBefore(node);\n        var right = context.getFirstToken(node);\n\n        checkTokens(node, left, right, options);\n\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"IfStatement\": function(node) {\n            // if\n            check(node);\n            // else\n            if (node.alternate) {\n                check(context.getTokenBefore(node.alternate), { requireSpace: SPACE_REQUIRED });\n            }\n        },\n        \"ForStatement\": check,\n        \"ForInStatement\": check,\n        \"WhileStatement\": check,\n        \"DoWhileStatement\": function(node) {\n            var whileNode = context.getTokenAfter(node.body);\n            // do\n            check(node);\n            // while\n            check(whileNode, { requireSpace: SPACE_REQUIRED });\n        },\n        \"SwitchStatement\": function(node) {\n            // switch\n            check(node);\n            // case/default\n            node.cases.forEach(function(caseNode) {\n                check(caseNode);\n            });\n        },\n        \"ThrowStatement\": check,\n        \"TryStatement\": function(node) {\n            // try\n            check(node);\n            // finally\n            if (node.finalizer) {\n                check(context.getTokenBefore(node.finalizer), { requireSpace: SPACE_REQUIRED });\n            }\n        },\n        \"CatchClause\": function(node) {\n            check(node, { requireSpace: SPACE_REQUIRED });\n        },\n        \"WithStatement\": check,\n        \"VariableDeclaration\": function(node) {\n            check(node, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n        },\n        \"ReturnStatement\": check,\n        \"BreakStatement\": check,\n        \"LabeledStatement\": check,\n        \"ContinueStatement\": check,\n        \"FunctionDeclaration\": check,\n        \"FunctionExpression\": function(node) {\n            var left = context.getTokenBefore(node);\n            var right = context.getFirstToken(node);\n\n            // If it's a method, a getter, or a setter, the first token is not the `function` keyword.\n            if (right.type !== \"Keyword\") {\n                return;\n            }\n\n            checkTokens(node, left, right, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n        },\n        \"YieldExpression\": function(node) {\n            check(node, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n        },\n        \"ForOfStatement\": check,\n        \"ClassBody\": function(node) {\n\n            // Find the 'class' token\n            while (node.value !== \"class\") {\n                node = context.getTokenBefore(node);\n            }\n\n            check(node);\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"never\"]\n    }\n];\n"]}