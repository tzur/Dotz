{"version":3,"sources":["init-declarations.js"],"names":[],"mappings":"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","file":"init-declarations-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n * @copyright 2015 Colin Ihrig. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block - A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n    return block.type === \"ForInStatement\" ||\n    block.type === \"ForOfStatement\" ||\n    block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node - A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n    var declaration = node.parent;\n    var block = declaration.parent;\n\n    if (isForLoop(block)) {\n        if (block.type === \"ForStatement\") {\n            return block.init === declaration;\n        }\n        return block.left === declaration;\n    }\n    return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var MODE_ALWAYS = \"always\",\n        MODE_NEVER = \"never\";\n\n    var mode = context.options[0] || MODE_ALWAYS;\n    var params = context.options[1] || {};\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"VariableDeclaration:exit\": function(node) {\n\n            var kind = node.kind,\n                declarations = node.declarations;\n\n            for (var i = 0; i < declarations.length; ++i) {\n                var declaration = declarations[i],\n                    id = declaration.id,\n                    initialized = isInitialized(declaration),\n                    isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n                if (id.type !== \"Identifier\") {\n                    continue;\n                }\n\n                if (mode === MODE_ALWAYS && !initialized) {\n                    context.report(declaration, \"Variable '\" + id.name + \"' should be initialized on declaration.\");\n                } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n                    context.report(declaration, \"Variable '\" + id.name + \"' should not be initialized on declaration.\");\n                }\n            }\n        }\n    };\n};\n\nmodule.exports.schema = {\n    \"anyOf\": [\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"always\"]\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 2\n        },\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"never\"]\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"ignoreForLoopInit\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 3\n        }\n    ]\n};\n"]}