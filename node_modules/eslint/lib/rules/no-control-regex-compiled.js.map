{"version":3,"sources":["no-control-regex.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,SAAS,CAAC,IAAI,EAAE;;AAErB,YAAI,IAAI,CAAC,KAAK,YAAY,MAAM,EAAE;AAC9B,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB,MAAM,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;;AAEvC,gBAAI,MAAM,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;AAC1C,gBAAI,CAAC,MAAM,CAAC,IAAI,KAAK,eAAe,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAA,IACxE,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;;;AAGpE,oBAAI;AACA,2BAAO,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACjC,CAAC,OAAO,EAAE,EAAE;AACT,2BAAO,IAAI,CAAC;iBACf;aAEJ;SACJ,MAAM;AACH,mBAAO,IAAI,CAAC;SACf;KAEJ;;AAID,WAAO;;AAEH,iBAAS,EAAE,iBAAS,IAAI,EAAE;;AAEtB,gBAAI,aAAa;gBACb,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;;AAE5B,gBAAI,KAAK,EAAE;AACP,6BAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACjC,oBAAI,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;AACnC,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,qDAAqD,CAAC,CAAC;iBAC/E;aACJ;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-control-regex-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to forbid control charactes from regular expressions.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Get the regex expression\n     * @param {ASTNode} node node to evaluate\n     * @returns {*} Regex if found else null\n     * @private\n     */\n    function getRegExp(node) {\n\n        if (node.value instanceof RegExp) {\n            return node.value;\n        } else if (typeof node.value === \"string\") {\n\n            var parent = context.getAncestors().pop();\n            if ((parent.type === \"NewExpression\" || parent.type === \"CallExpression\") &&\n            parent.callee.type === \"Identifier\" && parent.callee.name === \"RegExp\") {\n\n                // there could be an invalid regular expression string\n                try {\n                    return new RegExp(node.value);\n                } catch (ex) {\n                    return null;\n                }\n\n            }\n        } else {\n            return null;\n        }\n\n    }\n\n\n\n    return {\n\n        \"Literal\": function(node) {\n\n            var computedValue,\n                regex = getRegExp(node);\n\n            if (regex) {\n                computedValue = regex.toString();\n                if (/[\\x00-\\x1f]/.test(computedValue)) {\n                    context.report(node, \"Unexpected control character in regular expression.\");\n                }\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}