{"version":3,"sources":["no-redeclare.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,OAAO,GAAG;AACV,sBAAc,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;KACnF,CAAC;;;;;;;;AAQF,aAAS,oBAAoB,CAAC,KAAK,EAAE;AACjC,aAAK,CAAC,SAAS,CAAC,OAAO,CAAC,UAAS,QAAQ,EAAE;AACvC,gBAAI,UAAU,GAAG,OAAO,CAAC,cAAc,IAAI,WAAW,IAAI,QAAQ,CAAC;AACnE,gBAAI,KAAK,GAAG,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAA,GAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;;AAE/D,gBAAI,KAAK,IAAI,CAAC,EAAE;AACZ,wBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC,EAAE;AACrC,2BAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAClC,CAAC,CAAC;;AAEH,qBAAK,IAAI,CAAC,GAAI,UAAU,GAAG,CAAC,GAAG,CAAC,AAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5E,2BAAO,CAAC,MAAM,CACV,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EACvB,8BAA8B,EAC9B,EAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,EAAC,CAAC,CAAC;iBAC3B;aACJ;SACJ,CAAC,CAAC;KAEN;;;;;;;AAOD,aAAS,cAAc,GAAG;AACtB,YAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;;;AAG/B,YAAI,OAAO,CAAC,YAAY,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE;AACnE,gCAAoB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C,MAAM;AACH,gCAAoB,CAAC,KAAK,CAAC,CAAC;SAC/B;KACJ;;;;;;;AAOD,aAAS,aAAa,GAAG;AACrB,4BAAoB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC5C;;AAED,QAAI,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE;AACpC,eAAO;AACH,qBAAS,EAAE,cAAc;AACzB,4BAAgB,EAAE,aAAa;AAC/B,6BAAiB,EAAE,aAAa;SACnC,CAAC;KACL,MAAM;AACH,eAAO;AACH,qBAAS,EAAE,cAAc;AACzB,iCAAqB,EAAE,aAAa;AACpC,gCAAoB,EAAE,aAAa;AACnC,qCAAyB,EAAE,aAAa;SAC3C,CAAC;KACL;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,QAAQ;AAChB,gBAAY,EAAE;AACV,wBAAgB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC;KACxC;AACD,0BAAsB,EAAE,KAAK;CAChC,CACJ,CAAC","file":"no-redeclare-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when the same variable is declared more then once.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var options = {\n        builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals)\n    };\n\n    /**\n     * Find variables in a given scope and flag redeclared ones.\n     * @param {Scope} scope - An escope scope object.\n     * @returns {void}\n     * @private\n     */\n    function findVariablesInScope(scope) {\n        scope.variables.forEach(function(variable) {\n            var hasBuiltin = options.builtinGlobals && \"writeable\" in variable;\n            var count = (hasBuiltin ? 1 : 0) + variable.identifiers.length;\n\n            if (count >= 2) {\n                variable.identifiers.sort(function(a, b) {\n                    return a.range[1] - b.range[1];\n                });\n\n                for (var i = (hasBuiltin ? 0 : 1), l = variable.identifiers.length; i < l; i++) {\n                    context.report(\n                        variable.identifiers[i],\n                        \"\\\"{{a}}\\\" is already defined\",\n                        {a: variable.name});\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Find variables in the current scope.\n     * @returns {void}\n     * @private\n     */\n    function checkForGlobal() {\n        var scope = context.getScope();\n\n        // Nodejs env or modules has a special scope.\n        if (context.ecmaFeatures.globalReturn || context.ecmaFeatures.modules) {\n            findVariablesInScope(scope.childScopes[0]);\n        } else {\n            findVariablesInScope(scope);\n        }\n    }\n\n    /**\n     * Find variables in the current scope.\n     * @returns {void}\n     * @private\n     */\n    function checkForBlock() {\n        findVariablesInScope(context.getScope());\n    }\n\n    if (context.ecmaFeatures.blockBindings) {\n        return {\n            \"Program\": checkForGlobal,\n            \"BlockStatement\": checkForBlock,\n            \"SwitchStatement\": checkForBlock\n        };\n    } else {\n        return {\n            \"Program\": checkForGlobal,\n            \"FunctionDeclaration\": checkForBlock,\n            \"FunctionExpression\": checkForBlock,\n            \"ArrowFunctionExpression\": checkForBlock\n        };\n    }\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"builtinGlobals\": {\"type\": \"boolean\"}\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}