{"version":3,"sources":["new-cap.js"],"names":[],"mappings":"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","file":"new-cap-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of constructors without capital letters\n * @author Nicholas C. Zakas\n * @copyright 2014 Jordan Harband. All rights reserved.\n * @copyright 2013-2014 Nicholas C. Zakas. All rights reserved.\n */\n\n\"use strict\";\n\nvar CAPS_ALLOWED = [\n    \"Array\",\n    \"Boolean\",\n    \"Date\",\n    \"Error\",\n    \"Function\",\n    \"Number\",\n    \"Object\",\n    \"RegExp\",\n    \"String\",\n    \"Symbol\"\n];\n\n/**\n * Ensure that if the key is provided, it must be an array.\n * @param {Object} obj Object to check with `key`.\n * @param {string} key Object key to check on `obj`.\n * @param {*} fallback If obj[key] is not present, this will be returned.\n * @returns {string[]} Returns obj[key] if it's an Array, otherwise `fallback`\n */\nfunction checkArray(obj, key, fallback) {\n    /* istanbul ignore if */\n    if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {\n        throw new TypeError(key + \", if provided, must be an Array\");\n    }\n    return obj[key] || fallback;\n}\n\n/**\n * A reducer function to invert an array to an Object mapping the string form of the key, to `true`.\n * @param {Object} map Accumulator object for the reduce.\n * @param {string} key Object key to set to `true`.\n * @returns {Object} Returns the updated Object for further reduction.\n */\nfunction invert(map, key) {\n    map[key] = true;\n    return map;\n}\n\n/**\n * Creates an object with the cap is new exceptions as its keys and true as their values.\n * @param {Object} config Rule configuration\n * @returns {Object} Object with cap is new exceptions.\n */\nfunction calculateCapIsNewExceptions(config) {\n    var capIsNewExceptions = checkArray(config, \"capIsNewExceptions\", CAPS_ALLOWED);\n\n    if (capIsNewExceptions !== CAPS_ALLOWED) {\n        capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);\n    }\n\n    return capIsNewExceptions.reduce(invert, {});\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var config = context.options[0] || {};\n    config.newIsCap = config.newIsCap !== false;\n    config.capIsNew = config.capIsNew !== false;\n    var skipProperties = config.properties === false;\n\n    var newIsCapExceptions = checkArray(config, \"newIsCapExceptions\", []).reduce(invert, {});\n\n    var capIsNewExceptions = calculateCapIsNewExceptions(config);\n\n    var listeners = {};\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Get exact callee name from expression\n     * @param {ASTNode} node CallExpression or NewExpression node\n     * @returns {string} name\n     */\n    function extractNameFromExpression(node) {\n\n        var name = \"\",\n            property;\n\n        if (node.callee.type === \"MemberExpression\") {\n            property = node.callee.property;\n\n            if (property.type === \"Literal\" && (typeof property.value === \"string\")) {\n                name = property.value;\n            } else if (property.type === \"Identifier\" && !node.callee.computed) {\n                name = property.name;\n            }\n        } else {\n            name = node.callee.name;\n        }\n        return name;\n    }\n\n    /**\n     * Returns the capitalization state of the string -\n     * Whether the first character is uppercase, lowercase, or non-alphabetic\n     * @param {string} str String\n     * @returns {string} capitalization state: \"non-alpha\", \"lower\", or \"upper\"\n     */\n    function getCap(str) {\n        var firstChar = str.charAt(0);\n\n        var firstCharLower = firstChar.toLowerCase();\n        var firstCharUpper = firstChar.toUpperCase();\n\n        if (firstCharLower === firstCharUpper) {\n            // char has no uppercase variant, so it's non-alphabetic\n            return \"non-alpha\";\n        } else if (firstChar === firstCharLower) {\n            return \"lower\";\n        } else {\n            return \"upper\";\n        }\n    }\n\n    /**\n     * Check if capitalization is allowed for a CallExpression\n     * @param {Object} allowedMap Object mapping calleeName to a Boolean\n     * @param {ASTNode} node CallExpression node\n     * @param {string} calleeName Capitalized callee name from a CallExpression\n     * @returns {Boolean} Returns true if the callee may be capitalized\n     */\n    function isCapAllowed(allowedMap, node, calleeName) {\n        if (allowedMap[calleeName] || allowedMap[context.getSource(node.callee)]) {\n            return true;\n        }\n\n        if (calleeName === \"UTC\" && node.callee.type === \"MemberExpression\") {\n            // allow if callee is Date.UTC\n            return node.callee.object.type === \"Identifier\" &&\n                node.callee.object.name === \"Date\";\n        }\n\n        return skipProperties && node.callee.type === \"MemberExpression\";\n    }\n\n    /**\n     * Reports the given message for the given node. The location will be the start of the property or the callee.\n     * @param {ASTNode} node CallExpression or NewExpression node.\n     * @param {string} message The message to report.\n     * @returns {void}\n     */\n    function report(node, message) {\n        var callee = node.callee;\n\n        if (callee.type === \"MemberExpression\") {\n            callee = callee.property;\n        }\n\n        context.report(node, callee.loc.start, message);\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    if (config.newIsCap) {\n        listeners.NewExpression = function(node) {\n\n            var constructorName = extractNameFromExpression(node);\n            if (constructorName) {\n                var capitalization = getCap(constructorName);\n                var isAllowed = capitalization !== \"lower\" || isCapAllowed(newIsCapExceptions, node, constructorName);\n                if (!isAllowed) {\n                    report(node, \"A constructor name should not start with a lowercase letter.\");\n                }\n            }\n        };\n    }\n\n    if (config.capIsNew) {\n        listeners.CallExpression = function(node) {\n\n            var calleeName = extractNameFromExpression(node);\n            if (calleeName) {\n                var capitalization = getCap(calleeName);\n                var isAllowed = capitalization !== \"upper\" || isCapAllowed(capIsNewExceptions, node, calleeName);\n                if (!isAllowed) {\n                    report(node, \"A function with a name starting with an uppercase letter should only be used as a constructor.\");\n                }\n            }\n        };\n    }\n\n    return listeners;\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"newIsCap\": {\n                \"type\": \"boolean\"\n            },\n            \"capIsNew\": {\n                \"type\": \"boolean\"\n            },\n            \"newIsCapExceptions\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"capIsNewExceptions\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"properties\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}