{"version":3,"sources":["spaced-comment.js"],"names":[],"mappings":"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","file":"spaced-comment-compiled.js","sourcesContent":["/**\n * @fileoverview Source code for spaced-comments rule\n * @author Gyandeep Singh\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * @copyright 2015 Gyandeep Singh. All rights reserved.\n * @copyright 2014 Greg Cochard. All rights reserved.\n */\n\"use strict\";\n\nvar escapeStringRegexp = require(\"escape-string-regexp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Escapes the control characters of a given string.\n * @param {string} s - A string to escape.\n * @returns {string} An escaped string.\n */\nfunction escape(s) {\n    var isOneChar = s.length === 1;\n    s = escapeStringRegexp(s);\n    return isOneChar ? s : \"(?:\" + s + \")\";\n}\n\n/**\n * Escapes the control characters of a given string.\n * And adds a repeat flag.\n * @param {string} s - A string to escape.\n * @returns {string} An escaped string.\n */\nfunction escapeAndRepeat(s) {\n    return escape(s) + \"+\";\n}\n\n/**\n * Parses `markers` option.\n * If markers don't include `\"*\"`, this adds `\"*\"` to allow JSDoc comments.\n * @param {string[]} [markers] - A marker list.\n * @returns {string[]} A marker list.\n */\nfunction parseMarkersOption(markers) {\n    if (!markers) {\n        markers = [];\n    }\n\n    // `*` is a marker for JSDoc comments.\n    if (markers.indexOf(\"*\") === -1) {\n        markers.push(\"*\");\n    }\n\n    return markers;\n}\n\n/**\n * Creates RegExp object for `always` mode.\n * Generated pattern is below:\n *\n * 1. First, a marker or nothing.\n * 2. Next, a space or an exception pattern sequence.\n *\n * @param {string[]} markers - A marker list.\n * @param {string[]} exceptions - A exception pattern list.\n * @returns {RegExp} A RegExp object for `always` mode.\n */\nfunction createAlwaysStylePattern(markers, exceptions) {\n    var pattern = \"^\";\n\n    // A marker or nothing.\n    //   [\"*\"]            ==> \"\\*?\"\n    //   [\"*\", \"!\"]       ==> \"(?:\\*|!)?\"\n    //   [\"*\", \"/\", \"!<\"] ==> \"(?:\\*|\\/|(?:!<))?\" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5C*%7C%5C%2F%7C(%3F%3A!%3C))%3F\n    if (markers.length === 1) {\n        // the marker.\n        pattern += escape(markers[0]);\n    } else {\n        // one of markers.\n        pattern += \"(?:\";\n        pattern += markers.map(escape).join(\"|\");\n        pattern += \")\";\n    }\n    pattern += \"?\"; // or nothing.\n\n    // A space or an exception pattern sequence.\n    //   []                 ==> \"\\s\"\n    //   [\"-\"]              ==> \"(?:\\s|\\-+$)\"\n    //   [\"-\", \"=\"]         ==> \"(?:\\s|(?:\\-+|=+)$)\"\n    //   [\"-\", \"=\", \"--==\"] ==> \"(?:\\s|(?:\\-+|=+|(?:\\-\\-==)+)$)\" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5Cs%7C(%3F%3A%5C-%2B%7C%3D%2B%7C(%3F%3A%5C-%5C-%3D%3D)%2B)%24)\n    if (exceptions.length === 0) {\n        // a space.\n        pattern += \"\\\\s\";\n    } else {\n        // a space or...\n        pattern += \"(?:\\\\s|\";\n        if (exceptions.length === 1) {\n            // a sequence of the exception pattern.\n            pattern += escapeAndRepeat(exceptions[0]);\n        } else {\n            // a sequence of one of exception patterns.\n            pattern += \"(?:\";\n            pattern += exceptions.map(escapeAndRepeat).join(\"|\");\n            pattern += \")\";\n        }\n        pattern += \"(?:$|[\\n\\r]))\"; // the sequence continues until the end.\n    }\n    return new RegExp(pattern);\n}\n\n/**\n * Creates RegExp object for `never` mode.\n * Generated pattern is below:\n *\n * 1. First, a marker or nothing (captured).\n * 2. Next, a space or a tab.\n *\n * @param {string[]} markers - A marker list.\n * @returns {RegExp} A RegExp object for `never` mode.\n */\nfunction createNeverStylePattern(markers) {\n    var pattern = \"^(\" + markers.map(escape).join(\"|\") + \")?[ \\t]\";\n    return new RegExp(pattern);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    // Unless the first option is never, require a space\n    var requireSpace = context.options[0] !== \"never\";\n\n    // Parse the second options.\n    // If markers don't include `\"*\"`, it's added automatically for JSDoc comments.\n    var config = context.options[1] || {};\n    var styleRules = [\"block\", \"line\"].reduce(function(rule, type) {\n        var markers = parseMarkersOption(config[type] && config[type].markers || config.markers);\n        var exceptions = config[type] && config[type].exceptions || config.exceptions || [];\n\n        // Create RegExp object for valid patterns.\n        rule[type] = {\n            regex: requireSpace ? createAlwaysStylePattern(markers, exceptions) : createNeverStylePattern(markers),\n            hasExceptions: exceptions.length > 0\n        };\n\n        return rule;\n    }, {});\n\n    /**\n     * Reports a given comment if it's invalid.\n     * @param {ASTNode} node - a comment node to check.\n     * @returns {void}\n     */\n    function checkCommentForSpace(node) {\n        var type = node.type.toLowerCase(),\n            rule = styleRules[type],\n            commentIdentifier = type === \"block\" ? \"/*\" : \"//\";\n\n        // Ignores empty comments.\n        if (node.value.length === 0) {\n            return;\n        }\n\n        // Checks.\n        if (requireSpace) {\n            if (!rule.regex.test(node.value)) {\n                if (rule.hasExceptions) {\n                    context.report(node, \"Expected exception block, space or tab after \" + commentIdentifier + \" in comment.\");\n                } else {\n                    context.report(node, \"Expected space or tab after \" + commentIdentifier + \" in comment.\");\n                }\n            }\n        } else {\n            var matched = rule.regex.exec(node.value);\n            if (matched) {\n                if (!matched[1]) {\n                    context.report(node, \"Unexpected space or tab after \" + commentIdentifier + \" in comment.\");\n                } else {\n                    context.report(node, \"Unexpected space or tab after marker (\" + matched[1] + \") in comment.\");\n                }\n            }\n        }\n    }\n\n    return {\n\n        \"LineComment\": checkCommentForSpace,\n        \"BlockComment\": checkCommentForSpace\n\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"never\"]\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"exceptions\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"markers\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"line\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"exceptions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"markers\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"block\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"exceptions\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"markers\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}