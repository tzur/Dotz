{"version":3,"sources":["no-unreachable.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;;;;;;;;;;;AAcb,SAAS,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE;AAC5C,QAAI,OAAO,CAAC;AACZ,YAAQ,eAAe;AACnB,aAAK,gBAAgB;AACjB,mBAAO,GAAG,OAAO,CAAC;AAClB,kBAAM;AAAA,AACV,aAAK,mBAAmB;AACpB,mBAAO,GAAG,UAAU,CAAC;AACrB,kBAAM;AAAA,AACV,aAAK,iBAAiB;AAClB,mBAAO,GAAG,QAAQ,CAAC;AACnB,kBAAM;AAAA,AACV,aAAK,gBAAgB;AACjB,mBAAO,GAAG,OAAO,CAAC;AAClB,kBAAM;AAAA,AACV;AACI,mBAAO;AAAA,KACd;AACD,WAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8CAA8C,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;CAC3F;;;;;;AAOD,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,oBAAoB,CAAC,IAAI,EAAE;AAChC,eAAO,IAAI,CAAC,IAAI,KAAK,qBAAqB,IACtC,IAAI,CAAC,IAAI,KAAK,qBAAqB,IACnC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,UAAS,WAAW,EAAE;AAC1C,mBAAO,WAAW,CAAC,IAAI,KAAK,oBAAoB,IAAI,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC;SACjF,CAAC,CAAC;KACV;;;;;;;;;AASD,aAAS,SAAS,CAAC,IAAI,EAAE;AACrB,YAAI,MAAM,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;AAC1C,YAAI,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC;;AAEtB,gBAAQ,MAAM,CAAC,IAAI;AACf,iBAAK,YAAY;AACb,qBAAK,GAAG,YAAY,CAAC;AACrB,sBAAM;AAAA,AACV,iBAAK,SAAS,CAAC;AACf,iBAAK,gBAAgB;AACjB,qBAAK,GAAG,MAAM,CAAC;AACf,sBAAM;AAAA,AACV;AACI,uBAAO;AAAA,SACd;;AAED,aAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,mBAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAI,OAAO,KAAK,IAAI,EAAE;AAClB,uBAAO;aACV;;AAED,gBAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE;AAChC,sBAAM,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACvC;SACJ;KACJ;;AAED,WAAO;AACH,yBAAiB,EAAE,SAAS;AAC5B,wBAAgB,EAAE,SAAS;AAC3B,2BAAmB,EAAE,SAAS;AAC9B,wBAAgB,EAAE,SAAS;KAC9B,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-unreachable-compiled.js","sourcesContent":["/**\n * @fileoverview Checks for unreachable code due to return, throws, break, and continue.\n * @author Joel Feenstra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Report the node\n * @param {object} context Current context as passed to the rule\n * @param {ASTNode} node node to evaluate\n * @param {string} unreachableType Type of the statement\n * @returns {void}\n * @private\n */\nfunction report(context, node, unreachableType) {\n    var keyword;\n    switch (unreachableType) {\n        case \"BreakStatement\":\n            keyword = \"break\";\n            break;\n        case \"ContinueStatement\":\n            keyword = \"continue\";\n            break;\n        case \"ReturnStatement\":\n            keyword = \"return\";\n            break;\n        case \"ThrowStatement\":\n            keyword = \"throw\";\n            break;\n        default:\n            return;\n    }\n    context.report(node, \"Found unexpected statement after a {{type}}.\", { type: keyword });\n}\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Checks if a node is an exception for no-unreachable because of variable/function hoisting\n     * @param {ASTNode} node The AST node to check.\n     * @returns {boolean} if the node doesn't trigger unreachable\n     * @private\n     */\n    function isUnreachableAllowed(node) {\n        return node.type === \"FunctionDeclaration\" ||\n            node.type === \"VariableDeclaration\" &&\n            node.declarations.every(function(declaration) {\n                return declaration.type === \"VariableDeclarator\" && declaration.init === null;\n            });\n    }\n\n    /**\n     * Verifies that the given node is the last node or followed exclusively by\n     * hoisted declarations\n     * @param {ASTNode} node Node that should be the last node\n     * @returns {void}\n     * @private\n     */\n    function checkNode(node) {\n        var parent = context.getAncestors().pop();\n        var field, i, sibling;\n\n        switch (parent.type) {\n            case \"SwitchCase\":\n                field = \"consequent\";\n                break;\n            case \"Program\":\n            case \"BlockStatement\":\n                field = \"body\";\n                break;\n            default:\n                return;\n        }\n\n        for (i = parent[field].length - 1; i >= 0; i--) {\n            sibling = parent[field][i];\n            if (sibling === node) {\n                return; // Found the last reachable statement, all done\n            }\n\n            if (!isUnreachableAllowed(sibling)) {\n                report(context, sibling, node.type);\n            }\n        }\n    }\n\n    return {\n        \"ReturnStatement\": checkNode,\n        \"ThrowStatement\": checkNode,\n        \"ContinueStatement\": checkNode,\n        \"BreakStatement\": checkNode\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}