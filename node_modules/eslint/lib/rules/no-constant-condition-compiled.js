/**
 * @fileoverview Rule to flag use constant conditions
 * @author Christian Schulz <http://rndm.de>
 * @copyright 2014 Christian Schulz. All rights reserved.
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {

    //--------------------------------------------------------------------------
    // Helpers
    //--------------------------------------------------------------------------

    /**
     * Checks if a node has a constant truthiness value.
     * @param {ASTNode} node The AST node to check.
     * @returns {Bool} true when node's truthiness is constant
     * @private
     */
    function isConstant(_x) {
        var _left;

        var _again = true;

        _function: while (_again) {
            var node = _x;
            _again = false;

            switch (node.type) {
                case "Literal":
                case "ArrowFunctionExpression":
                case "FunctionExpression":
                case "ObjectExpression":
                case "ArrayExpression":
                    return true;
                case "UnaryExpression":
                    _x = node.argument;
                    _again = true;
                    continue _function;

                case "BinaryExpression":
                case "LogicalExpression":
                    if (!(_left = isConstant(node.left))) {
                        return _left;
                    }

                    _x = node.right;
                    _again = true;
                    continue _function;

                case "AssignmentExpression":
                    if (!(_left = node.operator === "=")) {
                        return _left;
                    }

                    _x = node.right;
                    _again = true;
                    continue _function;

                case "SequenceExpression":
                    _x = node.expressions[node.expressions.length - 1];
                    _again = true;
                    continue _function;

                // no default
            }
            return false;
        }
    }

    /**
     * Reports when the given node contains a constant condition.
     * @param {ASTNode} node The AST node to check.
     * @returns {void}
     * @private
     */
    function checkConstantCondition(node) {
        if (node.test && isConstant(node.test)) {
            context.report(node, "Unexpected constant condition.");
        }
    }

    //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------

    return {
        "ConditionalExpression": checkConstantCondition,
        "IfStatement": checkConstantCondition,
        "WhileStatement": checkConstantCondition,
        "DoWhileStatement": checkConstantCondition,
        "ForStatement": checkConstantCondition
    };
};

module.exports.schema = [];

//# sourceMappingURL=no-constant-condition-compiled.js.map