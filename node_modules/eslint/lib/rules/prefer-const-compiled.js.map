{"version":3,"sources":["prefer-const.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;AAO/B,aAAS,aAAa,CAAC,SAAS,EAAE;AAC9B,eAAO,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC;KAClC;;;;;;;AAOD,aAAS,uBAAuB,CAAC,SAAS,EAAE;AACxC,eAAO,SAAS,CAAC,UAAU,EAAE,IAAI,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC;KAC5D;;;;;;;AAOD,aAAS,iBAAiB,CAAC,KAAK,EAAE;;AAE9B,YAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE;AACtB,mBAAO;SACV;;AAED,YAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;AAChC,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;AAClD,gBAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5B,gBAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAI,WAAW,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;AACpC,gBAAI,SAAS,GAAG,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC;AAClD,gBAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;AACrC,gBAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;AAEzC,gBAAI,SAAS,IACT,UAAU,IACV,WAAW,CAAC,IAAI,KAAK,qBAAqB,IAC1C,WAAW,CAAC,IAAI,KAAK,KAAK,KACzB,SAAS,CAAC,IAAI,KAAK,cAAc,IAAI,SAAS,CAAC,IAAI,KAAK,WAAW,CAAA,AAAC,IACrE,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,IAC9B,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAC3C;AACE,uBAAO,CAAC,MAAM,CACV,UAAU,EACV,oDAAoD,EACpD,EAAC,IAAI,EAAE,UAAU,CAAC,IAAI,EAAC,CAAC,CAAC;aAChC;SACJ;KACJ;;;;;;;;AAQD,QAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;AAExD,WAAO;AACH,sBAAc,EAAE,uBAAW;AACvB,gBAAI,KAAK,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AACjC,mBAAO,KAAK,CAAC,MAAM,EAAE;AACjB,oBAAI,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AACxB,uBAAO,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;;AAElC,iCAAiB,CAAC,KAAK,CAAC,CAAC;aAC5B;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"prefer-const-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to suggest using of const declaration for variables that are never modified after declared.\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Checks whether a reference is the initializer.\n     * @param {Reference} reference - A reference to check.\n     * @returns {boolean} Whether or not the reference is the initializer.\n     */\n    function isInitializer(reference) {\n        return reference.init === true;\n    }\n\n    /**\n     * Checks whether a reference is read-only or the initializer.\n     * @param {Reference} reference - A reference to check.\n     * @returns {boolean} Whether or not the reference is read-only or the initializer.\n     */\n    function isReadOnlyOrInitializer(reference) {\n        return reference.isReadOnly() || reference.init === true;\n    }\n\n    /**\n     * Searches and reports variables that are never modified after declared.\n     * @param {Scope} scope - A scope of the search domain.\n     * @returns {void}\n     */\n    function checkForVariables(scope) {\n        // Skip the TDZ type.\n        if (scope.type === \"TDZ\") {\n            return;\n        }\n\n        var variables = scope.variables;\n        for (var i = 0, end = variables.length; i < end; ++i) {\n            var variable = variables[i];\n            var def = variable.defs[0];\n            var declaration = def && def.parent;\n            var statement = declaration && declaration.parent;\n            var references = variable.references;\n            var identifier = variable.identifiers[0];\n\n            if (statement &&\n                identifier &&\n                declaration.type === \"VariableDeclaration\" &&\n                declaration.kind === \"let\" &&\n                (statement.type !== \"ForStatement\" || statement.init !== declaration) &&\n                references.some(isInitializer) &&\n                references.every(isReadOnlyOrInitializer)\n            ) {\n                context.report(\n                    identifier,\n                    \"`{{name}}` is never modified, use `const` instead.\",\n                    {name: identifier.name});\n            }\n        }\n    }\n\n    /**\n     * Adds multiple items to the tail of an array.\n     * @param {any[]} array - A destination to add.\n     * @param {any[]} values - Items to be added.\n     * @returns {void}\n     */\n    var pushAll = Function.apply.bind(Array.prototype.push);\n\n    return {\n        \"Program:exit\": function() {\n            var stack = [context.getScope()];\n            while (stack.length) {\n                var scope = stack.pop();\n                pushAll(stack, scope.childScopes);\n\n                checkForVariables(scope);\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}