{"version":3,"sources":["max-params.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,QAAI,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;;;;;;;AAQxC,aAAS,aAAa,CAAC,IAAI,EAAE;AACzB,YAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,SAAS,EAAE;AAChC,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,gFAAgF,EAAE;AACnG,qBAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;AACzB,mBAAG,EAAE,SAAS;aACjB,CAAC,CAAC;SACN;KACJ;;AAED,WAAO;AACH,6BAAqB,EAAE,aAAa;AACpC,iCAAyB,EAAE,aAAa;AACxC,4BAAoB,EAAE,aAAa;KACtC,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,SAAS;CACpB,CACJ,CAAC","file":"max-params-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n * @copyright 2014 Nicholas C. Zakas. All rights reserved.\n * @copyright 2013 Ilya Volodin. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var numParams = context.options[0] || 3;\n\n    /**\n     * Checks a function to see if it has too many parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkFunction(node) {\n        if (node.params.length > numParams) {\n            context.report(node, \"This function has too many parameters ({{count}}). Maximum allowed is {{max}}.\", {\n                count: node.params.length,\n                max: numParams\n            });\n        }\n    }\n\n    return {\n        \"FunctionDeclaration\": checkFunction,\n        \"ArrowFunctionExpression\": checkFunction,\n        \"FunctionExpression\": checkFunction\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"integer\"\n    }\n];\n"]}