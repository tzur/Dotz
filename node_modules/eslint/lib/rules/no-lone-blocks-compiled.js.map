{"version":3,"sources":["no-lone-blocks.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;AAG/B,QAAI,UAAU,GAAG,EAAE;QACf,OAAO,CAAC;;;;;;;AAOZ,aAAS,MAAM,CAAC,IAAI,EAAE;AAClB,YAAI,MAAM,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;AAC1C,eAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,KAAK,SAAS,GAC1C,qBAAqB,GACrB,4BAA4B,CAC/B,CAAC;KACL;;;;;;AAMD,aAAS,WAAW,GAAG;AACnB,YAAI,MAAM,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;AAC1C,eAAO,MAAM,CAAC,IAAI,KAAK,gBAAgB,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC;KACxE;;;;;;;AAOD,aAAS,aAAa,GAAG;AACrB,YAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACzB,mBAAO;SACV;;AAED,YAAI,KAAK,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,EAAE,CAAC;;AAEzC,YAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;AAC7C,sBAAU,CAAC,GAAG,EAAE,CAAC;SACpB;KACJ;;;AAGD,WAAO,GAAG;AACN,sBAAc,EAAE,wBAAS,IAAI,EAAE;AAC3B,gBAAI,WAAW,CAAC,IAAI,CAAC,EAAE;AACnB,sBAAM,CAAC,IAAI,CAAC,CAAC;aAChB;SACJ;KACJ,CAAC;;;AAGF,QAAI,OAAO,CAAC,YAAY,CAAC,aAAa,IAAI,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE;AACpE,eAAO,GAAG;AACN,4BAAgB,EAAE,wBAAS,IAAI,EAAE;AAC7B,oBAAI,WAAW,CAAC,IAAI,CAAC,EAAE;AACnB,8BAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzB;aACJ;AACD,iCAAqB,EAAE,4BAAS,IAAI,EAAE;AAClC,oBAAI,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;AACrE,8BAAU,CAAC,GAAG,EAAE,CAAC;AACjB,0BAAM,CAAC,IAAI,CAAC,CAAC;iBAChB;aACJ;SACJ,CAAC;KACL;;AAED,QAAI,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE;AACpC,eAAO,CAAC,mBAAmB,GAAG,UAAS,IAAI,EAAE;AACzC,gBAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;AAC9C,6BAAa,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ,CAAC;;AAEF,eAAO,CAAC,mBAAmB,GAAG,UAAS,IAAI,EAAE;AACzC,gBAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;AAC7B,6BAAa,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ,CAAC;KACL;;AAED,QAAI,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE;AAC9B,eAAO,CAAC,gBAAgB,GAAG,aAAa,CAAC;KAC5C;;AAED,WAAO,OAAO,CAAC;CAClB,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-lone-blocks-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag blocks with no reason to exist\n * @author Brandon Mills\n * @copyright 2015 Roberto Vidal. All rights reserved.\n * @copyright 2014 Brandon Mills. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    // A stack of lone blocks to be checked for block-level bindings\n    var loneBlocks = [],\n        ruleDef;\n\n    /**\n     * Reports a node as invalid.\n     * @param {ASTNode} node - The node to be reported.\n     * @returns {void}\n    */\n    function report(node) {\n        var parent = context.getAncestors().pop();\n        context.report(node, parent.type === \"Program\" ?\n            \"Block is redundant.\" :\n            \"Nested block is redundant.\"\n        );\n    }\n\n    /**\n     * Checks for any ocurrence of BlockStatement > BlockStatement or Program > BlockStatement\n     * @returns {boolean} True if the current node is a lone block.\n    */\n    function isLoneBlock() {\n        var parent = context.getAncestors().pop();\n        return parent.type === \"BlockStatement\" || parent.type === \"Program\";\n    }\n\n    /**\n     * Checks the enclosing block of the current node for block-level bindings,\n     * and \"marks it\" as valid if any.\n     * @returns {void}\n    */\n    function markLoneBlock() {\n        if (loneBlocks.length === 0) {\n            return;\n        }\n\n        var block = context.getAncestors().pop();\n\n        if (loneBlocks[loneBlocks.length - 1] === block) {\n            loneBlocks.pop();\n        }\n    }\n\n    // Default rule definition: report all lone blocks\n    ruleDef = {\n        BlockStatement: function(node) {\n            if (isLoneBlock(node)) {\n                report(node);\n            }\n        }\n    };\n\n    // ES6: report blocks without block-level bindings\n    if (context.ecmaFeatures.blockBindings || context.ecmaFeatures.classes) {\n        ruleDef = {\n            \"BlockStatement\": function(node) {\n                if (isLoneBlock(node)) {\n                    loneBlocks.push(node);\n                }\n            },\n            \"BlockStatement:exit\": function(node) {\n                if (loneBlocks.length > 0 && loneBlocks[loneBlocks.length - 1] === node) {\n                    loneBlocks.pop();\n                    report(node);\n                }\n            }\n        };\n    }\n\n    if (context.ecmaFeatures.blockBindings) {\n        ruleDef.VariableDeclaration = function(node) {\n            if (node.kind === \"let\" || node.kind === \"const\") {\n                markLoneBlock(node);\n            }\n        };\n\n        ruleDef.FunctionDeclaration = function(node) {\n            if (context.getScope().isStrict) {\n                markLoneBlock(node);\n            }\n        };\n    }\n\n    if (context.ecmaFeatures.classes) {\n        ruleDef.ClassDeclaration = markLoneBlock;\n    }\n\n    return ruleDef;\n};\n\nmodule.exports.schema = [];\n"]}