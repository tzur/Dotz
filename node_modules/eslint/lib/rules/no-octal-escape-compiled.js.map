{"version":3,"sources":["no-octal-escape.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;;AAEH,iBAAS,EAAE,iBAAS,IAAI,EAAE;AACtB,gBAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;AAChC,uBAAO;aACV;;AAED,gBAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,wDAAwD,CAAC;gBAChF,UAAU,CAAC;;AAEf,gBAAI,KAAK,EAAE;AACP,0BAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;;AAGtB,oBAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;AACrD,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,6DAA6D,EAC1E,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;iBACvC;aACJ;SACJ;;KAEJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-octal-escape-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag octal escape sequences in string literals.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n\n        \"Literal\": function(node) {\n            if (typeof node.value !== \"string\") {\n                return;\n            }\n\n            var match = node.raw.match(/^([^\\\\]|\\\\[^0-7])*\\\\([0-3][0-7]{1,2}|[4-7][0-7]|[0-7])/),\n                octalDigit;\n\n            if (match) {\n                octalDigit = match[2];\n\n                // \\0 is actually not considered an octal\n                if (match[2] !== \"0\" || typeof match[3] !== \"undefined\") {\n                    context.report(node, \"Don't use octal: '\\\\{{octalDigit}}'. Use '\\\\u....' instead.\",\n                            { octalDigit: octalDigit });\n                }\n            }\n        }\n\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}