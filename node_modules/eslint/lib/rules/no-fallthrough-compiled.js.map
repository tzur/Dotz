{"version":3,"sources":["no-fallthrough.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;AAGb,IAAI,mBAAmB,GAAG,mBAAmB,CAAC;;;;;;AAM9C,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,QAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,WAAO;;AAEH,oBAAY,EAAE,oBAAS,IAAI,EAAE;;AAEzB,gBAAI,UAAU,GAAG,IAAI,CAAC,UAAU;gBAC5B,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC1C,CAAC;gBACD,QAAQ;gBACR,OAAO,CAAC;;;;;;AAMZ,gBAAI,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAgB,EAAE;AACpE,0BAAU,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;aAC9B;;;AAGD,gBAAI,CAAC,UAAU,CAAC,cAAc,EAAE;;;AAG5B,wBAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;AAC7D,uBAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;;AAGxC,oBAAI,CAAC,OAAO,EAAE;AACV,4BAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;AAC7C,2BAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBAC3C;;;AAGD,oBAAI,CAAC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;AAEtD,2BAAO,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAC9B,qDAAqD,EACrD,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,SAAS,EAAE,CAAC,CAAC;iBACjD;aACJ;;;AAGD,sBAAU,CAAC,cAAc,GAAG,KAAK,CAAC;AAClC,sBAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;;;AAG3B,gBAAI,UAAU,CAAC,MAAM,EAAE;AACnB,qBAAK,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACzC,wBAAI,0CAA0C,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AACrE,kCAAU,CAAC,cAAc,GAAG,IAAI,CAAC;AACjC,8BAAM;qBACT;iBACJ;aACJ,MAAM;;AAEH,0BAAU,CAAC,cAAc,GAAG,IAAI,CAAC;aACpC;;;;;;;SAOJ;;AAED,yBAAiB,EAAE,yBAAS,IAAI,EAAE;AAC9B,oBAAQ,CAAC,IAAI,CAAC;AACV,oBAAI,EAAE,IAAI;AACV,8BAAc,EAAE,IAAI;AACpB,wBAAQ,EAAE,IAAI;aACjB,CAAC,CAAC;SACN;;AAED,8BAAsB,EAAE,+BAAW;AAC/B,oBAAQ,CAAC,GAAG,EAAE,CAAC;SAClB;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-fallthrough-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag fall-through cases in switch statements.\n * @author Matt DuVall <http://mattduvall.com/>\n */\n\"use strict\";\n\n\nvar FALLTHROUGH_COMMENT = /falls?\\s?through/i;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var switches = [];\n\n    return {\n\n        \"SwitchCase\": function(node) {\n\n            var consequent = node.consequent,\n                switchData = switches[switches.length - 1],\n                i,\n                comments,\n                comment;\n\n            /*\n             * Some developers wrap case bodies in blocks, so if there is just one\n             * node and it's a block statement, check inside.\n             */\n            if (consequent.length === 1 && consequent[0].type === \"BlockStatement\") {\n                consequent = consequent[0];\n            }\n\n            // checking on previous case\n            if (!switchData.lastCaseClosed) {\n\n                // a fall through comment will be the last trailing comment of the last case\n                comments = context.getComments(switchData.lastCase).trailing;\n                comment = comments[comments.length - 1];\n\n                // unless the user doesn't like semicolons, in which case it's first leading comment of this case\n                if (!comment) {\n                    comments = context.getComments(node).leading;\n                    comment = comments[comments.length - 1];\n                }\n\n                // check for comment\n                if (!comment || !FALLTHROUGH_COMMENT.test(comment.value)) {\n\n                    context.report(switchData.lastCase,\n                        \"Expected a \\\"break\\\" statement before \\\"{{code}}\\\".\",\n                        { code: node.test ? \"case\" : \"default\" });\n                }\n            }\n\n            // now dealing with the current case\n            switchData.lastCaseClosed = false;\n            switchData.lastCase = node;\n\n            // try to verify using statements - go backwards as a fast path for the search\n            if (consequent.length) {\n                for (i = consequent.length - 1; i >= 0; i--) {\n                    if (/(?:Break|Continue|Return|Throw)Statement/.test(consequent[i].type)) {\n                        switchData.lastCaseClosed = true;\n                        break;\n                    }\n                }\n            } else {\n                // the case statement has no statements, so it must logically fall through\n                switchData.lastCaseClosed = true;\n            }\n\n            /*\n             * Any warnings are triggered when the next SwitchCase occurs.\n             * There is no need to warn on the last SwitchCase, since it can't\n             * fall through to anything.\n             */\n        },\n\n        \"SwitchStatement\": function(node) {\n            switches.push({\n                node: node,\n                lastCaseClosed: true,\n                lastCase: null\n            });\n        },\n\n        \"SwitchStatement:exit\": function() {\n            switches.pop();\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}