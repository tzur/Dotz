{"version":3,"sources":["no-ex-assign.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;AAMvC,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;AAO/B,aAAS,aAAa,CAAC,QAAQ,EAAE;AAC7B,gBAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAS,SAAS,EAAE;AAC7E,mBAAO,CAAC,MAAM,CACV,SAAS,CAAC,UAAU,EACpB,2CAA2C,CAAC,CAAC;SACpD,CAAC,CAAC;KACN;;AAED,WAAO;AACH,qBAAa,EAAE,qBAAS,IAAI,EAAE;AAC1B,mBAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SAC7D;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-ex-assign-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag assignment of the exception parameter\n * @author Stephen Murray <spmurrayzzz>\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable - A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n        astUtils.getModifyingReferences(variable.references).forEach(function(reference) {\n            context.report(\n                reference.identifier,\n                \"Do not assign to the exception parameter.\");\n        });\n    }\n\n    return {\n        \"CatchClause\": function(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}