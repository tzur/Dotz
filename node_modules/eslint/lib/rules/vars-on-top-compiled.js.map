{"version":3,"sources":["vars-on-top.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,YAAY,GAAG,oEAAoE,CAAC;;;;;;;;;;AAUxF,aAAS,kBAAkB,CAAC,IAAI,EAAE;AAC9B,eAAO,IAAI,CAAC,IAAI,KAAK,qBAAqB,IACtC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,QAAQ,CAAC;KACvF;;;;;;;AAOD,aAAS,eAAe,CAAC,IAAI,EAAE;AAC3B,eAAO,IAAI,CAAC,IAAI,KAAK,mBAAmB,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,IACvE,IAAI,CAAC,IAAI,KAAK,wBAAwB,IAAI,IAAI,CAAC,IAAI,KAAK,0BAA0B,CAAC;KAC1F;;;;;;;;AAQD,aAAS,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE;AAClC,YAAI,CAAC,GAAG,CAAC;YAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;;;AAGjC,eAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACf,gBAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;AACvE,sBAAM;aACT;SACJ;;AAED,eAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AACf,gBAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,qBAAqB,EAAE;AAC9C,uBAAO,KAAK,CAAC;aAChB;AACD,gBAAI,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACxB,uBAAO,IAAI,CAAC;aACf;SACJ;KACJ;;;;;;;;AAQD,aAAS,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;AAClC,YAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;AAChC,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SACtC;KACJ;;;;;;;;;AASD,aAAS,kBAAkB,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE;AACnD,YAAI,EAAE,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAC/B,MAAM,CAAC,IAAI,KAAK,gBAAgB,IAChC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA,AAAC,EAAE;AACpC,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SACtC;KACJ;;;;;;AAMD,WAAO;AACH,6BAAqB,EAAE,6BAAS,IAAI,EAAE;AAClC,gBAAI,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AACvC,gBAAI,MAAM,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;AAC7B,gBAAI,WAAW,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;;AAElC,gBAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;;AACrB,oBAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;;AAC3B,kCAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;iBAChC,MAAM;AACH,sCAAkB,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;iBACjD;aACJ;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"vars-on-top-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n * @copyright 2014 Danny Fritz. All rights reserved.\n * @copyright 2014 Gyandeep Singh. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var errorMessage = \"All \\\"var\\\" declarations must be at the top of the function scope.\";\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {ASTNode} node - any node\n     * @returns {Boolean} whether the given node structurally represents a directive\n     */\n    function looksLikeDirective(node) {\n        return node.type === \"ExpressionStatement\" &&\n            node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n\n    /**\n     * Check to see if its a ES6 import declaration\n     * @param {ASTNode} node - any node\n     * @returns {Boolean} whether the given node represents a import declaration\n     */\n    function looksLikeImport(node) {\n        return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||\n            node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n    }\n\n    /**\n     * Checks whether this variable is on top of the block body\n     * @param {ASTNode} node - The node to check\n     * @param {ASTNode[]} statements - collection of ASTNodes for the parent node block\n     * @returns {Boolean} True if var is on top otherwise false\n     */\n    function isVarOnTop(node, statements) {\n        var i = 0, l = statements.length;\n\n        // skip over directives\n        for (; i < l; ++i) {\n            if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n                break;\n            }\n        }\n\n        for (; i < l; ++i) {\n            if (statements[i].type !== \"VariableDeclaration\") {\n                return false;\n            }\n            if (statements[i] === node) {\n                return true;\n            }\n        }\n    }\n\n    /**\n     * Checks whether variable is on top at the global level\n     * @param {ASTNode} node - The node to check\n     * @param {ASTNode} parent - Parent of the node\n     * @returns {void}\n     */\n    function globalVarCheck(node, parent) {\n        if (!isVarOnTop(node, parent.body)) {\n            context.report(node, errorMessage);\n        }\n    }\n\n    /**\n     * Checks whether variable is on top at functional block scope level\n     * @param {ASTNode} node - The node to check\n     * @param {ASTNode} parent - Parent of the node\n     * @param {ASTNode} grandParent - Parent of the node's parent\n     * @returns {void}\n     */\n    function blockScopeVarCheck(node, parent, grandParent) {\n        if (!(/Function/.test(grandParent.type) &&\n                parent.type === \"BlockStatement\" &&\n                isVarOnTop(node, parent.body))) {\n            context.report(node, errorMessage);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"VariableDeclaration\": function(node) {\n            var ancestors = context.getAncestors();\n            var parent = ancestors.pop();\n            var grandParent = ancestors.pop();\n\n            if (node.kind === \"var\") {// check variable is `var` type and not `let` or `const`\n                if (parent.type === \"Program\") {// That means its a global variable\n                    globalVarCheck(node, parent);\n                } else {\n                    blockScopeVarCheck(node, parent, grandParent);\n                }\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}