{"version":3,"sources":["object-shorthand.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;AAEb,IAAI,OAAO,GAAG;AACV,UAAM,EAAE,QAAQ;AAChB,SAAK,EAAE,OAAO;AACd,WAAO,EAAE,SAAS;AAClB,cAAU,EAAE,YAAY;CAC3B,CAAC;;;;;;AAMF,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,QAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC;AACjD,QAAI,gBAAgB,GAAG,KAAK,KAAK,OAAO,CAAC,OAAO,IAAI,KAAK,KAAK,OAAO,CAAC,MAAM,CAAC;AAC7E,QAAI,cAAc,GAAG,KAAK,KAAK,OAAO,CAAC,UAAU,IAAI,KAAK,KAAK,OAAO,CAAC,MAAM,CAAC;AAC9E,QAAI,WAAW,GAAG,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;;;;;;AAM1C,WAAO;AACH,kBAAU,EAAE,kBAAS,IAAI,EAAE;AACvB,gBAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS;gBACjD,IAAI,CAAC;;;AAGT,gBAAI,WAAW,IAAI,iBAAiB,EAAE;AAClC,oBAAI,GAAG,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,UAAU,CAAC;AAC3C,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,GAAG,IAAI,GAAG,UAAU,CAAC,CAAC;aAClE;;;AAGD,gBAAI,WAAW,IAAI,iBAAiB,EAAE;AAClC,uBAAO;aACV;;;AAGD,gBAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC7D,uBAAO;aACV;;AAED,gBAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,gBAAgB,EAAE;;;AAGhF,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;aACtD,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,cAAc,EAAE;;;AAGhG,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;aACxD,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,cAAc,EAAE;;;AAGhI,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;aACxD;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,CAAC;CACvD,CACJ,CAAC","file":"object-shorthand-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce concise object methods and properties.\n * @author Jamund Ferguson\n * @copyright 2015 Jamund Ferguson. All rights reserved.\n */\n\n\"use strict\";\n\nvar OPTIONS = {\n    always: \"always\",\n    never: \"never\",\n    methods: \"methods\",\n    properties: \"properties\"\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var APPLY = context.options[0] || OPTIONS.always;\n    var APPLY_TO_METHODS = APPLY === OPTIONS.methods || APPLY === OPTIONS.always;\n    var APPLY_TO_PROPS = APPLY === OPTIONS.properties || APPLY === OPTIONS.always;\n    var APPLY_NEVER = APPLY === OPTIONS.never;\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"Property\": function(node) {\n            var isConciseProperty = node.method || node.shorthand,\n                type;\n\n            // if we're \"never\" and concise we should warn now\n            if (APPLY_NEVER && isConciseProperty) {\n                type = node.method ? \"method\" : \"property\";\n                context.report(node, \"Expected longform \" + type + \" syntax.\");\n            }\n\n            // at this point if we're concise or if we're \"never\" we can leave\n            if (APPLY_NEVER || isConciseProperty) {\n                return;\n            }\n\n            // getters, setters and computed properties are ignored\n            if (node.kind === \"get\" || node.kind === \"set\" || node.computed) {\n                return;\n            }\n\n            if (node.value.type === \"FunctionExpression\" && !node.value.id && APPLY_TO_METHODS) {\n\n                // {x: function(){}} should be written as {x() {}}\n                context.report(node, \"Expected method shorthand.\");\n            } else if (node.value.type === \"Identifier\" && node.key.name === node.value.name && APPLY_TO_PROPS) {\n\n                // {x: x} should be written as {x}\n                context.report(node, \"Expected property shorthand.\");\n            } else if (node.value.type === \"Identifier\" && node.key.type === \"Literal\" && node.key.value === node.value.name && APPLY_TO_PROPS) {\n\n                // {\"x\": x} should be written as {x}\n                context.report(node, \"Expected property shorthand.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"methods\", \"properties\", \"never\"]\n    }\n];\n"]}