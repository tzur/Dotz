{"version":3,"sources":["consistent-this.js"],"names":[],"mappings":"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","file":"consistent-this-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to enforce consistent naming of \"this\" context variables\n * @author Raphael Pigulla\n * @copyright 2015 Timothy Jones. All rights reserved.\n * @copyright 2015 David Aurelio. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var alias = context.options[0];\n\n    /**\n     * Reports that a variable declarator or assignment expression is assigning\n     * a non-'this' value to the specified alias.\n     * @param {ASTNode} node - The assigning node.\n     * @returns {void}\n     */\n    function reportBadAssignment(node) {\n        context.report(node,\n            \"Designated alias '{{alias}}' is not assigned to 'this'.\",\n            { alias: alias });\n    }\n\n    /**\n     * Checks that an assignment to an identifier only assigns 'this' to the\n     * appropriate alias, and the alias is only assigned to 'this'.\n     * @param {ASTNode} node - The assigning node.\n     * @param {Identifier} name - The name of the variable assigned to.\n     * @param {Expression} value - The value of the assignment.\n     * @returns {void}\n     */\n    function checkAssignment(node, name, value) {\n        var isThis = value.type === \"ThisExpression\";\n\n        if (name === alias) {\n            if (!isThis || node.operator && node.operator !== \"=\") {\n                reportBadAssignment(node);\n            }\n        } else if (isThis) {\n            context.report(node,\n                \"Unexpected alias '{{name}}' for 'this'.\", { name: name });\n        }\n    }\n\n    /**\n     * Ensures that a variable declaration of the alias in a program or function\n     * is assigned to the correct value.\n     * @returns {void}\n     */\n    function ensureWasAssigned() {\n        var scope = context.getScope();\n\n        scope.variables.some(function(variable) {\n            var lookup;\n\n            if (variable.name === alias) {\n                if (variable.defs.some(function(def) {\n                    return def.node.type === \"VariableDeclarator\" &&\n                        def.node.init !== null;\n                })) {\n                    return true;\n                }\n\n                lookup = scope.type === \"global\" ? scope : variable;\n\n                // The alias has been declared and not assigned: check it was\n                // assigned later in the same scope.\n                if (!lookup.references.some(function(reference) {\n                    var write = reference.writeExpr;\n\n                    if (reference.from === scope &&\n                            write && write.type === \"ThisExpression\" &&\n                            write.parent.operator === \"=\") {\n                        return true;\n                    }\n                })) {\n                    variable.defs.map(function(def) {\n                        return def.node;\n                    }).forEach(reportBadAssignment);\n                }\n\n                return true;\n            }\n        });\n    }\n\n    return {\n        \"Program:exit\": ensureWasAssigned,\n        \"FunctionExpression:exit\": ensureWasAssigned,\n        \"FunctionDeclaration:exit\": ensureWasAssigned,\n\n        \"VariableDeclarator\": function(node) {\n            var id = node.id;\n            var isDestructuring =\n                id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\";\n\n            if (node.init !== null && !isDestructuring) {\n                checkAssignment(node, id.name, node.init);\n            }\n        },\n\n        \"AssignmentExpression\": function(node) {\n            if (node.left.type === \"Identifier\") {\n                checkAssignment(node, node.left.name, node.right);\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"string\"\n    }\n];\n"]}