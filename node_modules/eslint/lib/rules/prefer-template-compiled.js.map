{"version":3,"sources":["prefer-template.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;;;;;;AAWvC,SAAS,eAAe,CAAC,IAAI,EAAE;AAC3B,WAAO,IAAI,CAAC,IAAI,KAAK,kBAAkB,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC;CACpE;;;;;;;AAOD,SAAS,4BAA4B,CAAC,IAAI,EAAE;AACxC,WAAO,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACjC,YAAI,GAAG,IAAI,CAAC,MAAM,CAAC;KACtB;AACD,WAAO,IAAI,CAAC;CACf;;;;;;;AAOD,SAAS,mBAAmB;;;;;8BAAO;YAAN,IAAI;;;AAC7B,YAAI,eAAe,CAAC,IAAI,CAAC,EAAE;;;wBAEhB,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC;;;;iBAAwB,IAAI,CAAC,IAAI;;;SAC1E;AACD,eAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KAC1C;CAAA;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;;;;;;AAQ/B,aAAS,oBAAoB,CAAC,IAAI,EAAE;AAChC,YAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AAClE,mBAAO;SACV;;AAED,YAAI,aAAa,GAAG,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;AAG9D,YAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAC9B,mBAAO;SACV;AACD,YAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;;AAEpC,YAAI,mBAAmB,CAAC,aAAa,CAAC,EAAE;AACpC,mBAAO,CAAC,MAAM,CACV,aAAa,EACb,kCAAkC,CAAC,CAAC;SAC3C;KACJ;;AAED,WAAO;AACH,eAAO,EAAE,mBAAW;AAChB,gBAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC9B;;AAED,eAAO,EAAE,oBAAoB;AAC7B,uBAAe,EAAE,oBAAoB;KACxC,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"prefer-template-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to suggest using template literals instead of string concatenation.\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a concatenation.\n * @param {ASTNode} node - A node to check.\n * @returns {boolean} `true` if the node is a concatenation.\n */\nfunction isConcatenation(node) {\n    return node.type === \"BinaryExpression\" && node.operator === \"+\";\n}\n\n/**\n * Gets the top binary expression node for concatenation in parents of a given node.\n * @param {ASTNode} node - A node to get.\n * @returns {ASTNode} the top binary expression node in parents of a given node.\n */\nfunction getTopConcatBinaryExpression(node) {\n    while (isConcatenation(node.parent)) {\n        node = node.parent;\n    }\n    return node;\n}\n\n/**\n * Checks whether or not a given binary expression has non string literals.\n * @param {ASTNode} node - A node to check.\n * @returns {boolean} `true` if the node has non string literals.\n */\nfunction hasNonStringLiteral(node) {\n    if (isConcatenation(node)) {\n        // `left` is deeper than `right` normally.\n        return hasNonStringLiteral(node.right) || hasNonStringLiteral(node.left);\n    }\n    return !astUtils.isStringLiteral(node);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var done = Object.create(null);\n\n    /**\n     * Reports if a given node is string concatenation with non string literals.\n     *\n     * @param {ASTNode} node - A node to check.\n     * @returns {void}\n     */\n    function checkForStringConcat(node) {\n        if (!astUtils.isStringLiteral(node) || !isConcatenation(node.parent)) {\n            return;\n        }\n\n        var topBinaryExpr = getTopConcatBinaryExpression(node.parent);\n\n        // Checks whether or not this node had been checked already.\n        if (done[topBinaryExpr.range[0]]) {\n            return;\n        }\n        done[topBinaryExpr.range[0]] = true;\n\n        if (hasNonStringLiteral(topBinaryExpr)) {\n            context.report(\n                topBinaryExpr,\n                \"Unexpected string concatenation.\");\n        }\n    }\n\n    return {\n        Program: function() {\n            done = Object.create(null);\n        },\n\n        Literal: checkForStringConcat,\n        TemplateLiteral: checkForStringConcat\n    };\n};\n\nmodule.exports.schema = [];\n"]}