{"version":3,"sources":["semi-spacing.js"],"names":[],"mappings":"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","file":"semi-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Validates spacing before and after semicolon\n * @author Mathias Schreck\n * @copyright 2015 Mathias Schreck\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var config = context.options[0],\n        requireSpaceBefore = false,\n        requireSpaceAfter = true,\n        sourceCode = context.getSourceCode();\n\n    if (typeof config === \"object\") {\n        if (config.hasOwnProperty(\"before\")) {\n            requireSpaceBefore = config.before;\n        }\n        if (config.hasOwnProperty(\"after\")) {\n            requireSpaceAfter = config.after;\n        }\n    }\n\n    /**\n     * Checks if a given token has leading whitespace.\n     * @param {Object} token The token to check.\n     * @returns {boolean} True if the given token has leading space, false if not.\n     */\n    function hasLeadingSpace(token) {\n        var tokenBefore = context.getTokenBefore(token);\n        return tokenBefore && astUtils.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);\n    }\n\n    /**\n     * Checks if a given token has trailing whitespace.\n     * @param {Object} token The token to check.\n     * @returns {boolean} True if the given token has trailing space, false if not.\n     */\n    function hasTrailingSpace(token) {\n        var tokenAfter = context.getTokenAfter(token);\n        return tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter) && sourceCode.isSpaceBetweenTokens(token, tokenAfter);\n    }\n\n    /**\n     * Checks if the given token is the last token in its line.\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the token is the last in its line.\n     */\n    function isLastTokenInCurrentLine(token) {\n        var tokenAfter = context.getTokenAfter(token);\n        return !(tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter));\n    }\n\n    /**\n     * Checks if the given token is the first token in its line\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the token is the first in its line.\n     */\n    function isFirstTokenInCurrentLine(token) {\n        var tokenBefore = context.getTokenBefore(token);\n        return !(tokenBefore && astUtils.isTokenOnSameLine(token, tokenBefore));\n    }\n\n    /**\n     * Checks if the next token of a given token is a closing parenthesis.\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the next token of a given token is a closing parenthesis.\n     */\n    function isBeforeClosingParen(token) {\n        var nextToken = context.getTokenAfter(token);\n        return (\n            nextToken &&\n            nextToken.type === \"Punctuator\" &&\n            (nextToken.value === \"}\" || nextToken.value === \")\")\n        );\n    }\n\n    /**\n     * Checks if the given token is a semicolon.\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the given token is a semicolon.\n     */\n    function isSemicolon(token) {\n        return token.type === \"Punctuator\" && token.value === \";\";\n    }\n\n    /**\n     * Reports if the given token has invalid spacing.\n     * @param {Token} token The semicolon token to check.\n     * @param {ASTNode} node The corresponding node of the token.\n     * @returns {void}\n     */\n    function checkSemicolonSpacing(token, node) {\n        var location;\n\n        if (isSemicolon(token)) {\n            location = token.loc.start;\n\n            if (hasLeadingSpace(token)) {\n                if (!requireSpaceBefore) {\n                    context.report(node, location, \"Unexpected whitespace before semicolon.\");\n                }\n            } else {\n                if (requireSpaceBefore) {\n                    context.report(node, location, \"Missing whitespace before semicolon.\");\n                }\n            }\n\n            if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {\n                if (hasTrailingSpace(token)) {\n                    if (!requireSpaceAfter) {\n                        context.report(node, location, \"Unexpected whitespace after semicolon.\");\n                    }\n                } else {\n                    if (requireSpaceAfter) {\n                        context.report(node, location, \"Missing whitespace after semicolon.\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks the spacing of the semicolon with the assumption that the last token is the semicolon.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkNode(node) {\n        var token = context.getLastToken(node);\n        checkSemicolonSpacing(token, node);\n    }\n\n    return {\n        \"VariableDeclaration\": checkNode,\n        \"ExpressionStatement\": checkNode,\n        \"BreakStatement\": checkNode,\n        \"ContinueStatement\": checkNode,\n        \"DebuggerStatement\": checkNode,\n        \"ReturnStatement\": checkNode,\n        \"ThrowStatement\": checkNode,\n        \"ForStatement\": function(node) {\n            if (node.init) {\n                checkSemicolonSpacing(context.getTokenAfter(node.init), node);\n            }\n\n            if (node.test) {\n                checkSemicolonSpacing(context.getTokenAfter(node.test), node);\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"before\": {\n                \"type\": \"boolean\"\n            },\n            \"after\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}