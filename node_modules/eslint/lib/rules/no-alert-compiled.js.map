{"version":3,"sources":["no-alert.js"],"names":[],"mappings":"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","file":"no-alert-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n * @copyright 2015 Mathias Schreck\n * @copyright 2013 Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\nfunction isProhibitedIdentifier(name) {\n    return /^(alert|confirm|prompt)$/.test(name);\n}\n\n/**\n * Reports the given node and identifier name.\n * @param {RuleContext} context The ESLint rule context.\n * @param {ASTNode} node The node to report on.\n * @param {string} identifierName The name of the identifier.\n * @returns {void}\n */\nfunction report(context, node, identifierName) {\n    context.report(node, \"Unexpected {{name}}.\", { name: identifierName });\n}\n\n/**\n * Returns the property name of a MemberExpression.\n * @param {ASTNode} memberExpressionNode The MemberExpression node.\n * @returns {string|undefined} Returns the property name if available, undefined else.\n */\nfunction getPropertyName(memberExpressionNode) {\n    if (memberExpressionNode.computed) {\n        if (memberExpressionNode.property.type === \"Literal\") {\n            return memberExpressionNode.property.value;\n        }\n    } else {\n        return memberExpressionNode.property.name;\n    }\n}\n\n/**\n * Finds the escope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|undefined} Returns the found reference or undefined if none were found.\n */\nfunction findReference(scope, node) {\n    var references = scope.references.filter(function(reference) {\n        return reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1];\n    });\n\n    if (references.length === 1) {\n        return references[0];\n    }\n}\n\n/**\n * Checks if the given identifier name is shadowed in the given global scope.\n * @param {Object} globalScope The global scope.\n * @param {string} identifierName The identifier name to check\n * @returns {boolean} Whether or not the name is shadowed globally.\n */\nfunction isGloballyShadowed(globalScope, identifierName) {\n    return globalScope.variables.some(function(variable) {\n        return variable.name === identifierName && variable.defs.length > 0;\n    });\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {Object} globalScope The global scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, globalScope, node) {\n    var reference = findReference(scope, node),\n        identifierName = node.name;\n\n    if (reference) {\n        if (reference.resolved || isGloballyShadowed(globalScope, identifierName)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {Object} globalScope The global scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\nfunction isGlobalThisReferenceOrGlobalWindow(scope, globalScope, node) {\n    if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n        return true;\n    } else if (node.name === \"window\") {\n        return !isShadowed(scope, globalScope, node);\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var globalScope;\n\n    return {\n\n        \"Program\": function() {\n            globalScope = context.getScope();\n        },\n\n        \"CallExpression\": function(node) {\n            var callee = node.callee,\n                identifierName,\n                currentScope = context.getScope();\n\n            // without window.\n            if (callee.type === \"Identifier\") {\n                identifierName = callee.name;\n\n                if (!isShadowed(currentScope, globalScope, callee) && isProhibitedIdentifier(callee.name)) {\n                    report(context, node, identifierName);\n                }\n\n            } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, globalScope, callee.object)) {\n                identifierName = getPropertyName(callee);\n\n                if (isProhibitedIdentifier(identifierName)) {\n                    report(context, node, identifierName);\n                }\n            }\n\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}