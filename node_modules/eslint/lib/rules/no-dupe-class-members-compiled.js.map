{"version":3,"sources":["no-dupe-class-members.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,KAAK,GAAG,EAAE,CAAC;;;;;;;;;;;AAWf,aAAS,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC9B,YAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvC,YAAI,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;;AAErB,YAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAChB,oBAAQ,CAAC,GAAG,CAAC,GAAG;AACZ,yBAAS,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC;AAChD,0BAAQ,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC;aAChD,CAAC;SACL;;AAED,eAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,GAAG,QAAQ,GAAG,WAAW,CAAC,CAAC;KAC3D;;AAED,WAAO;;AAEH,iBAAS,EAAE,mBAAW;AAClB,iBAAK,GAAG,EAAE,CAAC;SACd;;;AAGD,mBAAW,EAAE,qBAAW;AACpB,iBAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACnC;;;AAGD,wBAAgB,EAAE,yBAAW;AACzB,iBAAK,CAAC,GAAG,EAAE,CAAC;SACf;;;AAGD,0BAAkB,EAAE,0BAAS,IAAI,EAAE;AAC/B,gBAAI,IAAI,CAAC,QAAQ,EAAE;AACf,uBAAO;aACV;;AAED,gBAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;AACzB,gBAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,UAAO,CAAC,CAAC;AACxC,gBAAI,WAAW,GAAG,KAAK,CAAC;AACxB,gBAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;AACrB,2BAAW,GAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,AAAC,CAAC;AACxC,qBAAK,CAAC,GAAG,GAAG,IAAI,CAAC;aACpB,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;AAC5B,2BAAW,GAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,AAAC,CAAC;AACxC,qBAAK,CAAC,GAAG,GAAG,IAAI,CAAC;aACpB,MAAM;AACH,2BAAW,GAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,AAAC,CAAC;AACrD,qBAAK,CAAC,IAAI,GAAG,IAAI,CAAC;aACrB;;AAED,gBAAI,WAAW,EAAE;AACb,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8BAA8B,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;aACtE;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-dupe-class-members-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var stack = [];\n\n    /**\n     * Gets state of a given member name.\n     * @param {string} name - A name of a member.\n     * @param {boolean} isStatic - A flag which specifies that is a static member.\n     * @returns {object} A state of a given member name.\n     *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n     *   - retv.get {boolean} A flag which shows the name is declared as getter.\n     *   - retv.set {boolean} A flag which shows the name is declared as setter.\n     */\n    function getState(name, isStatic) {\n        var stateMap = stack[stack.length - 1];\n        var key = \"$\" + name; // to avoid \"__proto__\".\n\n        if (!stateMap[key]) {\n            stateMap[key] = {\n                nonStatic: {init: false, get: false, set: false},\n                static: {init: false, get: false, set: false}\n            };\n        }\n\n        return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n    }\n\n    return {\n        // Initializes the stack of state of member declarations.\n        \"Program\": function() {\n            stack = [];\n        },\n\n        // Initializes state of member declarations for the class.\n        \"ClassBody\": function() {\n            stack.push(Object.create(null));\n        },\n\n        // Disposes the state for the class.\n        \"ClassBody:exit\": function() {\n            stack.pop();\n        },\n\n        // Reports the node if its name has been declared already.\n        \"MethodDefinition\": function(node) {\n            if (node.computed) {\n                return;\n            }\n\n            var name = node.key.name;\n            var state = getState(name, node.static);\n            var isDuplicate = false;\n            if (node.kind === \"get\") {\n                isDuplicate = (state.init || state.get);\n                state.get = true;\n            } else if (node.kind === \"set\") {\n                isDuplicate = (state.init || state.set);\n                state.set = true;\n            } else {\n                isDuplicate = (state.init || state.get || state.set);\n                state.init = true;\n            }\n\n            if (isDuplicate) {\n                context.report(node, \"Duplicate name \\\"{{name}}\\\".\", {name: name});\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [];\n"]}