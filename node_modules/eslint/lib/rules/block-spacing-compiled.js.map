{"version":3,"sources":["block-spacing.js"],"names":[],"mappings":"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","file":"block-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n */\n\n\"use strict\";\n\nvar util = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var always = (context.options[0] !== \"never\"),\n        message = always ? \"Requires a space\" : \"Unexpected space(s)\",\n        sourceCode = context.getSourceCode();\n\n    /**\n     * Gets the open brace token from a given node.\n     * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.\n     * @returns {Token} The token of the open brace.\n     */\n    function getOpenBrace(node) {\n        if (node.type === \"SwitchStatement\") {\n            if (node.cases.length > 0) {\n                return context.getTokenBefore(node.cases[0]);\n            }\n            return context.getLastToken(node, 1);\n        }\n        return context.getFirstToken(node);\n    }\n\n    /**\n     * Checks whether or not:\n     *   - given tokens are on same line.\n     *   - there is/isn't a space between given tokens.\n     * @param {Token} left - A token to check.\n     * @param {Token} right - The token which is next to `left`.\n     * @returns {boolean}\n     *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n     *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n     *    If given tokens are not on same line, it's always `true`.\n     */\n    function isValid(left, right) {\n        return (\n            !util.isTokenOnSameLine(left, right) ||\n            sourceCode.isSpaceBetweenTokens(left, right) === always\n        );\n    }\n\n    /**\n     * Reports invalid spacing style inside braces.\n     * @param {ASTNode} node - A BlockStatement/SwitchStatement node to get.\n     * @returns {void}\n     */\n    function checkSpacingInsideBraces(node) {\n        // Gets braces and the first/last token of content.\n        var openBrace = getOpenBrace(node);\n        var closeBrace = context.getLastToken(node);\n        var firstToken = context.getTokenAfter(openBrace);\n        var lastToken = context.getTokenBefore(closeBrace);\n\n        // Skip if the node is invalid or empty.\n        if (openBrace.type !== \"Punctuator\" ||\n            openBrace.value !== \"{\" ||\n            closeBrace.type !== \"Punctuator\" ||\n            closeBrace.value !== \"}\" ||\n            firstToken === closeBrace\n        ) {\n            return;\n        }\n\n        // Check.\n        if (!isValid(openBrace, firstToken)) {\n            context.report({\n                node: node,\n                loc: openBrace.loc.start,\n                message: message + \" after \\\"{\\\".\",\n                fix: function(fixer) {\n                    if (always) {\n                        return fixer.insertTextBefore(firstToken, \" \");\n                    }\n\n                    return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n                }\n            });\n        }\n        if (!isValid(lastToken, closeBrace)) {\n            context.report({\n                node: node,\n                loc: closeBrace.loc.start,\n                message: message + \" before \\\"}\\\".\",\n                fix: function(fixer) {\n                    if (always) {\n                        return fixer.insertTextAfter(lastToken, \" \");\n                    }\n\n                    return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n                }\n            });\n        }\n    }\n\n    return {\n        BlockStatement: checkSpacingInsideBraces,\n        SwitchStatement: checkSpacingInsideBraces\n    };\n};\n\nmodule.exports.schema = [\n    {enum: [\"always\", \"never\"]}\n];\n"]}