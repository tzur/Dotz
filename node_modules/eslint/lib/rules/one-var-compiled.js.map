{"version":3,"sources":["one-var.js"],"names":[],"mappings":"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","file":"one-var-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to control the use of single variable declarations.\n * @author Ian Christian Myers\n * @copyright 2015 Ian VanSchooten. All rights reserved.\n * @copyright 2015 Joey Baker. All rights reserved.\n * @copyright 2015 Danny Fritz. All rights reserved.\n * @copyright 2013 Ian Christian Myers. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var MODE_ALWAYS = \"always\",\n        MODE_NEVER = \"never\";\n\n    var mode = context.options[0] || MODE_ALWAYS;\n\n    var options = {\n    };\n\n    if (typeof mode === \"string\") { // simple options configuration with just a string\n        options.var = { uninitialized: mode, initialized: mode};\n        options.let = { uninitialized: mode, initialized: mode};\n        options.const = { uninitialized: mode, initialized: mode};\n    } else if (typeof mode === \"object\") { // options configuration is an object\n        if (mode.hasOwnProperty(\"var\") && typeof mode.var === \"string\") {\n            options.var = { uninitialized: mode.var, initialized: mode.var};\n        }\n        if (mode.hasOwnProperty(\"let\") && typeof mode.let === \"string\") {\n            options.let = { uninitialized: mode.let, initialized: mode.let};\n        }\n        if (mode.hasOwnProperty(\"const\") && typeof mode.const === \"string\") {\n            options.const = { uninitialized: mode.const, initialized: mode.const};\n        }\n        if (mode.hasOwnProperty(\"uninitialized\")) {\n            if (!options.var) {\n                options.var = {};\n            }\n            if (!options.let) {\n                options.let = {};\n            }\n            if (!options.const) {\n                options.const = {};\n            }\n            options.var.uninitialized = mode.uninitialized;\n            options.let.uninitialized = mode.uninitialized;\n            options.const.uninitialized = mode.uninitialized;\n        }\n        if (mode.hasOwnProperty(\"initialized\")) {\n            if (!options.var) {\n                options.var = {};\n            }\n            if (!options.let) {\n                options.let = {};\n            }\n            if (!options.const) {\n                options.const = {};\n            }\n            options.var.initialized = mode.initialized;\n            options.let.initialized = mode.initialized;\n            options.const.initialized = mode.initialized;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    var functionStack = [];\n    var blockStack = [];\n\n    /**\n     * Increments the blockStack counter.\n     * @returns {void}\n     * @private\n     */\n    function startBlock() {\n        blockStack.push({\n            let: {initialized: false, uninitialized: false},\n            const: {initialized: false, uninitialized: false}\n        });\n    }\n\n    /**\n     * Increments the functionStack counter.\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n        functionStack.push({initialized: false, uninitialized: false});\n        startBlock();\n    }\n\n    /**\n     * Decrements the blockStack counter.\n     * @returns {void}\n     * @private\n     */\n    function endBlock() {\n        blockStack.pop();\n    }\n\n    /**\n     * Decrements the functionStack counter.\n     * @returns {void}\n     * @private\n     */\n    function endFunction() {\n        functionStack.pop();\n        endBlock();\n    }\n\n    /**\n     * Records whether initialized or uninitialized variables are defined in current scope.\n     * @param {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"\n     * @param {ASTNode[]} declarations List of declarations\n     * @param {Object} currentScope The scope being investigated\n     * @returns {void}\n     * @private\n     */\n    function recordTypes(statementType, declarations, currentScope) {\n        for (var i = 0; i < declarations.length; i++) {\n            if (declarations[i].init === null) {\n                if (options[statementType] && options[statementType].uninitialized === MODE_ALWAYS) {\n                    currentScope.uninitialized = true;\n                }\n            } else {\n                if (options[statementType] && options[statementType].initialized === MODE_ALWAYS) {\n                    currentScope.initialized = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Determines the current scope (function or block)\n     * @param  {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"\n     * @returns {Object} The scope associated with statementType\n     */\n    function getCurrentScope(statementType) {\n        var currentScope;\n        if (statementType === \"var\") {\n            currentScope = functionStack[functionStack.length - 1];\n        } else if (statementType === \"let\") {\n            currentScope = blockStack[blockStack.length - 1].let;\n        } else if (statementType === \"const\") {\n            currentScope = blockStack[blockStack.length - 1].const;\n        }\n        return currentScope;\n    }\n\n    /**\n     * Counts the number of initialized and uninitialized declarations in a list of declarations\n     * @param {ASTNode[]} declarations List of declarations\n     * @returns {Object} Counts of 'uninitialized' and 'initialized' declarations\n     * @private\n     */\n    function countDeclarations(declarations) {\n        var counts = { uninitialized: 0, initialized: 0 };\n        for (var i = 0; i < declarations.length; i++) {\n            if (declarations[i].init === null) {\n                counts.uninitialized++;\n            } else {\n                counts.initialized++;\n            }\n        }\n        return counts;\n    }\n\n    /**\n     * Determines if there is more than one var statement in the current scope.\n     * @param {string} statementType node.kind, one of: \"var\", \"let\", or \"const\"\n     * @param {ASTNode[]} declarations List of declarations\n     * @returns {boolean} Returns true if it is the first var declaration, false if not.\n     * @private\n     */\n    function hasOnlyOneStatement(statementType, declarations) {\n\n        var declarationCounts = countDeclarations(declarations);\n        var currentOptions = options[statementType] || {};\n        var currentScope = getCurrentScope(statementType);\n\n        if (currentOptions.uninitialized === MODE_ALWAYS && currentOptions.initialized === MODE_ALWAYS) {\n            if (currentScope.uninitialized || currentScope.initialized) {\n                return false;\n            }\n        }\n\n        if (declarationCounts.uninitialized > 0) {\n            if (currentOptions.uninitialized === MODE_ALWAYS && currentScope.uninitialized) {\n                return false;\n            }\n        }\n        if (declarationCounts.initialized > 0) {\n            if (currentOptions.initialized === MODE_ALWAYS && currentScope.initialized) {\n                return false;\n            }\n        }\n        recordTypes(statementType, declarations, currentScope);\n        return true;\n    }\n\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"Program\": startFunction,\n        \"FunctionDeclaration\": startFunction,\n        \"FunctionExpression\": startFunction,\n        \"ArrowFunctionExpression\": startFunction,\n        \"BlockStatement\": startBlock,\n        \"ForStatement\": startBlock,\n        \"ForInStatement\": startBlock,\n        \"ForOfStatement\": startBlock,\n        \"SwitchStatement\": startBlock,\n\n        \"VariableDeclaration\": function(node) {\n            var parent = node.parent,\n                type, declarations, declarationCounts;\n\n            type = node.kind;\n            if (!options[type]) {\n                return;\n            }\n\n            declarations = node.declarations;\n            declarationCounts = countDeclarations(declarations);\n\n            // always\n            if (!hasOnlyOneStatement(type, declarations)) {\n                if (options[type].initialized === MODE_ALWAYS && options[type].uninitialized === MODE_ALWAYS) {\n                    context.report(node, \"Combine this with the previous '\" + type + \"' statement.\");\n                } else {\n                    if (options[type].initialized === MODE_ALWAYS) {\n                        context.report(node, \"Combine this with the previous '\" + type + \"' statement with initialized variables.\");\n                    }\n                    if (options[type].uninitialized === MODE_ALWAYS) {\n                        context.report(node, \"Combine this with the previous '\" + type + \"' statement with uninitialized variables.\");\n                    }\n                }\n            }\n            // never\n            if (parent.type !== \"ForStatement\" || parent.init !== node) {\n                var totalDeclarations = declarationCounts.uninitialized + declarationCounts.initialized;\n                if (totalDeclarations > 1) {\n                    // both initialized and uninitialized\n                    if (options[type].initialized === MODE_NEVER && options[type].uninitialized === MODE_NEVER) {\n                        context.report(node, \"Split '\" + type + \"' declarations into multiple statements.\");\n                    // initialized\n                    } else if (options[type].initialized === MODE_NEVER && declarationCounts.initialized > 0) {\n                        context.report(node, \"Split initialized '\" + type + \"' declarations into multiple statements.\");\n                    // uninitialized\n                    } else if (options[type].uninitialized === MODE_NEVER && declarationCounts.uninitialized > 0) {\n                        context.report(node, \"Split uninitialized '\" + type + \"' declarations into multiple statements.\");\n                    }\n                }\n            }\n        },\n\n        \"ForStatement:exit\": endBlock,\n        \"ForOfStatement:exit\": endBlock,\n        \"ForInStatement:exit\": endBlock,\n        \"SwitchStatement:exit\": endBlock,\n        \"BlockStatement:exit\": endBlock,\n        \"Program:exit\": endFunction,\n        \"FunctionDeclaration:exit\": endFunction,\n        \"FunctionExpression:exit\": endFunction,\n        \"ArrowFunctionExpression:exit\": endFunction\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"oneOf\": [\n            {\n                \"enum\": [\"always\", \"never\"]\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"var\": {\n                        \"enum\": [\"always\", \"never\"]\n                    },\n                    \"let\": {\n                        \"enum\": [\"always\", \"never\"]\n                    },\n                    \"const\": {\n                        \"enum\": [\"always\", \"never\"]\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"initialized\": {\n                        \"enum\": [\"always\", \"never\"]\n                    },\n                    \"uninitialized\": {\n                        \"enum\": [\"always\", \"never\"]\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n];\n"]}