{"version":3,"sources":["no-label-var.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;;;;;;AAa/B,aAAS,cAAc;;;kCAAoB;gBAAnB,KAAK;gBAAE,UAAU;;;AACrC,gBAAI,KAAK,GAAG,KAAK,CAAC;;AAElB,iBAAK,CAAC,SAAS,CAAC,OAAO,CAAC,UAAS,QAAQ,EAAE;AACvC,oBAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;AAC9B,yBAAK,GAAG,IAAI,CAAC;iBAChB;aACJ,CAAC,CAAC;;AAEH,iBAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,SAAS,EAAE;AACzC,oBAAI,SAAS,CAAC,UAAU,CAAC,IAAI,KAAK,UAAU,EAAE;AAC1C,yBAAK,GAAG,IAAI,CAAC;iBAChB;aACJ,CAAC,CAAC;;;;AAIH,gBAAI,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;qBACD,KAAK,CAAC,KAAK;sBAAE,UAAU;;AAjB7C,qBAAK;;aAkBR;;AAED,mBAAO,KAAK,CAAC;SAChB;KAAA;;;;;;AAMD,WAAO;;AAEH,0BAAkB,EAAE,0BAAS,IAAI,EAAE;;;AAG/B,gBAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;;;;AAI/B,gBAAI,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AACxC,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,2CAA2C,CAAC,CAAC;aACrE;SACJ;;KAEJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-label-var-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag labels that are the same as an identifier\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the identifier is present inside current scope\n     * @param {object} scope current scope\n     * @param {ASTNode} identifier To evaluate\n     * @returns {boolean} True if its present\n     * @private\n     */\n    function findIdentifier(scope, identifier) {\n        var found = false;\n\n        scope.variables.forEach(function(variable) {\n            if (variable.name === identifier) {\n                found = true;\n            }\n        });\n\n        scope.references.forEach(function(reference) {\n            if (reference.identifier.name === identifier) {\n                found = true;\n            }\n        });\n\n        // If we have not found the identifier in this scope, check the parent\n        // scope.\n        if (scope.upper && !found) {\n            return findIdentifier(scope.upper, identifier);\n        }\n\n        return found;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"LabeledStatement\": function(node) {\n\n            // Fetch the innermost scope.\n            var scope = context.getScope();\n\n            // Recursively find the identifier walking up the scope, starting\n            // with the innermost scope.\n            if (findIdentifier(scope, node.label.name)) {\n                context.report(node, \"Found identifier with same name as label.\");\n            }\n        }\n\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}