{"version":3,"sources":["no-unused-expressions.js"],"names":[],"mappings":"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","file":"no-unused-expressions-compiled.js","sourcesContent":["/**\n * @fileoverview Flag expressions in statement position that do not side effect\n * @author Michael Ficarra\n * @copyright 2013 Michael Ficarra. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var config = context.options[0] || {},\n        allowShortCircuit = config.allowShortCircuit || false,\n        allowTernary = config.allowTernary || false;\n\n    /**\n     * @param {ASTNode} node - any node\n     * @returns {boolean} whether the given node structurally represents a directive\n     */\n    function looksLikeDirective(node) {\n        return node.type === \"ExpressionStatement\" &&\n            node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n\n    /**\n     * @param {Function} predicate - ([a] -> Boolean) the function used to make the determination\n     * @param {a[]} list - the input list\n     * @returns {a[]} the leading sequence of members in the given list that pass the given predicate\n     */\n    function takeWhile(predicate, list) {\n        for (var i = 0, l = list.length; i < l; ++i) {\n            if (!predicate(list[i])) {\n                break;\n            }\n        }\n        return [].slice.call(list, 0, i);\n    }\n\n    /**\n     * @param {ASTNode} node - a Program or BlockStatement node\n     * @returns {ASTNode[]} the leading sequence of directive nodes in the given node's body\n     */\n    function directives(node) {\n        return takeWhile(looksLikeDirective, node.body);\n    }\n\n    /**\n     * @param {ASTNode} node - any node\n     * @param {ASTNode[]} ancestors - the given node's ancestors\n     * @returns {boolean} whether the given node is considered a directive in its current position\n     */\n    function isDirective(node, ancestors) {\n        var parent = ancestors[ancestors.length - 1],\n            grandparent = ancestors[ancestors.length - 2];\n        return (parent.type === \"Program\" || parent.type === \"BlockStatement\" &&\n                (/Function/.test(grandparent.type))) &&\n                directives(parent).indexOf(node) >= 0;\n    }\n\n    /**\n     * Determines whether or not a given node is a valid expression. Recurses on short circuit eval and ternary nodes if enabled by flags.\n     * @param {ASTNode} node - any node\n     * @returns {boolean} whether the given node is a valid expression\n     */\n    function isValidExpression(node) {\n        if (allowTernary) {\n            // Recursive check for ternary and logical expressions\n            if (node.type === \"ConditionalExpression\") {\n                return isValidExpression(node.consequent) && isValidExpression(node.alternate);\n            }\n        }\n        if (allowShortCircuit) {\n            if (node.type === \"LogicalExpression\") {\n                return isValidExpression(node.right);\n            }\n        }\n\n        return /^(?:Assignment|Call|New|Update|Yield)Expression$/.test(node.type) ||\n            (node.type === \"UnaryExpression\" && [\"delete\", \"void\"].indexOf(node.operator) >= 0);\n    }\n\n    return {\n        \"ExpressionStatement\": function(node) {\n            if (!isValidExpression(node.expression) && !isDirective(node, context.getAncestors())) {\n                context.report(node, \"Expected an assignment or function call and instead saw an expression.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"allowShortCircuit\": {\n                \"type\": \"boolean\"\n            },\n            \"allowTernary\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}