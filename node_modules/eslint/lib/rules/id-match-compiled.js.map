{"version":3,"sources":["id-match.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;AAM/B,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM;QACtC,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEjC,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE;QAClC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;;;AAGpC,cAAU,GAAG,CAAC,CAAC,UAAU,CAAC;;;;;;;;AAS1B,aAAS,SAAS,CAAC,IAAI,EAAE;AACrB,eAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B;;;;;;;;;AASD,aAAS,YAAY,CAAC,eAAe,EAAE,IAAI,EAAE;AACzC,eAAO,eAAe,CAAC,IAAI,KAAK,gBAAgB,IACzC,eAAe,CAAC,IAAI,KAAK,eAAe,IAC3C,SAAS,CAAC,IAAI,CAAC,CAAC;KACvB;;;;;;;;AAQD,aAAS,MAAM,CAAC,IAAI,EAAE;AAClB,eAAO,CAAC,MAAM,CAAC,IAAI,EAAE,iEAAiE,EAAE;AACpF,gBAAI,EAAE,IAAI,CAAC,IAAI;AACf,mBAAO,EAAE,OAAO;SACnB,CAAC,CAAC;KACN;;AAED,WAAO;;AAEH,oBAAY,EAAE,oBAAS,IAAI,EAAE;AACzB,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI;gBAChB,eAAe,GAAG,AAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB,GAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;AAGnG,gBAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB,EAAE;;AAEzC,oBAAI,CAAC,UAAU,EAAE;AACb,2BAAO;iBACV;;;AAGD,oBAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;AACvC,wBAAI,SAAS,CAAC,IAAI,CAAC,EAAE;AACjB,8BAAM,CAAC,IAAI,CAAC,CAAC;qBAChB;;;iBAGJ,MAAM,IAAI,eAAe,CAAC,IAAI,KAAK,sBAAsB,KACrD,eAAe,CAAC,KAAK,CAAC,IAAI,KAAK,kBAAkB,IAClD,eAAe,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB,IAChD,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAA,AAAC,EAAE;AACnD,4BAAI,SAAS,CAAC,IAAI,CAAC,EAAE;AACjB,kCAAM,CAAC,IAAI,CAAC,CAAC;yBAChB;qBACJ;;;aAGJ,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;;AAExC,wBAAI,CAAC,UAAU,EAAE;AACb,+BAAO;qBACV;;AAED,wBAAI,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AACrC,8BAAM,CAAC,IAAI,CAAC,CAAC;qBAChB;;;iBAGJ,MAAM,IAAI,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AAC5C,8BAAM,CAAC,IAAI,CAAC,CAAC;qBAChB;SACJ;;KAEJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,QAAQ;CACnB,EACD;AACI,UAAM,EAAE,QAAQ;AAChB,gBAAY,EAAE;AACV,oBAAY,EAAE;AACV,kBAAM,EAAE,SAAS;SACpB;KACJ;CACJ,CACJ,CAAC","file":"id-match-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag non-matching identifiers\n * @author Matthieu Larcher\n * @copyright 2015 Matthieu Larcher. All rights reserved.\n * See LICENSE in root directory for full license.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    var pattern = context.options[0] || \"^.+$\",\n        regexp = new RegExp(pattern);\n\n    var options = context.options[1] || {},\n        properties = options.properties;\n\n    // cast to boolean and default to false\n    properties = !!properties;\n\n\n    /**\n     * Checks if a string matches the provided pattern\n     * @param {String} name The string to check.\n     * @returns {boolean} if the string is a match\n     * @private\n     */\n    function isInvalid(name) {\n        return !regexp.test(name);\n    }\n\n    /**\n     * Verifies if we should report an error or not based on the effective\n     * parent node and the identifier name.\n     * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n     * @param {String} name The identifier name of the identifier node\n     * @returns {boolean} whether an error should be reported or not\n     */\n    function shouldReport(effectiveParent, name) {\n        return effectiveParent.type !== \"CallExpression\"\n            && effectiveParent.type !== \"NewExpression\" &&\n            isInvalid(name);\n    }\n\n    /**\n     * Reports an AST node as a rule violation.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     * @private\n     */\n    function report(node) {\n        context.report(node, \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\", {\n            name: node.name,\n            pattern: pattern\n        });\n    }\n\n    return {\n\n        \"Identifier\": function(node) {\n            var name = node.name,\n                effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;\n\n            // MemberExpressions get special rules\n            if (node.parent.type === \"MemberExpression\") {\n                // return early if properties is false\n                if (!properties) {\n                    return;\n                }\n\n                // Always check object names\n                if (node.parent.object.type === \"Identifier\" &&\n                    node.parent.object.name === node.name) {\n                    if (isInvalid(name)) {\n                        report(node);\n                    }\n\n                    // Report AssignmentExpressions only if they are the left side of the assignment\n                } else if (effectiveParent.type === \"AssignmentExpression\" &&\n                    (effectiveParent.right.type !== \"MemberExpression\" ||\n                    effectiveParent.left.type === \"MemberExpression\" &&\n                    effectiveParent.left.property.name === node.name)) {\n                    if (isInvalid(name)) {\n                        report(node);\n                    }\n                }\n\n            // Properties have their own rules\n            } else if (node.parent.type === \"Property\") {\n                // return early if properties is false\n                if (!properties) {\n                    return;\n                }\n\n                if (shouldReport(effectiveParent, name)) {\n                    report(node);\n                }\n\n            // Report anything that is a match and not a CallExpression\n            } else if (shouldReport(effectiveParent, name)) {\n                report(node);\n            }\n        }\n\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"string\"\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"properties\": {\n                \"type\": \"boolean\"\n            }\n        }\n    }\n];\n"]}