{"version":3,"sources":["brace-style.js"],"names":[],"mappings":"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","file":"brace-style-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag block statements that do not use the one true brace style\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var style = context.options[0] || \"1tbs\";\n    var params = context.options[1] || {};\n\n    var OPEN_MESSAGE = \"Opening curly brace does not appear on the same line as controlling statement.\",\n        OPEN_MESSAGE_ALLMAN = \"Opening curly brace appears on the same line as controlling statement.\",\n        BODY_MESSAGE = \"Statement inside of curly braces should be on next line.\",\n        CLOSE_MESSAGE = \"Closing curly brace does not appear on the same line as the subsequent block.\",\n        CLOSE_MESSAGE_SINGLE = \"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.\",\n        CLOSE_MESSAGE_STROUSTRUP_ALLMAN = \"Closing curly brace appears on the same line as the subsequent block.\";\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determines if a given node is a block statement.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a block statement, false if not.\n     * @private\n     */\n    function isBlock(node) {\n        return node && node.type === \"BlockStatement\";\n    }\n\n    /**\n     * Check if the token is an punctuator with a value of curly brace\n     * @param {object} token - Token to check\n     * @returns {boolean} true if its a curly punctuator\n     * @private\n     */\n    function isCurlyPunctuator(token) {\n        return token.value === \"{\" || token.value === \"}\";\n    }\n\n    /**\n     * Binds a list of properties to a function that verifies that the opening\n     * curly brace is on the same line as its controlling statement of a given\n     * node.\n     * @param {...string} The properties to check on the node.\n     * @returns {Function} A function that will perform the check on a node\n     * @private\n     */\n    function checkBlock() {\n        var blockProperties = arguments;\n\n        return function(node) {\n            [].forEach.call(blockProperties, function(blockProp) {\n                var block = node[blockProp], previousToken, curlyToken, curlyTokenEnd, curlyTokensOnSameLine;\n\n                if (!isBlock(block)) {\n                    return;\n                }\n\n                previousToken = context.getTokenBefore(block);\n                curlyToken = context.getFirstToken(block);\n                curlyTokenEnd = context.getLastToken(block);\n                curlyTokensOnSameLine = curlyToken.loc.start.line === curlyTokenEnd.loc.start.line;\n\n                if (style !== \"allman\" && previousToken.loc.start.line !== curlyToken.loc.start.line) {\n                    context.report(node, OPEN_MESSAGE);\n                } else if (style === \"allman\" && previousToken.loc.start.line === curlyToken.loc.start.line && !params.allowSingleLine) {\n                    context.report(node, OPEN_MESSAGE_ALLMAN);\n                }\n\n                if (!block.body.length || curlyTokensOnSameLine && params.allowSingleLine) {\n                    return;\n                }\n\n                if (curlyToken.loc.start.line === block.body[0].loc.start.line) {\n                    context.report(block.body[0], BODY_MESSAGE);\n                } else if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.start.line) {\n                    context.report(block.body[block.body.length - 1], CLOSE_MESSAGE_SINGLE);\n                }\n            });\n        };\n    }\n\n    /**\n     * Enforces the configured brace style on IfStatements\n     * @param {ASTNode} node An IfStatement node.\n     * @returns {void}\n     * @private\n     */\n    function checkIfStatement(node) {\n        var tokens,\n            alternateIsBlock = false,\n            alternateIsIfBlock = false;\n\n        checkBlock(\"consequent\", \"alternate\")(node);\n\n        if (node.alternate) {\n\n            alternateIsBlock = isBlock(node.alternate);\n            alternateIsIfBlock = node.alternate.type === \"IfStatement\" && isBlock(node.alternate.consequent);\n\n            if (alternateIsBlock || alternateIsIfBlock) {\n                tokens = context.getTokensBefore(node.alternate, 2);\n\n                if (style === \"1tbs\") {\n                    if (tokens[0].loc.start.line !== tokens[1].loc.start.line && isCurlyPunctuator(tokens[0]) ) {\n                        context.report(node.alternate, CLOSE_MESSAGE);\n                    }\n                } else if (tokens[0].loc.start.line === tokens[1].loc.start.line) {\n                    context.report(node.alternate, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n                }\n            }\n\n        }\n    }\n\n    /**\n     * Enforces the configured brace style on TryStatements\n     * @param {ASTNode} node A TryStatement node.\n     * @returns {void}\n     * @private\n     */\n    function checkTryStatement(node) {\n        var tokens;\n\n        checkBlock(\"block\", \"finalizer\")(node);\n\n        if (isBlock(node.finalizer)) {\n            tokens = context.getTokensBefore(node.finalizer, 2);\n            if (style === \"1tbs\") {\n                if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                    context.report(node.finalizer, CLOSE_MESSAGE);\n                }\n            } else if (tokens[0].loc.start.line === tokens[1].loc.start.line) {\n                context.report(node.finalizer, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n            }\n        }\n    }\n\n    /**\n     * Enforces the configured brace style on CatchClauses\n     * @param {ASTNode} node A CatchClause node.\n     * @returns {void}\n     * @private\n     */\n    function checkCatchClause(node) {\n        var previousToken = context.getTokenBefore(node),\n            firstToken = context.getFirstToken(node);\n\n        checkBlock(\"body\")(node);\n\n        if (isBlock(node.body)) {\n            if (style === \"1tbs\") {\n                if (previousToken.loc.start.line !== firstToken.loc.start.line) {\n                    context.report(node, CLOSE_MESSAGE);\n                }\n            } else {\n                if (previousToken.loc.start.line === firstToken.loc.start.line) {\n                    context.report(node, CLOSE_MESSAGE_STROUSTRUP_ALLMAN);\n                }\n            }\n        }\n    }\n\n    /**\n     * Enforces the configured brace style on SwitchStatements\n     * @param {ASTNode} node A SwitchStatement node.\n     * @returns {void}\n     * @private\n     */\n    function checkSwitchStatement(node) {\n        var tokens;\n        if (node.cases && node.cases.length) {\n            tokens = context.getTokensBefore(node.cases[0], 2);\n        } else {\n            tokens = context.getLastTokens(node, 3);\n        }\n\n        if (style !== \"allman\" && tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n            context.report(node, OPEN_MESSAGE);\n        } else if (style === \"allman\" && tokens[0].loc.start.line === tokens[1].loc.start.line) {\n            context.report(node, OPEN_MESSAGE_ALLMAN);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"FunctionDeclaration\": checkBlock(\"body\"),\n        \"FunctionExpression\": checkBlock(\"body\"),\n        \"ArrowFunctionExpression\": checkBlock(\"body\"),\n        \"IfStatement\": checkIfStatement,\n        \"TryStatement\": checkTryStatement,\n        \"CatchClause\": checkCatchClause,\n        \"DoWhileStatement\": checkBlock(\"body\"),\n        \"WhileStatement\": checkBlock(\"body\"),\n        \"WithStatement\": checkBlock(\"body\"),\n        \"ForStatement\": checkBlock(\"body\"),\n        \"ForInStatement\": checkBlock(\"body\"),\n        \"ForOfStatement\": checkBlock(\"body\"),\n        \"SwitchStatement\": checkSwitchStatement\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"1tbs\", \"stroustrup\", \"allman\"]\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"allowSingleLine\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}