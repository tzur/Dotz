{"version":3,"sources":["arrow-spacing.js"],"names":[],"mappings":"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","file":"arrow-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to require parens in arrow function arguments.\n * @author Jxck\n * @copyright 2015 Jxck. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    // merge rules with default\n    var rule = { before: true, after: true };\n    var option = context.options[0] || {};\n    rule.before = option.before !== false;\n    rule.after = option.after !== false;\n\n    /**\n     * Get tokens of arrow(`=>`) and before/after arrow.\n     * @param {ASTNode} node The arrow function node.\n     * @returns {Object} Tokens of arrow and before/after arrow.\n     */\n    function getTokens(node) {\n        var t = context.getFirstToken(node);\n        var before;\n        while (t.type !== \"Punctuator\" || t.value !== \"=>\") {\n            before = t;\n            t = context.getTokenAfter(t);\n        }\n        var after = context.getTokenAfter(t);\n        return { before: before, arrow: t, after: after };\n    }\n\n    /**\n     * Count spaces before/after arrow(`=>`) token.\n     * @param {Object} tokens Tokens before/after arrow.\n     * @returns {Object} count of space before/after arrow.\n     */\n    function countSpaces(tokens) {\n        var before = tokens.arrow.range[0] - tokens.before.range[1];\n        var after = tokens.after.range[0] - tokens.arrow.range[1];\n        return { before: before, after: after };\n    }\n\n    /**\n     * Determines whether space(s) before after arrow(`=>`) is satisfy rule.\n     * if before/after value is `true`, there should be space(s).\n     * if before/after value is `false`, there should be no space.\n     * @param {ASTNode} node The arrow function node.\n     * @returns {void}\n     */\n    function spaces(node) {\n        var tokens = getTokens(node);\n        var countSpace = countSpaces(tokens);\n\n        if (rule.before) {\n            // should be space(s) before arrow\n            if (countSpace.before === 0) {\n                context.report({\n                    node: tokens.before,\n                    message: \"Missing space before =>\",\n                    fix: function(fixer) {\n                        return fixer.insertTextBefore(tokens.arrow, \" \");\n                    }\n                });\n            }\n        } else {\n            // should be no space before arrow\n            if (countSpace.before > 0) {\n                context.report({\n                    node: tokens.before,\n                    message: \"Unexpected space before =>\",\n                    fix: function(fixer) {\n                        return fixer.removeRange([tokens.before.range[1], tokens.arrow.range[0]]);\n                    }\n                });\n            }\n        }\n\n        if (rule.after) {\n            // should be space(s) after arrow\n            if (countSpace.after === 0) {\n                context.report({\n                    node: tokens.after,\n                    message: \"Missing space after =>\",\n                    fix: function(fixer) {\n                        return fixer.insertTextAfter(tokens.arrow, \" \");\n                    }\n                });\n            }\n        } else {\n            // should be no space after arrow\n            if (countSpace.after > 0) {\n                context.report({\n                    node: tokens.after,\n                    message: \"Unexpected space after =>\",\n                    fix: function(fixer) {\n                        return fixer.removeRange([tokens.arrow.range[1], tokens.after.range[0]]);\n                    }\n                });\n            }\n        }\n    }\n\n    return {\n        \"ArrowFunctionExpression\": spaces\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"before\": {\n                \"type\": \"boolean\"\n            },\n            \"after\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}