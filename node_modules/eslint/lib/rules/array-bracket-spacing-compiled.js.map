{"version":3,"sources":["array-bracket-spacing.js"],"names":[],"mappings":"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","file":"array-bracket-spacing-compiled.js","sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n * @copyright 2015 Jamund Ferguson. All rights reserved.\n * @copyright 2014 Brandyn Bennett. All rights reserved.\n * @copyright 2014 Michael Ficarra. No rights reserved.\n * @copyright 2014 Vignesh Anand. All rights reserved.\n */\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var spaced = context.options[0] === \"always\",\n        sourceCode = context.getSourceCode();\n\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option - The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n    function isOptionSet(option) {\n        return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n\n    var options = {\n        spaced: spaced,\n        singleElementException: isOptionSet(\"singleValue\"),\n        objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n        arraysInArraysException: isOptionSet(\"arraysInArrays\")\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n    * Reports that there shouldn't be a space after the first token\n    * @param {ASTNode} node - The node to report in the event of an error.\n    * @param {Token} token - The token to use for the report.\n    * @returns {void}\n    */\n    function reportNoBeginningSpace(node, token) {\n        context.report({\n            node: node,\n            loc: token.loc.start,\n            message: \"There should be no space after '\" + token.value + \"'\",\n            fix: function(fixer) {\n                var nextToken = context.getSourceCode().getTokenAfter(token);\n                return fixer.removeRange([token.range[1], nextToken.range[0]]);\n            }\n        });\n    }\n\n    /**\n    * Reports that there shouldn't be a space before the last token\n    * @param {ASTNode} node - The node to report in the event of an error.\n    * @param {Token} token - The token to use for the report.\n    * @returns {void}\n    */\n    function reportNoEndingSpace(node, token) {\n        context.report({\n            node: node,\n            loc: token.loc.start,\n            message: \"There should be no space before '\" + token.value + \"'\",\n            fix: function(fixer) {\n                var previousToken = context.getSourceCode().getTokenBefore(token);\n                return fixer.removeRange([previousToken.range[1], token.range[0]]);\n            }\n        });\n    }\n\n    /**\n    * Reports that there should be a space after the first token\n    * @param {ASTNode} node - The node to report in the event of an error.\n    * @param {Token} token - The token to use for the report.\n    * @returns {void}\n    */\n    function reportRequiredBeginningSpace(node, token) {\n        context.report({\n            node: node,\n            loc: token.loc.start,\n            message: \"A space is required after '\" + token.value + \"'\",\n            fix: function(fixer) {\n                return fixer.insertTextAfter(token, \" \");\n            }\n        });\n    }\n\n    /**\n    * Reports that there should be a space before the last token\n    * @param {ASTNode} node - The node to report in the event of an error.\n    * @param {Token} token - The token to use for the report.\n    * @returns {void}\n    */\n    function reportRequiredEndingSpace(node, token) {\n        context.report({\n            node: node,\n            loc: token.loc.start,\n            message: \"A space is required before '\" + token.value + \"'\",\n            fix: function(fixer) {\n                return fixer.insertTextBefore(token, \" \");\n            }\n        });\n    }\n\n    /**\n    * Determines if a node is an object type\n    * @param {ASTNode} node - The node to check.\n    * @returns {boolean} Whether or not the node is an object type.\n    */\n    function isObjectType(node) {\n        return node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\";\n    }\n\n    /**\n    * Determines if a node is an array type\n    * @param {ASTNode} node - The node to check.\n    * @returns {boolean} Whether or not the node is an array type.\n    */\n    function isArrayType(node) {\n        return node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\";\n    }\n\n    /**\n     * Validates the spacing around array brackets\n     * @param {ASTNode} node - The node we're checking for spacing\n     * @returns {void}\n     */\n    function validateArraySpacing(node) {\n        if (options.spaced && node.elements.length === 0) {\n            return;\n        }\n\n        var first = context.getFirstToken(node),\n            second = context.getFirstToken(node, 1),\n            penultimate = context.getLastToken(node, 1),\n            last = context.getLastToken(node),\n            firstElement = node.elements[0],\n            lastElement = node.elements[node.elements.length - 1];\n\n        var openingBracketMustBeSpaced =\n            options.objectsInArraysException && isObjectType(firstElement) ||\n            options.arraysInArraysException && isArrayType(firstElement) ||\n            options.singleElementException && node.elements.length === 1\n                ? !options.spaced : options.spaced;\n\n        var closingBracketMustBeSpaced =\n            options.objectsInArraysException && isObjectType(lastElement) ||\n            options.arraysInArraysException && isArrayType(lastElement) ||\n            options.singleElementException && node.elements.length === 1\n                ? !options.spaced : options.spaced;\n\n        if (astUtils.isTokenOnSameLine(first, second)) {\n            if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n                reportRequiredBeginningSpace(node, first);\n            }\n            if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n                reportNoBeginningSpace(node, first);\n            }\n        }\n\n        if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n            if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                reportRequiredEndingSpace(node, last);\n            }\n            if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                reportNoEndingSpace(node, last);\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        ArrayPattern: validateArraySpacing,\n        ArrayExpression: validateArraySpacing\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"never\"]\n    },\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"singleValue\": {\n                \"type\": \"boolean\"\n            },\n            \"objectsInArrays\": {\n                \"type\": \"boolean\"\n            },\n            \"arraysInArrays\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}