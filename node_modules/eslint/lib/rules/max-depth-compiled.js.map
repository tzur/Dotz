{"version":3,"sources":["max-depth.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;AAM/B,QAAI,aAAa,GAAG,EAAE;QAClB,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;;;;;;AAOvC,aAAS,aAAa,GAAG;AACrB,qBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACzB;;;;;;;AAOD,aAAS,WAAW,GAAG;AACnB,qBAAa,CAAC,GAAG,EAAE,CAAC;KACvB;;;;;;;;AAQD,aAAS,SAAS,CAAC,IAAI,EAAE;AACrB,YAAI,GAAG,GAAG,EAAE,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAEpD,YAAI,GAAG,GAAG,QAAQ,EAAE;AAChB,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,2CAA2C,EACxD,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;SAC3B;KACJ;;;;;;;AAOD,aAAS,QAAQ,GAAG;AAChB,qBAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;KAC7C;;;;;;AAMD,WAAO;AACH,iBAAS,EAAE,aAAa;AACxB,6BAAqB,EAAE,aAAa;AACpC,4BAAoB,EAAE,aAAa;AACnC,iCAAyB,EAAE,aAAa;;AAExC,qBAAa,EAAE,qBAAS,IAAI,EAAE;AAC1B,gBAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;AACpC,yBAAS,CAAC,IAAI,CAAC,CAAC;aACnB;SACJ;AACD,yBAAiB,EAAE,SAAS;AAC5B,sBAAc,EAAE,SAAS;AACzB,0BAAkB,EAAE,SAAS;AAC7B,wBAAgB,EAAE,SAAS;AAC3B,uBAAe,EAAE,SAAS;AAC1B,sBAAc,EAAE,SAAS;AACzB,wBAAgB,EAAE,SAAS;AAC3B,wBAAgB,EAAE,SAAS;;AAE3B,0BAAkB,EAAE,QAAQ;AAC5B,8BAAsB,EAAE,QAAQ;AAChC,2BAAmB,EAAE,QAAQ;AAC7B,+BAAuB,EAAE,QAAQ;AACjC,6BAAqB,EAAE,QAAQ;AAC/B,4BAAoB,EAAE,QAAQ;AAC9B,2BAAmB,EAAE,QAAQ;AAC7B,6BAAqB,EAAE,QAAQ;AAC/B,6BAAqB,EAAE,QAAQ;;AAE/B,kCAA0B,EAAE,WAAW;AACvC,iCAAyB,EAAE,WAAW;AACtC,sCAA8B,EAAE,WAAW;AAC3C,sBAAc,EAAE,WAAW;KAC9B,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,SAAS;CACpB,CACJ,CAAC","file":"max-depth-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to set the maximum depth block can be nested in a function.\n * @author Ian Christian Myers\n * @copyright 2013 Ian Christian Myers. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    var functionStack = [],\n        maxDepth = context.options[0] || 4;\n\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n        functionStack.push(0);\n    }\n\n    /**\n     * When parsing is done then pop out the reference\n     * @returns {void}\n     * @private\n     */\n    function endFunction() {\n        functionStack.pop();\n    }\n\n    /**\n     * Save the block and Evaluate the node\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function pushBlock(node) {\n        var len = ++functionStack[functionStack.length - 1];\n\n        if (len > maxDepth) {\n            context.report(node, \"Blocks are nested too deeply ({{depth}}).\",\n                    { depth: len });\n        }\n    }\n\n    /**\n     * Pop the saved block\n     * @returns {void}\n     * @private\n     */\n    function popBlock() {\n        functionStack[functionStack.length - 1]--;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"Program\": startFunction,\n        \"FunctionDeclaration\": startFunction,\n        \"FunctionExpression\": startFunction,\n        \"ArrowFunctionExpression\": startFunction,\n\n        \"IfStatement\": function(node) {\n            if (node.parent.type !== \"IfStatement\") {\n                pushBlock(node);\n            }\n        },\n        \"SwitchStatement\": pushBlock,\n        \"TryStatement\": pushBlock,\n        \"DoWhileStatement\": pushBlock,\n        \"WhileStatement\": pushBlock,\n        \"WithStatement\": pushBlock,\n        \"ForStatement\": pushBlock,\n        \"ForInStatement\": pushBlock,\n        \"ForOfStatement\": pushBlock,\n\n        \"IfStatement:exit\": popBlock,\n        \"SwitchStatement:exit\": popBlock,\n        \"TryStatement:exit\": popBlock,\n        \"DoWhileStatement:exit\": popBlock,\n        \"WhileStatement:exit\": popBlock,\n        \"WithStatement:exit\": popBlock,\n        \"ForStatement:exit\": popBlock,\n        \"ForInStatement:exit\": popBlock,\n        \"ForOfStatement:exit\": popBlock,\n\n        \"FunctionDeclaration:exit\": endFunction,\n        \"FunctionExpression:exit\": endFunction,\n        \"ArrowFunctionExpression:exit\": endFunction,\n        \"Program:exit\": endFunction\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"integer\"\n    }\n];\n"]}