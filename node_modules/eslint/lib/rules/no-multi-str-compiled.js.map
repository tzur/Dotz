{"version":3,"sources":["no-multi-str.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,YAAY,CAAC,IAAI,EAAE;AACxB,eAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACzC;;;;;;AAMD,WAAO;;AAEH,iBAAS,EAAE,iBAAS,IAAI,EAAE;AACtB,gBAAI,SAAS,GAAG,IAAI,CAAC;;AAErB,gBAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACxD,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,+DAA+D,CAAC,CAAC;aACzF;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-multi-str-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag when using multiline strings\n * @author Ilya Volodin\n * @copyright 2014 Nicholas C. Zakas. All rights reserved.\n * @copyright 2013 Ilya Volodin. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Determines if a given node is part of JSX syntax.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a JSX node, false if not.\n     * @private\n     */\n    function isJSXElement(node) {\n        return node.type.indexOf(\"JSX\") === 0;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n\n        \"Literal\": function(node) {\n            var lineBreak = /\\n/;\n\n            if (lineBreak.test(node.raw) && !isJSXElement(node.parent)) {\n                context.report(node, \"Multiline support is limited to browsers supporting ES5 only.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}