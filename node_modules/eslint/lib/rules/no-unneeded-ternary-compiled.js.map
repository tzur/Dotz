{"version":3,"sources":["no-unneeded-ternary.js"],"names":[],"mappings":";;;;;;;AAOA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACvC,QAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,KAAK,KAAK,CAAC;;;;;;;;AAQ5D,aAAS,gBAAgB,CAAC,IAAI,EAAE;AAC5B,eAAO,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;KACrE;;;;;;;;AAQD,aAAS,wBAAwB,CAAC,IAAI,EAAE;AACpC,eAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,IAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,YAAY,IACrC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;KAClD;;AAED,WAAO;;AAEH,+BAAuB,EAAE,+BAAS,IAAI,EAAE;AACpC,gBAAI,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACvE,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,+DAA+D,CAAC,CAAC;aACpH,MAAM,IAAI,CAAC,iBAAiB,IAAI,wBAAwB,CAAC,IAAI,CAAC,EAAE;AAC7D,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,kEAAkE,CAAC,CAAC;aACvH;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,QAAQ;AAChB,gBAAY,EAAE;AACV,2BAAmB,EAAE;AACjB,kBAAM,EAAE,SAAS;SACpB;KACJ;AACD,0BAAsB,EAAE,KAAK;CAChC,CACJ,CAAC","file":"no-unneeded-ternary-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag no-unneeded-ternary\n * @author Gyandeep Singh\n * @copyright 2015 Gyandeep Singh. All rights reserved.\n * @copyright 2015 Michael Ficarra. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var options = context.options[0] || {};\n    var defaultAssignment = options.defaultAssignment !== false;\n\n    /**\n     * Test if the node is a boolean literal\n     * @param {ASTNode} node - The node to report.\n     * @returns {boolean} True if the its a boolean literal\n     * @private\n     */\n    function isBooleanLiteral(node) {\n        return node.type === \"Literal\" && typeof node.value === \"boolean\";\n    }\n\n    /**\n     * Test if the node matches the pattern id ? id : expression\n     * @param {ASTNode} node - The ConditionalExpression to check.\n     * @returns {boolean} True if the pattern is matched, and false otherwise\n     * @private\n     */\n    function matchesDefaultAssignment(node) {\n        return node.test.type === \"Identifier\" &&\n               node.consequent.type === \"Identifier\" &&\n               node.test.name === node.consequent.name;\n    }\n\n    return {\n\n        \"ConditionalExpression\": function(node) {\n            if (isBooleanLiteral(node.alternate) && isBooleanLiteral(node.consequent)) {\n                context.report(node, node.consequent.loc.start, \"Unnecessary use of boolean literals in conditional expression\");\n            } else if (!defaultAssignment && matchesDefaultAssignment(node)) {\n                context.report(node, node.consequent.loc.start, \"Unnecessary use of conditional expression for default assignment\");\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"defaultAssignment\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}