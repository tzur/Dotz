{"version":3,"sources":["no-array-constructor.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,KAAK,CAAC,IAAI,EAAE;AACjB,YACI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IACjC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,EAC9B;AACE,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,+CAA+C,CAAC,CAAC;SACzE;KACJ;;AAED,WAAO;AACH,wBAAgB,EAAE,KAAK;AACvB,uBAAe,EAAE,KAAK;KACzB,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-array-constructor-compiled.js","sourcesContent":["/**\n * @fileoverview Disallow construction of dense arrays using the Array constructor\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Disallow construction of dense arrays using the Array constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function check(node) {\n        if (\n            node.arguments.length !== 1 &&\n            node.callee.type === \"Identifier\" &&\n            node.callee.name === \"Array\"\n        ) {\n            context.report(node, \"The array literal notation [] is preferrable.\");\n        }\n    }\n\n    return {\n        \"CallExpression\": check,\n        \"NewExpression\": check\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}