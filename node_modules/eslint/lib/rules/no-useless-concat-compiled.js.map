{"version":3,"sources":["no-useless-concat.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;;;;;;AAWvC,SAAS,eAAe,CAAC,IAAI,EAAE;AAC3B,WAAO,IAAI,CAAC,IAAI,KAAK,kBAAkB,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC;CACpE;;;;;;;AAOD,SAAS,OAAO,CAAC,IAAI,EAAE;AACnB,QAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,WAAO,eAAe,CAAC,IAAI,CAAC,EAAE;AAC1B,YAAI,GAAG,IAAI,CAAC,KAAK,CAAC;KACrB;AACD,WAAO,IAAI,CAAC;CACf;;;;;;;AAOD,SAAS,QAAQ,CAAC,IAAI,EAAE;AACpB,QAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,WAAO,eAAe,CAAC,KAAK,CAAC,EAAE;AAC3B,aAAK,GAAG,KAAK,CAAC,IAAI,CAAC;KACtB;AACD,WAAO,KAAK,CAAC;CAChB;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,WAAO;AACH,wBAAgB,EAAE,0BAAS,IAAI,EAAE;;AAE7B,gBAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE;AACvB,uBAAO;aACV;;;AAGD,gBAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,gBAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAE3B,gBAAI,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,IAC9B,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,IAC/B,QAAQ,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,EACzC;;AAEE,oBAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAChD,uBAAO,aAAa,CAAC,KAAK,KAAK,GAAG,EAAE;AAChC,iCAAa,GAAG,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;iBACxD;;AAED,uBAAO,CAAC,MAAM,CACV,IAAI,EACJ,aAAa,CAAC,GAAG,CAAC,KAAK,EACvB,8CAA8C,CAAC,CAAC;aACvD;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-useless-concat-compiled.js","sourcesContent":["/**\n * @fileoverview disallow unncessary concatenation of template strings\n * @author Henry Zhu\n * @copyright 2015 Henry Zhu. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a concatenation.\n * @param {ASTNode} node - A node to check.\n * @returns {boolean} `true` if the node is a concatenation.\n */\nfunction isConcatenation(node) {\n    return node.type === \"BinaryExpression\" && node.operator === \"+\";\n}\n\n/**\n * Get's the right most node on the left side of a BinaryExpression with + operator.\n * @param {ASTNode} node - A BinaryExpression node to check.\n * @returns {ASTNode} node\n */\nfunction getLeft(node) {\n    var left = node.left;\n    while (isConcatenation(left)) {\n        left = left.right;\n    }\n    return left;\n}\n\n/**\n * Get's the left most node on the right side of a BinaryExpression with + operator.\n * @param {ASTNode} node - A BinaryExpression node to check.\n * @returns {ASTNode} node\n */\nfunction getRight(node) {\n    var right = node.right;\n    while (isConcatenation(right)) {\n        right = right.left;\n    }\n    return right;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    return {\n        BinaryExpression: function(node) {\n            // check if not concatenation\n            if (node.operator !== \"+\") {\n                return;\n            }\n\n            // account for the `foo + \"a\" + \"b\"` case\n            var left = getLeft(node);\n            var right = getRight(node);\n\n            if (astUtils.isStringLiteral(left) &&\n                astUtils.isStringLiteral(right) &&\n                astUtils.isTokenOnSameLine(left, right)\n            ) {\n                // move warning location to operator\n                var operatorToken = context.getTokenAfter(left);\n                while (operatorToken.value !== \"+\") {\n                    operatorToken = context.getTokenAfter(operatorToken);\n                }\n\n                context.report(\n                    node,\n                    operatorToken.loc.start,\n                    \"Unexpected string concatenation of literals.\");\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [];\n"]}