{"version":3,"sources":["quotes.js"],"names":[],"mappings":"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","file":"quotes-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to choose between single and double quote marks\n * @author Matt DuVall <http://www.mattduvall.com/>, Brandon Payton\n * @copyright 2013 Matt DuVall. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\"),\n    toSingleQuotes = require(\"to-single-quotes\"),\n    toDoubleQuotes = require(\"to-double-quotes\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar QUOTE_SETTINGS = {\n    \"double\": {\n        quote: \"\\\"\",\n        alternateQuote: \"'\",\n        description: \"doublequote\",\n        convert: function(str) {\n            return toDoubleQuotes(str);\n        }\n    },\n    \"single\": {\n        quote: \"'\",\n        alternateQuote: \"\\\"\",\n        description: \"singlequote\",\n        convert: function(str) {\n            return toSingleQuotes(str);\n        }\n    },\n    \"backtick\": {\n        quote: \"`\",\n        alternateQuote: \"\\\"\",\n        description: \"backtick\",\n        convert: function(str) {\n            return str.replace(/`/g, \"\\`\").replace(/^(?:\\\\*)[\"']|(?:\\\\*)[\"']$/g, \"`\");\n        }\n    }\n};\n\nvar AVOID_ESCAPE = \"avoid-escape\",\n    FUNCTION_TYPE = /^(?:Arrow)?Function(?:Declaration|Expression)$/;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    /**\n     * Determines if a given node is part of JSX syntax.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a JSX node, false if not.\n     * @private\n     */\n    function isJSXElement(node) {\n        return node.type.indexOf(\"JSX\") === 0;\n    }\n\n    /**\n     * Checks whether or not a given node is a directive.\n     * The directive is a `ExpressionStatement` which has only a string literal.\n     * @param {ASTNode} node - A node to check.\n     * @returns {boolean} Whether or not the node is a directive.\n     * @private\n     */\n    function isDirective(node) {\n        return (\n            node.type === \"ExpressionStatement\" &&\n            node.expression.type === \"Literal\" &&\n            typeof node.expression.value === \"string\"\n        );\n    }\n\n    /**\n     * Checks whether or not a given node is a part of directive prologues.\n     * See also: http://www.ecma-international.org/ecma-262/6.0/#sec-directive-prologues-and-the-use-strict-directive\n     * @param {ASTNode} node - A node to check.\n     * @returns {boolean} Whether or not the node is a part of directive prologues.\n     * @private\n     */\n    function isPartOfDirectivePrologue(node) {\n        var block = node.parent.parent;\n        if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !FUNCTION_TYPE.test(block.parent.type))) {\n            return false;\n        }\n\n        // Check the node is at a prologue.\n        for (var i = 0; i < block.body.length; ++i) {\n            var statement = block.body[i];\n\n            if (statement === node.parent) {\n                return true;\n            }\n            if (!isDirective(statement)) {\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether or not a given node is allowed as non backtick.\n     * @param {ASTNode} node - A node to check.\n     * @returns {boolean} Whether or not the node is allowed as non backtick.\n     * @private\n     */\n    function isAllowedAsNonBacktick(node) {\n        var parent = node.parent;\n\n        switch (parent.type) {\n            // Directive Prologues.\n            case \"ExpressionStatement\":\n                return isPartOfDirectivePrologue(node);\n\n            // LiteralPropertyName.\n            case \"Property\":\n                return parent.key === node && !parent.computed;\n\n            // ModuleSpecifier.\n            case \"ImportDeclaration\":\n            case \"ExportNamedDeclaration\":\n            case \"ExportAllDeclaration\":\n                return parent.source === node;\n\n            // Others don't allow.\n            default:\n                return false;\n        }\n    }\n\n    return {\n\n        \"Literal\": function(node) {\n            var val = node.value,\n                rawVal = node.raw,\n                quoteOption = context.options[0],\n                settings = QUOTE_SETTINGS[quoteOption || \"double\"],\n                avoidEscape = context.options[1] === AVOID_ESCAPE,\n                isValid;\n\n            if (settings && typeof val === \"string\") {\n                isValid = (quoteOption === \"backtick\" && isAllowedAsNonBacktick(node)) || isJSXElement(node.parent) || astUtils.isSurroundedBy(rawVal, settings.quote);\n\n                if (!isValid && avoidEscape) {\n                    isValid = astUtils.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.indexOf(settings.quote) >= 0;\n                }\n\n                if (!isValid) {\n                    context.report({\n                        node: node,\n                        message: \"Strings must use \" + settings.description + \".\",\n                        fix: function(fixer) {\n                            return fixer.replaceText(node, settings.convert(node.raw));\n                        }\n                    });\n                }\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"single\", \"double\", \"backtick\"]\n    },\n    {\n        \"enum\": [\"avoid-escape\"]\n    }\n];\n"]}