{"version":3,"sources":["valid-jsdoc.js"],"names":[],"mappings":"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","file":"valid-jsdoc-compiled.js","sourcesContent":["/**\n * @fileoverview Validates JSDoc comments are syntactically correct\n * @author Nicholas C. Zakas\n * @copyright 2014 Nicholas C. Zakas. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar doctrine = require(\"doctrine\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var options = context.options[0] || {},\n        prefer = options.prefer || {},\n        sourceCode = context.getSourceCode(),\n\n        // these both default to true, so you have to explicitly make them false\n        requireReturn = options.requireReturn !== false,\n        requireParamDescription = options.requireParamDescription !== false,\n        requireReturnDescription = options.requireReturnDescription !== false;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // Using a stack to store if a function returns or not (handling nested functions)\n    var fns = [];\n\n    /**\n     * When parsing a new function, store it in our function stack.\n     * @param {ASTNode} node A function node to check.\n     * @returns {void}\n     * @private\n     */\n    function startFunction(node) {\n        fns.push({\n            returnPresent: (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\")\n        });\n    }\n\n    /**\n     * Indicate that return has been found in the current function.\n     * @param {ASTNode} node The return node.\n     * @returns {void}\n     * @private\n     */\n    function addReturn(node) {\n        var functionState = fns[fns.length - 1];\n\n        if (functionState && node.argument !== null) {\n            functionState.returnPresent = true;\n        }\n    }\n\n    /**\n     * Check if return tag type is void or undefined\n     * @param {Object} tag JSDoc tag\n     * @returns {boolean} True if its of type void or undefined\n     * @private\n     */\n    function isValidReturnType(tag) {\n        return tag.type.name === \"void\" || tag.type.type === \"UndefinedLiteral\";\n    }\n\n    /**\n     * Validate the JSDoc node and output warnings if anything is wrong.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkJSDoc(node) {\n        var jsdocNode = sourceCode.getJSDocComment(node),\n            functionData = fns.pop(),\n            hasReturns = false,\n            hasConstructor = false,\n            isOverride = false,\n            params = Object.create(null),\n            jsdoc;\n\n        // make sure only to validate JSDoc comments\n        if (jsdocNode) {\n\n            try {\n                jsdoc = doctrine.parse(jsdocNode.value, {\n                    strict: true,\n                    unwrap: true,\n                    sloppy: true\n                });\n            } catch (ex) {\n\n                if (/braces/i.test(ex.message)) {\n                    context.report(jsdocNode, \"JSDoc type missing brace.\");\n                } else {\n                    context.report(jsdocNode, \"JSDoc syntax error.\");\n                }\n\n                return;\n            }\n\n            jsdoc.tags.forEach(function(tag) {\n\n                switch (tag.title) {\n\n                    case \"param\":\n                    case \"arg\":\n                    case \"argument\":\n                        if (!tag.type) {\n                            context.report(jsdocNode, \"Missing JSDoc parameter type for '{{name}}'.\", { name: tag.name });\n                        }\n\n                        if (!tag.description && requireParamDescription) {\n                            context.report(jsdocNode, \"Missing JSDoc parameter description for '{{name}}'.\", { name: tag.name });\n                        }\n\n                        if (params[tag.name]) {\n                            context.report(jsdocNode, \"Duplicate JSDoc parameter '{{name}}'.\", { name: tag.name });\n                        } else if (tag.name.indexOf(\".\") === -1) {\n                            params[tag.name] = 1;\n                        }\n                        break;\n\n                    case \"return\":\n                    case \"returns\":\n                        hasReturns = true;\n\n                        if (!requireReturn && !functionData.returnPresent && tag.type.name !== \"void\" && tag.type.name !== \"undefined\") {\n                            context.report(jsdocNode, \"Unexpected @\" + tag.title + \" tag; function has no return statement.\");\n                        } else {\n                            if (!tag.type) {\n                                context.report(jsdocNode, \"Missing JSDoc return type.\");\n                            }\n\n                            if (!isValidReturnType(tag) && !tag.description && requireReturnDescription) {\n                                context.report(jsdocNode, \"Missing JSDoc return description.\");\n                            }\n                        }\n\n                        break;\n\n                    case \"constructor\":\n                    case \"class\":\n                        hasConstructor = true;\n                        break;\n\n                    case \"override\":\n                    case \"inheritdoc\":\n                        isOverride = true;\n                        break;\n\n                    // no default\n                }\n\n                // check tag preferences\n                if (prefer.hasOwnProperty(tag.title) && tag.title !== prefer[tag.title]) {\n                    context.report(jsdocNode, \"Use @{{name}} instead.\", { name: prefer[tag.title] });\n                }\n\n            });\n\n            // check for functions missing @returns\n            if (!isOverride && !hasReturns && !hasConstructor && node.parent.kind !== \"get\") {\n                if (requireReturn || functionData.returnPresent) {\n                    context.report(jsdocNode, \"Missing JSDoc @\" + (prefer.returns || \"returns\") + \" for function.\");\n                }\n            }\n\n            // check the parameters\n            var jsdocParams = Object.keys(params);\n\n            node.params.forEach(function(param, i) {\n                var name = param.name;\n\n                // TODO(nzakas): Figure out logical things to do with destructured, default, rest params\n                if (param.type === \"Identifier\") {\n                    if (jsdocParams[i] && (name !== jsdocParams[i])) {\n                        context.report(jsdocNode, \"Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.\", {\n                            name: name,\n                            jsdocName: jsdocParams[i]\n                        });\n                    } else if (!params[name] && !isOverride) {\n                        context.report(jsdocNode, \"Missing JSDoc for parameter '{{name}}'.\", {\n                            name: name\n                        });\n                    }\n                }\n            });\n\n            if (options.matchDescription) {\n                var regex = new RegExp(options.matchDescription);\n\n                if (!regex.test(jsdoc.description)) {\n                    context.report(jsdocNode, \"JSDoc description does not satisfy the regex pattern.\");\n                }\n            }\n\n        }\n\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"ArrowFunctionExpression\": startFunction,\n        \"FunctionExpression\": startFunction,\n        \"FunctionDeclaration\": startFunction,\n        \"ArrowFunctionExpression:exit\": checkJSDoc,\n        \"FunctionExpression:exit\": checkJSDoc,\n        \"FunctionDeclaration:exit\": checkJSDoc,\n        \"ReturnStatement\": addReturn\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"prefer\": {\n                \"type\": \"object\",\n                \"additionalProperties\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"requireReturn\": {\n                \"type\": \"boolean\"\n            },\n            \"requireParamDescription\": {\n                \"type\": \"boolean\"\n            },\n            \"requireReturnDescription\": {\n                \"type\": \"boolean\"\n            },\n            \"matchDescription\": {\n                \"type\": \"string\"\n            }\n        },\n        \"additionalProperties\": false\n    }\n];\n"]}