{"version":3,"sources":["curly.js"],"names":[],"mappings":"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","file":"curly-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag statements without curly braces\n * @author Nicholas C. Zakas\n * @copyright 2015 Ivan Nikulin. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var multiOnly = (context.options[0] === \"multi\");\n    var multiLine = (context.options[0] === \"multi-line\");\n    var multiOrNest = (context.options[0] === \"multi-or-nest\");\n    var consistent = (context.options[1] === \"consistent\");\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determines if a given node is a one-liner that's on the same line as it's preceding code.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a one-liner that's on the same line as it's preceding code.\n     * @private\n     */\n    function isCollapsedOneLiner(node) {\n        var before = context.getTokenBefore(node),\n            last = context.getLastToken(node);\n        return before.loc.start.line === last.loc.end.line;\n    }\n\n    /**\n     * Determines if a given node is a one-liner.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a one-liner.\n     * @private\n     */\n    function isOneLiner(node) {\n        var first = context.getFirstToken(node),\n            last = context.getLastToken(node);\n\n        return first.loc.start.line === last.loc.end.line;\n    }\n\n    /**\n     * Checks a given IfStatement node requires braces of the consequent chunk.\n     * This returns `true` when below:\n     *\n     * 1. The given node has the `alternate` node.\n     * 2. There is a `IfStatement` which doesn't have `alternate` node in the\n     *    trailing statement chain of the `consequent` node.\n     *\n     * @param {ASTNode} node - A IfStatement node to check.\n     * @returns {boolean} `true` if the node requires braces of the consequent chunk.\n     */\n    function requiresBraceOfConsequent(node) {\n        if (node.alternate && node.consequent.type === \"BlockStatement\") {\n            if (node.consequent.body.length >= 2) {\n                return true;\n            }\n\n            node = node.consequent.body[0];\n            while (node) {\n                if (node.type === \"IfStatement\" && !node.alternate) {\n                    return true;\n                }\n                node = astUtils.getTrailingStatement(node);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Reports \"Expected { after ...\" error\n     * @param {ASTNode} node The node to report.\n     * @param {string} name The name to report.\n     * @param {string} suffix Additional string to add to the end of a report.\n     * @returns {void}\n     * @private\n     */\n    function reportExpectedBraceError(node, name, suffix) {\n        context.report(node, \"Expected { after '{{name}}'{{suffix}}.\",\n            {\n                name: name,\n                suffix: (suffix ? \" \" + suffix : \"\")\n            });\n    }\n\n    /**\n     * Reports \"Unnecessary { after ...\" error\n     * @param {ASTNode} node The node to report.\n     * @param {string} name The name to report.\n     * @param {string} suffix Additional string to add to the end of a report.\n     * @returns {void}\n     * @private\n     */\n    function reportUnnecessaryBraceError(node, name, suffix) {\n        context.report(node, \"Unnecessary { after '{{name}}'{{suffix}}.\",\n            {\n                name: name,\n                suffix: (suffix ? \" \" + suffix : \"\")\n            }\n        );\n    }\n\n    /**\n     * Prepares to check the body of a node to see if it's a block statement.\n     * @param {ASTNode} node The node to report if there's a problem.\n     * @param {ASTNode} body The body node to check for blocks.\n     * @param {string} name The name to report if there's a problem.\n     * @param {string} suffix Additional string to add to the end of a report.\n     * @returns {object} a prepared check object, with \"actual\", \"expected\", \"check\" properties.\n     *   \"actual\" will be `true` or `false` whether the body is already a block statement.\n     *   \"expected\" will be `true` or `false` if the body should be a block statement or not, or\n     *   `null` if it doesn't matter, depending on the rule options. It can be modified to change\n     *   the final behavior of \"check\".\n     *   \"check\" will be a function reporting appropriate problems depending on the other\n     *   properties.\n     */\n    function prepareCheck(node, body, name, suffix) {\n        var hasBlock = (body.type === \"BlockStatement\");\n        var expected = null;\n\n        if (node.type === \"IfStatement\" && node.consequent === body && requiresBraceOfConsequent(node)) {\n            expected = true;\n        } else if (multiOnly) {\n            if (hasBlock && body.body.length === 1) {\n                expected = false;\n            }\n        } else if (multiLine) {\n            if (!isCollapsedOneLiner(body)) {\n                expected = true;\n            }\n        } else if (multiOrNest) {\n            if (hasBlock && body.body.length === 1 && isOneLiner(body.body[0])) {\n                expected = false;\n            } else if (!isOneLiner(body)) {\n                expected = true;\n            }\n        } else {\n            expected = true;\n        }\n\n        return {\n            actual: hasBlock,\n            expected: expected,\n            check: function() {\n                if (this.expected !== null && this.expected !== this.actual) {\n                    if (this.expected) {\n                        reportExpectedBraceError(node, name, suffix);\n                    } else {\n                        reportUnnecessaryBraceError(node, name, suffix);\n                    }\n                }\n            }\n        };\n    }\n\n    /**\n     * Prepares to check the bodies of a \"if\", \"else if\" and \"else\" chain.\n     * @param {ASTNode} node The first IfStatement node of the chain.\n     * @returns {object[]} prepared checks for each body of the chain. See `prepareCheck` for more\n     *   information.\n     */\n    function prepareIfChecks(node) {\n        var preparedChecks = [];\n        do {\n            preparedChecks.push(prepareCheck(node, node.consequent, \"if\", \"condition\"));\n            if (node.alternate && node.alternate.type !== \"IfStatement\") {\n                preparedChecks.push(prepareCheck(node, node.alternate, \"else\"));\n                break;\n            }\n            node = node.alternate;\n        } while (node);\n\n        if (consistent) {\n            // If any node should have or already have braces, make sure they all have braces.\n            // If all nodes shouldn't have braces, make sure they don't.\n            var expected = preparedChecks.some(function(preparedCheck) {\n                if (preparedCheck.expected !== null) {\n                    return preparedCheck.expected;\n                }\n                return preparedCheck.actual;\n            });\n\n            preparedChecks.forEach(function(preparedCheck) {\n                preparedCheck.expected = expected;\n            });\n        }\n\n        return preparedChecks;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"IfStatement\": function(node) {\n            if (node.parent.type !== \"IfStatement\") {\n                prepareIfChecks(node).forEach(function(preparedCheck) {\n                    preparedCheck.check();\n                });\n            }\n        },\n\n        \"WhileStatement\": function(node) {\n            prepareCheck(node, node.body, \"while\", \"condition\").check();\n        },\n\n        \"DoWhileStatement\": function(node) {\n            prepareCheck(node, node.body, \"do\").check();\n        },\n\n        \"ForStatement\": function(node) {\n            prepareCheck(node, node.body, \"for\", \"condition\").check();\n        }\n    };\n\n};\n\nmodule.exports.schema = {\n    \"anyOf\": [\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"all\"]\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 2\n        },\n        {\n            \"type\": \"array\",\n            \"items\": [\n                {\n                    \"enum\": [0, 1, 2]\n                },\n                {\n                    \"enum\": [\"multi\", \"multi-line\", \"multi-or-nest\"]\n                },\n                {\n                    \"enum\": [\"consistent\"]\n                }\n            ],\n            \"minItems\": 1,\n            \"maxItems\": 3\n        }\n    ]\n};\n"]}