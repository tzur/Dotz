{"version":3,"sources":["space-before-blocks.js"],"names":[],"mappings":"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","file":"space-before-blocks-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to ensure whitespace before blocks.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n * @copyright 2014 Mathias Schreck. All rights reserved.\n */\n\n\"use strict\";\n\nvar astUtils = require(\"../ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var config = context.options[0],\n        sourceCode = context.getSourceCode(),\n        checkFunctions = true,\n        checkKeywords = true;\n\n    if (typeof config === \"object\") {\n        checkFunctions = config.functions !== \"never\";\n        checkKeywords = config.keywords !== \"never\";\n    } else if (config === \"never\") {\n        checkFunctions = false;\n        checkKeywords = false;\n    }\n\n    /**\n     * Checks whether or not a given token is an arrow operator (=>).\n     *\n     * @param {Token} token - A token to check.\n     * @returns {boolean} `true` if the token is an arrow operator.\n     */\n    function isArrow(token) {\n        return token.type === \"Punctuator\" && token.value === \"=>\";\n    }\n\n    /**\n     * Checks the given BlockStatement node has a preceding space if it doesnâ€™t start on a new line.\n     * @param {ASTNode|Token} node The AST node of a BlockStatement.\n     * @returns {void} undefined.\n     */\n    function checkPrecedingSpace(node) {\n        var precedingToken = context.getTokenBefore(node),\n            hasSpace,\n            parent,\n            requireSpace;\n\n        if (precedingToken && !isArrow(precedingToken) && astUtils.isTokenOnSameLine(precedingToken, node)) {\n            hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n            parent = context.getAncestors().pop();\n            if (parent.type === \"FunctionExpression\" || parent.type === \"FunctionDeclaration\") {\n                requireSpace = checkFunctions;\n            } else {\n                requireSpace = checkKeywords;\n            }\n\n            if (requireSpace) {\n                if (!hasSpace) {\n                    context.report({\n                        node: node,\n                        message: \"Missing space before opening brace.\",\n                        fix: function(fixer) {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                    });\n                }\n            } else {\n                if (hasSpace) {\n                    context.report({\n                        node: node,\n                        message: \"Unexpected space before opening brace.\",\n                        fix: function(fixer) {\n                            return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the CaseBlock of an given SwitchStatement node has a preceding space.\n     * @param {ASTNode} node The node of a SwitchStatement.\n     * @returns {void} undefined.\n     */\n    function checkSpaceBeforeCaseBlock(node) {\n        var cases = node.cases,\n            firstCase,\n            openingBrace;\n\n        if (cases.length > 0) {\n            firstCase = cases[0];\n            openingBrace = context.getTokenBefore(firstCase);\n        } else {\n            openingBrace = context.getLastToken(node, 1);\n        }\n\n        checkPrecedingSpace(openingBrace);\n    }\n\n    return {\n        \"BlockStatement\": checkPrecedingSpace,\n        \"ClassBody\": checkPrecedingSpace,\n        \"SwitchStatement\": checkSpaceBeforeCaseBlock\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"oneOf\": [\n            {\n                \"enum\": [\"always\", \"never\"]\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"keywords\": {\n                        \"enum\": [\"always\", \"never\"]\n                    },\n                    \"functions\": {\n                        \"enum\": [\"always\", \"never\"]\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n];\n"]}