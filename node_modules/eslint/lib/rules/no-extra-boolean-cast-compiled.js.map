{"version":3,"sources":["no-extra-boolean-cast.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;AAE/B,WAAO;AACH,yBAAiB,EAAE,yBAAS,IAAI,EAAE;AAC9B,gBAAI,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE;gBAClC,MAAM,GAAG,SAAS,CAAC,GAAG,EAAE;gBACxB,WAAW,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;;;AAGlC,gBAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,IACjB,MAAM,CAAC,IAAI,KAAK,iBAAiB,IACjC,MAAM,CAAC,QAAQ,KAAK,GAAG,EAAE;AAC7B,uBAAO;aACV;;;AAGD,gBAAI,WAAW,CAAC,IAAI,KAAK,aAAa,EAAE;AACpC,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,yDAAyD,CAAC,CAAC;;;aAGnF,MAAM,IAAI,WAAW,CAAC,IAAI,KAAK,kBAAkB,EAAE;AAChD,2BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,yDAAyD,CAAC,CAAC;;;iBAGnF,MAAM,IAAI,WAAW,CAAC,IAAI,KAAK,gBAAgB,EAAE;AAC9C,+BAAO,CAAC,MAAM,CAAC,IAAI,EAAE,sDAAsD,CAAC,CAAC;;;qBAGhF,MAAM,IAAK,WAAW,CAAC,IAAI,KAAK,uBAAuB,IAChD,MAAM,KAAK,WAAW,CAAC,IAAI,EAAG;AAClC,mCAAO,CAAC,MAAM,CAAC,IAAI,EAAE,mDAAmD,CAAC,CAAC;;;yBAG7E,MAAM,IAAK,WAAW,CAAC,IAAI,KAAK,cAAc,IACvC,MAAM,KAAK,WAAW,CAAC,IAAI,EAAG;AAClC,uCAAO,CAAC,MAAM,CAAC,IAAI,EAAE,oDAAoD,CAAC,CAAC;;;6BAG9E,MAAM,IAAK,WAAW,CAAC,IAAI,KAAK,iBAAiB,IAC1C,WAAW,CAAC,QAAQ,KAAK,GAAG,EAAG;AACnC,2CAAO,CAAC,MAAM,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;;;iCAGxD,MAAM,IAAK,WAAW,CAAC,IAAI,KAAK,gBAAgB,IACzC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IACxC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAG;AAC5C,+CAAO,CAAC,MAAM,CAAC,IAAI,EAAE,iDAAiD,CAAC,CAAC;;;qCAG3E,MAAM,IAAK,WAAW,CAAC,IAAI,KAAK,eAAe,IACxC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IACxC,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAG;AAC5C,mDAAO,CAAC,MAAM,CAAC,IAAI,EAAE,wDAAwD,CAAC,CAAC;yCAClF;SACJ;KACJ,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-extra-boolean-cast-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag unnecessary double negation in Boolean contexts\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    return {\n        \"UnaryExpression\": function(node) {\n            var ancestors = context.getAncestors(),\n                parent = ancestors.pop(),\n                grandparent = ancestors.pop();\n\n            // Exit early if it's guaranteed not to match\n            if (node.operator !== \"!\" ||\n                    parent.type !== \"UnaryExpression\" ||\n                    parent.operator !== \"!\") {\n                return;\n            }\n\n            // if (<bool>) ...\n            if (grandparent.type === \"IfStatement\") {\n                context.report(node, \"Redundant double negation in an if statement condition.\");\n\n            // do ... while (<bool>)\n            } else if (grandparent.type === \"DoWhileStatement\") {\n                context.report(node, \"Redundant double negation in a do while loop condition.\");\n\n            // while (<bool>) ...\n            } else if (grandparent.type === \"WhileStatement\") {\n                context.report(node, \"Redundant double negation in a while loop condition.\");\n\n            // <bool> ? ... : ...\n            } else if ((grandparent.type === \"ConditionalExpression\" &&\n                    parent === grandparent.test)) {\n                context.report(node, \"Redundant double negation in a ternary condition.\");\n\n            // for (...; <bool>; ...) ...\n            } else if ((grandparent.type === \"ForStatement\" &&\n                    parent === grandparent.test)) {\n                context.report(node, \"Redundant double negation in a for loop condition.\");\n\n            // !<bool>\n            } else if ((grandparent.type === \"UnaryExpression\" &&\n                    grandparent.operator === \"!\")) {\n                context.report(node, \"Redundant multiple negation.\");\n\n            // Boolean(<bool>)\n            } else if ((grandparent.type === \"CallExpression\" &&\n                    grandparent.callee.type === \"Identifier\" &&\n                    grandparent.callee.name === \"Boolean\")) {\n                context.report(node, \"Redundant double negation in call to Boolean().\");\n\n            // new Boolean(<bool>)\n            } else if ((grandparent.type === \"NewExpression\" &&\n                    grandparent.callee.type === \"Identifier\" &&\n                    grandparent.callee.name === \"Boolean\")) {\n                context.report(node, \"Redundant double negation in Boolean constructor call.\");\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [];\n"]}