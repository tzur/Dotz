{"version":3,"sources":["arrow-parens.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAC/B,QAAI,OAAO,GAAG,sDAAsD,CAAC;AACrE,QAAI,eAAe,GAAG,wDAAwD,CAAC;AAC/E,QAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC;;;;;;;AAOlD,aAAS,MAAM,CAAC,IAAI,EAAE;AAClB,YAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;;;AAGxC,YAAI,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,EAAE;AAC9E,gBAAI,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,EAAE;AACpD,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;aACzC;AACD,mBAAO;SACV;;AAED,YAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE;AAC7B,gBAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;;;AAGzC,gBAAI,KAAK,CAAC,KAAK,KAAK,GAAG,EAAE;AACrB,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aACjC;SACJ;KACJ;;AAED,WAAO;AACH,iCAAyB,EAAE,MAAM;KACpC,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;CAClC,CACJ,CAAC","file":"arrow-parens-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to require parens in arrow function arguments.\n * @author Jxck\n * @copyright 2015 Jxck. All rights reserved.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n    var message = \"Expected parentheses around arrow function argument.\";\n    var asNeededMessage = \"Unexpected parentheses around single function argument\";\n    var asNeeded = context.options[0] === \"as-needed\";\n\n    /**\n     * Determines whether a arrow function argument end with `)`\n     * @param {ASTNode} node The arrow function node.\n     * @returns {void}\n     */\n    function parens(node) {\n        var token = context.getFirstToken(node);\n\n        // as-needed: x => x\n        if (asNeeded && node.params.length === 1 && node.params[0].type === \"Identifier\") {\n            if (token.type === \"Punctuator\" && token.value === \"(\") {\n                context.report(node, asNeededMessage);\n            }\n            return;\n        }\n\n        if (token.type === \"Identifier\") {\n            var after = context.getTokenAfter(token);\n\n            // (x) => x\n            if (after.value !== \")\") {\n                context.report(node, message);\n            }\n        }\n    }\n\n    return {\n        \"ArrowFunctionExpression\": parens\n    };\n};\n\nmodule.exports.schema = [\n    {\n        \"enum\": [\"always\", \"as-needed\"]\n    }\n];\n"]}