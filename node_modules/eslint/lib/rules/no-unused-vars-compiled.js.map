{"version":3,"sources":["no-unused-vars.js"],"names":[],"mappings":"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","file":"no-unused-vars-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to flag declared but unused variables\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar escape = require(\"escape-string-regexp\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    var MESSAGE = \"\\\"{{name}}\\\" is defined but never used\";\n\n    var config = {\n        vars: \"all\",\n        args: \"after-used\"\n    };\n\n    var firstOption = context.options[0];\n\n    if (firstOption) {\n        if (typeof firstOption === \"string\") {\n            config.vars = firstOption;\n        } else {\n            config.vars = firstOption.vars || config.vars;\n            config.args = firstOption.args || config.args;\n\n            if (firstOption.varsIgnorePattern) {\n                config.varsIgnorePattern = new RegExp(firstOption.varsIgnorePattern);\n            }\n\n            if (firstOption.argsIgnorePattern) {\n                config.argsIgnorePattern = new RegExp(firstOption.argsIgnorePattern);\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determines if a given variable is being exported from a module.\n     * @param {Variable} variable - EScope variable object.\n     * @returns {boolean} True if the variable is exported, false if not.\n     * @private\n     */\n    function isExported(variable) {\n\n        var definition = variable.defs[0];\n\n        if (definition) {\n\n            var node = definition.node;\n            if (node.type === \"VariableDeclarator\") {\n                node = node.parent;\n            } else if (definition.type === \"Parameter\") {\n                return false;\n            }\n\n            return node.parent.type.indexOf(\"Export\") === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Determines if a reference is a read operation.\n     * @param {Reference} ref - An escope Reference\n     * @returns {Boolean} whether the given reference represents a read operation\n     * @private\n     */\n    function isReadRef(ref) {\n        return ref.isRead();\n    }\n\n    /**\n     * Determine if an identifier is referencing an enclosing function name.\n     * @param {Reference} ref - The reference to check.\n     * @param {ASTNode[]} nodes - The candidate function nodes.\n     * @returns {boolean} True if it's a self-reference, false if not.\n     * @private\n     */\n    function isSelfReference(ref, nodes) {\n        var scope = ref.from;\n\n        while (scope) {\n            if (nodes.indexOf(scope.block) >= 0) {\n                return true;\n            }\n\n            scope = scope.upper;\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines if the variable is used.\n     * @param {Variable} variable - The variable to check.\n     * @param {Reference[]} references - The variable references to check.\n     * @returns {boolean} True if the variable is used\n     */\n    function isUsedVariable(variable, references) {\n        var functionNodes = variable.defs.filter(function(def) {\n                return def.type === \"FunctionName\";\n            }).map(function(def) {\n                return def.node;\n            }),\n            isFunctionDefinition = functionNodes.length > 0;\n\n        return references.some(function(ref) {\n            return isReadRef(ref) && !(isFunctionDefinition && isSelfReference(ref, functionNodes));\n        });\n    }\n\n    /**\n     * Gets unresolved references.\n     * They contains var's, function's, and explicit global variable's.\n     * If `config.vars` is not \"all\", returns empty map.\n     * @param {Scope} scope - the global scope.\n     * @returns {object} Unresolved references. Keys of the object is its variable name. Values of the object is an array of its references.\n     * @private\n     */\n    function collectUnresolvedReferences(scope) {\n        var unresolvedRefs = Object.create(null);\n\n        if (config.vars === \"all\") {\n            for (var i = 0, l = scope.through.length; i < l; ++i) {\n                var ref = scope.through[i];\n                var name = ref.identifier.name;\n\n                if (isReadRef(ref)) {\n                    if (!unresolvedRefs[name]) {\n                        unresolvedRefs[name] = [];\n                    }\n                    unresolvedRefs[name].push(ref);\n                }\n            }\n        }\n\n        return unresolvedRefs;\n    }\n\n    /**\n     * Gets an array of variables without read references.\n     * @param {Scope} scope - an escope Scope object.\n     * @param {object} unresolvedRefs - a map of each variable name and its references.\n     * @param {Variable[]} unusedVars - an array that saving result.\n     * @returns {Variable[]} unused variables of the scope and descendant scopes.\n     * @private\n     */\n    function collectUnusedVariables(scope, unresolvedRefs, unusedVars) {\n        var variables = scope.variables;\n        var childScopes = scope.childScopes;\n        var i, l;\n\n        if (scope.type !== \"TDZ\" && (scope.type !== \"global\" || config.vars === \"all\")) {\n            for (i = 0, l = variables.length; i < l; ++i) {\n                var variable = variables[i];\n\n                // skip a variable of class itself name in the class scope\n                if (scope.type === \"class\" && scope.block.id === variable.identifiers[0]) {\n                    continue;\n                }\n                // skip function expression names and variables marked with markVariableAsUsed()\n                if (scope.functionExpressionScope || variable.eslintUsed) {\n                    continue;\n                }\n                // skip implicit \"arguments\" variable\n                if (scope.type === \"function\" && variable.name === \"arguments\" && variable.identifiers.length === 0) {\n                    continue;\n                }\n\n                // explicit global variables don't have definitions.\n                var def = variable.defs[0];\n                if (def) {\n                    var type = def.type;\n\n                    // skip catch variables\n                    if (type === \"CatchClause\") {\n                        continue;\n                    }\n\n                    if (type === \"Parameter\") {\n                        // skip any setter argument\n                        if (def.node.parent.type === \"Property\" && def.node.parent.kind === \"set\") {\n                            continue;\n                        }\n\n                        // if \"args\" option is \"none\", skip any parameter\n                        if (config.args === \"none\") {\n                            continue;\n                        }\n\n                        // skip ignored parameters\n                        if (config.argsIgnorePattern && config.argsIgnorePattern.test(def.name.name)) {\n                            continue;\n                        }\n\n                        // if \"args\" option is \"after-used\", skip all but the last parameter\n                        if (config.args === \"after-used\" && def.index < def.node.params.length - 1) {\n                            continue;\n                        }\n                    } else {\n                        // skip ignored variables\n                        if (config.varsIgnorePattern && config.varsIgnorePattern.test(def.name.name)) {\n                            continue;\n                        }\n                    }\n                }\n\n                // On global, variables without let/const/class are unresolved.\n                var references = (scope.type === \"global\" ? unresolvedRefs[variable.name] : null) || variable.references;\n                if (!isUsedVariable(variable, references) && !isExported(variable)) {\n                    unusedVars.push(variable);\n                }\n            }\n        }\n\n        for (i = 0, l = childScopes.length; i < l; ++i) {\n            collectUnusedVariables(childScopes[i], unresolvedRefs, unusedVars);\n        }\n\n        return unusedVars;\n    }\n\n    /**\n     * Gets the index of a given variable name in a given comment.\n     * @param {escope.Variable} variable - A variable to get.\n     * @param {ASTNode} comment - A comment node which includes the variable name.\n     * @returns {number} The index of the variable name's location.\n     */\n    function getColumnInComment(variable, comment) {\n        var namePattern = new RegExp(\"[\\\\s,]\" + escape(variable.name) + \"(?:$|[\\\\s,:])\", \"g\");\n\n        // To ignore the first text \"global\".\n        namePattern.lastIndex = comment.value.indexOf(\"global\") + 6;\n\n        // Search a given variable name.\n        var match = namePattern.exec(comment.value);\n        return match ? match.index + 1 : 0;\n    }\n\n    /**\n     * Creates the correct location of a given variables.\n     * The location is at its name string in a `/*global` comment.\n     *\n     * @param {escope.Variable} variable - A variable to get its location.\n     * @returns {{line: number, column: number}} The location object for the variable.\n     */\n    function getLocation(variable) {\n        var comment = variable.eslintExplicitGlobalComment;\n        var baseLoc = comment.loc.start;\n        var column = getColumnInComment(variable, comment);\n        var prefix = comment.value.slice(0, column);\n        var lineInComment = (prefix.match(/\\n/g) || []).length;\n\n        if (lineInComment > 0) {\n            column -= 1 + prefix.lastIndexOf(\"\\n\");\n        } else {\n            // 2 is for `/*`\n            column += baseLoc.column + 2;\n        }\n\n        return {\n            line: baseLoc.line + lineInComment,\n            column: column\n        };\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n        \"Program:exit\": function(programNode) {\n            var globalScope = context.getScope();\n            var unresolvedRefs = collectUnresolvedReferences(globalScope);\n            var unusedVars = collectUnusedVariables(globalScope, unresolvedRefs, []);\n\n            for (var i = 0, l = unusedVars.length; i < l; ++i) {\n                var unusedVar = unusedVars[i];\n\n                if (unusedVar.eslintUsed) {\n                    continue; // explicitly exported variables\n                } else if (unusedVar.eslintExplicitGlobal) {\n                    context.report(programNode, getLocation(unusedVar), MESSAGE, unusedVar);\n                } else if (unusedVar.defs.length > 0) {\n                    context.report(unusedVar.identifiers[0], MESSAGE, unusedVar);\n                }\n            }\n        }\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"oneOf\": [\n            {\n                \"enum\": [\"all\", \"local\"]\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"vars\": {\n                        \"enum\": [\"all\", \"local\"]\n                    },\n                    \"varsIgnorePattern\": {\n                        \"type\": \"string\"\n                    },\n                    \"args\": {\n                        \"enum\": [\"all\", \"after-used\", \"none\"]\n                    },\n                    \"argsIgnorePattern\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        ]\n    }\n];\n"]}