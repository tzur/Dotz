{"version":3,"sources":["max-statements.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;AAM/B,QAAI,aAAa,GAAG,EAAE;QAClB,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;;;;;;AAO7C,aAAS,aAAa,GAAG;AACrB,qBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACzB;;;;;;;;AAQD,aAAS,WAAW,CAAC,IAAI,EAAE;AACvB,YAAI,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;;AAEhC,YAAI,KAAK,GAAG,aAAa,EAAE;AACvB,mBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,gFAAgF,EAC7F,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC;SACjD;KACJ;;;;;;;;AAQD,aAAS,eAAe,CAAC,IAAI,EAAE;AAC3B,qBAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;KAC/D;;;;;;AAMD,WAAO;AACH,6BAAqB,EAAE,aAAa;AACpC,4BAAoB,EAAE,aAAa;AACnC,iCAAyB,EAAE,aAAa;;AAExC,wBAAgB,EAAE,eAAe;;AAEjC,kCAA0B,EAAE,WAAW;AACvC,iCAAyB,EAAE,WAAW;AACtC,sCAA8B,EAAE,WAAW;KAC9C,CAAC;CAEL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CACpB;AACI,UAAM,EAAE,SAAS;CACpB,CACJ,CAAC","file":"max-statements-compiled.js","sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n * @copyright 2013 Ian Christian Myers. All rights reserved.\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    var functionStack = [],\n        maxStatements = context.options[0] || 10;\n\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n        functionStack.push(0);\n    }\n\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function endFunction(node) {\n        var count = functionStack.pop();\n\n        if (count > maxStatements) {\n            context.report(node, \"This function has too many statements ({{count}}). Maximum allowed is {{max}}.\",\n                    { count: count, max: maxStatements });\n        }\n    }\n\n    /**\n     * Increment the count of the functions\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function countStatements(node) {\n        functionStack[functionStack.length - 1] += node.body.length;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n        \"FunctionDeclaration\": startFunction,\n        \"FunctionExpression\": startFunction,\n        \"ArrowFunctionExpression\": startFunction,\n\n        \"BlockStatement\": countStatements,\n\n        \"FunctionDeclaration:exit\": endFunction,\n        \"FunctionExpression:exit\": endFunction,\n        \"ArrowFunctionExpression:exit\": endFunction\n    };\n\n};\n\nmodule.exports.schema = [\n    {\n        \"type\": \"integer\"\n    }\n];\n"]}