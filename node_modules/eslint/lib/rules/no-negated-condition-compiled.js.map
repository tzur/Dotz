{"version":3,"sources":["no-negated-condition.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;;;;;;;;AAQ/B,aAAS,uBAAuB,CAAC,IAAI,EAAE;AACnC,eAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,aAAa,CAAC;KAClE;;;;;;;;AAQD,aAAS,wBAAwB,CAAC,IAAI,EAAE;AACpC,eAAO,IAAI,CAAC,IAAI,KAAK,iBAAiB,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,CAAC;KACnE;;;;;;;;AAQD,aAAS,yBAAyB,CAAC,IAAI,EAAE;AACrC,eAAO,IAAI,CAAC,IAAI,KAAK,kBAAkB,KAClC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAA,AAAC,CAAC;KAC3D;;;;;;;;AAQD,aAAS,WAAW,CAAC,IAAI,EAAE;AACvB,eAAO,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtF;;AAED,WAAO;AACH,qBAAa,EAAE,qBAAS,IAAI,EAAE;AAC1B,gBAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAE;AAChC,uBAAO;aACV;;AAED,gBAAI,WAAW,CAAC,IAAI,CAAC,EAAE;AACnB,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;aACzD;SACJ;AACD,+BAAuB,EAAE,+BAAS,IAAI,EAAE;AACpC,gBAAI,WAAW,CAAC,IAAI,CAAC,EAAE;AACnB,uBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;aACzD;SACJ;KACJ,CAAC;CACL,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC","file":"no-negated-condition-compiled.js","sourcesContent":["/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n * @copyright 2015 Alberto Rodríguez. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = function(context) {\n\n    /**\n     * Determines if a given node is an if-else without a condition on the else\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has an else without an if.\n     * @private\n     */\n    function hasElseWithoutCondition(node) {\n        return node.alternate && node.alternate.type !== \"IfStatement\";\n    }\n\n    /**\n     * Determines if a given node is a negated unary expression\n     * @param {Object} test The test object to check.\n     * @returns {boolean} True if the node is a negated unary expression.\n     * @private\n     */\n    function isNegatedUnaryExpression(test) {\n        return test.type === \"UnaryExpression\" && test.operator === \"!\";\n    }\n\n    /**\n     * Determines if a given node is a negated binary expression\n     * @param {Test} test The test to check.\n     * @returns {boolean} True if the node is a negated binary expression.\n     * @private\n     */\n    function isNegatedBinaryExpression(test) {\n        return test.type === \"BinaryExpression\" &&\n            (test.operator === \"!=\" || test.operator === \"!==\");\n    }\n\n    /**\n     * Determines if a given node has a negated if expression\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has a negated if expression.\n     * @private\n     */\n    function isNegatedIf(node) {\n        return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n    }\n\n    return {\n        \"IfStatement\": function(node) {\n            if (!hasElseWithoutCondition(node)) {\n                return;\n            }\n\n            if (isNegatedIf(node)) {\n                context.report(node, \"Unexpected negated condition.\");\n            }\n        },\n        \"ConditionalExpression\": function(node) {\n            if (isNegatedIf(node)) {\n                context.report(node, \"Unexpected negated condition.\");\n            }\n        }\n    };\n};\n\nmodule.exports.schema = [];\n"]}