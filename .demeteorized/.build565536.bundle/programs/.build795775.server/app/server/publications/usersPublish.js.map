{"version":3,"sources":["meteor://ðŸ’»app/server/publications/usersPublish.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAE,MAAM,EAAE,UAAU,MAAM,EAAG;AACzC,OAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9B,MAAI,MAAM,EAAE;AACV,WAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,mBAAmB,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE,sBAAsB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAC,EAAC,CAAE,CAAC;GAC7I;CACF,CAAC,CAAC;;;;AAIH,MAAM,CAAC,OAAO,CAAE,gBAAgB,EAAE,UAAU,QAAQ,EAAG;AACrD,MAAI,QAAQ,EAAE;AACZ,SAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxB,WAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAE,EAAC,kBAAkB,EAAE,QAAQ,EAAC,EAAE,EAAC,MAAM,EAAE,EAAC,mBAAmB,EAAE,CAAC,EAAE,sBAAsB,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAC,EAAC,CAAE,CAAC;GACtK;;CAEF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,uBAAuB,EAAC,UAAS,SAAS,EAAC;AACxD,OAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACxB,MAAI,OAAO,GAAG,EAAE,CAAC;AACjB,MAAI,UAAU,aAAE;AAChB,WAAS,CAAC,OAAO,CAAC,UAAS,GAAG,EAAC;AAC7B,cAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC,WAAO,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;GACtC,CAAC,CAAC;AACH,SAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,EAAC,GAAG,EAAE,OAAO,EAAC,EAAC,EAAE,EAAC,MAAM,EAAE,EAAC,mBAAmB,EAAE,CAAC,EAAE,sBAAsB,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAC,EAAC,CAAE,CAAC;CAC5J,CAAC,CAAC,sE","file":"/server/publications/usersPublish.js","sourcesContent":["Meteor.publish( 'user', function( userId ) {\n  check(userId, String, Object);\n  if (userId) {\n    return Meteor.users.find(userId, {fields: {\"services.password\": 0, \"emails.address\": 0, \"services.loginTokens\": 0, \"emails.verified\": 0}} );\n  }\n});\n\n//Users.find({}, {fields: {password: 0, hash: 0}})\n\nMeteor.publish( 'userByUserSlug', function( userSlug ) {\n  if (userSlug) {\n    check(userSlug, String);\n    return Meteor.users.find( {\"profile.userSlug\": userSlug}, {fields: {\"services.password\": 0, \"services.loginTokens\": 0, \"emails.address\": 0, \"emails.verified\": 0}} );\n  }\n  //return this.ready();\n});\n\nMeteor.publish('dotzArrayToUserCursor',function(dotzArray){\n  check(dotzArray, Array);\n  let userIds = [];\n  let currentDot ;\n  dotzArray.forEach(function(dot){\n    currentDot = Dotz.findOne(dot._id);\n    userIds.push(currentDot.ownerUserId);\n  });\n  return Meteor.users.find({_id: {$in: userIds}}, {fields: {\"services.password\": 0, \"services.loginTokens\": 0, \"emails.address\": 0, \"emails.verified\": 0}} );\n});\n"]}