{"version":3,"sources":["meteor://ðŸ’»app/packages/mrt_moment/packages/mrt_moment.js"],"names":[],"mappingsfile":"/packages/mrt_moment.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mrt:moment/lib/moment/moment.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//! moment.js                                                                                                          // 1\n//! version : 2.8.1                                                                                                    // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                         // 3\n//! license : MIT                                                                                                      // 4\n//! momentjs.com                                                                                                       // 5\n                                                                                                                       // 6\n(function (undefined) {                                                                                                // 7\n    /************************************                                                                              // 8\n        Constants                                                                                                      // 9\n    ************************************/                                                                              // 10\n                                                                                                                       // 11\n    var moment,                                                                                                        // 12\n        VERSION = '2.8.1',                                                                                             // 13\n        // the global-scope this is NOT the global object in Node.js                                                   // 14\n        globalScope = typeof global !== 'undefined' ? global : this,                                                   // 15\n        oldGlobalMoment,                                                                                               // 16\n        round = Math.round,                                                                                            // 17\n        i,                                                                                                             // 18\n                                                                                                                       // 19\n        YEAR = 0,                                                                                                      // 20\n        MONTH = 1,                                                                                                     // 21\n        DATE = 2,                                                                                                      // 22\n        HOUR = 3,                                                                                                      // 23\n        MINUTE = 4,                                                                                                    // 24\n        SECOND = 5,                                                                                                    // 25\n        MILLISECOND = 6,                                                                                               // 26\n                                                                                                                       // 27\n        // internal storage for locale config files                                                                    // 28\n        locales = {},                                                                                                  // 29\n                                                                                                                       // 30\n        // extra moment internal properties (plugins register props here)                                              // 31\n        momentProperties = [],                                                                                         // 32\n                                                                                                                       // 33\n        // check for nodeJS                                                                                            // 34\n        hasModule = (typeof module !== 'undefined' && module.exports),                                                 // 35\n                                                                                                                       // 36\n        // ASP.NET json date format regex                                                                              // 37\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,                                                                       // 38\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,                              // 39\n                                                                                                                       // 40\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                   // 41\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                   // 42\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n                                                                                                                       // 44\n        // format tokens                                                                                               // 45\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,                                              // 47\n                                                                                                                       // 48\n        // parsing token regexes                                                                                       // 49\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99                                                                  // 50\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999                                                             // 51\n        parseTokenOneToFourDigits = /\\d{1,4}/, // 0 - 9999                                                             // 52\n        parseTokenOneToSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999                                              // 53\n        parseTokenDigits = /\\d+/, // nonzero number of digits                                                          // 54\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z                                 // 56\n        parseTokenT = /T/i, // T (ISO separator)                                                                       // 57\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123                                   // 58\n        parseTokenOrdinal = /\\d{1,2}/,                                                                                 // 59\n                                                                                                                       // 60\n        //strict parsing regexes                                                                                       // 61\n        parseTokenOneDigit = /\\d/, // 0 - 9                                                                            // 62\n        parseTokenTwoDigits = /\\d\\d/, // 00 - 99                                                                       // 63\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999                                                                  // 64\n        parseTokenFourDigits = /\\d{4}/, // 0000 - 9999                                                                 // 65\n        parseTokenSixDigits = /[+-]?\\d{6}/, // -999,999 - 999,999                                                      // 66\n        parseTokenSignedNumber = /[+-]?\\d+/, // -inf - inf                                                             // 67\n                                                                                                                       // 68\n        // iso 8601 regex                                                                                              // 69\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)   // 70\n        isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n                                                                                                                       // 72\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',                                                                            // 73\n                                                                                                                       // 74\n        isoDates = [                                                                                                   // 75\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],                                                                 // 76\n            ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],                                                                       // 77\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],                                                                       // 78\n            ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],                                                                            // 79\n            ['YYYY-DDD', /\\d{4}-\\d{3}/]                                                                                // 80\n        ],                                                                                                             // 81\n                                                                                                                       // 82\n        // iso time formats and regexes                                                                                // 83\n        isoTimes = [                                                                                                   // 84\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                             // 85\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],                                                                       // 86\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],                                                                               // 87\n            ['HH', /(T| )\\d\\d/]                                                                                        // 88\n        ],                                                                                                             // 89\n                                                                                                                       // 90\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]                                         // 91\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,                                                                      // 92\n                                                                                                                       // 93\n        // getter and setter names                                                                                     // 94\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),                                 // 95\n        unitMillisecondFactors = {                                                                                     // 96\n            'Milliseconds' : 1,                                                                                        // 97\n            'Seconds' : 1e3,                                                                                           // 98\n            'Minutes' : 6e4,                                                                                           // 99\n            'Hours' : 36e5,                                                                                            // 100\n            'Days' : 864e5,                                                                                            // 101\n            'Months' : 2592e6,                                                                                         // 102\n            'Years' : 31536e6                                                                                          // 103\n        },                                                                                                             // 104\n                                                                                                                       // 105\n        unitAliases = {                                                                                                // 106\n            ms : 'millisecond',                                                                                        // 107\n            s : 'second',                                                                                              // 108\n            m : 'minute',                                                                                              // 109\n            h : 'hour',                                                                                                // 110\n            d : 'day',                                                                                                 // 111\n            D : 'date',                                                                                                // 112\n            w : 'week',                                                                                                // 113\n            W : 'isoWeek',                                                                                             // 114\n            M : 'month',                                                                                               // 115\n            Q : 'quarter',                                                                                             // 116\n            y : 'year',                                                                                                // 117\n            DDD : 'dayOfYear',                                                                                         // 118\n            e : 'weekday',                                                                                             // 119\n            E : 'isoWeekday',                                                                                          // 120\n            gg: 'weekYear',                                                                                            // 121\n            GG: 'isoWeekYear'                                                                                          // 122\n        },                                                                                                             // 123\n                                                                                                                       // 124\n        camelFunctions = {                                                                                             // 125\n            dayofyear : 'dayOfYear',                                                                                   // 126\n            isoweekday : 'isoWeekday',                                                                                 // 127\n            isoweek : 'isoWeek',                                                                                       // 128\n            weekyear : 'weekYear',                                                                                     // 129\n            isoweekyear : 'isoWeekYear'                                                                                // 130\n        },                                                                                                             // 131\n                                                                                                                       // 132\n        // format function strings                                                                                     // 133\n        formatFunctions = {},                                                                                          // 134\n                                                                                                                       // 135\n        // default relative time thresholds                                                                            // 136\n        relativeTimeThresholds = {                                                                                     // 137\n            s: 45,  // seconds to minute                                                                               // 138\n            m: 45,  // minutes to hour                                                                                 // 139\n            h: 22,  // hours to day                                                                                    // 140\n            d: 26,  // days to month                                                                                   // 141\n            M: 11   // months to year                                                                                  // 142\n        },                                                                                                             // 143\n                                                                                                                       // 144\n        // tokens to ordinalize and pad                                                                                // 145\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),                                                                 // 146\n        paddedTokens = 'M D H h m s w W'.split(' '),                                                                   // 147\n                                                                                                                       // 148\n        formatTokenFunctions = {                                                                                       // 149\n            M    : function () {                                                                                       // 150\n                return this.month() + 1;                                                                               // 151\n            },                                                                                                         // 152\n            MMM  : function (format) {                                                                                 // 153\n                return this.localeData().monthsShort(this, format);                                                    // 154\n            },                                                                                                         // 155\n            MMMM : function (format) {                                                                                 // 156\n                return this.localeData().months(this, format);                                                         // 157\n            },                                                                                                         // 158\n            D    : function () {                                                                                       // 159\n                return this.date();                                                                                    // 160\n            },                                                                                                         // 161\n            DDD  : function () {                                                                                       // 162\n                return this.dayOfYear();                                                                               // 163\n            },                                                                                                         // 164\n            d    : function () {                                                                                       // 165\n                return this.day();                                                                                     // 166\n            },                                                                                                         // 167\n            dd   : function (format) {                                                                                 // 168\n                return this.localeData().weekdaysMin(this, format);                                                    // 169\n            },                                                                                                         // 170\n            ddd  : function (format) {                                                                                 // 171\n                return this.localeData().weekdaysShort(this, format);                                                  // 172\n            },                                                                                                         // 173\n            dddd : function (format) {                                                                                 // 174\n                return this.localeData().weekdays(this, format);                                                       // 175\n            },                                                                                                         // 176\n            w    : function () {                                                                                       // 177\n                return this.week();                                                                                    // 178\n            },                                                                                                         // 179\n            W    : function () {                                                                                       // 180\n                return this.isoWeek();                                                                                 // 181\n            },                                                                                                         // 182\n            YY   : function () {                                                                                       // 183\n                return leftZeroFill(this.year() % 100, 2);                                                             // 184\n            },                                                                                                         // 185\n            YYYY : function () {                                                                                       // 186\n                return leftZeroFill(this.year(), 4);                                                                   // 187\n            },                                                                                                         // 188\n            YYYYY : function () {                                                                                      // 189\n                return leftZeroFill(this.year(), 5);                                                                   // 190\n            },                                                                                                         // 191\n            YYYYYY : function () {                                                                                     // 192\n                var y = this.year(), sign = y >= 0 ? '+' : '-';                                                        // 193\n                return sign + leftZeroFill(Math.abs(y), 6);                                                            // 194\n            },                                                                                                         // 195\n            gg   : function () {                                                                                       // 196\n                return leftZeroFill(this.weekYear() % 100, 2);                                                         // 197\n            },                                                                                                         // 198\n            gggg : function () {                                                                                       // 199\n                return leftZeroFill(this.weekYear(), 4);                                                               // 200\n            },                                                                                                         // 201\n            ggggg : function () {                                                                                      // 202\n                return leftZeroFill(this.weekYear(), 5);                                                               // 203\n            },                                                                                                         // 204\n            GG   : function () {                                                                                       // 205\n                return leftZeroFill(this.isoWeekYear() % 100, 2);                                                      // 206\n            },                                                                                                         // 207\n            GGGG : function () {                                                                                       // 208\n                return leftZeroFill(this.isoWeekYear(), 4);                                                            // 209\n            },                                                                                                         // 210\n            GGGGG : function () {                                                                                      // 211\n                return leftZeroFill(this.isoWeekYear(), 5);                                                            // 212\n            },                                                                                                         // 213\n            e : function () {                                                                                          // 214\n                return this.weekday();                                                                                 // 215\n            },                                                                                                         // 216\n            E : function () {                                                                                          // 217\n                return this.isoWeekday();                                                                              // 218\n            },                                                                                                         // 219\n            a    : function () {                                                                                       // 220\n                return this.localeData().meridiem(this.hours(), this.minutes(), true);                                 // 221\n            },                                                                                                         // 222\n            A    : function () {                                                                                       // 223\n                return this.localeData().meridiem(this.hours(), this.minutes(), false);                                // 224\n            },                                                                                                         // 225\n            H    : function () {                                                                                       // 226\n                return this.hours();                                                                                   // 227\n            },                                                                                                         // 228\n            h    : function () {                                                                                       // 229\n                return this.hours() % 12 || 12;                                                                        // 230\n            },                                                                                                         // 231\n            m    : function () {                                                                                       // 232\n                return this.minutes();                                                                                 // 233\n            },                                                                                                         // 234\n            s    : function () {                                                                                       // 235\n                return this.seconds();                                                                                 // 236\n            },                                                                                                         // 237\n            S    : function () {                                                                                       // 238\n                return toInt(this.milliseconds() / 100);                                                               // 239\n            },                                                                                                         // 240\n            SS   : function () {                                                                                       // 241\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);                                               // 242\n            },                                                                                                         // 243\n            SSS  : function () {                                                                                       // 244\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 245\n            },                                                                                                         // 246\n            SSSS : function () {                                                                                       // 247\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 248\n            },                                                                                                         // 249\n            Z    : function () {                                                                                       // 250\n                var a = -this.zone(),                                                                                  // 251\n                    b = '+';                                                                                           // 252\n                if (a < 0) {                                                                                           // 253\n                    a = -a;                                                                                            // 254\n                    b = '-';                                                                                           // 255\n                }                                                                                                      // 256\n                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);                      // 257\n            },                                                                                                         // 258\n            ZZ   : function () {                                                                                       // 259\n                var a = -this.zone(),                                                                                  // 260\n                    b = '+';                                                                                           // 261\n                if (a < 0) {                                                                                           // 262\n                    a = -a;                                                                                            // 263\n                    b = '-';                                                                                           // 264\n                }                                                                                                      // 265\n                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);                            // 266\n            },                                                                                                         // 267\n            z : function () {                                                                                          // 268\n                return this.zoneAbbr();                                                                                // 269\n            },                                                                                                         // 270\n            zz : function () {                                                                                         // 271\n                return this.zoneName();                                                                                // 272\n            },                                                                                                         // 273\n            X    : function () {                                                                                       // 274\n                return this.unix();                                                                                    // 275\n            },                                                                                                         // 276\n            Q : function () {                                                                                          // 277\n                return this.quarter();                                                                                 // 278\n            }                                                                                                          // 279\n        },                                                                                                             // 280\n                                                                                                                       // 281\n        deprecations = {},                                                                                             // 282\n                                                                                                                       // 283\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];                                 // 284\n                                                                                                                       // 285\n    // Pick the first defined of two or three arguments. dfl comes from                                                // 286\n    // default.                                                                                                        // 287\n    function dfl(a, b, c) {                                                                                            // 288\n        switch (arguments.length) {                                                                                    // 289\n            case 2: return a != null ? a : b;                                                                          // 290\n            case 3: return a != null ? a : b != null ? b : c;                                                          // 291\n            default: throw new Error('Implement me');                                                                  // 292\n        }                                                                                                              // 293\n    }                                                                                                                  // 294\n                                                                                                                       // 295\n    function defaultParsingFlags() {                                                                                   // 296\n        // We need to deep clone this object, and es5 standard is not very                                             // 297\n        // helpful.                                                                                                    // 298\n        return {                                                                                                       // 299\n            empty : false,                                                                                             // 300\n            unusedTokens : [],                                                                                         // 301\n            unusedInput : [],                                                                                          // 302\n            overflow : -2,                                                                                             // 303\n            charsLeftOver : 0,                                                                                         // 304\n            nullInput : false,                                                                                         // 305\n            invalidMonth : null,                                                                                       // 306\n            invalidFormat : false,                                                                                     // 307\n            userInvalidated : false,                                                                                   // 308\n            iso: false                                                                                                 // 309\n        };                                                                                                             // 310\n    }                                                                                                                  // 311\n                                                                                                                       // 312\n    function printMsg(msg) {                                                                                           // 313\n        if (moment.suppressDeprecationWarnings === false &&                                                            // 314\n                typeof console !== 'undefined' && console.warn) {                                                      // 315\n            console.warn(\"Deprecation warning: \" + msg);                                                               // 316\n        }                                                                                                              // 317\n    }                                                                                                                  // 318\n                                                                                                                       // 319\n    function deprecate(msg, fn) {                                                                                      // 320\n        var firstTime = true;                                                                                          // 321\n        return extend(function () {                                                                                    // 322\n            if (firstTime) {                                                                                           // 323\n                printMsg(msg);                                                                                         // 324\n                firstTime = false;                                                                                     // 325\n            }                                                                                                          // 326\n            return fn.apply(this, arguments);                                                                          // 327\n        }, fn);                                                                                                        // 328\n    }                                                                                                                  // 329\n                                                                                                                       // 330\n    function deprecateSimple(name, msg) {                                                                              // 331\n        if (!deprecations[name]) {                                                                                     // 332\n            printMsg(msg);                                                                                             // 333\n            deprecations[name] = true;                                                                                 // 334\n        }                                                                                                              // 335\n    }                                                                                                                  // 336\n                                                                                                                       // 337\n    function padToken(func, count) {                                                                                   // 338\n        return function (a) {                                                                                          // 339\n            return leftZeroFill(func.call(this, a), count);                                                            // 340\n        };                                                                                                             // 341\n    }                                                                                                                  // 342\n    function ordinalizeToken(func, period) {                                                                           // 343\n        return function (a) {                                                                                          // 344\n            return this.localeData().ordinal(func.call(this, a), period);                                              // 345\n        };                                                                                                             // 346\n    }                                                                                                                  // 347\n                                                                                                                       // 348\n    while (ordinalizeTokens.length) {                                                                                  // 349\n        i = ordinalizeTokens.pop();                                                                                    // 350\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);                                   // 351\n    }                                                                                                                  // 352\n    while (paddedTokens.length) {                                                                                      // 353\n        i = paddedTokens.pop();                                                                                        // 354\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);                                            // 355\n    }                                                                                                                  // 356\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);                                                 // 357\n                                                                                                                       // 358\n                                                                                                                       // 359\n    /************************************                                                                              // 360\n        Constructors                                                                                                   // 361\n    ************************************/                                                                              // 362\n                                                                                                                       // 363\n    function Locale() {                                                                                                // 364\n    }                                                                                                                  // 365\n                                                                                                                       // 366\n    // Moment prototype object                                                                                         // 367\n    function Moment(config, skipOverflow) {                                                                            // 368\n        if (skipOverflow !== false) {                                                                                  // 369\n            checkOverflow(config);                                                                                     // 370\n        }                                                                                                              // 371\n        copyConfig(this, config);                                                                                      // 372\n        this._d = new Date(+config._d);                                                                                // 373\n    }                                                                                                                  // 374\n                                                                                                                       // 375\n    // Duration Constructor                                                                                            // 376\n    function Duration(duration) {                                                                                      // 377\n        var normalizedInput = normalizeObjectUnits(duration),                                                          // 378\n            years = normalizedInput.year || 0,                                                                         // 379\n            quarters = normalizedInput.quarter || 0,                                                                   // 380\n            months = normalizedInput.month || 0,                                                                       // 381\n            weeks = normalizedInput.week || 0,                                                                         // 382\n            days = normalizedInput.day || 0,                                                                           // 383\n            hours = normalizedInput.hour || 0,                                                                         // 384\n            minutes = normalizedInput.minute || 0,                                                                     // 385\n            seconds = normalizedInput.second || 0,                                                                     // 386\n            milliseconds = normalizedInput.millisecond || 0;                                                           // 387\n                                                                                                                       // 388\n        // representation for dateAddRemove                                                                            // 389\n        this._milliseconds = +milliseconds +                                                                           // 390\n            seconds * 1e3 + // 1000                                                                                    // 391\n            minutes * 6e4 + // 1000 * 60                                                                               // 392\n            hours * 36e5; // 1000 * 60 * 60                                                                            // 393\n        // Because of dateAddRemove treats 24 hours as different from a                                                // 394\n        // day when working around DST, we need to store them separately                                               // 395\n        this._days = +days +                                                                                           // 396\n            weeks * 7;                                                                                                 // 397\n        // It is impossible translate months into days without knowing                                                 // 398\n        // which months you are are talking about, so we have to store                                                 // 399\n        // it separately.                                                                                              // 400\n        this._months = +months +                                                                                       // 401\n            quarters * 3 +                                                                                             // 402\n            years * 12;                                                                                                // 403\n                                                                                                                       // 404\n        this._data = {};                                                                                               // 405\n                                                                                                                       // 406\n        this._locale = moment.localeData();                                                                            // 407\n                                                                                                                       // 408\n        this._bubble();                                                                                                // 409\n    }                                                                                                                  // 410\n                                                                                                                       // 411\n    /************************************                                                                              // 412\n        Helpers                                                                                                        // 413\n    ************************************/                                                                              // 414\n                                                                                                                       // 415\n                                                                                                                       // 416\n    function extend(a, b) {                                                                                            // 417\n        for (var i in b) {                                                                                             // 418\n            if (b.hasOwnProperty(i)) {                                                                                 // 419\n                a[i] = b[i];                                                                                           // 420\n            }                                                                                                          // 421\n        }                                                                                                              // 422\n                                                                                                                       // 423\n        if (b.hasOwnProperty('toString')) {                                                                            // 424\n            a.toString = b.toString;                                                                                   // 425\n        }                                                                                                              // 426\n                                                                                                                       // 427\n        if (b.hasOwnProperty('valueOf')) {                                                                             // 428\n            a.valueOf = b.valueOf;                                                                                     // 429\n        }                                                                                                              // 430\n                                                                                                                       // 431\n        return a;                                                                                                      // 432\n    }                                                                                                                  // 433\n                                                                                                                       // 434\n    function copyConfig(to, from) {                                                                                    // 435\n        var i, prop, val;                                                                                              // 436\n                                                                                                                       // 437\n        if (typeof from._isAMomentObject !== 'undefined') {                                                            // 438\n            to._isAMomentObject = from._isAMomentObject;                                                               // 439\n        }                                                                                                              // 440\n        if (typeof from._i !== 'undefined') {                                                                          // 441\n            to._i = from._i;                                                                                           // 442\n        }                                                                                                              // 443\n        if (typeof from._f !== 'undefined') {                                                                          // 444\n            to._f = from._f;                                                                                           // 445\n        }                                                                                                              // 446\n        if (typeof from._l !== 'undefined') {                                                                          // 447\n            to._l = from._l;                                                                                           // 448\n        }                                                                                                              // 449\n        if (typeof from._strict !== 'undefined') {                                                                     // 450\n            to._strict = from._strict;                                                                                 // 451\n        }                                                                                                              // 452\n        if (typeof from._tzm !== 'undefined') {                                                                        // 453\n            to._tzm = from._tzm;                                                                                       // 454\n        }                                                                                                              // 455\n        if (typeof from._isUTC !== 'undefined') {                                                                      // 456\n            to._isUTC = from._isUTC;                                                                                   // 457\n        }                                                                                                              // 458\n        if (typeof from._offset !== 'undefined') {                                                                     // 459\n            to._offset = from._offset;                                                                                 // 460\n        }                                                                                                              // 461\n        if (typeof from._pf !== 'undefined') {                                                                         // 462\n            to._pf = from._pf;                                                                                         // 463\n        }                                                                                                              // 464\n        if (typeof from._locale !== 'undefined') {                                                                     // 465\n            to._locale = from._locale;                                                                                 // 466\n        }                                                                                                              // 467\n                                                                                                                       // 468\n        if (momentProperties.length > 0) {                                                                             // 469\n            for (i in momentProperties) {                                                                              // 470\n                prop = momentProperties[i];                                                                            // 471\n                val = from[prop];                                                                                      // 472\n                if (typeof val !== 'undefined') {                                                                      // 473\n                    to[prop] = val;                                                                                    // 474\n                }                                                                                                      // 475\n            }                                                                                                          // 476\n        }                                                                                                              // 477\n                                                                                                                       // 478\n        return to;                                                                                                     // 479\n    }                                                                                                                  // 480\n                                                                                                                       // 481\n    function absRound(number) {                                                                                        // 482\n        if (number < 0) {                                                                                              // 483\n            return Math.ceil(number);                                                                                  // 484\n        } else {                                                                                                       // 485\n            return Math.floor(number);                                                                                 // 486\n        }                                                                                                              // 487\n    }                                                                                                                  // 488\n                                                                                                                       // 489\n    // left zero fill a number                                                                                         // 490\n    // see http://jsperf.com/left-zero-filling for performance comparison                                              // 491\n    function leftZeroFill(number, targetLength, forceSign) {                                                           // 492\n        var output = '' + Math.abs(number),                                                                            // 493\n            sign = number >= 0;                                                                                        // 494\n                                                                                                                       // 495\n        while (output.length < targetLength) {                                                                         // 496\n            output = '0' + output;                                                                                     // 497\n        }                                                                                                              // 498\n        return (sign ? (forceSign ? '+' : '') : '-') + output;                                                         // 499\n    }                                                                                                                  // 500\n                                                                                                                       // 501\n    function positiveMomentsDifference(base, other) {                                                                  // 502\n        var res = {milliseconds: 0, months: 0};                                                                        // 503\n                                                                                                                       // 504\n        res.months = other.month() - base.month() +                                                                    // 505\n            (other.year() - base.year()) * 12;                                                                         // 506\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 507\n            --res.months;                                                                                              // 508\n        }                                                                                                              // 509\n                                                                                                                       // 510\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 511\n                                                                                                                       // 512\n        return res;                                                                                                    // 513\n    }                                                                                                                  // 514\n                                                                                                                       // 515\n    function momentsDifference(base, other) {                                                                          // 516\n        var res;                                                                                                       // 517\n        other = makeAs(other, base);                                                                                   // 518\n        if (base.isBefore(other)) {                                                                                    // 519\n            res = positiveMomentsDifference(base, other);                                                              // 520\n        } else {                                                                                                       // 521\n            res = positiveMomentsDifference(other, base);                                                              // 522\n            res.milliseconds = -res.milliseconds;                                                                      // 523\n            res.months = -res.months;                                                                                  // 524\n        }                                                                                                              // 525\n                                                                                                                       // 526\n        return res;                                                                                                    // 527\n    }                                                                                                                  // 528\n                                                                                                                       // 529\n    // TODO: remove 'name' arg after deprecation is removed                                                            // 530\n    function createAdder(direction, name) {                                                                            // 531\n        return function (val, period) {                                                                                // 532\n            var dur, tmp;                                                                                              // 533\n            //invert the arguments, but complain about it                                                              // 534\n            if (period !== null && !isNaN(+period)) {                                                                  // 535\n                deprecateSimple(name, \"moment().\" + name  + \"(period, number) is deprecated. Please use moment().\" + name + \"(number, period).\");\n                tmp = val; val = period; period = tmp;                                                                 // 537\n            }                                                                                                          // 538\n                                                                                                                       // 539\n            val = typeof val === 'string' ? +val : val;                                                                // 540\n            dur = moment.duration(val, period);                                                                        // 541\n            addOrSubtractDurationFromMoment(this, dur, direction);                                                     // 542\n            return this;                                                                                               // 543\n        };                                                                                                             // 544\n    }                                                                                                                  // 545\n                                                                                                                       // 546\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {                                  // 547\n        var milliseconds = duration._milliseconds,                                                                     // 548\n            days = duration._days,                                                                                     // 549\n            months = duration._months;                                                                                 // 550\n        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 551\n                                                                                                                       // 552\n        if (milliseconds) {                                                                                            // 553\n            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                         // 554\n        }                                                                                                              // 555\n        if (days) {                                                                                                    // 556\n            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);                                          // 557\n        }                                                                                                              // 558\n        if (months) {                                                                                                  // 559\n            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);                                          // 560\n        }                                                                                                              // 561\n        if (updateOffset) {                                                                                            // 562\n            moment.updateOffset(mom, days || months);                                                                  // 563\n        }                                                                                                              // 564\n    }                                                                                                                  // 565\n                                                                                                                       // 566\n    // check if is an array                                                                                            // 567\n    function isArray(input) {                                                                                          // 568\n        return Object.prototype.toString.call(input) === '[object Array]';                                             // 569\n    }                                                                                                                  // 570\n                                                                                                                       // 571\n    function isDate(input) {                                                                                           // 572\n        return Object.prototype.toString.call(input) === '[object Date]' ||                                            // 573\n            input instanceof Date;                                                                                     // 574\n    }                                                                                                                  // 575\n                                                                                                                       // 576\n    // compare two arrays, return the number of differences                                                            // 577\n    function compareArrays(array1, array2, dontConvert) {                                                              // 578\n        var len = Math.min(array1.length, array2.length),                                                              // 579\n            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 580\n            diffs = 0,                                                                                                 // 581\n            i;                                                                                                         // 582\n        for (i = 0; i < len; i++) {                                                                                    // 583\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 584\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 585\n                diffs++;                                                                                               // 586\n            }                                                                                                          // 587\n        }                                                                                                              // 588\n        return diffs + lengthDiff;                                                                                     // 589\n    }                                                                                                                  // 590\n                                                                                                                       // 591\n    function normalizeUnits(units) {                                                                                   // 592\n        if (units) {                                                                                                   // 593\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');                                                  // 594\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;                                          // 595\n        }                                                                                                              // 596\n        return units;                                                                                                  // 597\n    }                                                                                                                  // 598\n                                                                                                                       // 599\n    function normalizeObjectUnits(inputObject) {                                                                       // 600\n        var normalizedInput = {},                                                                                      // 601\n            normalizedProp,                                                                                            // 602\n            prop;                                                                                                      // 603\n                                                                                                                       // 604\n        for (prop in inputObject) {                                                                                    // 605\n            if (inputObject.hasOwnProperty(prop)) {                                                                    // 606\n                normalizedProp = normalizeUnits(prop);                                                                 // 607\n                if (normalizedProp) {                                                                                  // 608\n                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 609\n                }                                                                                                      // 610\n            }                                                                                                          // 611\n        }                                                                                                              // 612\n                                                                                                                       // 613\n        return normalizedInput;                                                                                        // 614\n    }                                                                                                                  // 615\n                                                                                                                       // 616\n    function makeList(field) {                                                                                         // 617\n        var count, setter;                                                                                             // 618\n                                                                                                                       // 619\n        if (field.indexOf('week') === 0) {                                                                             // 620\n            count = 7;                                                                                                 // 621\n            setter = 'day';                                                                                            // 622\n        }                                                                                                              // 623\n        else if (field.indexOf('month') === 0) {                                                                       // 624\n            count = 12;                                                                                                // 625\n            setter = 'month';                                                                                          // 626\n        }                                                                                                              // 627\n        else {                                                                                                         // 628\n            return;                                                                                                    // 629\n        }                                                                                                              // 630\n                                                                                                                       // 631\n        moment[field] = function (format, index) {                                                                     // 632\n            var i, getter,                                                                                             // 633\n                method = moment._locale[field],                                                                        // 634\n                results = [];                                                                                          // 635\n                                                                                                                       // 636\n            if (typeof format === 'number') {                                                                          // 637\n                index = format;                                                                                        // 638\n                format = undefined;                                                                                    // 639\n            }                                                                                                          // 640\n                                                                                                                       // 641\n            getter = function (i) {                                                                                    // 642\n                var m = moment().utc().set(setter, i);                                                                 // 643\n                return method.call(moment._locale, m, format || '');                                                   // 644\n            };                                                                                                         // 645\n                                                                                                                       // 646\n            if (index != null) {                                                                                       // 647\n                return getter(index);                                                                                  // 648\n            }                                                                                                          // 649\n            else {                                                                                                     // 650\n                for (i = 0; i < count; i++) {                                                                          // 651\n                    results.push(getter(i));                                                                           // 652\n                }                                                                                                      // 653\n                return results;                                                                                        // 654\n            }                                                                                                          // 655\n        };                                                                                                             // 656\n    }                                                                                                                  // 657\n                                                                                                                       // 658\n    function toInt(argumentForCoercion) {                                                                              // 659\n        var coercedNumber = +argumentForCoercion,                                                                      // 660\n            value = 0;                                                                                                 // 661\n                                                                                                                       // 662\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 663\n            if (coercedNumber >= 0) {                                                                                  // 664\n                value = Math.floor(coercedNumber);                                                                     // 665\n            } else {                                                                                                   // 666\n                value = Math.ceil(coercedNumber);                                                                      // 667\n            }                                                                                                          // 668\n        }                                                                                                              // 669\n                                                                                                                       // 670\n        return value;                                                                                                  // 671\n    }                                                                                                                  // 672\n                                                                                                                       // 673\n    function daysInMonth(year, month) {                                                                                // 674\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 675\n    }                                                                                                                  // 676\n                                                                                                                       // 677\n    function weeksInYear(year, dow, doy) {                                                                             // 678\n        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;                                          // 679\n    }                                                                                                                  // 680\n                                                                                                                       // 681\n    function daysInYear(year) {                                                                                        // 682\n        return isLeapYear(year) ? 366 : 365;                                                                           // 683\n    }                                                                                                                  // 684\n                                                                                                                       // 685\n    function isLeapYear(year) {                                                                                        // 686\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 687\n    }                                                                                                                  // 688\n                                                                                                                       // 689\n    function checkOverflow(m) {                                                                                        // 690\n        var overflow;                                                                                                  // 691\n        if (m._a && m._pf.overflow === -2) {                                                                           // 692\n            overflow =                                                                                                 // 693\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :                                                          // 694\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :                           // 695\n                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :                                                             // 696\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :                                                       // 697\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :                                                       // 698\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :                                       // 699\n                -1;                                                                                                    // 700\n                                                                                                                       // 701\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                                    // 702\n                overflow = DATE;                                                                                       // 703\n            }                                                                                                          // 704\n                                                                                                                       // 705\n            m._pf.overflow = overflow;                                                                                 // 706\n        }                                                                                                              // 707\n    }                                                                                                                  // 708\n                                                                                                                       // 709\n    function isValid(m) {                                                                                              // 710\n        if (m._isValid == null) {                                                                                      // 711\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 712\n                m._pf.overflow < 0 &&                                                                                  // 713\n                !m._pf.empty &&                                                                                        // 714\n                !m._pf.invalidMonth &&                                                                                 // 715\n                !m._pf.nullInput &&                                                                                    // 716\n                !m._pf.invalidFormat &&                                                                                // 717\n                !m._pf.userInvalidated;                                                                                // 718\n                                                                                                                       // 719\n            if (m._strict) {                                                                                           // 720\n                m._isValid = m._isValid &&                                                                             // 721\n                    m._pf.charsLeftOver === 0 &&                                                                       // 722\n                    m._pf.unusedTokens.length === 0;                                                                   // 723\n            }                                                                                                          // 724\n        }                                                                                                              // 725\n        return m._isValid;                                                                                             // 726\n    }                                                                                                                  // 727\n                                                                                                                       // 728\n    function normalizeLocale(key) {                                                                                    // 729\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 730\n    }                                                                                                                  // 731\n                                                                                                                       // 732\n    // pick the locale from the array                                                                                  // 733\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 734\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                     // 736\n        var i = 0, j, next, locale, split;                                                                             // 737\n                                                                                                                       // 738\n        while (i < names.length) {                                                                                     // 739\n            split = normalizeLocale(names[i]).split('-');                                                              // 740\n            j = split.length;                                                                                          // 741\n            next = normalizeLocale(names[i + 1]);                                                                      // 742\n            next = next ? next.split('-') : null;                                                                      // 743\n            while (j > 0) {                                                                                            // 744\n                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 745\n                if (locale) {                                                                                          // 746\n                    return locale;                                                                                     // 747\n                }                                                                                                      // 748\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 749\n                    //the next array item is better than a shallower substring of this one                             // 750\n                    break;                                                                                             // 751\n                }                                                                                                      // 752\n                j--;                                                                                                   // 753\n            }                                                                                                          // 754\n            i++;                                                                                                       // 755\n        }                                                                                                              // 756\n        return null;                                                                                                   // 757\n    }                                                                                                                  // 758\n                                                                                                                       // 759\n    function loadLocale(name) {                                                                                        // 760\n        var oldLocale = null;                                                                                          // 761\n        if (!locales[name] && hasModule) {                                                                             // 762\n            try {                                                                                                      // 763\n                oldLocale = moment.locale();                                                                           // 764\n                require('./locale/' + name);                                                                           // 765\n                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales\n                moment.locale(oldLocale);                                                                              // 767\n            } catch (e) { }                                                                                            // 768\n        }                                                                                                              // 769\n        return locales[name];                                                                                          // 770\n    }                                                                                                                  // 771\n                                                                                                                       // 772\n    // Return a moment from input, that is local/utc/zone equivalent to model.                                         // 773\n    function makeAs(input, model) {                                                                                    // 774\n        return model._isUTC ? moment(input).zone(model._offset || 0) :                                                 // 775\n            moment(input).local();                                                                                     // 776\n    }                                                                                                                  // 777\n                                                                                                                       // 778\n    /************************************                                                                              // 779\n        Locale                                                                                                         // 780\n    ************************************/                                                                              // 781\n                                                                                                                       // 782\n                                                                                                                       // 783\n    extend(Locale.prototype, {                                                                                         // 784\n                                                                                                                       // 785\n        set : function (config) {                                                                                      // 786\n            var prop, i;                                                                                               // 787\n            for (i in config) {                                                                                        // 788\n                prop = config[i];                                                                                      // 789\n                if (typeof prop === 'function') {                                                                      // 790\n                    this[i] = prop;                                                                                    // 791\n                } else {                                                                                               // 792\n                    this['_' + i] = prop;                                                                              // 793\n                }                                                                                                      // 794\n            }                                                                                                          // 795\n        },                                                                                                             // 796\n                                                                                                                       // 797\n        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),  // 798\n        months : function (m) {                                                                                        // 799\n            return this._months[m.month()];                                                                            // 800\n        },                                                                                                             // 801\n                                                                                                                       // 802\n        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                   // 803\n        monthsShort : function (m) {                                                                                   // 804\n            return this._monthsShort[m.month()];                                                                       // 805\n        },                                                                                                             // 806\n                                                                                                                       // 807\n        monthsParse : function (monthName) {                                                                           // 808\n            var i, mom, regex;                                                                                         // 809\n                                                                                                                       // 810\n            if (!this._monthsParse) {                                                                                  // 811\n                this._monthsParse = [];                                                                                // 812\n            }                                                                                                          // 813\n                                                                                                                       // 814\n            for (i = 0; i < 12; i++) {                                                                                 // 815\n                // make the regex if we don't have it already                                                          // 816\n                if (!this._monthsParse[i]) {                                                                           // 817\n                    mom = moment.utc([2000, i]);                                                                       // 818\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                             // 819\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                    // 820\n                }                                                                                                      // 821\n                // test the regex                                                                                      // 822\n                if (this._monthsParse[i].test(monthName)) {                                                            // 823\n                    return i;                                                                                          // 824\n                }                                                                                                      // 825\n            }                                                                                                          // 826\n        },                                                                                                             // 827\n                                                                                                                       // 828\n        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                             // 829\n        weekdays : function (m) {                                                                                      // 830\n            return this._weekdays[m.day()];                                                                            // 831\n        },                                                                                                             // 832\n                                                                                                                       // 833\n        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                     // 834\n        weekdaysShort : function (m) {                                                                                 // 835\n            return this._weekdaysShort[m.day()];                                                                       // 836\n        },                                                                                                             // 837\n                                                                                                                       // 838\n        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                              // 839\n        weekdaysMin : function (m) {                                                                                   // 840\n            return this._weekdaysMin[m.day()];                                                                         // 841\n        },                                                                                                             // 842\n                                                                                                                       // 843\n        weekdaysParse : function (weekdayName) {                                                                       // 844\n            var i, mom, regex;                                                                                         // 845\n                                                                                                                       // 846\n            if (!this._weekdaysParse) {                                                                                // 847\n                this._weekdaysParse = [];                                                                              // 848\n            }                                                                                                          // 849\n                                                                                                                       // 850\n            for (i = 0; i < 7; i++) {                                                                                  // 851\n                // make the regex if we don't have it already                                                          // 852\n                if (!this._weekdaysParse[i]) {                                                                         // 853\n                    mom = moment([2000, 1]).day(i);                                                                    // 854\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                  // 856\n                }                                                                                                      // 857\n                // test the regex                                                                                      // 858\n                if (this._weekdaysParse[i].test(weekdayName)) {                                                        // 859\n                    return i;                                                                                          // 860\n                }                                                                                                      // 861\n            }                                                                                                          // 862\n        },                                                                                                             // 863\n                                                                                                                       // 864\n        _longDateFormat : {                                                                                            // 865\n            LT : 'h:mm A',                                                                                             // 866\n            L : 'MM/DD/YYYY',                                                                                          // 867\n            LL : 'MMMM D, YYYY',                                                                                       // 868\n            LLL : 'MMMM D, YYYY LT',                                                                                   // 869\n            LLLL : 'dddd, MMMM D, YYYY LT'                                                                             // 870\n        },                                                                                                             // 871\n        longDateFormat : function (key) {                                                                              // 872\n            var output = this._longDateFormat[key];                                                                    // 873\n            if (!output && this._longDateFormat[key.toUpperCase()]) {                                                  // 874\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {          // 875\n                    return val.slice(1);                                                                               // 876\n                });                                                                                                    // 877\n                this._longDateFormat[key] = output;                                                                    // 878\n            }                                                                                                          // 879\n            return output;                                                                                             // 880\n        },                                                                                                             // 881\n                                                                                                                       // 882\n        isPM : function (input) {                                                                                      // 883\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                         // 884\n            // Using charAt should be more compatible.                                                                 // 885\n            return ((input + '').toLowerCase().charAt(0) === 'p');                                                     // 886\n        },                                                                                                             // 887\n                                                                                                                       // 888\n        _meridiemParse : /[ap]\\.?m?\\.?/i,                                                                              // 889\n        meridiem : function (hours, minutes, isLower) {                                                                // 890\n            if (hours > 11) {                                                                                          // 891\n                return isLower ? 'pm' : 'PM';                                                                          // 892\n            } else {                                                                                                   // 893\n                return isLower ? 'am' : 'AM';                                                                          // 894\n            }                                                                                                          // 895\n        },                                                                                                             // 896\n                                                                                                                       // 897\n        _calendar : {                                                                                                  // 898\n            sameDay : '[Today at] LT',                                                                                 // 899\n            nextDay : '[Tomorrow at] LT',                                                                              // 900\n            nextWeek : 'dddd [at] LT',                                                                                 // 901\n            lastDay : '[Yesterday at] LT',                                                                             // 902\n            lastWeek : '[Last] dddd [at] LT',                                                                          // 903\n            sameElse : 'L'                                                                                             // 904\n        },                                                                                                             // 905\n        calendar : function (key, mom) {                                                                               // 906\n            var output = this._calendar[key];                                                                          // 907\n            return typeof output === 'function' ? output.apply(mom) : output;                                          // 908\n        },                                                                                                             // 909\n                                                                                                                       // 910\n        _relativeTime : {                                                                                              // 911\n            future : 'in %s',                                                                                          // 912\n            past : '%s ago',                                                                                           // 913\n            s : 'a few seconds',                                                                                       // 914\n            m : 'a minute',                                                                                            // 915\n            mm : '%d minutes',                                                                                         // 916\n            h : 'an hour',                                                                                             // 917\n            hh : '%d hours',                                                                                           // 918\n            d : 'a day',                                                                                               // 919\n            dd : '%d days',                                                                                            // 920\n            M : 'a month',                                                                                             // 921\n            MM : '%d months',                                                                                          // 922\n            y : 'a year',                                                                                              // 923\n            yy : '%d years'                                                                                            // 924\n        },                                                                                                             // 925\n                                                                                                                       // 926\n        relativeTime : function (number, withoutSuffix, string, isFuture) {                                            // 927\n            var output = this._relativeTime[string];                                                                   // 928\n            return (typeof output === 'function') ?                                                                    // 929\n                output(number, withoutSuffix, string, isFuture) :                                                      // 930\n                output.replace(/%d/i, number);                                                                         // 931\n        },                                                                                                             // 932\n                                                                                                                       // 933\n        pastFuture : function (diff, output) {                                                                         // 934\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                             // 935\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);                      // 936\n        },                                                                                                             // 937\n                                                                                                                       // 938\n        ordinal : function (number) {                                                                                  // 939\n            return this._ordinal.replace('%d', number);                                                                // 940\n        },                                                                                                             // 941\n        _ordinal : '%d',                                                                                               // 942\n                                                                                                                       // 943\n        preparse : function (string) {                                                                                 // 944\n            return string;                                                                                             // 945\n        },                                                                                                             // 946\n                                                                                                                       // 947\n        postformat : function (string) {                                                                               // 948\n            return string;                                                                                             // 949\n        },                                                                                                             // 950\n                                                                                                                       // 951\n        week : function (mom) {                                                                                        // 952\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;                                               // 953\n        },                                                                                                             // 954\n                                                                                                                       // 955\n        _week : {                                                                                                      // 956\n            dow : 0, // Sunday is the first day of the week.                                                           // 957\n            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 958\n        },                                                                                                             // 959\n                                                                                                                       // 960\n        _invalidDate: 'Invalid date',                                                                                  // 961\n        invalidDate: function () {                                                                                     // 962\n            return this._invalidDate;                                                                                  // 963\n        }                                                                                                              // 964\n    });                                                                                                                // 965\n                                                                                                                       // 966\n    /************************************                                                                              // 967\n        Formatting                                                                                                     // 968\n    ************************************/                                                                              // 969\n                                                                                                                       // 970\n                                                                                                                       // 971\n    function removeFormattingTokens(input) {                                                                           // 972\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                 // 973\n            return input.replace(/^\\[|\\]$/g, '');                                                                      // 974\n        }                                                                                                              // 975\n        return input.replace(/\\\\/g, '');                                                                               // 976\n    }                                                                                                                  // 977\n                                                                                                                       // 978\n    function makeFormatFunction(format) {                                                                              // 979\n        var array = format.match(formattingTokens), i, length;                                                         // 980\n                                                                                                                       // 981\n        for (i = 0, length = array.length; i < length; i++) {                                                          // 982\n            if (formatTokenFunctions[array[i]]) {                                                                      // 983\n                array[i] = formatTokenFunctions[array[i]];                                                             // 984\n            } else {                                                                                                   // 985\n                array[i] = removeFormattingTokens(array[i]);                                                           // 986\n            }                                                                                                          // 987\n        }                                                                                                              // 988\n                                                                                                                       // 989\n        return function (mom) {                                                                                        // 990\n            var output = '';                                                                                           // 991\n            for (i = 0; i < length; i++) {                                                                             // 992\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 993\n            }                                                                                                          // 994\n            return output;                                                                                             // 995\n        };                                                                                                             // 996\n    }                                                                                                                  // 997\n                                                                                                                       // 998\n    // format date using native date object                                                                            // 999\n    function formatMoment(m, format) {                                                                                 // 1000\n        if (!m.isValid()) {                                                                                            // 1001\n            return m.localeData().invalidDate();                                                                       // 1002\n        }                                                                                                              // 1003\n                                                                                                                       // 1004\n        format = expandFormat(format, m.localeData());                                                                 // 1005\n                                                                                                                       // 1006\n        if (!formatFunctions[format]) {                                                                                // 1007\n            formatFunctions[format] = makeFormatFunction(format);                                                      // 1008\n        }                                                                                                              // 1009\n                                                                                                                       // 1010\n        return formatFunctions[format](m);                                                                             // 1011\n    }                                                                                                                  // 1012\n                                                                                                                       // 1013\n    function expandFormat(format, locale) {                                                                            // 1014\n        var i = 5;                                                                                                     // 1015\n                                                                                                                       // 1016\n        function replaceLongDateFormatTokens(input) {                                                                  // 1017\n            return locale.longDateFormat(input) || input;                                                              // 1018\n        }                                                                                                              // 1019\n                                                                                                                       // 1020\n        localFormattingTokens.lastIndex = 0;                                                                           // 1021\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 1022\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 1023\n            localFormattingTokens.lastIndex = 0;                                                                       // 1024\n            i -= 1;                                                                                                    // 1025\n        }                                                                                                              // 1026\n                                                                                                                       // 1027\n        return format;                                                                                                 // 1028\n    }                                                                                                                  // 1029\n                                                                                                                       // 1030\n                                                                                                                       // 1031\n    /************************************                                                                              // 1032\n        Parsing                                                                                                        // 1033\n    ************************************/                                                                              // 1034\n                                                                                                                       // 1035\n                                                                                                                       // 1036\n    // get the regex to find the next token                                                                            // 1037\n    function getParseRegexForToken(token, config) {                                                                    // 1038\n        var a, strict = config._strict;                                                                                // 1039\n        switch (token) {                                                                                               // 1040\n        case 'Q':                                                                                                      // 1041\n            return parseTokenOneDigit;                                                                                 // 1042\n        case 'DDDD':                                                                                                   // 1043\n            return parseTokenThreeDigits;                                                                              // 1044\n        case 'YYYY':                                                                                                   // 1045\n        case 'GGGG':                                                                                                   // 1046\n        case 'gggg':                                                                                                   // 1047\n            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;                                          // 1048\n        case 'Y':                                                                                                      // 1049\n        case 'G':                                                                                                      // 1050\n        case 'g':                                                                                                      // 1051\n            return parseTokenSignedNumber;                                                                             // 1052\n        case 'YYYYYY':                                                                                                 // 1053\n        case 'YYYYY':                                                                                                  // 1054\n        case 'GGGGG':                                                                                                  // 1055\n        case 'ggggg':                                                                                                  // 1056\n            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;                                            // 1057\n        case 'S':                                                                                                      // 1058\n            if (strict) {                                                                                              // 1059\n                return parseTokenOneDigit;                                                                             // 1060\n            }                                                                                                          // 1061\n            /* falls through */                                                                                        // 1062\n        case 'SS':                                                                                                     // 1063\n            if (strict) {                                                                                              // 1064\n                return parseTokenTwoDigits;                                                                            // 1065\n            }                                                                                                          // 1066\n            /* falls through */                                                                                        // 1067\n        case 'SSS':                                                                                                    // 1068\n            if (strict) {                                                                                              // 1069\n                return parseTokenThreeDigits;                                                                          // 1070\n            }                                                                                                          // 1071\n            /* falls through */                                                                                        // 1072\n        case 'DDD':                                                                                                    // 1073\n            return parseTokenOneToThreeDigits;                                                                         // 1074\n        case 'MMM':                                                                                                    // 1075\n        case 'MMMM':                                                                                                   // 1076\n        case 'dd':                                                                                                     // 1077\n        case 'ddd':                                                                                                    // 1078\n        case 'dddd':                                                                                                   // 1079\n            return parseTokenWord;                                                                                     // 1080\n        case 'a':                                                                                                      // 1081\n        case 'A':                                                                                                      // 1082\n            return config._locale._meridiemParse;                                                                      // 1083\n        case 'X':                                                                                                      // 1084\n            return parseTokenTimestampMs;                                                                              // 1085\n        case 'Z':                                                                                                      // 1086\n        case 'ZZ':                                                                                                     // 1087\n            return parseTokenTimezone;                                                                                 // 1088\n        case 'T':                                                                                                      // 1089\n            return parseTokenT;                                                                                        // 1090\n        case 'SSSS':                                                                                                   // 1091\n            return parseTokenDigits;                                                                                   // 1092\n        case 'MM':                                                                                                     // 1093\n        case 'DD':                                                                                                     // 1094\n        case 'YY':                                                                                                     // 1095\n        case 'GG':                                                                                                     // 1096\n        case 'gg':                                                                                                     // 1097\n        case 'HH':                                                                                                     // 1098\n        case 'hh':                                                                                                     // 1099\n        case 'mm':                                                                                                     // 1100\n        case 'ss':                                                                                                     // 1101\n        case 'ww':                                                                                                     // 1102\n        case 'WW':                                                                                                     // 1103\n            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;                                            // 1104\n        case 'M':                                                                                                      // 1105\n        case 'D':                                                                                                      // 1106\n        case 'd':                                                                                                      // 1107\n        case 'H':                                                                                                      // 1108\n        case 'h':                                                                                                      // 1109\n        case 'm':                                                                                                      // 1110\n        case 's':                                                                                                      // 1111\n        case 'w':                                                                                                      // 1112\n        case 'W':                                                                                                      // 1113\n        case 'e':                                                                                                      // 1114\n        case 'E':                                                                                                      // 1115\n            return parseTokenOneOrTwoDigits;                                                                           // 1116\n        case 'Do':                                                                                                     // 1117\n            return parseTokenOrdinal;                                                                                  // 1118\n        default :                                                                                                      // 1119\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), 'i'));                                // 1120\n            return a;                                                                                                  // 1121\n        }                                                                                                              // 1122\n    }                                                                                                                  // 1123\n                                                                                                                       // 1124\n    function timezoneMinutesFromString(string) {                                                                       // 1125\n        string = string || '';                                                                                         // 1126\n        var possibleTzMatches = (string.match(parseTokenTimezone) || []),                                              // 1127\n            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],                                           // 1128\n            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],                                         // 1129\n            minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 1130\n                                                                                                                       // 1131\n        return parts[0] === '+' ? -minutes : minutes;                                                                  // 1132\n    }                                                                                                                  // 1133\n                                                                                                                       // 1134\n    // function to convert string input to date                                                                        // 1135\n    function addTimeToArrayFromToken(token, input, config) {                                                           // 1136\n        var a, datePartArray = config._a;                                                                              // 1137\n                                                                                                                       // 1138\n        switch (token) {                                                                                               // 1139\n        // QUARTER                                                                                                     // 1140\n        case 'Q':                                                                                                      // 1141\n            if (input != null) {                                                                                       // 1142\n                datePartArray[MONTH] = (toInt(input) - 1) * 3;                                                         // 1143\n            }                                                                                                          // 1144\n            break;                                                                                                     // 1145\n        // MONTH                                                                                                       // 1146\n        case 'M' : // fall through to MM                                                                               // 1147\n        case 'MM' :                                                                                                    // 1148\n            if (input != null) {                                                                                       // 1149\n                datePartArray[MONTH] = toInt(input) - 1;                                                               // 1150\n            }                                                                                                          // 1151\n            break;                                                                                                     // 1152\n        case 'MMM' : // fall through to MMMM                                                                           // 1153\n        case 'MMMM' :                                                                                                  // 1154\n            a = config._locale.monthsParse(input);                                                                     // 1155\n            // if we didn't find a month name, mark the date as invalid.                                               // 1156\n            if (a != null) {                                                                                           // 1157\n                datePartArray[MONTH] = a;                                                                              // 1158\n            } else {                                                                                                   // 1159\n                config._pf.invalidMonth = input;                                                                       // 1160\n            }                                                                                                          // 1161\n            break;                                                                                                     // 1162\n        // DAY OF MONTH                                                                                                // 1163\n        case 'D' : // fall through to DD                                                                               // 1164\n        case 'DD' :                                                                                                    // 1165\n            if (input != null) {                                                                                       // 1166\n                datePartArray[DATE] = toInt(input);                                                                    // 1167\n            }                                                                                                          // 1168\n            break;                                                                                                     // 1169\n        case 'Do' :                                                                                                    // 1170\n            if (input != null) {                                                                                       // 1171\n                datePartArray[DATE] = toInt(parseInt(input, 10));                                                      // 1172\n            }                                                                                                          // 1173\n            break;                                                                                                     // 1174\n        // DAY OF YEAR                                                                                                 // 1175\n        case 'DDD' : // fall through to DDDD                                                                           // 1176\n        case 'DDDD' :                                                                                                  // 1177\n            if (input != null) {                                                                                       // 1178\n                config._dayOfYear = toInt(input);                                                                      // 1179\n            }                                                                                                          // 1180\n                                                                                                                       // 1181\n            break;                                                                                                     // 1182\n        // YEAR                                                                                                        // 1183\n        case 'YY' :                                                                                                    // 1184\n            datePartArray[YEAR] = moment.parseTwoDigitYear(input);                                                     // 1185\n            break;                                                                                                     // 1186\n        case 'YYYY' :                                                                                                  // 1187\n        case 'YYYYY' :                                                                                                 // 1188\n        case 'YYYYYY' :                                                                                                // 1189\n            datePartArray[YEAR] = toInt(input);                                                                        // 1190\n            break;                                                                                                     // 1191\n        // AM / PM                                                                                                     // 1192\n        case 'a' : // fall through to A                                                                                // 1193\n        case 'A' :                                                                                                     // 1194\n            config._isPm = config._locale.isPM(input);                                                                 // 1195\n            break;                                                                                                     // 1196\n        // 24 HOUR                                                                                                     // 1197\n        case 'H' : // fall through to hh                                                                               // 1198\n        case 'HH' : // fall through to hh                                                                              // 1199\n        case 'h' : // fall through to hh                                                                               // 1200\n        case 'hh' :                                                                                                    // 1201\n            datePartArray[HOUR] = toInt(input);                                                                        // 1202\n            break;                                                                                                     // 1203\n        // MINUTE                                                                                                      // 1204\n        case 'm' : // fall through to mm                                                                               // 1205\n        case 'mm' :                                                                                                    // 1206\n            datePartArray[MINUTE] = toInt(input);                                                                      // 1207\n            break;                                                                                                     // 1208\n        // SECOND                                                                                                      // 1209\n        case 's' : // fall through to ss                                                                               // 1210\n        case 'ss' :                                                                                                    // 1211\n            datePartArray[SECOND] = toInt(input);                                                                      // 1212\n            break;                                                                                                     // 1213\n        // MILLISECOND                                                                                                 // 1214\n        case 'S' :                                                                                                     // 1215\n        case 'SS' :                                                                                                    // 1216\n        case 'SSS' :                                                                                                   // 1217\n        case 'SSSS' :                                                                                                  // 1218\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);                                                 // 1219\n            break;                                                                                                     // 1220\n        // UNIX TIMESTAMP WITH MS                                                                                      // 1221\n        case 'X':                                                                                                      // 1222\n            config._d = new Date(parseFloat(input) * 1000);                                                            // 1223\n            break;                                                                                                     // 1224\n        // TIMEZONE                                                                                                    // 1225\n        case 'Z' : // fall through to ZZ                                                                               // 1226\n        case 'ZZ' :                                                                                                    // 1227\n            config._useUTC = true;                                                                                     // 1228\n            config._tzm = timezoneMinutesFromString(input);                                                            // 1229\n            break;                                                                                                     // 1230\n        // WEEKDAY - human                                                                                             // 1231\n        case 'dd':                                                                                                     // 1232\n        case 'ddd':                                                                                                    // 1233\n        case 'dddd':                                                                                                   // 1234\n            a = config._locale.weekdaysParse(input);                                                                   // 1235\n            // if we didn't get a weekday name, mark the date as invalid                                               // 1236\n            if (a != null) {                                                                                           // 1237\n                config._w = config._w || {};                                                                           // 1238\n                config._w['d'] = a;                                                                                    // 1239\n            } else {                                                                                                   // 1240\n                config._pf.invalidWeekday = input;                                                                     // 1241\n            }                                                                                                          // 1242\n            break;                                                                                                     // 1243\n        // WEEK, WEEK DAY - numeric                                                                                    // 1244\n        case 'w':                                                                                                      // 1245\n        case 'ww':                                                                                                     // 1246\n        case 'W':                                                                                                      // 1247\n        case 'WW':                                                                                                     // 1248\n        case 'd':                                                                                                      // 1249\n        case 'e':                                                                                                      // 1250\n        case 'E':                                                                                                      // 1251\n            token = token.substr(0, 1);                                                                                // 1252\n            /* falls through */                                                                                        // 1253\n        case 'gggg':                                                                                                   // 1254\n        case 'GGGG':                                                                                                   // 1255\n        case 'GGGGG':                                                                                                  // 1256\n            token = token.substr(0, 2);                                                                                // 1257\n            if (input) {                                                                                               // 1258\n                config._w = config._w || {};                                                                           // 1259\n                config._w[token] = toInt(input);                                                                       // 1260\n            }                                                                                                          // 1261\n            break;                                                                                                     // 1262\n        case 'gg':                                                                                                     // 1263\n        case 'GG':                                                                                                     // 1264\n            config._w = config._w || {};                                                                               // 1265\n            config._w[token] = moment.parseTwoDigitYear(input);                                                        // 1266\n        }                                                                                                              // 1267\n    }                                                                                                                  // 1268\n                                                                                                                       // 1269\n    function dayOfYearFromWeekInfo(config) {                                                                           // 1270\n        var w, weekYear, week, weekday, dow, doy, temp;                                                                // 1271\n                                                                                                                       // 1272\n        w = config._w;                                                                                                 // 1273\n        if (w.GG != null || w.W != null || w.E != null) {                                                              // 1274\n            dow = 1;                                                                                                   // 1275\n            doy = 4;                                                                                                   // 1276\n                                                                                                                       // 1277\n            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 1278\n            // how we interpret now (local, utc, fixed offset). So create                                              // 1279\n            // a now version of current config (take local/utc/offset flags, and                                       // 1280\n            // create now).                                                                                            // 1281\n            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);                                    // 1282\n            week = dfl(w.W, 1);                                                                                        // 1283\n            weekday = dfl(w.E, 1);                                                                                     // 1284\n        } else {                                                                                                       // 1285\n            dow = config._locale._week.dow;                                                                            // 1286\n            doy = config._locale._week.doy;                                                                            // 1287\n                                                                                                                       // 1288\n            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);                                // 1289\n            week = dfl(w.w, 1);                                                                                        // 1290\n                                                                                                                       // 1291\n            if (w.d != null) {                                                                                         // 1292\n                // weekday -- low day numbers are considered next week                                                 // 1293\n                weekday = w.d;                                                                                         // 1294\n                if (weekday < dow) {                                                                                   // 1295\n                    ++week;                                                                                            // 1296\n                }                                                                                                      // 1297\n            } else if (w.e != null) {                                                                                  // 1298\n                // local weekday -- counting starts from begining of week                                              // 1299\n                weekday = w.e + dow;                                                                                   // 1300\n            } else {                                                                                                   // 1301\n                // default to begining of week                                                                         // 1302\n                weekday = dow;                                                                                         // 1303\n            }                                                                                                          // 1304\n        }                                                                                                              // 1305\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);                                                  // 1306\n                                                                                                                       // 1307\n        config._a[YEAR] = temp.year;                                                                                   // 1308\n        config._dayOfYear = temp.dayOfYear;                                                                            // 1309\n    }                                                                                                                  // 1310\n                                                                                                                       // 1311\n    // convert an array to a date.                                                                                     // 1312\n    // the array should mirror the parameters below                                                                    // 1313\n    // note: all values past the year are optional and will default to the lowest possible value.                      // 1314\n    // [year, month, day , hour, minute, second, millisecond]                                                          // 1315\n    function dateFromConfig(config) {                                                                                  // 1316\n        var i, date, input = [], currentDate, yearToUse;                                                               // 1317\n                                                                                                                       // 1318\n        if (config._d) {                                                                                               // 1319\n            return;                                                                                                    // 1320\n        }                                                                                                              // 1321\n                                                                                                                       // 1322\n        currentDate = currentDateArray(config);                                                                        // 1323\n                                                                                                                       // 1324\n        //compute day of the year from weeks and weekdays                                                              // 1325\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 1326\n            dayOfYearFromWeekInfo(config);                                                                             // 1327\n        }                                                                                                              // 1328\n                                                                                                                       // 1329\n        //if the day of the year is set, figure out what it is                                                         // 1330\n        if (config._dayOfYear) {                                                                                       // 1331\n            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);                                                       // 1332\n                                                                                                                       // 1333\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 1334\n                config._pf._overflowDayOfYear = true;                                                                  // 1335\n            }                                                                                                          // 1336\n                                                                                                                       // 1337\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 1338\n            config._a[MONTH] = date.getUTCMonth();                                                                     // 1339\n            config._a[DATE] = date.getUTCDate();                                                                       // 1340\n        }                                                                                                              // 1341\n                                                                                                                       // 1342\n        // Default to current date.                                                                                    // 1343\n        // * if no year, month, day of month are given, default to today                                               // 1344\n        // * if day of month is given, default month and year                                                          // 1345\n        // * if month is given, default only year                                                                      // 1346\n        // * if year is given, don't default anything                                                                  // 1347\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 1348\n            config._a[i] = input[i] = currentDate[i];                                                                  // 1349\n        }                                                                                                              // 1350\n                                                                                                                       // 1351\n        // Zero out whatever was not defaulted, including time                                                         // 1352\n        for (; i < 7; i++) {                                                                                           // 1353\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 1354\n        }                                                                                                              // 1355\n                                                                                                                       // 1356\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);                                      // 1357\n        // Apply timezone offset from input. The actual zone can be changed                                            // 1358\n        // with parseZone.                                                                                             // 1359\n        if (config._tzm != null) {                                                                                     // 1360\n            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);                                          // 1361\n        }                                                                                                              // 1362\n    }                                                                                                                  // 1363\n                                                                                                                       // 1364\n    function dateFromObject(config) {                                                                                  // 1365\n        var normalizedInput;                                                                                           // 1366\n                                                                                                                       // 1367\n        if (config._d) {                                                                                               // 1368\n            return;                                                                                                    // 1369\n        }                                                                                                              // 1370\n                                                                                                                       // 1371\n        normalizedInput = normalizeObjectUnits(config._i);                                                             // 1372\n        config._a = [                                                                                                  // 1373\n            normalizedInput.year,                                                                                      // 1374\n            normalizedInput.month,                                                                                     // 1375\n            normalizedInput.day,                                                                                       // 1376\n            normalizedInput.hour,                                                                                      // 1377\n            normalizedInput.minute,                                                                                    // 1378\n            normalizedInput.second,                                                                                    // 1379\n            normalizedInput.millisecond                                                                                // 1380\n        ];                                                                                                             // 1381\n                                                                                                                       // 1382\n        dateFromConfig(config);                                                                                        // 1383\n    }                                                                                                                  // 1384\n                                                                                                                       // 1385\n    function currentDateArray(config) {                                                                                // 1386\n        var now = new Date();                                                                                          // 1387\n        if (config._useUTC) {                                                                                          // 1388\n            return [                                                                                                   // 1389\n                now.getUTCFullYear(),                                                                                  // 1390\n                now.getUTCMonth(),                                                                                     // 1391\n                now.getUTCDate()                                                                                       // 1392\n            ];                                                                                                         // 1393\n        } else {                                                                                                       // 1394\n            return [now.getFullYear(), now.getMonth(), now.getDate()];                                                 // 1395\n        }                                                                                                              // 1396\n    }                                                                                                                  // 1397\n                                                                                                                       // 1398\n    // date from string and format string                                                                              // 1399\n    function makeDateFromStringAndFormat(config) {                                                                     // 1400\n        if (config._f === moment.ISO_8601) {                                                                           // 1401\n            parseISO(config);                                                                                          // 1402\n            return;                                                                                                    // 1403\n        }                                                                                                              // 1404\n                                                                                                                       // 1405\n        config._a = [];                                                                                                // 1406\n        config._pf.empty = true;                                                                                       // 1407\n                                                                                                                       // 1408\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 1409\n        var string = '' + config._i,                                                                                   // 1410\n            i, parsedInput, tokens, token, skipped,                                                                    // 1411\n            stringLength = string.length,                                                                              // 1412\n            totalParsedInputLength = 0;                                                                                // 1413\n                                                                                                                       // 1414\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 1415\n                                                                                                                       // 1416\n        for (i = 0; i < tokens.length; i++) {                                                                          // 1417\n            token = tokens[i];                                                                                         // 1418\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 1419\n            if (parsedInput) {                                                                                         // 1420\n                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 1421\n                if (skipped.length > 0) {                                                                              // 1422\n                    config._pf.unusedInput.push(skipped);                                                              // 1423\n                }                                                                                                      // 1424\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 1425\n                totalParsedInputLength += parsedInput.length;                                                          // 1426\n            }                                                                                                          // 1427\n            // don't parse if it's not a known token                                                                   // 1428\n            if (formatTokenFunctions[token]) {                                                                         // 1429\n                if (parsedInput) {                                                                                     // 1430\n                    config._pf.empty = false;                                                                          // 1431\n                }                                                                                                      // 1432\n                else {                                                                                                 // 1433\n                    config._pf.unusedTokens.push(token);                                                               // 1434\n                }                                                                                                      // 1435\n                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 1436\n            }                                                                                                          // 1437\n            else if (config._strict && !parsedInput) {                                                                 // 1438\n                config._pf.unusedTokens.push(token);                                                                   // 1439\n            }                                                                                                          // 1440\n        }                                                                                                              // 1441\n                                                                                                                       // 1442\n        // add remaining unparsed input length to the string                                                           // 1443\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;                                              // 1444\n        if (string.length > 0) {                                                                                       // 1445\n            config._pf.unusedInput.push(string);                                                                       // 1446\n        }                                                                                                              // 1447\n                                                                                                                       // 1448\n        // handle am pm                                                                                                // 1449\n        if (config._isPm && config._a[HOUR] < 12) {                                                                    // 1450\n            config._a[HOUR] += 12;                                                                                     // 1451\n        }                                                                                                              // 1452\n        // if is 12 am, change hours to 0                                                                              // 1453\n        if (config._isPm === false && config._a[HOUR] === 12) {                                                        // 1454\n            config._a[HOUR] = 0;                                                                                       // 1455\n        }                                                                                                              // 1456\n                                                                                                                       // 1457\n        dateFromConfig(config);                                                                                        // 1458\n        checkOverflow(config);                                                                                         // 1459\n    }                                                                                                                  // 1460\n                                                                                                                       // 1461\n    function unescapeFormat(s) {                                                                                       // 1462\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {                   // 1463\n            return p1 || p2 || p3 || p4;                                                                               // 1464\n        });                                                                                                            // 1465\n    }                                                                                                                  // 1466\n                                                                                                                       // 1467\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 1468\n    function regexpEscape(s) {                                                                                         // 1469\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                            // 1470\n    }                                                                                                                  // 1471\n                                                                                                                       // 1472\n    // date from string and array of format strings                                                                    // 1473\n    function makeDateFromStringAndArray(config) {                                                                      // 1474\n        var tempConfig,                                                                                                // 1475\n            bestMoment,                                                                                                // 1476\n                                                                                                                       // 1477\n            scoreToBeat,                                                                                               // 1478\n            i,                                                                                                         // 1479\n            currentScore;                                                                                              // 1480\n                                                                                                                       // 1481\n        if (config._f.length === 0) {                                                                                  // 1482\n            config._pf.invalidFormat = true;                                                                           // 1483\n            config._d = new Date(NaN);                                                                                 // 1484\n            return;                                                                                                    // 1485\n        }                                                                                                              // 1486\n                                                                                                                       // 1487\n        for (i = 0; i < config._f.length; i++) {                                                                       // 1488\n            currentScore = 0;                                                                                          // 1489\n            tempConfig = copyConfig({}, config);                                                                       // 1490\n            tempConfig._pf = defaultParsingFlags();                                                                    // 1491\n            tempConfig._f = config._f[i];                                                                              // 1492\n            makeDateFromStringAndFormat(tempConfig);                                                                   // 1493\n                                                                                                                       // 1494\n            if (!isValid(tempConfig)) {                                                                                // 1495\n                continue;                                                                                              // 1496\n            }                                                                                                          // 1497\n                                                                                                                       // 1498\n            // if there is any input that was not parsed add a penalty for that format                                 // 1499\n            currentScore += tempConfig._pf.charsLeftOver;                                                              // 1500\n                                                                                                                       // 1501\n            //or tokens                                                                                                // 1502\n            currentScore += tempConfig._pf.unusedTokens.length * 10;                                                   // 1503\n                                                                                                                       // 1504\n            tempConfig._pf.score = currentScore;                                                                       // 1505\n                                                                                                                       // 1506\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 1507\n                scoreToBeat = currentScore;                                                                            // 1508\n                bestMoment = tempConfig;                                                                               // 1509\n            }                                                                                                          // 1510\n        }                                                                                                              // 1511\n                                                                                                                       // 1512\n        extend(config, bestMoment || tempConfig);                                                                      // 1513\n    }                                                                                                                  // 1514\n                                                                                                                       // 1515\n    // date from iso format                                                                                            // 1516\n    function parseISO(config) {                                                                                        // 1517\n        var i, l,                                                                                                      // 1518\n            string = config._i,                                                                                        // 1519\n            match = isoRegex.exec(string);                                                                             // 1520\n                                                                                                                       // 1521\n        if (match) {                                                                                                   // 1522\n            config._pf.iso = true;                                                                                     // 1523\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 1524\n                if (isoDates[i][1].exec(string)) {                                                                     // 1525\n                    // match[5] should be \"T\" or undefined                                                             // 1526\n                    config._f = isoDates[i][0] + (match[6] || ' ');                                                    // 1527\n                    break;                                                                                             // 1528\n                }                                                                                                      // 1529\n            }                                                                                                          // 1530\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                             // 1531\n                if (isoTimes[i][1].exec(string)) {                                                                     // 1532\n                    config._f += isoTimes[i][0];                                                                       // 1533\n                    break;                                                                                             // 1534\n                }                                                                                                      // 1535\n            }                                                                                                          // 1536\n            if (string.match(parseTokenTimezone)) {                                                                    // 1537\n                config._f += 'Z';                                                                                      // 1538\n            }                                                                                                          // 1539\n            makeDateFromStringAndFormat(config);                                                                       // 1540\n        } else {                                                                                                       // 1541\n            config._isValid = false;                                                                                   // 1542\n        }                                                                                                              // 1543\n    }                                                                                                                  // 1544\n                                                                                                                       // 1545\n    // date from iso format or fallback                                                                                // 1546\n    function makeDateFromString(config) {                                                                              // 1547\n        parseISO(config);                                                                                              // 1548\n        if (config._isValid === false) {                                                                               // 1549\n            delete config._isValid;                                                                                    // 1550\n            moment.createFromInputFallback(config);                                                                    // 1551\n        }                                                                                                              // 1552\n    }                                                                                                                  // 1553\n                                                                                                                       // 1554\n    function makeDateFromInput(config) {                                                                               // 1555\n        var input = config._i, matched;                                                                                // 1556\n        if (input === undefined) {                                                                                     // 1557\n            config._d = new Date();                                                                                    // 1558\n        } else if (isDate(input)) {                                                                                    // 1559\n            config._d = new Date(+input);                                                                              // 1560\n        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {                                                 // 1561\n            config._d = new Date(+matched[1]);                                                                         // 1562\n        } else if (typeof input === 'string') {                                                                        // 1563\n            makeDateFromString(config);                                                                                // 1564\n        } else if (isArray(input)) {                                                                                   // 1565\n            config._a = input.slice(0);                                                                                // 1566\n            dateFromConfig(config);                                                                                    // 1567\n        } else if (typeof(input) === 'object') {                                                                       // 1568\n            dateFromObject(config);                                                                                    // 1569\n        } else if (typeof(input) === 'number') {                                                                       // 1570\n            // from milliseconds                                                                                       // 1571\n            config._d = new Date(input);                                                                               // 1572\n        } else {                                                                                                       // 1573\n            moment.createFromInputFallback(config);                                                                    // 1574\n        }                                                                                                              // 1575\n    }                                                                                                                  // 1576\n                                                                                                                       // 1577\n    function makeDate(y, m, d, h, M, s, ms) {                                                                          // 1578\n        //can't just apply() to create a date:                                                                         // 1579\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 1581\n                                                                                                                       // 1582\n        //the date constructor doesn't accept years < 1970                                                             // 1583\n        if (y < 1970) {                                                                                                // 1584\n            date.setFullYear(y);                                                                                       // 1585\n        }                                                                                                              // 1586\n        return date;                                                                                                   // 1587\n    }                                                                                                                  // 1588\n                                                                                                                       // 1589\n    function makeUTCDate(y) {                                                                                          // 1590\n        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 1591\n        if (y < 1970) {                                                                                                // 1592\n            date.setUTCFullYear(y);                                                                                    // 1593\n        }                                                                                                              // 1594\n        return date;                                                                                                   // 1595\n    }                                                                                                                  // 1596\n                                                                                                                       // 1597\n    function parseWeekday(input, locale) {                                                                             // 1598\n        if (typeof input === 'string') {                                                                               // 1599\n            if (!isNaN(input)) {                                                                                       // 1600\n                input = parseInt(input, 10);                                                                           // 1601\n            }                                                                                                          // 1602\n            else {                                                                                                     // 1603\n                input = locale.weekdaysParse(input);                                                                   // 1604\n                if (typeof input !== 'number') {                                                                       // 1605\n                    return null;                                                                                       // 1606\n                }                                                                                                      // 1607\n            }                                                                                                          // 1608\n        }                                                                                                              // 1609\n        return input;                                                                                                  // 1610\n    }                                                                                                                  // 1611\n                                                                                                                       // 1612\n    /************************************                                                                              // 1613\n        Relative Time                                                                                                  // 1614\n    ************************************/                                                                              // 1615\n                                                                                                                       // 1616\n                                                                                                                       // 1617\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 1618\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 1619\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 1620\n    }                                                                                                                  // 1621\n                                                                                                                       // 1622\n    function relativeTime(posNegDuration, withoutSuffix, locale) {                                                     // 1623\n        var duration = moment.duration(posNegDuration).abs(),                                                          // 1624\n            seconds = round(duration.as('s')),                                                                         // 1625\n            minutes = round(duration.as('m')),                                                                         // 1626\n            hours = round(duration.as('h')),                                                                           // 1627\n            days = round(duration.as('d')),                                                                            // 1628\n            months = round(duration.as('M')),                                                                          // 1629\n            years = round(duration.as('y')),                                                                           // 1630\n                                                                                                                       // 1631\n            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||                                             // 1632\n                minutes === 1 && ['m'] ||                                                                              // 1633\n                minutes < relativeTimeThresholds.m && ['mm', minutes] ||                                               // 1634\n                hours === 1 && ['h'] ||                                                                                // 1635\n                hours < relativeTimeThresholds.h && ['hh', hours] ||                                                   // 1636\n                days === 1 && ['d'] ||                                                                                 // 1637\n                days < relativeTimeThresholds.d && ['dd', days] ||                                                     // 1638\n                months === 1 && ['M'] ||                                                                               // 1639\n                months < relativeTimeThresholds.M && ['MM', months] ||                                                 // 1640\n                years === 1 && ['y'] || ['yy', years];                                                                 // 1641\n                                                                                                                       // 1642\n        args[2] = withoutSuffix;                                                                                       // 1643\n        args[3] = +posNegDuration > 0;                                                                                 // 1644\n        args[4] = locale;                                                                                              // 1645\n        return substituteTimeAgo.apply({}, args);                                                                      // 1646\n    }                                                                                                                  // 1647\n                                                                                                                       // 1648\n                                                                                                                       // 1649\n    /************************************                                                                              // 1650\n        Week of Year                                                                                                   // 1651\n    ************************************/                                                                              // 1652\n                                                                                                                       // 1653\n                                                                                                                       // 1654\n    // firstDayOfWeek       0 = sun, 6 = sat                                                                           // 1655\n    //                      the day of the week that starts the week                                                   // 1656\n    //                      (usually sunday or monday)                                                                 // 1657\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat                                                                           // 1658\n    //                      the first week is the week that contains the first                                         // 1659\n    //                      of this day of the week                                                                    // 1660\n    //                      (eg. ISO weeks use thursday (4))                                                           // 1661\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {                                                   // 1662\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,                                                               // 1663\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),                                                        // 1664\n            adjustedMoment;                                                                                            // 1665\n                                                                                                                       // 1666\n                                                                                                                       // 1667\n        if (daysToDayOfWeek > end) {                                                                                   // 1668\n            daysToDayOfWeek -= 7;                                                                                      // 1669\n        }                                                                                                              // 1670\n                                                                                                                       // 1671\n        if (daysToDayOfWeek < end - 7) {                                                                               // 1672\n            daysToDayOfWeek += 7;                                                                                      // 1673\n        }                                                                                                              // 1674\n                                                                                                                       // 1675\n        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');                                                        // 1676\n        return {                                                                                                       // 1677\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),                                                           // 1678\n            year: adjustedMoment.year()                                                                                // 1679\n        };                                                                                                             // 1680\n    }                                                                                                                  // 1681\n                                                                                                                       // 1682\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1683\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {                           // 1684\n        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;                                             // 1685\n                                                                                                                       // 1686\n        d = d === 0 ? 7 : d;                                                                                           // 1687\n        weekday = weekday != null ? weekday : firstDayOfWeek;                                                          // 1688\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);            // 1689\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;                                       // 1690\n                                                                                                                       // 1691\n        return {                                                                                                       // 1692\n            year: dayOfYear > 0 ? year : year - 1,                                                                     // 1693\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear                                   // 1694\n        };                                                                                                             // 1695\n    }                                                                                                                  // 1696\n                                                                                                                       // 1697\n    /************************************                                                                              // 1698\n        Top Level Functions                                                                                            // 1699\n    ************************************/                                                                              // 1700\n                                                                                                                       // 1701\n    function makeMoment(config) {                                                                                      // 1702\n        var input = config._i,                                                                                         // 1703\n            format = config._f;                                                                                        // 1704\n                                                                                                                       // 1705\n        config._locale = config._locale || moment.localeData(config._l);                                               // 1706\n                                                                                                                       // 1707\n        if (input === null || (format === undefined && input === '')) {                                                // 1708\n            return moment.invalid({nullInput: true});                                                                  // 1709\n        }                                                                                                              // 1710\n                                                                                                                       // 1711\n        if (typeof input === 'string') {                                                                               // 1712\n            config._i = input = config._locale.preparse(input);                                                        // 1713\n        }                                                                                                              // 1714\n                                                                                                                       // 1715\n        if (moment.isMoment(input)) {                                                                                  // 1716\n            return new Moment(input, true);                                                                            // 1717\n        } else if (format) {                                                                                           // 1718\n            if (isArray(format)) {                                                                                     // 1719\n                makeDateFromStringAndArray(config);                                                                    // 1720\n            } else {                                                                                                   // 1721\n                makeDateFromStringAndFormat(config);                                                                   // 1722\n            }                                                                                                          // 1723\n        } else {                                                                                                       // 1724\n            makeDateFromInput(config);                                                                                 // 1725\n        }                                                                                                              // 1726\n                                                                                                                       // 1727\n        return new Moment(config);                                                                                     // 1728\n    }                                                                                                                  // 1729\n                                                                                                                       // 1730\n    moment = function (input, format, locale, strict) {                                                                // 1731\n        var c;                                                                                                         // 1732\n                                                                                                                       // 1733\n        if (typeof(locale) === \"boolean\") {                                                                            // 1734\n            strict = locale;                                                                                           // 1735\n            locale = undefined;                                                                                        // 1736\n        }                                                                                                              // 1737\n        // object construction must be done this way.                                                                  // 1738\n        // https://github.com/moment/moment/issues/1423                                                                // 1739\n        c = {};                                                                                                        // 1740\n        c._isAMomentObject = true;                                                                                     // 1741\n        c._i = input;                                                                                                  // 1742\n        c._f = format;                                                                                                 // 1743\n        c._l = locale;                                                                                                 // 1744\n        c._strict = strict;                                                                                            // 1745\n        c._isUTC = false;                                                                                              // 1746\n        c._pf = defaultParsingFlags();                                                                                 // 1747\n                                                                                                                       // 1748\n        return makeMoment(c);                                                                                          // 1749\n    };                                                                                                                 // 1750\n                                                                                                                       // 1751\n    moment.suppressDeprecationWarnings = false;                                                                        // 1752\n                                                                                                                       // 1753\n    moment.createFromInputFallback = deprecate(                                                                        // 1754\n        'moment construction falls back to js Date. This is ' +                                                        // 1755\n        'discouraged and will be removed in upcoming major ' +                                                         // 1756\n        'release. Please refer to ' +                                                                                  // 1757\n        'https://github.com/moment/moment/issues/1407 for more info.',                                                 // 1758\n        function (config) {                                                                                            // 1759\n            config._d = new Date(config._i);                                                                           // 1760\n        }                                                                                                              // 1761\n    );                                                                                                                 // 1762\n                                                                                                                       // 1763\n    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 1764\n    // other. This relies on the function fn to be transitive.                                                         // 1765\n    //                                                                                                                 // 1766\n    // moments should either be an array of moment objects or an array, whose                                          // 1767\n    // first element is an array of moment objects.                                                                    // 1768\n    function pickBy(fn, moments) {                                                                                     // 1769\n        var res, i;                                                                                                    // 1770\n        if (moments.length === 1 && isArray(moments[0])) {                                                             // 1771\n            moments = moments[0];                                                                                      // 1772\n        }                                                                                                              // 1773\n        if (!moments.length) {                                                                                         // 1774\n            return moment();                                                                                           // 1775\n        }                                                                                                              // 1776\n        res = moments[0];                                                                                              // 1777\n        for (i = 1; i < moments.length; ++i) {                                                                         // 1778\n            if (moments[i][fn](res)) {                                                                                 // 1779\n                res = moments[i];                                                                                      // 1780\n            }                                                                                                          // 1781\n        }                                                                                                              // 1782\n        return res;                                                                                                    // 1783\n    }                                                                                                                  // 1784\n                                                                                                                       // 1785\n    moment.min = function () {                                                                                         // 1786\n        var args = [].slice.call(arguments, 0);                                                                        // 1787\n                                                                                                                       // 1788\n        return pickBy('isBefore', args);                                                                               // 1789\n    };                                                                                                                 // 1790\n                                                                                                                       // 1791\n    moment.max = function () {                                                                                         // 1792\n        var args = [].slice.call(arguments, 0);                                                                        // 1793\n                                                                                                                       // 1794\n        return pickBy('isAfter', args);                                                                                // 1795\n    };                                                                                                                 // 1796\n                                                                                                                       // 1797\n    // creating with utc                                                                                               // 1798\n    moment.utc = function (input, format, locale, strict) {                                                            // 1799\n        var c;                                                                                                         // 1800\n                                                                                                                       // 1801\n        if (typeof(locale) === \"boolean\") {                                                                            // 1802\n            strict = locale;                                                                                           // 1803\n            locale = undefined;                                                                                        // 1804\n        }                                                                                                              // 1805\n        // object construction must be done this way.                                                                  // 1806\n        // https://github.com/moment/moment/issues/1423                                                                // 1807\n        c = {};                                                                                                        // 1808\n        c._isAMomentObject = true;                                                                                     // 1809\n        c._useUTC = true;                                                                                              // 1810\n        c._isUTC = true;                                                                                               // 1811\n        c._l = locale;                                                                                                 // 1812\n        c._i = input;                                                                                                  // 1813\n        c._f = format;                                                                                                 // 1814\n        c._strict = strict;                                                                                            // 1815\n        c._pf = defaultParsingFlags();                                                                                 // 1816\n                                                                                                                       // 1817\n        return makeMoment(c).utc();                                                                                    // 1818\n    };                                                                                                                 // 1819\n                                                                                                                       // 1820\n    // creating with unix timestamp (in seconds)                                                                       // 1821\n    moment.unix = function (input) {                                                                                   // 1822\n        return moment(input * 1000);                                                                                   // 1823\n    };                                                                                                                 // 1824\n                                                                                                                       // 1825\n    // duration                                                                                                        // 1826\n    moment.duration = function (input, key) {                                                                          // 1827\n        var duration = input,                                                                                          // 1828\n            // matching against regexp is expensive, do it on demand                                                   // 1829\n            match = null,                                                                                              // 1830\n            sign,                                                                                                      // 1831\n            ret,                                                                                                       // 1832\n            parseIso,                                                                                                  // 1833\n            diffRes;                                                                                                   // 1834\n                                                                                                                       // 1835\n        if (moment.isDuration(input)) {                                                                                // 1836\n            duration = {                                                                                               // 1837\n                ms: input._milliseconds,                                                                               // 1838\n                d: input._days,                                                                                        // 1839\n                M: input._months                                                                                       // 1840\n            };                                                                                                         // 1841\n        } else if (typeof input === 'number') {                                                                        // 1842\n            duration = {};                                                                                             // 1843\n            if (key) {                                                                                                 // 1844\n                duration[key] = input;                                                                                 // 1845\n            } else {                                                                                                   // 1846\n                duration.milliseconds = input;                                                                         // 1847\n            }                                                                                                          // 1848\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {                                                  // 1849\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1850\n            duration = {                                                                                               // 1851\n                y: 0,                                                                                                  // 1852\n                d: toInt(match[DATE]) * sign,                                                                          // 1853\n                h: toInt(match[HOUR]) * sign,                                                                          // 1854\n                m: toInt(match[MINUTE]) * sign,                                                                        // 1855\n                s: toInt(match[SECOND]) * sign,                                                                        // 1856\n                ms: toInt(match[MILLISECOND]) * sign                                                                   // 1857\n            };                                                                                                         // 1858\n        } else if (!!(match = isoDurationRegex.exec(input))) {                                                         // 1859\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1860\n            parseIso = function (inp) {                                                                                // 1861\n                // We'd normally use ~~inp for this, but unfortunately it also                                         // 1862\n                // converts floats to ints.                                                                            // 1863\n                // inp may be undefined, so careful calling replace on it.                                             // 1864\n                var res = inp && parseFloat(inp.replace(',', '.'));                                                    // 1865\n                // apply sign while we're at it                                                                        // 1866\n                return (isNaN(res) ? 0 : res) * sign;                                                                  // 1867\n            };                                                                                                         // 1868\n            duration = {                                                                                               // 1869\n                y: parseIso(match[2]),                                                                                 // 1870\n                M: parseIso(match[3]),                                                                                 // 1871\n                d: parseIso(match[4]),                                                                                 // 1872\n                h: parseIso(match[5]),                                                                                 // 1873\n                m: parseIso(match[6]),                                                                                 // 1874\n                s: parseIso(match[7]),                                                                                 // 1875\n                w: parseIso(match[8])                                                                                  // 1876\n            };                                                                                                         // 1877\n        } else if (typeof duration === 'object' &&                                                                     // 1878\n                ('from' in duration || 'to' in duration)) {                                                            // 1879\n            diffRes = momentsDifference(moment(duration.from), moment(duration.to));                                   // 1880\n                                                                                                                       // 1881\n            duration = {};                                                                                             // 1882\n            duration.ms = diffRes.milliseconds;                                                                        // 1883\n            duration.M = diffRes.months;                                                                               // 1884\n        }                                                                                                              // 1885\n                                                                                                                       // 1886\n        ret = new Duration(duration);                                                                                  // 1887\n                                                                                                                       // 1888\n        if (moment.isDuration(input) && input.hasOwnProperty('_locale')) {                                             // 1889\n            ret._locale = input._locale;                                                                               // 1890\n        }                                                                                                              // 1891\n                                                                                                                       // 1892\n        return ret;                                                                                                    // 1893\n    };                                                                                                                 // 1894\n                                                                                                                       // 1895\n    // version number                                                                                                  // 1896\n    moment.version = VERSION;                                                                                          // 1897\n                                                                                                                       // 1898\n    // default format                                                                                                  // 1899\n    moment.defaultFormat = isoFormat;                                                                                  // 1900\n                                                                                                                       // 1901\n    // constant that refers to the ISO standard                                                                        // 1902\n    moment.ISO_8601 = function () {};                                                                                  // 1903\n                                                                                                                       // 1904\n    // Plugins that add properties should also add the key here (null value),                                          // 1905\n    // so we can properly clone ourselves.                                                                             // 1906\n    moment.momentProperties = momentProperties;                                                                        // 1907\n                                                                                                                       // 1908\n    // This function will be called whenever a moment is mutated.                                                      // 1909\n    // It is intended to keep the offset in sync with the timezone.                                                    // 1910\n    moment.updateOffset = function () {};                                                                              // 1911\n                                                                                                                       // 1912\n    // This function allows you to set a threshold for relative time strings                                           // 1913\n    moment.relativeTimeThreshold = function (threshold, limit) {                                                       // 1914\n        if (relativeTimeThresholds[threshold] === undefined) {                                                         // 1915\n            return false;                                                                                              // 1916\n        }                                                                                                              // 1917\n        if (limit === undefined) {                                                                                     // 1918\n            return relativeTimeThresholds[threshold];                                                                  // 1919\n        }                                                                                                              // 1920\n        relativeTimeThresholds[threshold] = limit;                                                                     // 1921\n        return true;                                                                                                   // 1922\n    };                                                                                                                 // 1923\n                                                                                                                       // 1924\n    moment.lang = deprecate(                                                                                           // 1925\n        \"moment.lang is deprecated. Use moment.locale instead.\",                                                       // 1926\n        function (key, value) {                                                                                        // 1927\n            return moment.locale(key, value);                                                                          // 1928\n        }                                                                                                              // 1929\n    );                                                                                                                 // 1930\n                                                                                                                       // 1931\n    // This function will load locale and then set the global locale.  If                                              // 1932\n    // no arguments are passed in, it will simply return the current global                                            // 1933\n    // locale key.                                                                                                     // 1934\n    moment.locale = function (key, values) {                                                                           // 1935\n        var data;                                                                                                      // 1936\n        if (key) {                                                                                                     // 1937\n            if (typeof(values) !== \"undefined\") {                                                                      // 1938\n                data = moment.defineLocale(key, values);                                                               // 1939\n            }                                                                                                          // 1940\n            else {                                                                                                     // 1941\n                data = moment.localeData(key);                                                                         // 1942\n            }                                                                                                          // 1943\n                                                                                                                       // 1944\n            if (data) {                                                                                                // 1945\n                moment.duration._locale = moment._locale = data;                                                       // 1946\n            }                                                                                                          // 1947\n        }                                                                                                              // 1948\n                                                                                                                       // 1949\n        return moment._locale._abbr;                                                                                   // 1950\n    };                                                                                                                 // 1951\n                                                                                                                       // 1952\n    moment.defineLocale = function (name, values) {                                                                    // 1953\n        if (values !== null) {                                                                                         // 1954\n            values.abbr = name;                                                                                        // 1955\n            if (!locales[name]) {                                                                                      // 1956\n                locales[name] = new Locale();                                                                          // 1957\n            }                                                                                                          // 1958\n            locales[name].set(values);                                                                                 // 1959\n                                                                                                                       // 1960\n            // backwards compat for now: also set the locale                                                           // 1961\n            moment.locale(name);                                                                                       // 1962\n                                                                                                                       // 1963\n            return locales[name];                                                                                      // 1964\n        } else {                                                                                                       // 1965\n            // useful for testing                                                                                      // 1966\n            delete locales[name];                                                                                      // 1967\n            return null;                                                                                               // 1968\n        }                                                                                                              // 1969\n    };                                                                                                                 // 1970\n                                                                                                                       // 1971\n    moment.langData = deprecate(                                                                                       // 1972\n        \"moment.langData is deprecated. Use moment.localeData instead.\",                                               // 1973\n        function (key) {                                                                                               // 1974\n            return moment.localeData(key);                                                                             // 1975\n        }                                                                                                              // 1976\n    );                                                                                                                 // 1977\n                                                                                                                       // 1978\n    // returns locale data                                                                                             // 1979\n    moment.localeData = function (key) {                                                                               // 1980\n        var locale;                                                                                                    // 1981\n                                                                                                                       // 1982\n        if (key && key._locale && key._locale._abbr) {                                                                 // 1983\n            key = key._locale._abbr;                                                                                   // 1984\n        }                                                                                                              // 1985\n                                                                                                                       // 1986\n        if (!key) {                                                                                                    // 1987\n            return moment._locale;                                                                                     // 1988\n        }                                                                                                              // 1989\n                                                                                                                       // 1990\n        if (!isArray(key)) {                                                                                           // 1991\n            //short-circuit everything else                                                                            // 1992\n            locale = loadLocale(key);                                                                                  // 1993\n            if (locale) {                                                                                              // 1994\n                return locale;                                                                                         // 1995\n            }                                                                                                          // 1996\n            key = [key];                                                                                               // 1997\n        }                                                                                                              // 1998\n                                                                                                                       // 1999\n        return chooseLocale(key);                                                                                      // 2000\n    };                                                                                                                 // 2001\n                                                                                                                       // 2002\n    // compare moment object                                                                                           // 2003\n    moment.isMoment = function (obj) {                                                                                 // 2004\n        return obj instanceof Moment ||                                                                                // 2005\n            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));                                                  // 2006\n    };                                                                                                                 // 2007\n                                                                                                                       // 2008\n    // for typechecking Duration objects                                                                               // 2009\n    moment.isDuration = function (obj) {                                                                               // 2010\n        return obj instanceof Duration;                                                                                // 2011\n    };                                                                                                                 // 2012\n                                                                                                                       // 2013\n    for (i = lists.length - 1; i >= 0; --i) {                                                                          // 2014\n        makeList(lists[i]);                                                                                            // 2015\n    }                                                                                                                  // 2016\n                                                                                                                       // 2017\n    moment.normalizeUnits = function (units) {                                                                         // 2018\n        return normalizeUnits(units);                                                                                  // 2019\n    };                                                                                                                 // 2020\n                                                                                                                       // 2021\n    moment.invalid = function (flags) {                                                                                // 2022\n        var m = moment.utc(NaN);                                                                                       // 2023\n        if (flags != null) {                                                                                           // 2024\n            extend(m._pf, flags);                                                                                      // 2025\n        }                                                                                                              // 2026\n        else {                                                                                                         // 2027\n            m._pf.userInvalidated = true;                                                                              // 2028\n        }                                                                                                              // 2029\n                                                                                                                       // 2030\n        return m;                                                                                                      // 2031\n    };                                                                                                                 // 2032\n                                                                                                                       // 2033\n    moment.parseZone = function () {                                                                                   // 2034\n        return moment.apply(null, arguments).parseZone();                                                              // 2035\n    };                                                                                                                 // 2036\n                                                                                                                       // 2037\n    moment.parseTwoDigitYear = function (input) {                                                                      // 2038\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 2039\n    };                                                                                                                 // 2040\n                                                                                                                       // 2041\n    /************************************                                                                              // 2042\n        Moment Prototype                                                                                               // 2043\n    ************************************/                                                                              // 2044\n                                                                                                                       // 2045\n                                                                                                                       // 2046\n    extend(moment.fn = Moment.prototype, {                                                                             // 2047\n                                                                                                                       // 2048\n        clone : function () {                                                                                          // 2049\n            return moment(this);                                                                                       // 2050\n        },                                                                                                             // 2051\n                                                                                                                       // 2052\n        valueOf : function () {                                                                                        // 2053\n            return +this._d + ((this._offset || 0) * 60000);                                                           // 2054\n        },                                                                                                             // 2055\n                                                                                                                       // 2056\n        unix : function () {                                                                                           // 2057\n            return Math.floor(+this / 1000);                                                                           // 2058\n        },                                                                                                             // 2059\n                                                                                                                       // 2060\n        toString : function () {                                                                                       // 2061\n            return this.clone().locale('en').format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");                               // 2062\n        },                                                                                                             // 2063\n                                                                                                                       // 2064\n        toDate : function () {                                                                                         // 2065\n            return this._offset ? new Date(+this) : this._d;                                                           // 2066\n        },                                                                                                             // 2067\n                                                                                                                       // 2068\n        toISOString : function () {                                                                                    // 2069\n            var m = moment(this).utc();                                                                                // 2070\n            if (0 < m.year() && m.year() <= 9999) {                                                                    // 2071\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                // 2072\n            } else {                                                                                                   // 2073\n                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                              // 2074\n            }                                                                                                          // 2075\n        },                                                                                                             // 2076\n                                                                                                                       // 2077\n        toArray : function () {                                                                                        // 2078\n            var m = this;                                                                                              // 2079\n            return [                                                                                                   // 2080\n                m.year(),                                                                                              // 2081\n                m.month(),                                                                                             // 2082\n                m.date(),                                                                                              // 2083\n                m.hours(),                                                                                             // 2084\n                m.minutes(),                                                                                           // 2085\n                m.seconds(),                                                                                           // 2086\n                m.milliseconds()                                                                                       // 2087\n            ];                                                                                                         // 2088\n        },                                                                                                             // 2089\n                                                                                                                       // 2090\n        isValid : function () {                                                                                        // 2091\n            return isValid(this);                                                                                      // 2092\n        },                                                                                                             // 2093\n                                                                                                                       // 2094\n        isDSTShifted : function () {                                                                                   // 2095\n            if (this._a) {                                                                                             // 2096\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }                                                                                                          // 2098\n                                                                                                                       // 2099\n            return false;                                                                                              // 2100\n        },                                                                                                             // 2101\n                                                                                                                       // 2102\n        parsingFlags : function () {                                                                                   // 2103\n            return extend({}, this._pf);                                                                               // 2104\n        },                                                                                                             // 2105\n                                                                                                                       // 2106\n        invalidAt: function () {                                                                                       // 2107\n            return this._pf.overflow;                                                                                  // 2108\n        },                                                                                                             // 2109\n                                                                                                                       // 2110\n        utc : function (keepLocalTime) {                                                                               // 2111\n            return this.zone(0, keepLocalTime);                                                                        // 2112\n        },                                                                                                             // 2113\n                                                                                                                       // 2114\n        local : function (keepLocalTime) {                                                                             // 2115\n            if (this._isUTC) {                                                                                         // 2116\n                this.zone(0, keepLocalTime);                                                                           // 2117\n                this._isUTC = false;                                                                                   // 2118\n                                                                                                                       // 2119\n                if (keepLocalTime) {                                                                                   // 2120\n                    this.add(this._d.getTimezoneOffset(), 'm');                                                        // 2121\n                }                                                                                                      // 2122\n            }                                                                                                          // 2123\n            return this;                                                                                               // 2124\n        },                                                                                                             // 2125\n                                                                                                                       // 2126\n        format : function (inputString) {                                                                              // 2127\n            var output = formatMoment(this, inputString || moment.defaultFormat);                                      // 2128\n            return this.localeData().postformat(output);                                                               // 2129\n        },                                                                                                             // 2130\n                                                                                                                       // 2131\n        add : createAdder(1, 'add'),                                                                                   // 2132\n                                                                                                                       // 2133\n        subtract : createAdder(-1, 'subtract'),                                                                        // 2134\n                                                                                                                       // 2135\n        diff : function (input, units, asFloat) {                                                                      // 2136\n            var that = makeAs(input, this),                                                                            // 2137\n                zoneDiff = (this.zone() - that.zone()) * 6e4,                                                          // 2138\n                diff, output;                                                                                          // 2139\n                                                                                                                       // 2140\n            units = normalizeUnits(units);                                                                             // 2141\n                                                                                                                       // 2142\n            if (units === 'year' || units === 'month') {                                                               // 2143\n                // average number of days in the months in the given dates                                             // 2144\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2                   // 2145\n                // difference in months                                                                                // 2146\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());                           // 2147\n                // adjust by taking difference in days, average number of days                                         // 2148\n                // and dst in the given months.                                                                        // 2149\n                output += ((this - moment(this).startOf('month')) -                                                    // 2150\n                        (that - moment(that).startOf('month'))) / diff;                                                // 2151\n                // same as above but with zones, to negate all dst                                                     // 2152\n                output -= ((this.zone() - moment(this).startOf('month').zone()) -                                      // 2153\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;                            // 2154\n                if (units === 'year') {                                                                                // 2155\n                    output = output / 12;                                                                              // 2156\n                }                                                                                                      // 2157\n            } else {                                                                                                   // 2158\n                diff = (this - that);                                                                                  // 2159\n                output = units === 'second' ? diff / 1e3 : // 1000                                                     // 2160\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60                                                     // 2161\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60                                                 // 2162\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                   // 2163\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst             // 2164\n                    diff;                                                                                              // 2165\n            }                                                                                                          // 2166\n            return asFloat ? output : absRound(output);                                                                // 2167\n        },                                                                                                             // 2168\n                                                                                                                       // 2169\n        from : function (time, withoutSuffix) {                                                                        // 2170\n            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);             // 2171\n        },                                                                                                             // 2172\n                                                                                                                       // 2173\n        fromNow : function (withoutSuffix) {                                                                           // 2174\n            return this.from(moment(), withoutSuffix);                                                                 // 2175\n        },                                                                                                             // 2176\n                                                                                                                       // 2177\n        calendar : function (time) {                                                                                   // 2178\n            // We want to compare the start of today, vs this.                                                         // 2179\n            // Getting start-of-today depends on whether we're zone'd or not.                                          // 2180\n            var now = time || moment(),                                                                                // 2181\n                sod = makeAs(now, this).startOf('day'),                                                                // 2182\n                diff = this.diff(sod, 'days', true),                                                                   // 2183\n                format = diff < -6 ? 'sameElse' :                                                                      // 2184\n                    diff < -1 ? 'lastWeek' :                                                                           // 2185\n                    diff < 0 ? 'lastDay' :                                                                             // 2186\n                    diff < 1 ? 'sameDay' :                                                                             // 2187\n                    diff < 2 ? 'nextDay' :                                                                             // 2188\n                    diff < 7 ? 'nextWeek' : 'sameElse';                                                                // 2189\n            return this.format(this.localeData().calendar(format, this));                                              // 2190\n        },                                                                                                             // 2191\n                                                                                                                       // 2192\n        isLeapYear : function () {                                                                                     // 2193\n            return isLeapYear(this.year());                                                                            // 2194\n        },                                                                                                             // 2195\n                                                                                                                       // 2196\n        isDST : function () {                                                                                          // 2197\n            return (this.zone() < this.clone().month(0).zone() ||                                                      // 2198\n                this.zone() < this.clone().month(5).zone());                                                           // 2199\n        },                                                                                                             // 2200\n                                                                                                                       // 2201\n        day : function (input) {                                                                                       // 2202\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                            // 2203\n            if (input != null) {                                                                                       // 2204\n                input = parseWeekday(input, this.localeData());                                                        // 2205\n                return this.add(input - day, 'd');                                                                     // 2206\n            } else {                                                                                                   // 2207\n                return day;                                                                                            // 2208\n            }                                                                                                          // 2209\n        },                                                                                                             // 2210\n                                                                                                                       // 2211\n        month : makeAccessor('Month', true),                                                                           // 2212\n                                                                                                                       // 2213\n        startOf : function (units) {                                                                                   // 2214\n            units = normalizeUnits(units);                                                                             // 2215\n            // the following switch intentionally omits break keywords                                                 // 2216\n            // to utilize falling through the cases.                                                                   // 2217\n            switch (units) {                                                                                           // 2218\n            case 'year':                                                                                               // 2219\n                this.month(0);                                                                                         // 2220\n                /* falls through */                                                                                    // 2221\n            case 'quarter':                                                                                            // 2222\n            case 'month':                                                                                              // 2223\n                this.date(1);                                                                                          // 2224\n                /* falls through */                                                                                    // 2225\n            case 'week':                                                                                               // 2226\n            case 'isoWeek':                                                                                            // 2227\n            case 'day':                                                                                                // 2228\n                this.hours(0);                                                                                         // 2229\n                /* falls through */                                                                                    // 2230\n            case 'hour':                                                                                               // 2231\n                this.minutes(0);                                                                                       // 2232\n                /* falls through */                                                                                    // 2233\n            case 'minute':                                                                                             // 2234\n                this.seconds(0);                                                                                       // 2235\n                /* falls through */                                                                                    // 2236\n            case 'second':                                                                                             // 2237\n                this.milliseconds(0);                                                                                  // 2238\n                /* falls through */                                                                                    // 2239\n            }                                                                                                          // 2240\n                                                                                                                       // 2241\n            // weeks are a special case                                                                                // 2242\n            if (units === 'week') {                                                                                    // 2243\n                this.weekday(0);                                                                                       // 2244\n            } else if (units === 'isoWeek') {                                                                          // 2245\n                this.isoWeekday(1);                                                                                    // 2246\n            }                                                                                                          // 2247\n                                                                                                                       // 2248\n            // quarters are also special                                                                               // 2249\n            if (units === 'quarter') {                                                                                 // 2250\n                this.month(Math.floor(this.month() / 3) * 3);                                                          // 2251\n            }                                                                                                          // 2252\n                                                                                                                       // 2253\n            return this;                                                                                               // 2254\n        },                                                                                                             // 2255\n                                                                                                                       // 2256\n        endOf: function (units) {                                                                                      // 2257\n            units = normalizeUnits(units);                                                                             // 2258\n            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');               // 2259\n        },                                                                                                             // 2260\n                                                                                                                       // 2261\n        isAfter: function (input, units) {                                                                             // 2262\n            units = typeof units !== 'undefined' ? units : 'millisecond';                                              // 2263\n            return +this.clone().startOf(units) > +moment(input).startOf(units);                                       // 2264\n        },                                                                                                             // 2265\n                                                                                                                       // 2266\n        isBefore: function (input, units) {                                                                            // 2267\n            units = typeof units !== 'undefined' ? units : 'millisecond';                                              // 2268\n            return +this.clone().startOf(units) < +moment(input).startOf(units);                                       // 2269\n        },                                                                                                             // 2270\n                                                                                                                       // 2271\n        isSame: function (input, units) {                                                                              // 2272\n            units = units || 'ms';                                                                                     // 2273\n            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);                               // 2274\n        },                                                                                                             // 2275\n                                                                                                                       // 2276\n        min: deprecate(                                                                                                // 2277\n                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',   // 2278\n                 function (other) {                                                                                    // 2279\n                     other = moment.apply(null, arguments);                                                            // 2280\n                     return other < this ? this : other;                                                               // 2281\n                 }                                                                                                     // 2282\n         ),                                                                                                            // 2283\n                                                                                                                       // 2284\n        max: deprecate(                                                                                                // 2285\n                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',    // 2286\n                function (other) {                                                                                     // 2287\n                    other = moment.apply(null, arguments);                                                             // 2288\n                    return other > this ? this : other;                                                                // 2289\n                }                                                                                                      // 2290\n        ),                                                                                                             // 2291\n                                                                                                                       // 2292\n        // keepLocalTime = true means only change the timezone, without                                                // 2293\n        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->                                             // 2294\n        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone                                            // 2295\n        // +0200, so we adjust the time as needed, to be valid.                                                        // 2296\n        //                                                                                                             // 2297\n        // Keeping the time actually adds/subtracts (one hour)                                                         // 2298\n        // from the actual represented time. That is why we call updateOffset                                          // 2299\n        // a second time. In case it wants us to change the offset again                                               // 2300\n        // _changeInProgress == true case, then we have to adjust, because                                             // 2301\n        // there is no such time in the given timezone.                                                                // 2302\n        zone : function (input, keepLocalTime) {                                                                       // 2303\n            var offset = this._offset || 0,                                                                            // 2304\n                localAdjust;                                                                                           // 2305\n            if (input != null) {                                                                                       // 2306\n                if (typeof input === 'string') {                                                                       // 2307\n                    input = timezoneMinutesFromString(input);                                                          // 2308\n                }                                                                                                      // 2309\n                if (Math.abs(input) < 16) {                                                                            // 2310\n                    input = input * 60;                                                                                // 2311\n                }                                                                                                      // 2312\n                if (!this._isUTC && keepLocalTime) {                                                                   // 2313\n                    localAdjust = this._d.getTimezoneOffset();                                                         // 2314\n                }                                                                                                      // 2315\n                this._offset = input;                                                                                  // 2316\n                this._isUTC = true;                                                                                    // 2317\n                if (localAdjust != null) {                                                                             // 2318\n                    this.subtract(localAdjust, 'm');                                                                   // 2319\n                }                                                                                                      // 2320\n                if (offset !== input) {                                                                                // 2321\n                    if (!keepLocalTime || this._changeInProgress) {                                                    // 2322\n                        addOrSubtractDurationFromMoment(this,                                                          // 2323\n                                moment.duration(offset - input, 'm'), 1, false);                                       // 2324\n                    } else if (!this._changeInProgress) {                                                              // 2325\n                        this._changeInProgress = true;                                                                 // 2326\n                        moment.updateOffset(this, true);                                                               // 2327\n                        this._changeInProgress = null;                                                                 // 2328\n                    }                                                                                                  // 2329\n                }                                                                                                      // 2330\n            } else {                                                                                                   // 2331\n                return this._isUTC ? offset : this._d.getTimezoneOffset();                                             // 2332\n            }                                                                                                          // 2333\n            return this;                                                                                               // 2334\n        },                                                                                                             // 2335\n                                                                                                                       // 2336\n        zoneAbbr : function () {                                                                                       // 2337\n            return this._isUTC ? 'UTC' : '';                                                                           // 2338\n        },                                                                                                             // 2339\n                                                                                                                       // 2340\n        zoneName : function () {                                                                                       // 2341\n            return this._isUTC ? 'Coordinated Universal Time' : '';                                                    // 2342\n        },                                                                                                             // 2343\n                                                                                                                       // 2344\n        parseZone : function () {                                                                                      // 2345\n            if (this._tzm) {                                                                                           // 2346\n                this.zone(this._tzm);                                                                                  // 2347\n            } else if (typeof this._i === 'string') {                                                                  // 2348\n                this.zone(this._i);                                                                                    // 2349\n            }                                                                                                          // 2350\n            return this;                                                                                               // 2351\n        },                                                                                                             // 2352\n                                                                                                                       // 2353\n        hasAlignedHourOffset : function (input) {                                                                      // 2354\n            if (!input) {                                                                                              // 2355\n                input = 0;                                                                                             // 2356\n            }                                                                                                          // 2357\n            else {                                                                                                     // 2358\n                input = moment(input).zone();                                                                          // 2359\n            }                                                                                                          // 2360\n                                                                                                                       // 2361\n            return (this.zone() - input) % 60 === 0;                                                                   // 2362\n        },                                                                                                             // 2363\n                                                                                                                       // 2364\n        daysInMonth : function () {                                                                                    // 2365\n            return daysInMonth(this.year(), this.month());                                                             // 2366\n        },                                                                                                             // 2367\n                                                                                                                       // 2368\n        dayOfYear : function (input) {                                                                                 // 2369\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;           // 2370\n            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                     // 2371\n        },                                                                                                             // 2372\n                                                                                                                       // 2373\n        quarter : function (input) {                                                                                   // 2374\n            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3); // 2375\n        },                                                                                                             // 2376\n                                                                                                                       // 2377\n        weekYear : function (input) {                                                                                  // 2378\n            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;                // 2379\n            return input == null ? year : this.add((input - year), 'y');                                               // 2380\n        },                                                                                                             // 2381\n                                                                                                                       // 2382\n        isoWeekYear : function (input) {                                                                               // 2383\n            var year = weekOfYear(this, 1, 4).year;                                                                    // 2384\n            return input == null ? year : this.add((input - year), 'y');                                               // 2385\n        },                                                                                                             // 2386\n                                                                                                                       // 2387\n        week : function (input) {                                                                                      // 2388\n            var week = this.localeData().week(this);                                                                   // 2389\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2390\n        },                                                                                                             // 2391\n                                                                                                                       // 2392\n        isoWeek : function (input) {                                                                                   // 2393\n            var week = weekOfYear(this, 1, 4).week;                                                                    // 2394\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2395\n        },                                                                                                             // 2396\n                                                                                                                       // 2397\n        weekday : function (input) {                                                                                   // 2398\n            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                          // 2399\n            return input == null ? weekday : this.add(input - weekday, 'd');                                           // 2400\n        },                                                                                                             // 2401\n                                                                                                                       // 2402\n        isoWeekday : function (input) {                                                                                // 2403\n            // behaves the same as moment#day except                                                                   // 2404\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                          // 2405\n            // as a setter, sunday should belong to the previous week.                                                 // 2406\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                     // 2407\n        },                                                                                                             // 2408\n                                                                                                                       // 2409\n        isoWeeksInYear : function () {                                                                                 // 2410\n            return weeksInYear(this.year(), 1, 4);                                                                     // 2411\n        },                                                                                                             // 2412\n                                                                                                                       // 2413\n        weeksInYear : function () {                                                                                    // 2414\n            var weekInfo = this.localeData()._week;                                                                    // 2415\n            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                               // 2416\n        },                                                                                                             // 2417\n                                                                                                                       // 2418\n        get : function (units) {                                                                                       // 2419\n            units = normalizeUnits(units);                                                                             // 2420\n            return this[units]();                                                                                      // 2421\n        },                                                                                                             // 2422\n                                                                                                                       // 2423\n        set : function (units, value) {                                                                                // 2424\n            units = normalizeUnits(units);                                                                             // 2425\n            if (typeof this[units] === 'function') {                                                                   // 2426\n                this[units](value);                                                                                    // 2427\n            }                                                                                                          // 2428\n            return this;                                                                                               // 2429\n        },                                                                                                             // 2430\n                                                                                                                       // 2431\n        // If passed a locale key, it will set the locale for this                                                     // 2432\n        // instance.  Otherwise, it will return the locale configuration                                               // 2433\n        // variables for this instance.                                                                                // 2434\n        locale : function (key) {                                                                                      // 2435\n            if (key === undefined) {                                                                                   // 2436\n                return this._locale._abbr;                                                                             // 2437\n            } else {                                                                                                   // 2438\n                this._locale = moment.localeData(key);                                                                 // 2439\n                return this;                                                                                           // 2440\n            }                                                                                                          // 2441\n        },                                                                                                             // 2442\n                                                                                                                       // 2443\n        lang : deprecate(                                                                                              // 2444\n            \"moment().lang() is deprecated. Use moment().localeData() instead.\",                                       // 2445\n            function (key) {                                                                                           // 2446\n                if (key === undefined) {                                                                               // 2447\n                    return this.localeData();                                                                          // 2448\n                } else {                                                                                               // 2449\n                    this._locale = moment.localeData(key);                                                             // 2450\n                    return this;                                                                                       // 2451\n                }                                                                                                      // 2452\n            }                                                                                                          // 2453\n        ),                                                                                                             // 2454\n                                                                                                                       // 2455\n        localeData : function () {                                                                                     // 2456\n            return this._locale;                                                                                       // 2457\n        }                                                                                                              // 2458\n    });                                                                                                                // 2459\n                                                                                                                       // 2460\n    function rawMonthSetter(mom, value) {                                                                              // 2461\n        var dayOfMonth;                                                                                                // 2462\n                                                                                                                       // 2463\n        // TODO: Move this out of here!                                                                                // 2464\n        if (typeof value === 'string') {                                                                               // 2465\n            value = mom.localeData().monthsParse(value);                                                               // 2466\n            // TODO: Another silent failure?                                                                           // 2467\n            if (typeof value !== 'number') {                                                                           // 2468\n                return mom;                                                                                            // 2469\n            }                                                                                                          // 2470\n        }                                                                                                              // 2471\n                                                                                                                       // 2472\n        dayOfMonth = Math.min(mom.date(),                                                                              // 2473\n                daysInMonth(mom.year(), value));                                                                       // 2474\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 2475\n        return mom;                                                                                                    // 2476\n    }                                                                                                                  // 2477\n                                                                                                                       // 2478\n    function rawGetter(mom, unit) {                                                                                    // 2479\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();                                                     // 2480\n    }                                                                                                                  // 2481\n                                                                                                                       // 2482\n    function rawSetter(mom, unit, value) {                                                                             // 2483\n        if (unit === 'Month') {                                                                                        // 2484\n            return rawMonthSetter(mom, value);                                                                         // 2485\n        } else {                                                                                                       // 2486\n            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                            // 2487\n        }                                                                                                              // 2488\n    }                                                                                                                  // 2489\n                                                                                                                       // 2490\n    function makeAccessor(unit, keepTime) {                                                                            // 2491\n        return function (value) {                                                                                      // 2492\n            if (value != null) {                                                                                       // 2493\n                rawSetter(this, unit, value);                                                                          // 2494\n                moment.updateOffset(this, keepTime);                                                                   // 2495\n                return this;                                                                                           // 2496\n            } else {                                                                                                   // 2497\n                return rawGetter(this, unit);                                                                          // 2498\n            }                                                                                                          // 2499\n        };                                                                                                             // 2500\n    }                                                                                                                  // 2501\n                                                                                                                       // 2502\n    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);                              // 2503\n    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);                                             // 2504\n    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);                                             // 2505\n    // Setting the hour should keep the time, because the user explicitly                                              // 2506\n    // specified which hour he wants. So trying to maintain the same hour (in                                          // 2507\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 2508\n    // this rule.                                                                                                      // 2509\n    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);                                                    // 2510\n    // moment.fn.month is defined separately                                                                           // 2511\n    moment.fn.date = makeAccessor('Date', true);                                                                       // 2512\n    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));        // 2513\n    moment.fn.year = makeAccessor('FullYear', true);                                                                   // 2514\n    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));    // 2515\n                                                                                                                       // 2516\n    // add plural methods                                                                                              // 2517\n    moment.fn.days = moment.fn.day;                                                                                    // 2518\n    moment.fn.months = moment.fn.month;                                                                                // 2519\n    moment.fn.weeks = moment.fn.week;                                                                                  // 2520\n    moment.fn.isoWeeks = moment.fn.isoWeek;                                                                            // 2521\n    moment.fn.quarters = moment.fn.quarter;                                                                            // 2522\n                                                                                                                       // 2523\n    // add aliased format methods                                                                                      // 2524\n    moment.fn.toJSON = moment.fn.toISOString;                                                                          // 2525\n                                                                                                                       // 2526\n    /************************************                                                                              // 2527\n        Duration Prototype                                                                                             // 2528\n    ************************************/                                                                              // 2529\n                                                                                                                       // 2530\n                                                                                                                       // 2531\n    function daysToYears (days) {                                                                                      // 2532\n        // 400 years have 146097 days (taking into account leap year rules)                                            // 2533\n        return days * 400 / 146097;                                                                                    // 2534\n    }                                                                                                                  // 2535\n                                                                                                                       // 2536\n    function yearsToDays (years) {                                                                                     // 2537\n        // years * 365 + absRound(years / 4) -                                                                         // 2538\n        //     absRound(years / 100) + absRound(years / 400);                                                          // 2539\n        return years * 146097 / 400;                                                                                   // 2540\n    }                                                                                                                  // 2541\n                                                                                                                       // 2542\n    extend(moment.duration.fn = Duration.prototype, {                                                                  // 2543\n                                                                                                                       // 2544\n        _bubble : function () {                                                                                        // 2545\n            var milliseconds = this._milliseconds,                                                                     // 2546\n                days = this._days,                                                                                     // 2547\n                months = this._months,                                                                                 // 2548\n                data = this._data,                                                                                     // 2549\n                seconds, minutes, hours, years = 0;                                                                    // 2550\n                                                                                                                       // 2551\n            // The following code bubbles up values, see the tests for                                                 // 2552\n            // examples of what that means.                                                                            // 2553\n            data.milliseconds = milliseconds % 1000;                                                                   // 2554\n                                                                                                                       // 2555\n            seconds = absRound(milliseconds / 1000);                                                                   // 2556\n            data.seconds = seconds % 60;                                                                               // 2557\n                                                                                                                       // 2558\n            minutes = absRound(seconds / 60);                                                                          // 2559\n            data.minutes = minutes % 60;                                                                               // 2560\n                                                                                                                       // 2561\n            hours = absRound(minutes / 60);                                                                            // 2562\n            data.hours = hours % 24;                                                                                   // 2563\n                                                                                                                       // 2564\n            days += absRound(hours / 24);                                                                              // 2565\n                                                                                                                       // 2566\n            // Accurately convert days to years, assume start from year 0.                                             // 2567\n            years = absRound(daysToYears(days));                                                                       // 2568\n            days -= absRound(yearsToDays(years));                                                                      // 2569\n                                                                                                                       // 2570\n            // 30 days to a month                                                                                      // 2571\n            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.                                          // 2572\n            months += absRound(days / 30);                                                                             // 2573\n            days %= 30;                                                                                                // 2574\n                                                                                                                       // 2575\n            // 12 months -> 1 year                                                                                     // 2576\n            years += absRound(months / 12);                                                                            // 2577\n            months %= 12;                                                                                              // 2578\n                                                                                                                       // 2579\n            data.days = days;                                                                                          // 2580\n            data.months = months;                                                                                      // 2581\n            data.years = years;                                                                                        // 2582\n        },                                                                                                             // 2583\n                                                                                                                       // 2584\n        abs : function () {                                                                                            // 2585\n            this._milliseconds = Math.abs(this._milliseconds);                                                         // 2586\n            this._days = Math.abs(this._days);                                                                         // 2587\n            this._months = Math.abs(this._months);                                                                     // 2588\n                                                                                                                       // 2589\n            this._data.milliseconds = Math.abs(this._data.milliseconds);                                               // 2590\n            this._data.seconds = Math.abs(this._data.seconds);                                                         // 2591\n            this._data.minutes = Math.abs(this._data.minutes);                                                         // 2592\n            this._data.hours = Math.abs(this._data.hours);                                                             // 2593\n            this._data.months = Math.abs(this._data.months);                                                           // 2594\n            this._data.years = Math.abs(this._data.years);                                                             // 2595\n                                                                                                                       // 2596\n            return this;                                                                                               // 2597\n        },                                                                                                             // 2598\n                                                                                                                       // 2599\n        weeks : function () {                                                                                          // 2600\n            return absRound(this.days() / 7);                                                                          // 2601\n        },                                                                                                             // 2602\n                                                                                                                       // 2603\n        valueOf : function () {                                                                                        // 2604\n            return this._milliseconds +                                                                                // 2605\n              this._days * 864e5 +                                                                                     // 2606\n              (this._months % 12) * 2592e6 +                                                                           // 2607\n              toInt(this._months / 12) * 31536e6;                                                                      // 2608\n        },                                                                                                             // 2609\n                                                                                                                       // 2610\n        humanize : function (withSuffix) {                                                                             // 2611\n            var output = relativeTime(this, !withSuffix, this.localeData());                                           // 2612\n                                                                                                                       // 2613\n            if (withSuffix) {                                                                                          // 2614\n                output = this.localeData().pastFuture(+this, output);                                                  // 2615\n            }                                                                                                          // 2616\n                                                                                                                       // 2617\n            return this.localeData().postformat(output);                                                               // 2618\n        },                                                                                                             // 2619\n                                                                                                                       // 2620\n        add : function (input, val) {                                                                                  // 2621\n            // supports only 2.0-style add(1, 's') or add(moment)                                                      // 2622\n            var dur = moment.duration(input, val);                                                                     // 2623\n                                                                                                                       // 2624\n            this._milliseconds += dur._milliseconds;                                                                   // 2625\n            this._days += dur._days;                                                                                   // 2626\n            this._months += dur._months;                                                                               // 2627\n                                                                                                                       // 2628\n            this._bubble();                                                                                            // 2629\n                                                                                                                       // 2630\n            return this;                                                                                               // 2631\n        },                                                                                                             // 2632\n                                                                                                                       // 2633\n        subtract : function (input, val) {                                                                             // 2634\n            var dur = moment.duration(input, val);                                                                     // 2635\n                                                                                                                       // 2636\n            this._milliseconds -= dur._milliseconds;                                                                   // 2637\n            this._days -= dur._days;                                                                                   // 2638\n            this._months -= dur._months;                                                                               // 2639\n                                                                                                                       // 2640\n            this._bubble();                                                                                            // 2641\n                                                                                                                       // 2642\n            return this;                                                                                               // 2643\n        },                                                                                                             // 2644\n                                                                                                                       // 2645\n        get : function (units) {                                                                                       // 2646\n            units = normalizeUnits(units);                                                                             // 2647\n            return this[units.toLowerCase() + 's']();                                                                  // 2648\n        },                                                                                                             // 2649\n                                                                                                                       // 2650\n        as : function (units) {                                                                                        // 2651\n            var days, months;                                                                                          // 2652\n            units = normalizeUnits(units);                                                                             // 2653\n                                                                                                                       // 2654\n            days = this._days + this._milliseconds / 864e5;                                                            // 2655\n            if (units === 'month' || units === 'year') {                                                               // 2656\n                months = this._months + daysToYears(days) * 12;                                                        // 2657\n                return units === 'month' ? months : months / 12;                                                       // 2658\n            } else {                                                                                                   // 2659\n                days += yearsToDays(this._months / 12);                                                                // 2660\n                switch (units) {                                                                                       // 2661\n                    case 'week': return days / 7;                                                                      // 2662\n                    case 'day': return days;                                                                           // 2663\n                    case 'hour': return days * 24;                                                                     // 2664\n                    case 'minute': return days * 24 * 60;                                                              // 2665\n                    case 'second': return days * 24 * 60 * 60;                                                         // 2666\n                    case 'millisecond': return days * 24 * 60 * 60 * 1000;                                             // 2667\n                    default: throw new Error('Unknown unit ' + units);                                                 // 2668\n                }                                                                                                      // 2669\n            }                                                                                                          // 2670\n        },                                                                                                             // 2671\n                                                                                                                       // 2672\n        lang : moment.fn.lang,                                                                                         // 2673\n        locale : moment.fn.locale,                                                                                     // 2674\n                                                                                                                       // 2675\n        toIsoString : deprecate(                                                                                       // 2676\n            \"toIsoString() is deprecated. Please use toISOString() instead \" +                                         // 2677\n            \"(notice the capitals)\",                                                                                   // 2678\n            function () {                                                                                              // 2679\n                return this.toISOString();                                                                             // 2680\n            }                                                                                                          // 2681\n        ),                                                                                                             // 2682\n                                                                                                                       // 2683\n        toISOString : function () {                                                                                    // 2684\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js            // 2685\n            var years = Math.abs(this.years()),                                                                        // 2686\n                months = Math.abs(this.months()),                                                                      // 2687\n                days = Math.abs(this.days()),                                                                          // 2688\n                hours = Math.abs(this.hours()),                                                                        // 2689\n                minutes = Math.abs(this.minutes()),                                                                    // 2690\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);                                       // 2691\n                                                                                                                       // 2692\n            if (!this.asSeconds()) {                                                                                   // 2693\n                // this is the same as C#'s (Noda) and python (isodate)...                                             // 2694\n                // but not other JS (goog.date)                                                                        // 2695\n                return 'P0D';                                                                                          // 2696\n            }                                                                                                          // 2697\n                                                                                                                       // 2698\n            return (this.asSeconds() < 0 ? '-' : '') +                                                                 // 2699\n                'P' +                                                                                                  // 2700\n                (years ? years + 'Y' : '') +                                                                           // 2701\n                (months ? months + 'M' : '') +                                                                         // 2702\n                (days ? days + 'D' : '') +                                                                             // 2703\n                ((hours || minutes || seconds) ? 'T' : '') +                                                           // 2704\n                (hours ? hours + 'H' : '') +                                                                           // 2705\n                (minutes ? minutes + 'M' : '') +                                                                       // 2706\n                (seconds ? seconds + 'S' : '');                                                                        // 2707\n        },                                                                                                             // 2708\n                                                                                                                       // 2709\n        localeData : function () {                                                                                     // 2710\n            return this._locale;                                                                                       // 2711\n        }                                                                                                              // 2712\n    });                                                                                                                // 2713\n                                                                                                                       // 2714\n    function makeDurationGetter(name) {                                                                                // 2715\n        moment.duration.fn[name] = function () {                                                                       // 2716\n            return this._data[name];                                                                                   // 2717\n        };                                                                                                             // 2718\n    }                                                                                                                  // 2719\n                                                                                                                       // 2720\n    for (i in unitMillisecondFactors) {                                                                                // 2721\n        if (unitMillisecondFactors.hasOwnProperty(i)) {                                                                // 2722\n            makeDurationGetter(i.toLowerCase());                                                                       // 2723\n        }                                                                                                              // 2724\n    }                                                                                                                  // 2725\n                                                                                                                       // 2726\n    moment.duration.fn.asMilliseconds = function () {                                                                  // 2727\n        return this.as('ms');                                                                                          // 2728\n    };                                                                                                                 // 2729\n    moment.duration.fn.asSeconds = function () {                                                                       // 2730\n        return this.as('s');                                                                                           // 2731\n    };                                                                                                                 // 2732\n    moment.duration.fn.asMinutes = function () {                                                                       // 2733\n        return this.as('m');                                                                                           // 2734\n    };                                                                                                                 // 2735\n    moment.duration.fn.asHours = function () {                                                                         // 2736\n        return this.as('h');                                                                                           // 2737\n    };                                                                                                                 // 2738\n    moment.duration.fn.asDays = function () {                                                                          // 2739\n        return this.as('d');                                                                                           // 2740\n    };                                                                                                                 // 2741\n    moment.duration.fn.asWeeks = function () {                                                                         // 2742\n        return this.as('weeks');                                                                                       // 2743\n    };                                                                                                                 // 2744\n    moment.duration.fn.asMonths = function () {                                                                        // 2745\n        return this.as('M');                                                                                           // 2746\n    };                                                                                                                 // 2747\n    moment.duration.fn.asYears = function () {                                                                         // 2748\n        return this.as('y');                                                                                           // 2749\n    };                                                                                                                 // 2750\n                                                                                                                       // 2751\n    /************************************                                                                              // 2752\n        Default Locale                                                                                                 // 2753\n    ************************************/                                                                              // 2754\n                                                                                                                       // 2755\n                                                                                                                       // 2756\n    // Set default locale, other locale will inherit from English.                                                     // 2757\n    moment.locale('en', {                                                                                              // 2758\n        ordinal : function (number) {                                                                                  // 2759\n            var b = number % 10,                                                                                       // 2760\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 2761\n                (b === 1) ? 'st' :                                                                                     // 2762\n                (b === 2) ? 'nd' :                                                                                     // 2763\n                (b === 3) ? 'rd' : 'th';                                                                               // 2764\n            return number + output;                                                                                    // 2765\n        }                                                                                                              // 2766\n    });                                                                                                                // 2767\n                                                                                                                       // 2768\n    /* EMBED_LOCALES */                                                                                                // 2769\n                                                                                                                       // 2770\n    /************************************                                                                              // 2771\n        Exposing Moment                                                                                                // 2772\n    ************************************/                                                                              // 2773\n                                                                                                                       // 2774\n    function makeGlobal(shouldDeprecate) {                                                                             // 2775\n        /*global ender:false */                                                                                        // 2776\n        if (typeof ender !== 'undefined') {                                                                            // 2777\n            return;                                                                                                    // 2778\n        }                                                                                                              // 2779\n        oldGlobalMoment = globalScope.moment;                                                                          // 2780\n        if (shouldDeprecate) {                                                                                         // 2781\n            globalScope.moment = deprecate(                                                                            // 2782\n                    'Accessing Moment through the global scope is ' +                                                  // 2783\n                    'deprecated, and will be removed in an upcoming ' +                                                // 2784\n                    'release.',                                                                                        // 2785\n                    moment);                                                                                           // 2786\n        } else {                                                                                                       // 2787\n            globalScope.moment = moment;                                                                               // 2788\n        }                                                                                                              // 2789\n    }                                                                                                                  // 2790\n                                                                                                                       // 2791\n    // CommonJS module is defined                                                                                      // 2792\n    if (hasModule) {                                                                                                   // 2793\n        module.exports = moment;                                                                                       // 2794\n    } else if (typeof define === 'function' && define.amd) {                                                           // 2795\n        define('moment', function (require, exports, module) {                                                         // 2796\n            if (module.config && module.config() && module.config().noGlobal === true) {                               // 2797\n                // release the global variable                                                                         // 2798\n                globalScope.moment = oldGlobalMoment;                                                                  // 2799\n            }                                                                                                          // 2800\n                                                                                                                       // 2801\n            return moment;                                                                                             // 2802\n        });                                                                                                            // 2803\n        makeGlobal(true);                                                                                              // 2804\n    } else {                                                                                                           // 2805\n        makeGlobal();                                                                                                  // 2806\n    }                                                                                                                  // 2807\n}).call(this);                                                                                                         // 2808\n                                                                                                                       // 2809\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mrt:moment/export-moment.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//This file exposes moment so that it works with Meteor 0.6.5's package system.                                        // 1\nif (typeof Package !== \"undefined\") {                                                                                  // 2\n  moment = this.moment;                                                                                                // 3\n}                                                                                                                      // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}