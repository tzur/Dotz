{"version":3,"sources":["meteor://ðŸ’»app/packages/erasaur_meteor-lodash/packages/erasaur_meteor-lodash.js"],"names":[],"mappingsfile":"/packages/erasaur_meteor-lodash.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/erasaur:meteor-lodash/lodash/lodash.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license                                                                                                            // 2\n * lodash 3.10.1 (Custom Build) <https://lodash.com/>                                                                  // 3\n * Build: `lodash modern -o ./lodash.js`                                                                               // 4\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7\n * Available under MIT license <https://lodash.com/license>                                                            // 8\n */                                                                                                                    // 9\n;(function() {                                                                                                         // 10\n                                                                                                                       // 11\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12\n  var undefined;                                                                                                       // 13\n                                                                                                                       // 14\n  /** Used as the semantic version number. */                                                                          // 15\n  var VERSION = '3.10.1';                                                                                              // 16\n                                                                                                                       // 17\n  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18\n  var BIND_FLAG = 1,                                                                                                   // 19\n      BIND_KEY_FLAG = 2,                                                                                               // 20\n      CURRY_BOUND_FLAG = 4,                                                                                            // 21\n      CURRY_FLAG = 8,                                                                                                  // 22\n      CURRY_RIGHT_FLAG = 16,                                                                                           // 23\n      PARTIAL_FLAG = 32,                                                                                               // 24\n      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25\n      ARY_FLAG = 128,                                                                                                  // 26\n      REARG_FLAG = 256;                                                                                                // 27\n                                                                                                                       // 28\n  /** Used as default options for `_.trunc`. */                                                                        // 29\n  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 30\n      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 31\n                                                                                                                       // 32\n  /** Used to detect when a function becomes hot. */                                                                   // 33\n  var HOT_COUNT = 150,                                                                                                 // 34\n      HOT_SPAN = 16;                                                                                                   // 35\n                                                                                                                       // 36\n  /** Used as the size to enable large array optimizations. */                                                         // 37\n  var LARGE_ARRAY_SIZE = 200;                                                                                          // 38\n                                                                                                                       // 39\n  /** Used to indicate the type of lazy iteratees. */                                                                  // 40\n  var LAZY_FILTER_FLAG = 1,                                                                                            // 41\n      LAZY_MAP_FLAG = 2;                                                                                               // 42\n                                                                                                                       // 43\n  /** Used as the `TypeError` message for \"Functions\" methods. */                                                      // 44\n  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 45\n                                                                                                                       // 46\n  /** Used as the internal argument placeholder. */                                                                    // 47\n  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 48\n                                                                                                                       // 49\n  /** `Object#toString` result references. */                                                                          // 50\n  var argsTag = '[object Arguments]',                                                                                  // 51\n      arrayTag = '[object Array]',                                                                                     // 52\n      boolTag = '[object Boolean]',                                                                                    // 53\n      dateTag = '[object Date]',                                                                                       // 54\n      errorTag = '[object Error]',                                                                                     // 55\n      funcTag = '[object Function]',                                                                                   // 56\n      mapTag = '[object Map]',                                                                                         // 57\n      numberTag = '[object Number]',                                                                                   // 58\n      objectTag = '[object Object]',                                                                                   // 59\n      regexpTag = '[object RegExp]',                                                                                   // 60\n      setTag = '[object Set]',                                                                                         // 61\n      stringTag = '[object String]',                                                                                   // 62\n      weakMapTag = '[object WeakMap]';                                                                                 // 63\n                                                                                                                       // 64\n  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 65\n      float32Tag = '[object Float32Array]',                                                                            // 66\n      float64Tag = '[object Float64Array]',                                                                            // 67\n      int8Tag = '[object Int8Array]',                                                                                  // 68\n      int16Tag = '[object Int16Array]',                                                                                // 69\n      int32Tag = '[object Int32Array]',                                                                                // 70\n      uint8Tag = '[object Uint8Array]',                                                                                // 71\n      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 72\n      uint16Tag = '[object Uint16Array]',                                                                              // 73\n      uint32Tag = '[object Uint32Array]';                                                                              // 74\n                                                                                                                       // 75\n  /** Used to match empty string literals in compiled template source. */                                              // 76\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,                                                                         // 77\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,                                                                      // 78\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;                                                         // 79\n                                                                                                                       // 80\n  /** Used to match HTML entities and HTML characters. */                                                              // 81\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 82\n      reUnescapedHtml = /[&<>\"'`]/g,                                                                                   // 83\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 84\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 85\n                                                                                                                       // 86\n  /** Used to match template delimiters. */                                                                            // 87\n  var reEscape = /<%-([\\s\\S]+?)%>/g,                                                                                   // 88\n      reEvaluate = /<%([\\s\\S]+?)%>/g,                                                                                  // 89\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;                                                                              // 90\n                                                                                                                       // 91\n  /** Used to match property names within property paths. */                                                           // 92\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,                                             // 93\n      reIsPlainProp = /^\\w*$/,                                                                                         // 94\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;                            // 95\n                                                                                                                       // 96\n  /**                                                                                                                  // 97\n   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)              // 98\n   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).\n   */                                                                                                                  // 100\n  var reRegExpChars = /^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])/g,                        // 101\n      reHasRegExpChars = RegExp(reRegExpChars.source);                                                                 // 102\n                                                                                                                       // 103\n  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 104\n  var reComboMark = /[\\u0300-\\u036f\\ufe20-\\ufe23]/g;                                                                   // 105\n                                                                                                                       // 106\n  /** Used to match backslashes in property paths. */                                                                  // 107\n  var reEscapeChar = /\\\\(\\\\)?/g;                                                                                       // 108\n                                                                                                                       // 109\n  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;                                                                // 111\n                                                                                                                       // 112\n  /** Used to match `RegExp` flags from their coerced string values. */                                                // 113\n  var reFlags = /\\w*$/;                                                                                                // 114\n                                                                                                                       // 115\n  /** Used to detect hexadecimal string values. */                                                                     // 116\n  var reHasHexPrefix = /^0[xX]/;                                                                                       // 117\n                                                                                                                       // 118\n  /** Used to detect host constructors (Safari > 5). */                                                                // 119\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                    // 120\n                                                                                                                       // 121\n  /** Used to detect unsigned integer values. */                                                                       // 122\n  var reIsUint = /^\\d+$/;                                                                                              // 123\n                                                                                                                       // 124\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 125\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;                                                            // 126\n                                                                                                                       // 127\n  /** Used to ensure capturing order of template delimiters. */                                                        // 128\n  var reNoMatch = /($^)/;                                                                                              // 129\n                                                                                                                       // 130\n  /** Used to match unescaped characters in compiled string literals. */                                               // 131\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;                                                                    // 132\n                                                                                                                       // 133\n  /** Used to match words to create compound words. */                                                                 // 134\n  var reWords = (function() {                                                                                          // 135\n    var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',                                                                         // 136\n        lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';                                                                        // 137\n                                                                                                                       // 138\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');        // 139\n  }());                                                                                                                // 140\n                                                                                                                       // 141\n  /** Used to assign default `context` object properties. */                                                           // 142\n  var contextProps = [                                                                                                 // 143\n    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',                                           // 144\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',                                             // 145\n    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',                                              // 146\n    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',                                                 // 147\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'                                                       // 148\n  ];                                                                                                                   // 149\n                                                                                                                       // 150\n  /** Used to make template sourceURLs easier to identify. */                                                          // 151\n  var templateCounter = -1;                                                                                            // 152\n                                                                                                                       // 153\n  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 154\n  var typedArrayTags = {};                                                                                             // 155\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 156\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 157\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 158\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 159\n  typedArrayTags[uint32Tag] = true;                                                                                    // 160\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 161\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 162\n  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 163\n  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 164\n  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 165\n  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 166\n  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 167\n                                                                                                                       // 168\n  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 169\n  var cloneableTags = {};                                                                                              // 170\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 171\n  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 172\n  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 173\n  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 174\n  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 175\n  cloneableTags[numberTag] = cloneableTags[objectTag] =                                                                // 176\n  cloneableTags[regexpTag] = cloneableTags[stringTag] =                                                                // 177\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                           // 178\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                          // 179\n  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 180\n  cloneableTags[mapTag] = cloneableTags[setTag] =                                                                      // 181\n  cloneableTags[weakMapTag] = false;                                                                                   // 182\n                                                                                                                       // 183\n  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 184\n  var deburredLetters = {                                                                                              // 185\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',                                     // 186\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',                                     // 187\n    '\\xc7': 'C',  '\\xe7': 'c',                                                                                         // 188\n    '\\xd0': 'D',  '\\xf0': 'd',                                                                                         // 189\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',                                                               // 190\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',                                                               // 191\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',                                                               // 192\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',                                                               // 193\n    '\\xd1': 'N',  '\\xf1': 'n',                                                                                         // 194\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',                                     // 195\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',                                     // 196\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',                                                               // 197\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',                                                               // 198\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',                                                                            // 199\n    '\\xc6': 'Ae', '\\xe6': 'ae',                                                                                        // 200\n    '\\xde': 'Th', '\\xfe': 'th',                                                                                        // 201\n    '\\xdf': 'ss'                                                                                                       // 202\n  };                                                                                                                   // 203\n                                                                                                                       // 204\n  /** Used to map characters to HTML entities. */                                                                      // 205\n  var htmlEscapes = {                                                                                                  // 206\n    '&': '&amp;',                                                                                                      // 207\n    '<': '&lt;',                                                                                                       // 208\n    '>': '&gt;',                                                                                                       // 209\n    '\"': '&quot;',                                                                                                     // 210\n    \"'\": '&#39;',                                                                                                      // 211\n    '`': '&#96;'                                                                                                       // 212\n  };                                                                                                                   // 213\n                                                                                                                       // 214\n  /** Used to map HTML entities to characters. */                                                                      // 215\n  var htmlUnescapes = {                                                                                                // 216\n    '&amp;': '&',                                                                                                      // 217\n    '&lt;': '<',                                                                                                       // 218\n    '&gt;': '>',                                                                                                       // 219\n    '&quot;': '\"',                                                                                                     // 220\n    '&#39;': \"'\",                                                                                                      // 221\n    '&#96;': '`'                                                                                                       // 222\n  };                                                                                                                   // 223\n                                                                                                                       // 224\n  /** Used to determine if values are of the language type `Object`. */                                                // 225\n  var objectTypes = {                                                                                                  // 226\n    'function': true,                                                                                                  // 227\n    'object': true                                                                                                     // 228\n  };                                                                                                                   // 229\n                                                                                                                       // 230\n  /** Used to escape characters for inclusion in compiled regexes. */                                                  // 231\n  var regexpEscapes = {                                                                                                // 232\n    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',                                                        // 233\n    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',                                                        // 234\n    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',                                            // 235\n    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',                                            // 236\n    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'                                             // 237\n  };                                                                                                                   // 238\n                                                                                                                       // 239\n  /** Used to escape characters for inclusion in compiled string literals. */                                          // 240\n  var stringEscapes = {                                                                                                // 241\n    '\\\\': '\\\\',                                                                                                        // 242\n    \"'\": \"'\",                                                                                                          // 243\n    '\\n': 'n',                                                                                                         // 244\n    '\\r': 'r',                                                                                                         // 245\n    '\\u2028': 'u2028',                                                                                                 // 246\n    '\\u2029': 'u2029'                                                                                                  // 247\n  };                                                                                                                   // 248\n                                                                                                                       // 249\n  /** Detect free variable `exports`. */                                                                               // 250\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;                            // 251\n                                                                                                                       // 252\n  /** Detect free variable `module`. */                                                                                // 253\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;                                 // 254\n                                                                                                                       // 255\n  /** Detect free variable `global` from Node.js. */                                                                   // 256\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;        // 257\n                                                                                                                       // 258\n  /** Detect free variable `self`. */                                                                                  // 259\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;                                              // 260\n                                                                                                                       // 261\n  /** Detect free variable `window`. */                                                                                // 262\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;                                    // 263\n                                                                                                                       // 264\n  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 265\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;                                 // 266\n                                                                                                                       // 267\n  /**                                                                                                                  // 268\n   * Used as a reference to the global object.                                                                         // 269\n   *                                                                                                                   // 270\n   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 271\n   * restricted `window` object, otherwise the `window` object is used.                                                // 272\n   */                                                                                                                  // 273\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;                 // 274\n                                                                                                                       // 275\n  /*--------------------------------------------------------------------------*/                                       // 276\n                                                                                                                       // 277\n  /**                                                                                                                  // 278\n   * The base implementation of `compareAscending` which compares values and                                           // 279\n   * sorts them in ascending order without guaranteeing a stable sort.                                                 // 280\n   *                                                                                                                   // 281\n   * @private                                                                                                          // 282\n   * @param {*} value The value to compare.                                                                            // 283\n   * @param {*} other The other value to compare.                                                                      // 284\n   * @returns {number} Returns the sort order indicator for `value`.                                                   // 285\n   */                                                                                                                  // 286\n  function baseCompareAscending(value, other) {                                                                        // 287\n    if (value !== other) {                                                                                             // 288\n      var valIsNull = value === null,                                                                                  // 289\n          valIsUndef = value === undefined,                                                                            // 290\n          valIsReflexive = value === value;                                                                            // 291\n                                                                                                                       // 292\n      var othIsNull = other === null,                                                                                  // 293\n          othIsUndef = other === undefined,                                                                            // 294\n          othIsReflexive = other === other;                                                                            // 295\n                                                                                                                       // 296\n      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 297\n          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 298\n          (valIsUndef && othIsReflexive)) {                                                                            // 299\n        return 1;                                                                                                      // 300\n      }                                                                                                                // 301\n      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 302\n          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 303\n          (othIsUndef && valIsReflexive)) {                                                                            // 304\n        return -1;                                                                                                     // 305\n      }                                                                                                                // 306\n    }                                                                                                                  // 307\n    return 0;                                                                                                          // 308\n  }                                                                                                                    // 309\n                                                                                                                       // 310\n  /**                                                                                                                  // 311\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 312\n   * support for callback shorthands and `this` binding.                                                               // 313\n   *                                                                                                                   // 314\n   * @private                                                                                                          // 315\n   * @param {Array} array The array to search.                                                                         // 316\n   * @param {Function} predicate The function invoked per iteration.                                                   // 317\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 318\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 319\n   */                                                                                                                  // 320\n  function baseFindIndex(array, predicate, fromRight) {                                                                // 321\n    var length = array.length,                                                                                         // 322\n        index = fromRight ? length : -1;                                                                               // 323\n                                                                                                                       // 324\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 325\n      if (predicate(array[index], index, array)) {                                                                     // 326\n        return index;                                                                                                  // 327\n      }                                                                                                                // 328\n    }                                                                                                                  // 329\n    return -1;                                                                                                         // 330\n  }                                                                                                                    // 331\n                                                                                                                       // 332\n  /**                                                                                                                  // 333\n   * The base implementation of `_.indexOf` without support for binary searches.                                       // 334\n   *                                                                                                                   // 335\n   * @private                                                                                                          // 336\n   * @param {Array} array The array to search.                                                                         // 337\n   * @param {*} value The value to search for.                                                                         // 338\n   * @param {number} fromIndex The index to search from.                                                               // 339\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 340\n   */                                                                                                                  // 341\n  function baseIndexOf(array, value, fromIndex) {                                                                      // 342\n    if (value !== value) {                                                                                             // 343\n      return indexOfNaN(array, fromIndex);                                                                             // 344\n    }                                                                                                                  // 345\n    var index = fromIndex - 1,                                                                                         // 346\n        length = array.length;                                                                                         // 347\n                                                                                                                       // 348\n    while (++index < length) {                                                                                         // 349\n      if (array[index] === value) {                                                                                    // 350\n        return index;                                                                                                  // 351\n      }                                                                                                                // 352\n    }                                                                                                                  // 353\n    return -1;                                                                                                         // 354\n  }                                                                                                                    // 355\n                                                                                                                       // 356\n  /**                                                                                                                  // 357\n   * The base implementation of `_.isFunction` without support for environments                                        // 358\n   * with incorrect `typeof` results.                                                                                  // 359\n   *                                                                                                                   // 360\n   * @private                                                                                                          // 361\n   * @param {*} value The value to check.                                                                              // 362\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                               // 363\n   */                                                                                                                  // 364\n  function baseIsFunction(value) {                                                                                     // 365\n    // Avoid a Chakra JIT bug in compatibility modes of IE 11.                                                         // 366\n    // See https://github.com/jashkenas/underscore/issues/1621 for more details.                                       // 367\n    return typeof value == 'function' || false;                                                                        // 368\n  }                                                                                                                    // 369\n                                                                                                                       // 370\n  /**                                                                                                                  // 371\n   * Converts `value` to a string if it's not one. An empty string is returned                                         // 372\n   * for `null` or `undefined` values.                                                                                 // 373\n   *                                                                                                                   // 374\n   * @private                                                                                                          // 375\n   * @param {*} value The value to process.                                                                            // 376\n   * @returns {string} Returns the string.                                                                             // 377\n   */                                                                                                                  // 378\n  function baseToString(value) {                                                                                       // 379\n    return value == null ? '' : (value + '');                                                                          // 380\n  }                                                                                                                    // 381\n                                                                                                                       // 382\n  /**                                                                                                                  // 383\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first character                                         // 384\n   * of `string` that is not found in `chars`.                                                                         // 385\n   *                                                                                                                   // 386\n   * @private                                                                                                          // 387\n   * @param {string} string The string to inspect.                                                                     // 388\n   * @param {string} chars The characters to find.                                                                     // 389\n   * @returns {number} Returns the index of the first character not found in `chars`.                                  // 390\n   */                                                                                                                  // 391\n  function charsLeftIndex(string, chars) {                                                                             // 392\n    var index = -1,                                                                                                    // 393\n        length = string.length;                                                                                        // 394\n                                                                                                                       // 395\n    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}                                            // 396\n    return index;                                                                                                      // 397\n  }                                                                                                                    // 398\n                                                                                                                       // 399\n  /**                                                                                                                  // 400\n   * Used by `_.trim` and `_.trimRight` to get the index of the last character                                         // 401\n   * of `string` that is not found in `chars`.                                                                         // 402\n   *                                                                                                                   // 403\n   * @private                                                                                                          // 404\n   * @param {string} string The string to inspect.                                                                     // 405\n   * @param {string} chars The characters to find.                                                                     // 406\n   * @returns {number} Returns the index of the last character not found in `chars`.                                   // 407\n   */                                                                                                                  // 408\n  function charsRightIndex(string, chars) {                                                                            // 409\n    var index = string.length;                                                                                         // 410\n                                                                                                                       // 411\n    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}                                                     // 412\n    return index;                                                                                                      // 413\n  }                                                                                                                    // 414\n                                                                                                                       // 415\n  /**                                                                                                                  // 416\n   * Used by `_.sortBy` to compare transformed elements of a collection and stable                                     // 417\n   * sort them in ascending order.                                                                                     // 418\n   *                                                                                                                   // 419\n   * @private                                                                                                          // 420\n   * @param {Object} object The object to compare.                                                                     // 421\n   * @param {Object} other The other object to compare.                                                                // 422\n   * @returns {number} Returns the sort order indicator for `object`.                                                  // 423\n   */                                                                                                                  // 424\n  function compareAscending(object, other) {                                                                           // 425\n    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);                      // 426\n  }                                                                                                                    // 427\n                                                                                                                       // 428\n  /**                                                                                                                  // 429\n   * Used by `_.sortByOrder` to compare multiple properties of a value to another                                      // 430\n   * and stable sort them.                                                                                             // 431\n   *                                                                                                                   // 432\n   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,                                 // 433\n   * a value is sorted in ascending order if its corresponding order is \"asc\", and                                     // 434\n   * descending if \"desc\".                                                                                             // 435\n   *                                                                                                                   // 436\n   * @private                                                                                                          // 437\n   * @param {Object} object The object to compare.                                                                     // 438\n   * @param {Object} other The other object to compare.                                                                // 439\n   * @param {boolean[]} orders The order to sort by for each property.                                                 // 440\n   * @returns {number} Returns the sort order indicator for `object`.                                                  // 441\n   */                                                                                                                  // 442\n  function compareMultiple(object, other, orders) {                                                                    // 443\n    var index = -1,                                                                                                    // 444\n        objCriteria = object.criteria,                                                                                 // 445\n        othCriteria = other.criteria,                                                                                  // 446\n        length = objCriteria.length,                                                                                   // 447\n        ordersLength = orders.length;                                                                                  // 448\n                                                                                                                       // 449\n    while (++index < length) {                                                                                         // 450\n      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);                                       // 451\n      if (result) {                                                                                                    // 452\n        if (index >= ordersLength) {                                                                                   // 453\n          return result;                                                                                               // 454\n        }                                                                                                              // 455\n        var order = orders[index];                                                                                     // 456\n        return result * ((order === 'asc' || order === true) ? 1 : -1);                                                // 457\n      }                                                                                                                // 458\n    }                                                                                                                  // 459\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 460\n    // that causes it, under certain circumstances, to provide the same value for                                      // 461\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 462\n    // for more details.                                                                                               // 463\n    //                                                                                                                 // 464\n    // This also ensures a stable sort in V8 and other engines.                                                        // 465\n    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 466\n    return object.index - other.index;                                                                                 // 467\n  }                                                                                                                    // 468\n                                                                                                                       // 469\n  /**                                                                                                                  // 470\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 471\n   *                                                                                                                   // 472\n   * @private                                                                                                          // 473\n   * @param {string} letter The matched letter to deburr.                                                              // 474\n   * @returns {string} Returns the deburred letter.                                                                    // 475\n   */                                                                                                                  // 476\n  function deburrLetter(letter) {                                                                                      // 477\n    return deburredLetters[letter];                                                                                    // 478\n  }                                                                                                                    // 479\n                                                                                                                       // 480\n  /**                                                                                                                  // 481\n   * Used by `_.escape` to convert characters to HTML entities.                                                        // 482\n   *                                                                                                                   // 483\n   * @private                                                                                                          // 484\n   * @param {string} chr The matched character to escape.                                                              // 485\n   * @returns {string} Returns the escaped character.                                                                  // 486\n   */                                                                                                                  // 487\n  function escapeHtmlChar(chr) {                                                                                       // 488\n    return htmlEscapes[chr];                                                                                           // 489\n  }                                                                                                                    // 490\n                                                                                                                       // 491\n  /**                                                                                                                  // 492\n   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.                                  // 493\n   *                                                                                                                   // 494\n   * @private                                                                                                          // 495\n   * @param {string} chr The matched character to escape.                                                              // 496\n   * @param {string} leadingChar The capture group for a leading character.                                            // 497\n   * @param {string} whitespaceChar The capture group for a whitespace character.                                      // 498\n   * @returns {string} Returns the escaped character.                                                                  // 499\n   */                                                                                                                  // 500\n  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {                                                        // 501\n    if (leadingChar) {                                                                                                 // 502\n      chr = regexpEscapes[chr];                                                                                        // 503\n    } else if (whitespaceChar) {                                                                                       // 504\n      chr = stringEscapes[chr];                                                                                        // 505\n    }                                                                                                                  // 506\n    return '\\\\' + chr;                                                                                                 // 507\n  }                                                                                                                    // 508\n                                                                                                                       // 509\n  /**                                                                                                                  // 510\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 511\n   *                                                                                                                   // 512\n   * @private                                                                                                          // 513\n   * @param {string} chr The matched character to escape.                                                              // 514\n   * @returns {string} Returns the escaped character.                                                                  // 515\n   */                                                                                                                  // 516\n  function escapeStringChar(chr) {                                                                                     // 517\n    return '\\\\' + stringEscapes[chr];                                                                                  // 518\n  }                                                                                                                    // 519\n                                                                                                                       // 520\n  /**                                                                                                                  // 521\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 522\n   *                                                                                                                   // 523\n   * @private                                                                                                          // 524\n   * @param {Array} array The array to search.                                                                         // 525\n   * @param {number} fromIndex The index to search from.                                                               // 526\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 527\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 528\n   */                                                                                                                  // 529\n  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 530\n    var length = array.length,                                                                                         // 531\n        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 532\n                                                                                                                       // 533\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 534\n      var other = array[index];                                                                                        // 535\n      if (other !== other) {                                                                                           // 536\n        return index;                                                                                                  // 537\n      }                                                                                                                // 538\n    }                                                                                                                  // 539\n    return -1;                                                                                                         // 540\n  }                                                                                                                    // 541\n                                                                                                                       // 542\n  /**                                                                                                                  // 543\n   * Checks if `value` is object-like.                                                                                 // 544\n   *                                                                                                                   // 545\n   * @private                                                                                                          // 546\n   * @param {*} value The value to check.                                                                              // 547\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                        // 548\n   */                                                                                                                  // 549\n  function isObjectLike(value) {                                                                                       // 550\n    return !!value && typeof value == 'object';                                                                        // 551\n  }                                                                                                                    // 552\n                                                                                                                       // 553\n  /**                                                                                                                  // 554\n   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a                                              // 555\n   * character code is whitespace.                                                                                     // 556\n   *                                                                                                                   // 557\n   * @private                                                                                                          // 558\n   * @param {number} charCode The character code to inspect.                                                           // 559\n   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.                                      // 560\n   */                                                                                                                  // 561\n  function isSpace(charCode) {                                                                                         // 562\n    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||\n      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));\n  }                                                                                                                    // 565\n                                                                                                                       // 566\n  /**                                                                                                                  // 567\n   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 568\n   * and returns an array of their indexes.                                                                            // 569\n   *                                                                                                                   // 570\n   * @private                                                                                                          // 571\n   * @param {Array} array The array to modify.                                                                         // 572\n   * @param {*} placeholder The placeholder to replace.                                                                // 573\n   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 574\n   */                                                                                                                  // 575\n  function replaceHolders(array, placeholder) {                                                                        // 576\n    var index = -1,                                                                                                    // 577\n        length = array.length,                                                                                         // 578\n        resIndex = -1,                                                                                                 // 579\n        result = [];                                                                                                   // 580\n                                                                                                                       // 581\n    while (++index < length) {                                                                                         // 582\n      if (array[index] === placeholder) {                                                                              // 583\n        array[index] = PLACEHOLDER;                                                                                    // 584\n        result[++resIndex] = index;                                                                                    // 585\n      }                                                                                                                // 586\n    }                                                                                                                  // 587\n    return result;                                                                                                     // 588\n  }                                                                                                                    // 589\n                                                                                                                       // 590\n  /**                                                                                                                  // 591\n   * An implementation of `_.uniq` optimized for sorted arrays without support                                         // 592\n   * for callback shorthands and `this` binding.                                                                       // 593\n   *                                                                                                                   // 594\n   * @private                                                                                                          // 595\n   * @param {Array} array The array to inspect.                                                                        // 596\n   * @param {Function} [iteratee] The function invoked per iteration.                                                  // 597\n   * @returns {Array} Returns the new duplicate free array.                                                            // 598\n   */                                                                                                                  // 599\n  function sortedUniq(array, iteratee) {                                                                               // 600\n    var seen,                                                                                                          // 601\n        index = -1,                                                                                                    // 602\n        length = array.length,                                                                                         // 603\n        resIndex = -1,                                                                                                 // 604\n        result = [];                                                                                                   // 605\n                                                                                                                       // 606\n    while (++index < length) {                                                                                         // 607\n      var value = array[index],                                                                                        // 608\n          computed = iteratee ? iteratee(value, index, array) : value;                                                 // 609\n                                                                                                                       // 610\n      if (!index || seen !== computed) {                                                                               // 611\n        seen = computed;                                                                                               // 612\n        result[++resIndex] = value;                                                                                    // 613\n      }                                                                                                                // 614\n    }                                                                                                                  // 615\n    return result;                                                                                                     // 616\n  }                                                                                                                    // 617\n                                                                                                                       // 618\n  /**                                                                                                                  // 619\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace                                    // 620\n   * character of `string`.                                                                                            // 621\n   *                                                                                                                   // 622\n   * @private                                                                                                          // 623\n   * @param {string} string The string to inspect.                                                                     // 624\n   * @returns {number} Returns the index of the first non-whitespace character.                                        // 625\n   */                                                                                                                  // 626\n  function trimmedLeftIndex(string) {                                                                                  // 627\n    var index = -1,                                                                                                    // 628\n        length = string.length;                                                                                        // 629\n                                                                                                                       // 630\n    while (++index < length && isSpace(string.charCodeAt(index))) {}                                                   // 631\n    return index;                                                                                                      // 632\n  }                                                                                                                    // 633\n                                                                                                                       // 634\n  /**                                                                                                                  // 635\n   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace                                    // 636\n   * character of `string`.                                                                                            // 637\n   *                                                                                                                   // 638\n   * @private                                                                                                          // 639\n   * @param {string} string The string to inspect.                                                                     // 640\n   * @returns {number} Returns the index of the last non-whitespace character.                                         // 641\n   */                                                                                                                  // 642\n  function trimmedRightIndex(string) {                                                                                 // 643\n    var index = string.length;                                                                                         // 644\n                                                                                                                       // 645\n    while (index-- && isSpace(string.charCodeAt(index))) {}                                                            // 646\n    return index;                                                                                                      // 647\n  }                                                                                                                    // 648\n                                                                                                                       // 649\n  /**                                                                                                                  // 650\n   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 651\n   *                                                                                                                   // 652\n   * @private                                                                                                          // 653\n   * @param {string} chr The matched character to unescape.                                                            // 654\n   * @returns {string} Returns the unescaped character.                                                                // 655\n   */                                                                                                                  // 656\n  function unescapeHtmlChar(chr) {                                                                                     // 657\n    return htmlUnescapes[chr];                                                                                         // 658\n  }                                                                                                                    // 659\n                                                                                                                       // 660\n  /*--------------------------------------------------------------------------*/                                       // 661\n                                                                                                                       // 662\n  /**                                                                                                                  // 663\n   * Create a new pristine `lodash` function using the given `context` object.                                         // 664\n   *                                                                                                                   // 665\n   * @static                                                                                                           // 666\n   * @memberOf _                                                                                                       // 667\n   * @category Utility                                                                                                 // 668\n   * @param {Object} [context=root] The context object.                                                                // 669\n   * @returns {Function} Returns a new `lodash` function.                                                              // 670\n   * @example                                                                                                          // 671\n   *                                                                                                                   // 672\n   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 673\n   *                                                                                                                   // 674\n   * var lodash = _.runInContext();                                                                                    // 675\n   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 676\n   *                                                                                                                   // 677\n   * _.isFunction(_.foo);                                                                                              // 678\n   * // => true                                                                                                        // 679\n   * _.isFunction(_.bar);                                                                                              // 680\n   * // => false                                                                                                       // 681\n   *                                                                                                                   // 682\n   * lodash.isFunction(lodash.foo);                                                                                    // 683\n   * // => false                                                                                                       // 684\n   * lodash.isFunction(lodash.bar);                                                                                    // 685\n   * // => true                                                                                                        // 686\n   *                                                                                                                   // 687\n   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 688\n   * var mock = _.runInContext({                                                                                       // 689\n   *   'Date': function() {                                                                                            // 690\n   *     return { 'getTime': getTimeMock };                                                                            // 691\n   *   }                                                                                                               // 692\n   * });                                                                                                               // 693\n   *                                                                                                                   // 694\n   * // or creating a suped-up `defer` in Node.js                                                                      // 695\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 696\n   */                                                                                                                  // 697\n  function runInContext(context) {                                                                                     // 698\n    // Avoid issues with some ES3 environments that attempt to use values, named                                       // 699\n    // after built-in constructors like `Object`, for the creation of literals.                                        // 700\n    // ES5 clears this up by stating that literals must use built-in constructors.                                     // 701\n    // See https://es5.github.io/#x11.1.5 for more details.                                                            // 702\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;                         // 703\n                                                                                                                       // 704\n    /** Native constructor references. */                                                                              // 705\n    var Array = context.Array,                                                                                         // 706\n        Date = context.Date,                                                                                           // 707\n        Error = context.Error,                                                                                         // 708\n        Function = context.Function,                                                                                   // 709\n        Math = context.Math,                                                                                           // 710\n        Number = context.Number,                                                                                       // 711\n        Object = context.Object,                                                                                       // 712\n        RegExp = context.RegExp,                                                                                       // 713\n        String = context.String,                                                                                       // 714\n        TypeError = context.TypeError;                                                                                 // 715\n                                                                                                                       // 716\n    /** Used for native method references. */                                                                          // 717\n    var arrayProto = Array.prototype,                                                                                  // 718\n        objectProto = Object.prototype,                                                                                // 719\n        stringProto = String.prototype;                                                                                // 720\n                                                                                                                       // 721\n    /** Used to resolve the decompiled source of functions. */                                                         // 722\n    var fnToString = Function.prototype.toString;                                                                      // 723\n                                                                                                                       // 724\n    /** Used to check objects for own properties. */                                                                   // 725\n    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 726\n                                                                                                                       // 727\n    /** Used to generate unique IDs. */                                                                                // 728\n    var idCounter = 0;                                                                                                 // 729\n                                                                                                                       // 730\n    /**                                                                                                                // 731\n     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 732\n     * of values.                                                                                                      // 733\n     */                                                                                                                // 734\n    var objToString = objectProto.toString;                                                                            // 735\n                                                                                                                       // 736\n    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 737\n    var oldDash = root._;                                                                                              // 738\n                                                                                                                       // 739\n    /** Used to detect if a method is native. */                                                                       // 740\n    var reIsNative = RegExp('^' +                                                                                      // 741\n      fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')                                           // 742\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                // 743\n    );                                                                                                                 // 744\n                                                                                                                       // 745\n    /** Native method references. */                                                                                   // 746\n    var ArrayBuffer = context.ArrayBuffer,                                                                             // 747\n        clearTimeout = context.clearTimeout,                                                                           // 748\n        parseFloat = context.parseFloat,                                                                               // 749\n        pow = Math.pow,                                                                                                // 750\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 751\n        Set = getNative(context, 'Set'),                                                                               // 752\n        setTimeout = context.setTimeout,                                                                               // 753\n        splice = arrayProto.splice,                                                                                    // 754\n        Uint8Array = context.Uint8Array,                                                                               // 755\n        WeakMap = getNative(context, 'WeakMap');                                                                       // 756\n                                                                                                                       // 757\n    /* Native method references for those with the same name as other `lodash` methods. */                             // 758\n    var nativeCeil = Math.ceil,                                                                                        // 759\n        nativeCreate = getNative(Object, 'create'),                                                                    // 760\n        nativeFloor = Math.floor,                                                                                      // 761\n        nativeIsArray = getNative(Array, 'isArray'),                                                                   // 762\n        nativeIsFinite = context.isFinite,                                                                             // 763\n        nativeKeys = getNative(Object, 'keys'),                                                                        // 764\n        nativeMax = Math.max,                                                                                          // 765\n        nativeMin = Math.min,                                                                                          // 766\n        nativeNow = getNative(Date, 'now'),                                                                            // 767\n        nativeParseInt = context.parseInt,                                                                             // 768\n        nativeRandom = Math.random;                                                                                    // 769\n                                                                                                                       // 770\n    /** Used as references for `-Infinity` and `Infinity`. */                                                          // 771\n    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,                                                                  // 772\n        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;                                                                  // 773\n                                                                                                                       // 774\n    /** Used as references for the maximum length and index of an array. */                                            // 775\n    var MAX_ARRAY_LENGTH = 4294967295,                                                                                 // 776\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                        // 777\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                // 778\n                                                                                                                       // 779\n    /**                                                                                                                // 780\n     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)           // 781\n     * of an array-like value.                                                                                         // 782\n     */                                                                                                                // 783\n    var MAX_SAFE_INTEGER = 9007199254740991;                                                                           // 784\n                                                                                                                       // 785\n    /** Used to store function metadata. */                                                                            // 786\n    var metaMap = WeakMap && new WeakMap;                                                                              // 787\n                                                                                                                       // 788\n    /** Used to lookup unminified function names. */                                                                   // 789\n    var realNames = {};                                                                                                // 790\n                                                                                                                       // 791\n    /*------------------------------------------------------------------------*/                                       // 792\n                                                                                                                       // 793\n    /**                                                                                                                // 794\n     * Creates a `lodash` object which wraps `value` to enable implicit chaining.                                      // 795\n     * Methods that operate on and return arrays, collections, and functions can                                       // 796\n     * be chained together. Methods that retrieve a single value or may return a                                       // 797\n     * primitive value will automatically end the chain returning the unwrapped                                        // 798\n     * value. Explicit chaining may be enabled using `_.chain`. The execution of                                       // 799\n     * chained methods is lazy, that is, execution is deferred until `_#value`                                         // 800\n     * is implicitly or explicitly called.                                                                             // 801\n     *                                                                                                                 // 802\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 803\n     * fusion is an optimization strategy which merge iteratee calls; this can help                                    // 804\n     * to avoid the creation of intermediate data structures and greatly reduce the                                    // 805\n     * number of iteratee executions.                                                                                  // 806\n     *                                                                                                                 // 807\n     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 808\n     * directly or indirectly included in the build.                                                                   // 809\n     *                                                                                                                 // 810\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 811\n     *                                                                                                                 // 812\n     * The wrapper `Array` methods are:                                                                                // 813\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,                                           // 814\n     * `splice`, and `unshift`                                                                                         // 815\n     *                                                                                                                 // 816\n     * The wrapper `String` methods are:                                                                               // 817\n     * `replace` and `split`                                                                                           // 818\n     *                                                                                                                 // 819\n     * The wrapper methods that support shortcut fusion are:                                                           // 820\n     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,                                        // 821\n     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,                                        // 822\n     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,                                         // 823\n     * and `where`                                                                                                     // 824\n     *                                                                                                                 // 825\n     * The chainable wrapper methods are:                                                                              // 826\n     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,                                         // 827\n     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,                                        // 828\n     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,                                           // 829\n     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,                                          // 830\n     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,                                   // 831\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,                                      // 832\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,                                         // 833\n     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,                                           // 834\n     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,                                           // 835\n     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,                                        // 836\n     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,                                        // 837\n     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,                                    // 838\n     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,                                            // 839\n     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,                                       // 840\n     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,                                    // 841\n     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,                                        // 842\n     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`                                    // 843\n     *                                                                                                                 // 844\n     * The wrapper methods that are **not** chainable by default are:                                                  // 845\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,                                      // 846\n     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,                                   // 847\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,                                    // 848\n     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,                                          // 849\n     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,                                        // 850\n     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,                                            // 851\n     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,                                         // 852\n     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,                                     // 853\n     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,                                         // 854\n     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,                                     // 855\n     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,                                    // 856\n     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,                                             // 857\n     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,                                      // 858\n     * `unescape`, `uniqueId`, `value`, and `words`                                                                    // 859\n     *                                                                                                                 // 860\n     * The wrapper method `sample` will return a wrapped value when `n` is provided,                                   // 861\n     * otherwise an unwrapped value is returned.                                                                       // 862\n     *                                                                                                                 // 863\n     * @name _                                                                                                         // 864\n     * @constructor                                                                                                    // 865\n     * @category Chain                                                                                                 // 866\n     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 867\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 868\n     * @example                                                                                                        // 869\n     *                                                                                                                 // 870\n     * var wrapped = _([1, 2, 3]);                                                                                     // 871\n     *                                                                                                                 // 872\n     * // returns an unwrapped value                                                                                   // 873\n     * wrapped.reduce(function(total, n) {                                                                             // 874\n     *   return total + n;                                                                                             // 875\n     * });                                                                                                             // 876\n     * // => 6                                                                                                         // 877\n     *                                                                                                                 // 878\n     * // returns a wrapped value                                                                                      // 879\n     * var squares = wrapped.map(function(n) {                                                                         // 880\n     *   return n * n;                                                                                                 // 881\n     * });                                                                                                             // 882\n     *                                                                                                                 // 883\n     * _.isArray(squares);                                                                                             // 884\n     * // => false                                                                                                     // 885\n     *                                                                                                                 // 886\n     * _.isArray(squares.value());                                                                                     // 887\n     * // => true                                                                                                      // 888\n     */                                                                                                                // 889\n    function lodash(value) {                                                                                           // 890\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 891\n        if (value instanceof LodashWrapper) {                                                                          // 892\n          return value;                                                                                                // 893\n        }                                                                                                              // 894\n        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {                    // 895\n          return wrapperClone(value);                                                                                  // 896\n        }                                                                                                              // 897\n      }                                                                                                                // 898\n      return new LodashWrapper(value);                                                                                 // 899\n    }                                                                                                                  // 900\n                                                                                                                       // 901\n    /**                                                                                                                // 902\n     * The function whose prototype all chaining wrappers inherit from.                                                // 903\n     *                                                                                                                 // 904\n     * @private                                                                                                        // 905\n     */                                                                                                                // 906\n    function baseLodash() {                                                                                            // 907\n      // No operation performed.                                                                                       // 908\n    }                                                                                                                  // 909\n                                                                                                                       // 910\n    /**                                                                                                                // 911\n     * The base constructor for creating `lodash` wrapper objects.                                                     // 912\n     *                                                                                                                 // 913\n     * @private                                                                                                        // 914\n     * @param {*} value The value to wrap.                                                                             // 915\n     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 916\n     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.                                   // 917\n     */                                                                                                                // 918\n    function LodashWrapper(value, chainAll, actions) {                                                                 // 919\n      this.__wrapped__ = value;                                                                                        // 920\n      this.__actions__ = actions || [];                                                                                // 921\n      this.__chain__ = !!chainAll;                                                                                     // 922\n    }                                                                                                                  // 923\n                                                                                                                       // 924\n    /**                                                                                                                // 925\n     * An object environment feature flags.                                                                            // 926\n     *                                                                                                                 // 927\n     * @static                                                                                                         // 928\n     * @memberOf _                                                                                                     // 929\n     * @type Object                                                                                                    // 930\n     */                                                                                                                // 931\n    var support = lodash.support = {};                                                                                 // 932\n                                                                                                                       // 933\n    /**                                                                                                                // 934\n     * By default, the template delimiters used by lodash are like those in                                            // 935\n     * embedded Ruby (ERB). Change the following template settings to use                                              // 936\n     * alternative delimiters.                                                                                         // 937\n     *                                                                                                                 // 938\n     * @static                                                                                                         // 939\n     * @memberOf _                                                                                                     // 940\n     * @type Object                                                                                                    // 941\n     */                                                                                                                // 942\n    lodash.templateSettings = {                                                                                        // 943\n                                                                                                                       // 944\n      /**                                                                                                              // 945\n       * Used to detect `data` property values to be HTML-escaped.                                                     // 946\n       *                                                                                                               // 947\n       * @memberOf _.templateSettings                                                                                  // 948\n       * @type RegExp                                                                                                  // 949\n       */                                                                                                              // 950\n      'escape': reEscape,                                                                                              // 951\n                                                                                                                       // 952\n      /**                                                                                                              // 953\n       * Used to detect code to be evaluated.                                                                          // 954\n       *                                                                                                               // 955\n       * @memberOf _.templateSettings                                                                                  // 956\n       * @type RegExp                                                                                                  // 957\n       */                                                                                                              // 958\n      'evaluate': reEvaluate,                                                                                          // 959\n                                                                                                                       // 960\n      /**                                                                                                              // 961\n       * Used to detect `data` property values to inject.                                                              // 962\n       *                                                                                                               // 963\n       * @memberOf _.templateSettings                                                                                  // 964\n       * @type RegExp                                                                                                  // 965\n       */                                                                                                              // 966\n      'interpolate': reInterpolate,                                                                                    // 967\n                                                                                                                       // 968\n      /**                                                                                                              // 969\n       * Used to reference the data object in the template text.                                                       // 970\n       *                                                                                                               // 971\n       * @memberOf _.templateSettings                                                                                  // 972\n       * @type string                                                                                                  // 973\n       */                                                                                                              // 974\n      'variable': '',                                                                                                  // 975\n                                                                                                                       // 976\n      /**                                                                                                              // 977\n       * Used to import variables into the compiled template.                                                          // 978\n       *                                                                                                               // 979\n       * @memberOf _.templateSettings                                                                                  // 980\n       * @type Object                                                                                                  // 981\n       */                                                                                                              // 982\n      'imports': {                                                                                                     // 983\n                                                                                                                       // 984\n        /**                                                                                                            // 985\n         * A reference to the `lodash` function.                                                                       // 986\n         *                                                                                                             // 987\n         * @memberOf _.templateSettings.imports                                                                        // 988\n         * @type Function                                                                                              // 989\n         */                                                                                                            // 990\n        '_': lodash                                                                                                    // 991\n      }                                                                                                                // 992\n    };                                                                                                                 // 993\n                                                                                                                       // 994\n    /*------------------------------------------------------------------------*/                                       // 995\n                                                                                                                       // 996\n    /**                                                                                                                // 997\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 998\n     *                                                                                                                 // 999\n     * @private                                                                                                        // 1000\n     * @param {*} value The value to wrap.                                                                             // 1001\n     */                                                                                                                // 1002\n    function LazyWrapper(value) {                                                                                      // 1003\n      this.__wrapped__ = value;                                                                                        // 1004\n      this.__actions__ = [];                                                                                           // 1005\n      this.__dir__ = 1;                                                                                                // 1006\n      this.__filtered__ = false;                                                                                       // 1007\n      this.__iteratees__ = [];                                                                                         // 1008\n      this.__takeCount__ = POSITIVE_INFINITY;                                                                          // 1009\n      this.__views__ = [];                                                                                             // 1010\n    }                                                                                                                  // 1011\n                                                                                                                       // 1012\n    /**                                                                                                                // 1013\n     * Creates a clone of the lazy wrapper object.                                                                     // 1014\n     *                                                                                                                 // 1015\n     * @private                                                                                                        // 1016\n     * @name clone                                                                                                     // 1017\n     * @memberOf LazyWrapper                                                                                           // 1018\n     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1019\n     */                                                                                                                // 1020\n    function lazyClone() {                                                                                             // 1021\n      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1022\n      result.__actions__ = arrayCopy(this.__actions__);                                                                // 1023\n      result.__dir__ = this.__dir__;                                                                                   // 1024\n      result.__filtered__ = this.__filtered__;                                                                         // 1025\n      result.__iteratees__ = arrayCopy(this.__iteratees__);                                                            // 1026\n      result.__takeCount__ = this.__takeCount__;                                                                       // 1027\n      result.__views__ = arrayCopy(this.__views__);                                                                    // 1028\n      return result;                                                                                                   // 1029\n    }                                                                                                                  // 1030\n                                                                                                                       // 1031\n    /**                                                                                                                // 1032\n     * Reverses the direction of lazy iteration.                                                                       // 1033\n     *                                                                                                                 // 1034\n     * @private                                                                                                        // 1035\n     * @name reverse                                                                                                   // 1036\n     * @memberOf LazyWrapper                                                                                           // 1037\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1038\n     */                                                                                                                // 1039\n    function lazyReverse() {                                                                                           // 1040\n      if (this.__filtered__) {                                                                                         // 1041\n        var result = new LazyWrapper(this);                                                                            // 1042\n        result.__dir__ = -1;                                                                                           // 1043\n        result.__filtered__ = true;                                                                                    // 1044\n      } else {                                                                                                         // 1045\n        result = this.clone();                                                                                         // 1046\n        result.__dir__ *= -1;                                                                                          // 1047\n      }                                                                                                                // 1048\n      return result;                                                                                                   // 1049\n    }                                                                                                                  // 1050\n                                                                                                                       // 1051\n    /**                                                                                                                // 1052\n     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1053\n     *                                                                                                                 // 1054\n     * @private                                                                                                        // 1055\n     * @name value                                                                                                     // 1056\n     * @memberOf LazyWrapper                                                                                           // 1057\n     * @returns {*} Returns the unwrapped value.                                                                       // 1058\n     */                                                                                                                // 1059\n    function lazyValue() {                                                                                             // 1060\n      var array = this.__wrapped__.value(),                                                                            // 1061\n          dir = this.__dir__,                                                                                          // 1062\n          isArr = isArray(array),                                                                                      // 1063\n          isRight = dir < 0,                                                                                           // 1064\n          arrLength = isArr ? array.length : 0,                                                                        // 1065\n          view = getView(0, arrLength, this.__views__),                                                                // 1066\n          start = view.start,                                                                                          // 1067\n          end = view.end,                                                                                              // 1068\n          length = end - start,                                                                                        // 1069\n          index = isRight ? end : (start - 1),                                                                         // 1070\n          iteratees = this.__iteratees__,                                                                              // 1071\n          iterLength = iteratees.length,                                                                               // 1072\n          resIndex = 0,                                                                                                // 1073\n          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1074\n                                                                                                                       // 1075\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1076\n        return baseWrapperValue(array, this.__actions__);                                                              // 1077\n      }                                                                                                                // 1078\n      var result = [];                                                                                                 // 1079\n                                                                                                                       // 1080\n      outer:                                                                                                           // 1081\n      while (length-- && resIndex < takeCount) {                                                                       // 1082\n        index += dir;                                                                                                  // 1083\n                                                                                                                       // 1084\n        var iterIndex = -1,                                                                                            // 1085\n            value = array[index];                                                                                      // 1086\n                                                                                                                       // 1087\n        while (++iterIndex < iterLength) {                                                                             // 1088\n          var data = iteratees[iterIndex],                                                                             // 1089\n              iteratee = data.iteratee,                                                                                // 1090\n              type = data.type,                                                                                        // 1091\n              computed = iteratee(value);                                                                              // 1092\n                                                                                                                       // 1093\n          if (type == LAZY_MAP_FLAG) {                                                                                 // 1094\n            value = computed;                                                                                          // 1095\n          } else if (!computed) {                                                                                      // 1096\n            if (type == LAZY_FILTER_FLAG) {                                                                            // 1097\n              continue outer;                                                                                          // 1098\n            } else {                                                                                                   // 1099\n              break outer;                                                                                             // 1100\n            }                                                                                                          // 1101\n          }                                                                                                            // 1102\n        }                                                                                                              // 1103\n        result[resIndex++] = value;                                                                                    // 1104\n      }                                                                                                                // 1105\n      return result;                                                                                                   // 1106\n    }                                                                                                                  // 1107\n                                                                                                                       // 1108\n    /*------------------------------------------------------------------------*/                                       // 1109\n                                                                                                                       // 1110\n    /**                                                                                                                // 1111\n     * Creates a cache object to store key/value pairs.                                                                // 1112\n     *                                                                                                                 // 1113\n     * @private                                                                                                        // 1114\n     * @static                                                                                                         // 1115\n     * @name Cache                                                                                                     // 1116\n     * @memberOf _.memoize                                                                                             // 1117\n     */                                                                                                                // 1118\n    function MapCache() {                                                                                              // 1119\n      this.__data__ = {};                                                                                              // 1120\n    }                                                                                                                  // 1121\n                                                                                                                       // 1122\n    /**                                                                                                                // 1123\n     * Removes `key` and its value from the cache.                                                                     // 1124\n     *                                                                                                                 // 1125\n     * @private                                                                                                        // 1126\n     * @name delete                                                                                                    // 1127\n     * @memberOf _.memoize.Cache                                                                                       // 1128\n     * @param {string} key The key of the value to remove.                                                             // 1129\n     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.                          // 1130\n     */                                                                                                                // 1131\n    function mapDelete(key) {                                                                                          // 1132\n      return this.has(key) && delete this.__data__[key];                                                               // 1133\n    }                                                                                                                  // 1134\n                                                                                                                       // 1135\n    /**                                                                                                                // 1136\n     * Gets the cached value for `key`.                                                                                // 1137\n     *                                                                                                                 // 1138\n     * @private                                                                                                        // 1139\n     * @name get                                                                                                       // 1140\n     * @memberOf _.memoize.Cache                                                                                       // 1141\n     * @param {string} key The key of the value to get.                                                                // 1142\n     * @returns {*} Returns the cached value.                                                                          // 1143\n     */                                                                                                                // 1144\n    function mapGet(key) {                                                                                             // 1145\n      return key == '__proto__' ? undefined : this.__data__[key];                                                      // 1146\n    }                                                                                                                  // 1147\n                                                                                                                       // 1148\n    /**                                                                                                                // 1149\n     * Checks if a cached value for `key` exists.                                                                      // 1150\n     *                                                                                                                 // 1151\n     * @private                                                                                                        // 1152\n     * @name has                                                                                                       // 1153\n     * @memberOf _.memoize.Cache                                                                                       // 1154\n     * @param {string} key The key of the entry to check.                                                              // 1155\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1156\n     */                                                                                                                // 1157\n    function mapHas(key) {                                                                                             // 1158\n      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);                                            // 1159\n    }                                                                                                                  // 1160\n                                                                                                                       // 1161\n    /**                                                                                                                // 1162\n     * Sets `value` to `key` of the cache.                                                                             // 1163\n     *                                                                                                                 // 1164\n     * @private                                                                                                        // 1165\n     * @name set                                                                                                       // 1166\n     * @memberOf _.memoize.Cache                                                                                       // 1167\n     * @param {string} key The key of the value to cache.                                                              // 1168\n     * @param {*} value The value to cache.                                                                            // 1169\n     * @returns {Object} Returns the cache object.                                                                     // 1170\n     */                                                                                                                // 1171\n    function mapSet(key, value) {                                                                                      // 1172\n      if (key != '__proto__') {                                                                                        // 1173\n        this.__data__[key] = value;                                                                                    // 1174\n      }                                                                                                                // 1175\n      return this;                                                                                                     // 1176\n    }                                                                                                                  // 1177\n                                                                                                                       // 1178\n    /*------------------------------------------------------------------------*/                                       // 1179\n                                                                                                                       // 1180\n    /**                                                                                                                // 1181\n     *                                                                                                                 // 1182\n     * Creates a cache object to store unique values.                                                                  // 1183\n     *                                                                                                                 // 1184\n     * @private                                                                                                        // 1185\n     * @param {Array} [values] The values to cache.                                                                    // 1186\n     */                                                                                                                // 1187\n    function SetCache(values) {                                                                                        // 1188\n      var length = values ? values.length : 0;                                                                         // 1189\n                                                                                                                       // 1190\n      this.data = { 'hash': nativeCreate(null), 'set': new Set };                                                      // 1191\n      while (length--) {                                                                                               // 1192\n        this.push(values[length]);                                                                                     // 1193\n      }                                                                                                                // 1194\n    }                                                                                                                  // 1195\n                                                                                                                       // 1196\n    /**                                                                                                                // 1197\n     * Checks if `value` is in `cache` mimicking the return signature of                                               // 1198\n     * `_.indexOf` by returning `0` if the value is found, else `-1`.                                                  // 1199\n     *                                                                                                                 // 1200\n     * @private                                                                                                        // 1201\n     * @param {Object} cache The cache to search.                                                                      // 1202\n     * @param {*} value The value to search for.                                                                       // 1203\n     * @returns {number} Returns `0` if `value` is found, else `-1`.                                                   // 1204\n     */                                                                                                                // 1205\n    function cacheIndexOf(cache, value) {                                                                              // 1206\n      var data = cache.data,                                                                                           // 1207\n          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];             // 1208\n                                                                                                                       // 1209\n      return result ? 0 : -1;                                                                                          // 1210\n    }                                                                                                                  // 1211\n                                                                                                                       // 1212\n    /**                                                                                                                // 1213\n     * Adds `value` to the cache.                                                                                      // 1214\n     *                                                                                                                 // 1215\n     * @private                                                                                                        // 1216\n     * @name push                                                                                                      // 1217\n     * @memberOf SetCache                                                                                              // 1218\n     * @param {*} value The value to cache.                                                                            // 1219\n     */                                                                                                                // 1220\n    function cachePush(value) {                                                                                        // 1221\n      var data = this.data;                                                                                            // 1222\n      if (typeof value == 'string' || isObject(value)) {                                                               // 1223\n        data.set.add(value);                                                                                           // 1224\n      } else {                                                                                                         // 1225\n        data.hash[value] = true;                                                                                       // 1226\n      }                                                                                                                // 1227\n    }                                                                                                                  // 1228\n                                                                                                                       // 1229\n    /*------------------------------------------------------------------------*/                                       // 1230\n                                                                                                                       // 1231\n    /**                                                                                                                // 1232\n     * Creates a new array joining `array` with `other`.                                                               // 1233\n     *                                                                                                                 // 1234\n     * @private                                                                                                        // 1235\n     * @param {Array} array The array to join.                                                                         // 1236\n     * @param {Array} other The other array to join.                                                                   // 1237\n     * @returns {Array} Returns the new concatenated array.                                                            // 1238\n     */                                                                                                                // 1239\n    function arrayConcat(array, other) {                                                                               // 1240\n      var index = -1,                                                                                                  // 1241\n          length = array.length,                                                                                       // 1242\n          othIndex = -1,                                                                                               // 1243\n          othLength = other.length,                                                                                    // 1244\n          result = Array(length + othLength);                                                                          // 1245\n                                                                                                                       // 1246\n      while (++index < length) {                                                                                       // 1247\n        result[index] = array[index];                                                                                  // 1248\n      }                                                                                                                // 1249\n      while (++othIndex < othLength) {                                                                                 // 1250\n        result[index++] = other[othIndex];                                                                             // 1251\n      }                                                                                                                // 1252\n      return result;                                                                                                   // 1253\n    }                                                                                                                  // 1254\n                                                                                                                       // 1255\n    /**                                                                                                                // 1256\n     * Copies the values of `source` to `array`.                                                                       // 1257\n     *                                                                                                                 // 1258\n     * @private                                                                                                        // 1259\n     * @param {Array} source The array to copy values from.                                                            // 1260\n     * @param {Array} [array=[]] The array to copy values to.                                                          // 1261\n     * @returns {Array} Returns `array`.                                                                               // 1262\n     */                                                                                                                // 1263\n    function arrayCopy(source, array) {                                                                                // 1264\n      var index = -1,                                                                                                  // 1265\n          length = source.length;                                                                                      // 1266\n                                                                                                                       // 1267\n      array || (array = Array(length));                                                                                // 1268\n      while (++index < length) {                                                                                       // 1269\n        array[index] = source[index];                                                                                  // 1270\n      }                                                                                                                // 1271\n      return array;                                                                                                    // 1272\n    }                                                                                                                  // 1273\n                                                                                                                       // 1274\n    /**                                                                                                                // 1275\n     * A specialized version of `_.forEach` for arrays without support for callback                                    // 1276\n     * shorthands and `this` binding.                                                                                  // 1277\n     *                                                                                                                 // 1278\n     * @private                                                                                                        // 1279\n     * @param {Array} array The array to iterate over.                                                                 // 1280\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1281\n     * @returns {Array} Returns `array`.                                                                               // 1282\n     */                                                                                                                // 1283\n    function arrayEach(array, iteratee) {                                                                              // 1284\n      var index = -1,                                                                                                  // 1285\n          length = array.length;                                                                                       // 1286\n                                                                                                                       // 1287\n      while (++index < length) {                                                                                       // 1288\n        if (iteratee(array[index], index, array) === false) {                                                          // 1289\n          break;                                                                                                       // 1290\n        }                                                                                                              // 1291\n      }                                                                                                                // 1292\n      return array;                                                                                                    // 1293\n    }                                                                                                                  // 1294\n                                                                                                                       // 1295\n    /**                                                                                                                // 1296\n     * A specialized version of `_.forEachRight` for arrays without support for                                        // 1297\n     * callback shorthands and `this` binding.                                                                         // 1298\n     *                                                                                                                 // 1299\n     * @private                                                                                                        // 1300\n     * @param {Array} array The array to iterate over.                                                                 // 1301\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1302\n     * @returns {Array} Returns `array`.                                                                               // 1303\n     */                                                                                                                // 1304\n    function arrayEachRight(array, iteratee) {                                                                         // 1305\n      var length = array.length;                                                                                       // 1306\n                                                                                                                       // 1307\n      while (length--) {                                                                                               // 1308\n        if (iteratee(array[length], length, array) === false) {                                                        // 1309\n          break;                                                                                                       // 1310\n        }                                                                                                              // 1311\n      }                                                                                                                // 1312\n      return array;                                                                                                    // 1313\n    }                                                                                                                  // 1314\n                                                                                                                       // 1315\n    /**                                                                                                                // 1316\n     * A specialized version of `_.every` for arrays without support for callback                                      // 1317\n     * shorthands and `this` binding.                                                                                  // 1318\n     *                                                                                                                 // 1319\n     * @private                                                                                                        // 1320\n     * @param {Array} array The array to iterate over.                                                                 // 1321\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1322\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1323\n     *  else `false`.                                                                                                  // 1324\n     */                                                                                                                // 1325\n    function arrayEvery(array, predicate) {                                                                            // 1326\n      var index = -1,                                                                                                  // 1327\n          length = array.length;                                                                                       // 1328\n                                                                                                                       // 1329\n      while (++index < length) {                                                                                       // 1330\n        if (!predicate(array[index], index, array)) {                                                                  // 1331\n          return false;                                                                                                // 1332\n        }                                                                                                              // 1333\n      }                                                                                                                // 1334\n      return true;                                                                                                     // 1335\n    }                                                                                                                  // 1336\n                                                                                                                       // 1337\n    /**                                                                                                                // 1338\n     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`                                     // 1339\n     * with one argument: (value).                                                                                     // 1340\n     *                                                                                                                 // 1341\n     * @private                                                                                                        // 1342\n     * @param {Array} array The array to iterate over.                                                                 // 1343\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1344\n     * @param {Function} comparator The function used to compare values.                                               // 1345\n     * @param {*} exValue The initial extremum value.                                                                  // 1346\n     * @returns {*} Returns the extremum value.                                                                        // 1347\n     */                                                                                                                // 1348\n    function arrayExtremum(array, iteratee, comparator, exValue) {                                                     // 1349\n      var index = -1,                                                                                                  // 1350\n          length = array.length,                                                                                       // 1351\n          computed = exValue,                                                                                          // 1352\n          result = computed;                                                                                           // 1353\n                                                                                                                       // 1354\n      while (++index < length) {                                                                                       // 1355\n        var value = array[index],                                                                                      // 1356\n            current = +iteratee(value);                                                                                // 1357\n                                                                                                                       // 1358\n        if (comparator(current, computed)) {                                                                           // 1359\n          computed = current;                                                                                          // 1360\n          result = value;                                                                                              // 1361\n        }                                                                                                              // 1362\n      }                                                                                                                // 1363\n      return result;                                                                                                   // 1364\n    }                                                                                                                  // 1365\n                                                                                                                       // 1366\n    /**                                                                                                                // 1367\n     * A specialized version of `_.filter` for arrays without support for callback                                     // 1368\n     * shorthands and `this` binding.                                                                                  // 1369\n     *                                                                                                                 // 1370\n     * @private                                                                                                        // 1371\n     * @param {Array} array The array to iterate over.                                                                 // 1372\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1373\n     * @returns {Array} Returns the new filtered array.                                                                // 1374\n     */                                                                                                                // 1375\n    function arrayFilter(array, predicate) {                                                                           // 1376\n      var index = -1,                                                                                                  // 1377\n          length = array.length,                                                                                       // 1378\n          resIndex = -1,                                                                                               // 1379\n          result = [];                                                                                                 // 1380\n                                                                                                                       // 1381\n      while (++index < length) {                                                                                       // 1382\n        var value = array[index];                                                                                      // 1383\n        if (predicate(value, index, array)) {                                                                          // 1384\n          result[++resIndex] = value;                                                                                  // 1385\n        }                                                                                                              // 1386\n      }                                                                                                                // 1387\n      return result;                                                                                                   // 1388\n    }                                                                                                                  // 1389\n                                                                                                                       // 1390\n    /**                                                                                                                // 1391\n     * A specialized version of `_.map` for arrays without support for callback                                        // 1392\n     * shorthands and `this` binding.                                                                                  // 1393\n     *                                                                                                                 // 1394\n     * @private                                                                                                        // 1395\n     * @param {Array} array The array to iterate over.                                                                 // 1396\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1397\n     * @returns {Array} Returns the new mapped array.                                                                  // 1398\n     */                                                                                                                // 1399\n    function arrayMap(array, iteratee) {                                                                               // 1400\n      var index = -1,                                                                                                  // 1401\n          length = array.length,                                                                                       // 1402\n          result = Array(length);                                                                                      // 1403\n                                                                                                                       // 1404\n      while (++index < length) {                                                                                       // 1405\n        result[index] = iteratee(array[index], index, array);                                                          // 1406\n      }                                                                                                                // 1407\n      return result;                                                                                                   // 1408\n    }                                                                                                                  // 1409\n                                                                                                                       // 1410\n    /**                                                                                                                // 1411\n     * Appends the elements of `values` to `array`.                                                                    // 1412\n     *                                                                                                                 // 1413\n     * @private                                                                                                        // 1414\n     * @param {Array} array The array to modify.                                                                       // 1415\n     * @param {Array} values The values to append.                                                                     // 1416\n     * @returns {Array} Returns `array`.                                                                               // 1417\n     */                                                                                                                // 1418\n    function arrayPush(array, values) {                                                                                // 1419\n      var index = -1,                                                                                                  // 1420\n          length = values.length,                                                                                      // 1421\n          offset = array.length;                                                                                       // 1422\n                                                                                                                       // 1423\n      while (++index < length) {                                                                                       // 1424\n        array[offset + index] = values[index];                                                                         // 1425\n      }                                                                                                                // 1426\n      return array;                                                                                                    // 1427\n    }                                                                                                                  // 1428\n                                                                                                                       // 1429\n    /**                                                                                                                // 1430\n     * A specialized version of `_.reduce` for arrays without support for callback                                     // 1431\n     * shorthands and `this` binding.                                                                                  // 1432\n     *                                                                                                                 // 1433\n     * @private                                                                                                        // 1434\n     * @param {Array} array The array to iterate over.                                                                 // 1435\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1436\n     * @param {*} [accumulator] The initial value.                                                                     // 1437\n     * @param {boolean} [initFromArray] Specify using the first element of `array`                                     // 1438\n     *  as the initial value.                                                                                          // 1439\n     * @returns {*} Returns the accumulated value.                                                                     // 1440\n     */                                                                                                                // 1441\n    function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                // 1442\n      var index = -1,                                                                                                  // 1443\n          length = array.length;                                                                                       // 1444\n                                                                                                                       // 1445\n      if (initFromArray && length) {                                                                                   // 1446\n        accumulator = array[++index];                                                                                  // 1447\n      }                                                                                                                // 1448\n      while (++index < length) {                                                                                       // 1449\n        accumulator = iteratee(accumulator, array[index], index, array);                                               // 1450\n      }                                                                                                                // 1451\n      return accumulator;                                                                                              // 1452\n    }                                                                                                                  // 1453\n                                                                                                                       // 1454\n    /**                                                                                                                // 1455\n     * A specialized version of `_.reduceRight` for arrays without support for                                         // 1456\n     * callback shorthands and `this` binding.                                                                         // 1457\n     *                                                                                                                 // 1458\n     * @private                                                                                                        // 1459\n     * @param {Array} array The array to iterate over.                                                                 // 1460\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1461\n     * @param {*} [accumulator] The initial value.                                                                     // 1462\n     * @param {boolean} [initFromArray] Specify using the last element of `array`                                      // 1463\n     *  as the initial value.                                                                                          // 1464\n     * @returns {*} Returns the accumulated value.                                                                     // 1465\n     */                                                                                                                // 1466\n    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                           // 1467\n      var length = array.length;                                                                                       // 1468\n      if (initFromArray && length) {                                                                                   // 1469\n        accumulator = array[--length];                                                                                 // 1470\n      }                                                                                                                // 1471\n      while (length--) {                                                                                               // 1472\n        accumulator = iteratee(accumulator, array[length], length, array);                                             // 1473\n      }                                                                                                                // 1474\n      return accumulator;                                                                                              // 1475\n    }                                                                                                                  // 1476\n                                                                                                                       // 1477\n    /**                                                                                                                // 1478\n     * A specialized version of `_.some` for arrays without support for callback                                       // 1479\n     * shorthands and `this` binding.                                                                                  // 1480\n     *                                                                                                                 // 1481\n     * @private                                                                                                        // 1482\n     * @param {Array} array The array to iterate over.                                                                 // 1483\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1484\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 1485\n     *  else `false`.                                                                                                  // 1486\n     */                                                                                                                // 1487\n    function arraySome(array, predicate) {                                                                             // 1488\n      var index = -1,                                                                                                  // 1489\n          length = array.length;                                                                                       // 1490\n                                                                                                                       // 1491\n      while (++index < length) {                                                                                       // 1492\n        if (predicate(array[index], index, array)) {                                                                   // 1493\n          return true;                                                                                                 // 1494\n        }                                                                                                              // 1495\n      }                                                                                                                // 1496\n      return false;                                                                                                    // 1497\n    }                                                                                                                  // 1498\n                                                                                                                       // 1499\n    /**                                                                                                                // 1500\n     * A specialized version of `_.sum` for arrays without support for callback                                        // 1501\n     * shorthands and `this` binding..                                                                                 // 1502\n     *                                                                                                                 // 1503\n     * @private                                                                                                        // 1504\n     * @param {Array} array The array to iterate over.                                                                 // 1505\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1506\n     * @returns {number} Returns the sum.                                                                              // 1507\n     */                                                                                                                // 1508\n    function arraySum(array, iteratee) {                                                                               // 1509\n      var length = array.length,                                                                                       // 1510\n          result = 0;                                                                                                  // 1511\n                                                                                                                       // 1512\n      while (length--) {                                                                                               // 1513\n        result += +iteratee(array[length]) || 0;                                                                       // 1514\n      }                                                                                                                // 1515\n      return result;                                                                                                   // 1516\n    }                                                                                                                  // 1517\n                                                                                                                       // 1518\n    /**                                                                                                                // 1519\n     * Used by `_.defaults` to customize its `_.assign` use.                                                           // 1520\n     *                                                                                                                 // 1521\n     * @private                                                                                                        // 1522\n     * @param {*} objectValue The destination object property value.                                                   // 1523\n     * @param {*} sourceValue The source object property value.                                                        // 1524\n     * @returns {*} Returns the value to assign to the destination object.                                             // 1525\n     */                                                                                                                // 1526\n    function assignDefaults(objectValue, sourceValue) {                                                                // 1527\n      return objectValue === undefined ? sourceValue : objectValue;                                                    // 1528\n    }                                                                                                                  // 1529\n                                                                                                                       // 1530\n    /**                                                                                                                // 1531\n     * Used by `_.template` to customize its `_.assign` use.                                                           // 1532\n     *                                                                                                                 // 1533\n     * **Note:** This function is like `assignDefaults` except that it ignores                                         // 1534\n     * inherited property values when checking if a property is `undefined`.                                           // 1535\n     *                                                                                                                 // 1536\n     * @private                                                                                                        // 1537\n     * @param {*} objectValue The destination object property value.                                                   // 1538\n     * @param {*} sourceValue The source object property value.                                                        // 1539\n     * @param {string} key The key associated with the object and source values.                                       // 1540\n     * @param {Object} object The destination object.                                                                  // 1541\n     * @returns {*} Returns the value to assign to the destination object.                                             // 1542\n     */                                                                                                                // 1543\n    function assignOwnDefaults(objectValue, sourceValue, key, object) {                                                // 1544\n      return (objectValue === undefined || !hasOwnProperty.call(object, key))                                          // 1545\n        ? sourceValue                                                                                                  // 1546\n        : objectValue;                                                                                                 // 1547\n    }                                                                                                                  // 1548\n                                                                                                                       // 1549\n    /**                                                                                                                // 1550\n     * A specialized version of `_.assign` for customizing assigned values without                                     // 1551\n     * support for argument juggling, multiple sources, and `this` binding `customizer`                                // 1552\n     * functions.                                                                                                      // 1553\n     *                                                                                                                 // 1554\n     * @private                                                                                                        // 1555\n     * @param {Object} object The destination object.                                                                  // 1556\n     * @param {Object} source The source object.                                                                       // 1557\n     * @param {Function} customizer The function to customize assigned values.                                         // 1558\n     * @returns {Object} Returns `object`.                                                                             // 1559\n     */                                                                                                                // 1560\n    function assignWith(object, source, customizer) {                                                                  // 1561\n      var index = -1,                                                                                                  // 1562\n          props = keys(source),                                                                                        // 1563\n          length = props.length;                                                                                       // 1564\n                                                                                                                       // 1565\n      while (++index < length) {                                                                                       // 1566\n        var key = props[index],                                                                                        // 1567\n            value = object[key],                                                                                       // 1568\n            result = customizer(value, source[key], key, object, source);                                              // 1569\n                                                                                                                       // 1570\n        if ((result === result ? (result !== value) : (value === value)) ||                                            // 1571\n            (value === undefined && !(key in object))) {                                                               // 1572\n          object[key] = result;                                                                                        // 1573\n        }                                                                                                              // 1574\n      }                                                                                                                // 1575\n      return object;                                                                                                   // 1576\n    }                                                                                                                  // 1577\n                                                                                                                       // 1578\n    /**                                                                                                                // 1579\n     * The base implementation of `_.assign` without support for argument juggling,                                    // 1580\n     * multiple sources, and `customizer` functions.                                                                   // 1581\n     *                                                                                                                 // 1582\n     * @private                                                                                                        // 1583\n     * @param {Object} object The destination object.                                                                  // 1584\n     * @param {Object} source The source object.                                                                       // 1585\n     * @returns {Object} Returns `object`.                                                                             // 1586\n     */                                                                                                                // 1587\n    function baseAssign(object, source) {                                                                              // 1588\n      return source == null                                                                                            // 1589\n        ? object                                                                                                       // 1590\n        : baseCopy(source, keys(source), object);                                                                      // 1591\n    }                                                                                                                  // 1592\n                                                                                                                       // 1593\n    /**                                                                                                                // 1594\n     * The base implementation of `_.at` without support for string collections                                        // 1595\n     * and individual key arguments.                                                                                   // 1596\n     *                                                                                                                 // 1597\n     * @private                                                                                                        // 1598\n     * @param {Array|Object} collection The collection to iterate over.                                                // 1599\n     * @param {number[]|string[]} props The property names or indexes of elements to pick.                             // 1600\n     * @returns {Array} Returns the new array of picked elements.                                                      // 1601\n     */                                                                                                                // 1602\n    function baseAt(collection, props) {                                                                               // 1603\n      var index = -1,                                                                                                  // 1604\n          isNil = collection == null,                                                                                  // 1605\n          isArr = !isNil && isArrayLike(collection),                                                                   // 1606\n          length = isArr ? collection.length : 0,                                                                      // 1607\n          propsLength = props.length,                                                                                  // 1608\n          result = Array(propsLength);                                                                                 // 1609\n                                                                                                                       // 1610\n      while(++index < propsLength) {                                                                                   // 1611\n        var key = props[index];                                                                                        // 1612\n        if (isArr) {                                                                                                   // 1613\n          result[index] = isIndex(key, length) ? collection[key] : undefined;                                          // 1614\n        } else {                                                                                                       // 1615\n          result[index] = isNil ? undefined : collection[key];                                                         // 1616\n        }                                                                                                              // 1617\n      }                                                                                                                // 1618\n      return result;                                                                                                   // 1619\n    }                                                                                                                  // 1620\n                                                                                                                       // 1621\n    /**                                                                                                                // 1622\n     * Copies properties of `source` to `object`.                                                                      // 1623\n     *                                                                                                                 // 1624\n     * @private                                                                                                        // 1625\n     * @param {Object} source The object to copy properties from.                                                      // 1626\n     * @param {Array} props The property names to copy.                                                                // 1627\n     * @param {Object} [object={}] The object to copy properties to.                                                   // 1628\n     * @returns {Object} Returns `object`.                                                                             // 1629\n     */                                                                                                                // 1630\n    function baseCopy(source, props, object) {                                                                         // 1631\n      object || (object = {});                                                                                         // 1632\n                                                                                                                       // 1633\n      var index = -1,                                                                                                  // 1634\n          length = props.length;                                                                                       // 1635\n                                                                                                                       // 1636\n      while (++index < length) {                                                                                       // 1637\n        var key = props[index];                                                                                        // 1638\n        object[key] = source[key];                                                                                     // 1639\n      }                                                                                                                // 1640\n      return object;                                                                                                   // 1641\n    }                                                                                                                  // 1642\n                                                                                                                       // 1643\n    /**                                                                                                                // 1644\n     * The base implementation of `_.callback` which supports specifying the                                           // 1645\n     * number of arguments to provide to `func`.                                                                       // 1646\n     *                                                                                                                 // 1647\n     * @private                                                                                                        // 1648\n     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 1649\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 1650\n     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 1651\n     * @returns {Function} Returns the callback.                                                                       // 1652\n     */                                                                                                                // 1653\n    function baseCallback(func, thisArg, argCount) {                                                                   // 1654\n      var type = typeof func;                                                                                          // 1655\n      if (type == 'function') {                                                                                        // 1656\n        return thisArg === undefined                                                                                   // 1657\n          ? func                                                                                                       // 1658\n          : bindCallback(func, thisArg, argCount);                                                                     // 1659\n      }                                                                                                                // 1660\n      if (func == null) {                                                                                              // 1661\n        return identity;                                                                                               // 1662\n      }                                                                                                                // 1663\n      if (type == 'object') {                                                                                          // 1664\n        return baseMatches(func);                                                                                      // 1665\n      }                                                                                                                // 1666\n      return thisArg === undefined                                                                                     // 1667\n        ? property(func)                                                                                               // 1668\n        : baseMatchesProperty(func, thisArg);                                                                          // 1669\n    }                                                                                                                  // 1670\n                                                                                                                       // 1671\n    /**                                                                                                                // 1672\n     * The base implementation of `_.clone` without support for argument juggling                                      // 1673\n     * and `this` binding `customizer` functions.                                                                      // 1674\n     *                                                                                                                 // 1675\n     * @private                                                                                                        // 1676\n     * @param {*} value The value to clone.                                                                            // 1677\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 1678\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 1679\n     * @param {string} [key] The key of `value`.                                                                       // 1680\n     * @param {Object} [object] The object `value` belongs to.                                                         // 1681\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 1682\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.                                          // 1683\n     * @returns {*} Returns the cloned value.                                                                          // 1684\n     */                                                                                                                // 1685\n    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {                                       // 1686\n      var result;                                                                                                      // 1687\n      if (customizer) {                                                                                                // 1688\n        result = object ? customizer(value, key, object) : customizer(value);                                          // 1689\n      }                                                                                                                // 1690\n      if (result !== undefined) {                                                                                      // 1691\n        return result;                                                                                                 // 1692\n      }                                                                                                                // 1693\n      if (!isObject(value)) {                                                                                          // 1694\n        return value;                                                                                                  // 1695\n      }                                                                                                                // 1696\n      var isArr = isArray(value);                                                                                      // 1697\n      if (isArr) {                                                                                                     // 1698\n        result = initCloneArray(value);                                                                                // 1699\n        if (!isDeep) {                                                                                                 // 1700\n          return arrayCopy(value, result);                                                                             // 1701\n        }                                                                                                              // 1702\n      } else {                                                                                                         // 1703\n        var tag = objToString.call(value),                                                                             // 1704\n            isFunc = tag == funcTag;                                                                                   // 1705\n                                                                                                                       // 1706\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 1707\n          result = initCloneObject(isFunc ? {} : value);                                                               // 1708\n          if (!isDeep) {                                                                                               // 1709\n            return baseAssign(result, value);                                                                          // 1710\n          }                                                                                                            // 1711\n        } else {                                                                                                       // 1712\n          return cloneableTags[tag]                                                                                    // 1713\n            ? initCloneByTag(value, tag, isDeep)                                                                       // 1714\n            : (object ? value : {});                                                                                   // 1715\n        }                                                                                                              // 1716\n      }                                                                                                                // 1717\n      // Check for circular references and return its corresponding clone.                                             // 1718\n      stackA || (stackA = []);                                                                                         // 1719\n      stackB || (stackB = []);                                                                                         // 1720\n                                                                                                                       // 1721\n      var length = stackA.length;                                                                                      // 1722\n      while (length--) {                                                                                               // 1723\n        if (stackA[length] == value) {                                                                                 // 1724\n          return stackB[length];                                                                                       // 1725\n        }                                                                                                              // 1726\n      }                                                                                                                // 1727\n      // Add the source value to the stack of traversed objects and associate it with its clone.                       // 1728\n      stackA.push(value);                                                                                              // 1729\n      stackB.push(result);                                                                                             // 1730\n                                                                                                                       // 1731\n      // Recursively populate clone (susceptible to call stack limits).                                                // 1732\n      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 1733\n        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);                             // 1734\n      });                                                                                                              // 1735\n      return result;                                                                                                   // 1736\n    }                                                                                                                  // 1737\n                                                                                                                       // 1738\n    /**                                                                                                                // 1739\n     * The base implementation of `_.create` without support for assigning                                             // 1740\n     * properties to the created object.                                                                               // 1741\n     *                                                                                                                 // 1742\n     * @private                                                                                                        // 1743\n     * @param {Object} prototype The object to inherit from.                                                           // 1744\n     * @returns {Object} Returns the new object.                                                                       // 1745\n     */                                                                                                                // 1746\n    var baseCreate = (function() {                                                                                     // 1747\n      function object() {}                                                                                             // 1748\n      return function(prototype) {                                                                                     // 1749\n        if (isObject(prototype)) {                                                                                     // 1750\n          object.prototype = prototype;                                                                                // 1751\n          var result = new object;                                                                                     // 1752\n          object.prototype = undefined;                                                                                // 1753\n        }                                                                                                              // 1754\n        return result || {};                                                                                           // 1755\n      };                                                                                                               // 1756\n    }());                                                                                                              // 1757\n                                                                                                                       // 1758\n    /**                                                                                                                // 1759\n     * The base implementation of `_.delay` and `_.defer` which accepts an index                                       // 1760\n     * of where to slice the arguments to provide to `func`.                                                           // 1761\n     *                                                                                                                 // 1762\n     * @private                                                                                                        // 1763\n     * @param {Function} func The function to delay.                                                                   // 1764\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 1765\n     * @param {Object} args The arguments provide to `func`.                                                           // 1766\n     * @returns {number} Returns the timer id.                                                                         // 1767\n     */                                                                                                                // 1768\n    function baseDelay(func, wait, args) {                                                                             // 1769\n      if (typeof func != 'function') {                                                                                 // 1770\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 1771\n      }                                                                                                                // 1772\n      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 1773\n    }                                                                                                                  // 1774\n                                                                                                                       // 1775\n    /**                                                                                                                // 1776\n     * The base implementation of `_.difference` which accepts a single array                                          // 1777\n     * of values to exclude.                                                                                           // 1778\n     *                                                                                                                 // 1779\n     * @private                                                                                                        // 1780\n     * @param {Array} array The array to inspect.                                                                      // 1781\n     * @param {Array} values The values to exclude.                                                                    // 1782\n     * @returns {Array} Returns the new array of filtered values.                                                      // 1783\n     */                                                                                                                // 1784\n    function baseDifference(array, values) {                                                                           // 1785\n      var length = array ? array.length : 0,                                                                           // 1786\n          result = [];                                                                                                 // 1787\n                                                                                                                       // 1788\n      if (!length) {                                                                                                   // 1789\n        return result;                                                                                                 // 1790\n      }                                                                                                                // 1791\n      var index = -1,                                                                                                  // 1792\n          indexOf = getIndexOf(),                                                                                      // 1793\n          isCommon = indexOf === baseIndexOf,                                                                          // 1794\n          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,                        // 1795\n          valuesLength = values.length;                                                                                // 1796\n                                                                                                                       // 1797\n      if (cache) {                                                                                                     // 1798\n        indexOf = cacheIndexOf;                                                                                        // 1799\n        isCommon = false;                                                                                              // 1800\n        values = cache;                                                                                                // 1801\n      }                                                                                                                // 1802\n      outer:                                                                                                           // 1803\n      while (++index < length) {                                                                                       // 1804\n        var value = array[index];                                                                                      // 1805\n                                                                                                                       // 1806\n        if (isCommon && value === value) {                                                                             // 1807\n          var valuesIndex = valuesLength;                                                                              // 1808\n          while (valuesIndex--) {                                                                                      // 1809\n            if (values[valuesIndex] === value) {                                                                       // 1810\n              continue outer;                                                                                          // 1811\n            }                                                                                                          // 1812\n          }                                                                                                            // 1813\n          result.push(value);                                                                                          // 1814\n        }                                                                                                              // 1815\n        else if (indexOf(values, value, 0) < 0) {                                                                      // 1816\n          result.push(value);                                                                                          // 1817\n        }                                                                                                              // 1818\n      }                                                                                                                // 1819\n      return result;                                                                                                   // 1820\n    }                                                                                                                  // 1821\n                                                                                                                       // 1822\n    /**                                                                                                                // 1823\n     * The base implementation of `_.forEach` without support for callback                                             // 1824\n     * shorthands and `this` binding.                                                                                  // 1825\n     *                                                                                                                 // 1826\n     * @private                                                                                                        // 1827\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1828\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1829\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 1830\n     */                                                                                                                // 1831\n    var baseEach = createBaseEach(baseForOwn);                                                                         // 1832\n                                                                                                                       // 1833\n    /**                                                                                                                // 1834\n     * The base implementation of `_.forEachRight` without support for callback                                        // 1835\n     * shorthands and `this` binding.                                                                                  // 1836\n     *                                                                                                                 // 1837\n     * @private                                                                                                        // 1838\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1839\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1840\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 1841\n     */                                                                                                                // 1842\n    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 1843\n                                                                                                                       // 1844\n    /**                                                                                                                // 1845\n     * The base implementation of `_.every` without support for callback                                               // 1846\n     * shorthands and `this` binding.                                                                                  // 1847\n     *                                                                                                                 // 1848\n     * @private                                                                                                        // 1849\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1850\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1851\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1852\n     *  else `false`                                                                                                   // 1853\n     */                                                                                                                // 1854\n    function baseEvery(collection, predicate) {                                                                        // 1855\n      var result = true;                                                                                               // 1856\n      baseEach(collection, function(value, index, collection) {                                                        // 1857\n        result = !!predicate(value, index, collection);                                                                // 1858\n        return result;                                                                                                 // 1859\n      });                                                                                                              // 1860\n      return result;                                                                                                   // 1861\n    }                                                                                                                  // 1862\n                                                                                                                       // 1863\n    /**                                                                                                                // 1864\n     * Gets the extremum value of `collection` invoking `iteratee` for each value                                      // 1865\n     * in `collection` to generate the criterion by which the value is ranked.                                         // 1866\n     * The `iteratee` is invoked with three arguments: (value, index|key, collection).                                 // 1867\n     *                                                                                                                 // 1868\n     * @private                                                                                                        // 1869\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1870\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1871\n     * @param {Function} comparator The function used to compare values.                                               // 1872\n     * @param {*} exValue The initial extremum value.                                                                  // 1873\n     * @returns {*} Returns the extremum value.                                                                        // 1874\n     */                                                                                                                // 1875\n    function baseExtremum(collection, iteratee, comparator, exValue) {                                                 // 1876\n      var computed = exValue,                                                                                          // 1877\n          result = computed;                                                                                           // 1878\n                                                                                                                       // 1879\n      baseEach(collection, function(value, index, collection) {                                                        // 1880\n        var current = +iteratee(value, index, collection);                                                             // 1881\n        if (comparator(current, computed) || (current === exValue && current === result)) {                            // 1882\n          computed = current;                                                                                          // 1883\n          result = value;                                                                                              // 1884\n        }                                                                                                              // 1885\n      });                                                                                                              // 1886\n      return result;                                                                                                   // 1887\n    }                                                                                                                  // 1888\n                                                                                                                       // 1889\n    /**                                                                                                                // 1890\n     * The base implementation of `_.fill` without an iteratee call guard.                                             // 1891\n     *                                                                                                                 // 1892\n     * @private                                                                                                        // 1893\n     * @param {Array} array The array to fill.                                                                         // 1894\n     * @param {*} value The value to fill `array` with.                                                                // 1895\n     * @param {number} [start=0] The start position.                                                                   // 1896\n     * @param {number} [end=array.length] The end position.                                                            // 1897\n     * @returns {Array} Returns `array`.                                                                               // 1898\n     */                                                                                                                // 1899\n    function baseFill(array, value, start, end) {                                                                      // 1900\n      var length = array.length;                                                                                       // 1901\n                                                                                                                       // 1902\n      start = start == null ? 0 : (+start || 0);                                                                       // 1903\n      if (start < 0) {                                                                                                 // 1904\n        start = -start > length ? 0 : (length + start);                                                                // 1905\n      }                                                                                                                // 1906\n      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 1907\n      if (end < 0) {                                                                                                   // 1908\n        end += length;                                                                                                 // 1909\n      }                                                                                                                // 1910\n      length = start > end ? 0 : (end >>> 0);                                                                          // 1911\n      start >>>= 0;                                                                                                    // 1912\n                                                                                                                       // 1913\n      while (start < length) {                                                                                         // 1914\n        array[start++] = value;                                                                                        // 1915\n      }                                                                                                                // 1916\n      return array;                                                                                                    // 1917\n    }                                                                                                                  // 1918\n                                                                                                                       // 1919\n    /**                                                                                                                // 1920\n     * The base implementation of `_.filter` without support for callback                                              // 1921\n     * shorthands and `this` binding.                                                                                  // 1922\n     *                                                                                                                 // 1923\n     * @private                                                                                                        // 1924\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1925\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1926\n     * @returns {Array} Returns the new filtered array.                                                                // 1927\n     */                                                                                                                // 1928\n    function baseFilter(collection, predicate) {                                                                       // 1929\n      var result = [];                                                                                                 // 1930\n      baseEach(collection, function(value, index, collection) {                                                        // 1931\n        if (predicate(value, index, collection)) {                                                                     // 1932\n          result.push(value);                                                                                          // 1933\n        }                                                                                                              // 1934\n      });                                                                                                              // 1935\n      return result;                                                                                                   // 1936\n    }                                                                                                                  // 1937\n                                                                                                                       // 1938\n    /**                                                                                                                // 1939\n     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,                            // 1940\n     * without support for callback shorthands and `this` binding, which iterates                                      // 1941\n     * over `collection` using the provided `eachFunc`.                                                                // 1942\n     *                                                                                                                 // 1943\n     * @private                                                                                                        // 1944\n     * @param {Array|Object|string} collection The collection to search.                                               // 1945\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1946\n     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 1947\n     * @param {boolean} [retKey] Specify returning the key of the found element                                        // 1948\n     *  instead of the element itself.                                                                                 // 1949\n     * @returns {*} Returns the found element or its key, else `undefined`.                                            // 1950\n     */                                                                                                                // 1951\n    function baseFind(collection, predicate, eachFunc, retKey) {                                                       // 1952\n      var result;                                                                                                      // 1953\n      eachFunc(collection, function(value, key, collection) {                                                          // 1954\n        if (predicate(value, key, collection)) {                                                                       // 1955\n          result = retKey ? key : value;                                                                               // 1956\n          return false;                                                                                                // 1957\n        }                                                                                                              // 1958\n      });                                                                                                              // 1959\n      return result;                                                                                                   // 1960\n    }                                                                                                                  // 1961\n                                                                                                                       // 1962\n    /**                                                                                                                // 1963\n     * The base implementation of `_.flatten` with added support for restricting                                       // 1964\n     * flattening and specifying the start index.                                                                      // 1965\n     *                                                                                                                 // 1966\n     * @private                                                                                                        // 1967\n     * @param {Array} array The array to flatten.                                                                      // 1968\n     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 1969\n     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 1970\n     * @param {Array} [result=[]] The initial result value.                                                            // 1971\n     * @returns {Array} Returns the new flattened array.                                                               // 1972\n     */                                                                                                                // 1973\n    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 1974\n      result || (result = []);                                                                                         // 1975\n                                                                                                                       // 1976\n      var index = -1,                                                                                                  // 1977\n          length = array.length;                                                                                       // 1978\n                                                                                                                       // 1979\n      while (++index < length) {                                                                                       // 1980\n        var value = array[index];                                                                                      // 1981\n        if (isObjectLike(value) && isArrayLike(value) &&                                                               // 1982\n            (isStrict || isArray(value) || isArguments(value))) {                                                      // 1983\n          if (isDeep) {                                                                                                // 1984\n            // Recursively flatten arrays (susceptible to call stack limits).                                          // 1985\n            baseFlatten(value, isDeep, isStrict, result);                                                              // 1986\n          } else {                                                                                                     // 1987\n            arrayPush(result, value);                                                                                  // 1988\n          }                                                                                                            // 1989\n        } else if (!isStrict) {                                                                                        // 1990\n          result[result.length] = value;                                                                               // 1991\n        }                                                                                                              // 1992\n      }                                                                                                                // 1993\n      return result;                                                                                                   // 1994\n    }                                                                                                                  // 1995\n                                                                                                                       // 1996\n    /**                                                                                                                // 1997\n     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 1998\n     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 1999\n     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2000\n     * returning `false`.                                                                                              // 2001\n     *                                                                                                                 // 2002\n     * @private                                                                                                        // 2003\n     * @param {Object} object The object to iterate over.                                                              // 2004\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2005\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2006\n     * @returns {Object} Returns `object`.                                                                             // 2007\n     */                                                                                                                // 2008\n    var baseFor = createBaseFor();                                                                                     // 2009\n                                                                                                                       // 2010\n    /**                                                                                                                // 2011\n     * This function is like `baseFor` except that it iterates over properties                                         // 2012\n     * in the opposite order.                                                                                          // 2013\n     *                                                                                                                 // 2014\n     * @private                                                                                                        // 2015\n     * @param {Object} object The object to iterate over.                                                              // 2016\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2017\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2018\n     * @returns {Object} Returns `object`.                                                                             // 2019\n     */                                                                                                                // 2020\n    var baseForRight = createBaseFor(true);                                                                            // 2021\n                                                                                                                       // 2022\n    /**                                                                                                                // 2023\n     * The base implementation of `_.forIn` without support for callback                                               // 2024\n     * shorthands and `this` binding.                                                                                  // 2025\n     *                                                                                                                 // 2026\n     * @private                                                                                                        // 2027\n     * @param {Object} object The object to iterate over.                                                              // 2028\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2029\n     * @returns {Object} Returns `object`.                                                                             // 2030\n     */                                                                                                                // 2031\n    function baseForIn(object, iteratee) {                                                                             // 2032\n      return baseFor(object, iteratee, keysIn);                                                                        // 2033\n    }                                                                                                                  // 2034\n                                                                                                                       // 2035\n    /**                                                                                                                // 2036\n     * The base implementation of `_.forOwn` without support for callback                                              // 2037\n     * shorthands and `this` binding.                                                                                  // 2038\n     *                                                                                                                 // 2039\n     * @private                                                                                                        // 2040\n     * @param {Object} object The object to iterate over.                                                              // 2041\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2042\n     * @returns {Object} Returns `object`.                                                                             // 2043\n     */                                                                                                                // 2044\n    function baseForOwn(object, iteratee) {                                                                            // 2045\n      return baseFor(object, iteratee, keys);                                                                          // 2046\n    }                                                                                                                  // 2047\n                                                                                                                       // 2048\n    /**                                                                                                                // 2049\n     * The base implementation of `_.forOwnRight` without support for callback                                         // 2050\n     * shorthands and `this` binding.                                                                                  // 2051\n     *                                                                                                                 // 2052\n     * @private                                                                                                        // 2053\n     * @param {Object} object The object to iterate over.                                                              // 2054\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2055\n     * @returns {Object} Returns `object`.                                                                             // 2056\n     */                                                                                                                // 2057\n    function baseForOwnRight(object, iteratee) {                                                                       // 2058\n      return baseForRight(object, iteratee, keys);                                                                     // 2059\n    }                                                                                                                  // 2060\n                                                                                                                       // 2061\n    /**                                                                                                                // 2062\n     * The base implementation of `_.functions` which creates an array of                                              // 2063\n     * `object` function property names filtered from those provided.                                                  // 2064\n     *                                                                                                                 // 2065\n     * @private                                                                                                        // 2066\n     * @param {Object} object The object to inspect.                                                                   // 2067\n     * @param {Array} props The property names to filter.                                                              // 2068\n     * @returns {Array} Returns the new array of filtered property names.                                              // 2069\n     */                                                                                                                // 2070\n    function baseFunctions(object, props) {                                                                            // 2071\n      var index = -1,                                                                                                  // 2072\n          length = props.length,                                                                                       // 2073\n          resIndex = -1,                                                                                               // 2074\n          result = [];                                                                                                 // 2075\n                                                                                                                       // 2076\n      while (++index < length) {                                                                                       // 2077\n        var key = props[index];                                                                                        // 2078\n        if (isFunction(object[key])) {                                                                                 // 2079\n          result[++resIndex] = key;                                                                                    // 2080\n        }                                                                                                              // 2081\n      }                                                                                                                // 2082\n      return result;                                                                                                   // 2083\n    }                                                                                                                  // 2084\n                                                                                                                       // 2085\n    /**                                                                                                                // 2086\n     * The base implementation of `get` without support for string paths                                               // 2087\n     * and default values.                                                                                             // 2088\n     *                                                                                                                 // 2089\n     * @private                                                                                                        // 2090\n     * @param {Object} object The object to query.                                                                     // 2091\n     * @param {Array} path The path of the property to get.                                                            // 2092\n     * @param {string} [pathKey] The key representation of path.                                                       // 2093\n     * @returns {*} Returns the resolved value.                                                                        // 2094\n     */                                                                                                                // 2095\n    function baseGet(object, path, pathKey) {                                                                          // 2096\n      if (object == null) {                                                                                            // 2097\n        return;                                                                                                        // 2098\n      }                                                                                                                // 2099\n      if (pathKey !== undefined && pathKey in toObject(object)) {                                                      // 2100\n        path = [pathKey];                                                                                              // 2101\n      }                                                                                                                // 2102\n      var index = 0,                                                                                                   // 2103\n          length = path.length;                                                                                        // 2104\n                                                                                                                       // 2105\n      while (object != null && index < length) {                                                                       // 2106\n        object = object[path[index++]];                                                                                // 2107\n      }                                                                                                                // 2108\n      return (index && index == length) ? object : undefined;                                                          // 2109\n    }                                                                                                                  // 2110\n                                                                                                                       // 2111\n    /**                                                                                                                // 2112\n     * The base implementation of `_.isEqual` without support for `this` binding                                       // 2113\n     * `customizer` functions.                                                                                         // 2114\n     *                                                                                                                 // 2115\n     * @private                                                                                                        // 2116\n     * @param {*} value The value to compare.                                                                          // 2117\n     * @param {*} other The other value to compare.                                                                    // 2118\n     * @param {Function} [customizer] The function to customize comparing values.                                      // 2119\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2120\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 2121\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 2122\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2123\n     */                                                                                                                // 2124\n    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {                                          // 2125\n      if (value === other) {                                                                                           // 2126\n        return true;                                                                                                   // 2127\n      }                                                                                                                // 2128\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2129\n        return value !== value && other !== other;                                                                     // 2130\n      }                                                                                                                // 2131\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);                          // 2132\n    }                                                                                                                  // 2133\n                                                                                                                       // 2134\n    /**                                                                                                                // 2135\n     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2136\n     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2137\n     * references to be compared.                                                                                      // 2138\n     *                                                                                                                 // 2139\n     * @private                                                                                                        // 2140\n     * @param {Object} object The object to compare.                                                                   // 2141\n     * @param {Object} other The other object to compare.                                                              // 2142\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2143\n     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2144\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2145\n     * @param {Array} [stackA=[]] Tracks traversed `value` objects.                                                    // 2146\n     * @param {Array} [stackB=[]] Tracks traversed `other` objects.                                                    // 2147\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2148\n     */                                                                                                                // 2149\n    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                          // 2150\n      var objIsArr = isArray(object),                                                                                  // 2151\n          othIsArr = isArray(other),                                                                                   // 2152\n          objTag = arrayTag,                                                                                           // 2153\n          othTag = arrayTag;                                                                                           // 2154\n                                                                                                                       // 2155\n      if (!objIsArr) {                                                                                                 // 2156\n        objTag = objToString.call(object);                                                                             // 2157\n        if (objTag == argsTag) {                                                                                       // 2158\n          objTag = objectTag;                                                                                          // 2159\n        } else if (objTag != objectTag) {                                                                              // 2160\n          objIsArr = isTypedArray(object);                                                                             // 2161\n        }                                                                                                              // 2162\n      }                                                                                                                // 2163\n      if (!othIsArr) {                                                                                                 // 2164\n        othTag = objToString.call(other);                                                                              // 2165\n        if (othTag == argsTag) {                                                                                       // 2166\n          othTag = objectTag;                                                                                          // 2167\n        } else if (othTag != objectTag) {                                                                              // 2168\n          othIsArr = isTypedArray(other);                                                                              // 2169\n        }                                                                                                              // 2170\n      }                                                                                                                // 2171\n      var objIsObj = objTag == objectTag,                                                                              // 2172\n          othIsObj = othTag == objectTag,                                                                              // 2173\n          isSameTag = objTag == othTag;                                                                                // 2174\n                                                                                                                       // 2175\n      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2176\n        return equalByTag(object, other, objTag);                                                                      // 2177\n      }                                                                                                                // 2178\n      if (!isLoose) {                                                                                                  // 2179\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2180\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2181\n                                                                                                                       // 2182\n        if (objIsWrapped || othIsWrapped) {                                                                            // 2183\n          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n        }                                                                                                              // 2185\n      }                                                                                                                // 2186\n      if (!isSameTag) {                                                                                                // 2187\n        return false;                                                                                                  // 2188\n      }                                                                                                                // 2189\n      // Assume cyclic values are equal.                                                                               // 2190\n      // For more information on detecting circular references see https://es5.github.io/#JO.                          // 2191\n      stackA || (stackA = []);                                                                                         // 2192\n      stackB || (stackB = []);                                                                                         // 2193\n                                                                                                                       // 2194\n      var length = stackA.length;                                                                                      // 2195\n      while (length--) {                                                                                               // 2196\n        if (stackA[length] == object) {                                                                                // 2197\n          return stackB[length] == other;                                                                              // 2198\n        }                                                                                                              // 2199\n      }                                                                                                                // 2200\n      // Add `object` and `other` to the stack of traversed objects.                                                   // 2201\n      stackA.push(object);                                                                                             // 2202\n      stackB.push(other);                                                                                              // 2203\n                                                                                                                       // 2204\n      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n                                                                                                                       // 2206\n      stackA.pop();                                                                                                    // 2207\n      stackB.pop();                                                                                                    // 2208\n                                                                                                                       // 2209\n      return result;                                                                                                   // 2210\n    }                                                                                                                  // 2211\n                                                                                                                       // 2212\n    /**                                                                                                                // 2213\n     * The base implementation of `_.isMatch` without support for callback                                             // 2214\n     * shorthands and `this` binding.                                                                                  // 2215\n     *                                                                                                                 // 2216\n     * @private                                                                                                        // 2217\n     * @param {Object} object The object to inspect.                                                                   // 2218\n     * @param {Array} matchData The propery names, values, and compare flags to match.                                 // 2219\n     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2220\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2221\n     */                                                                                                                // 2222\n    function baseIsMatch(object, matchData, customizer) {                                                              // 2223\n      var index = matchData.length,                                                                                    // 2224\n          length = index,                                                                                              // 2225\n          noCustomizer = !customizer;                                                                                  // 2226\n                                                                                                                       // 2227\n      if (object == null) {                                                                                            // 2228\n        return !length;                                                                                                // 2229\n      }                                                                                                                // 2230\n      object = toObject(object);                                                                                       // 2231\n      while (index--) {                                                                                                // 2232\n        var data = matchData[index];                                                                                   // 2233\n        if ((noCustomizer && data[2])                                                                                  // 2234\n              ? data[1] !== object[data[0]]                                                                            // 2235\n              : !(data[0] in object)                                                                                   // 2236\n            ) {                                                                                                        // 2237\n          return false;                                                                                                // 2238\n        }                                                                                                              // 2239\n      }                                                                                                                // 2240\n      while (++index < length) {                                                                                       // 2241\n        data = matchData[index];                                                                                       // 2242\n        var key = data[0],                                                                                             // 2243\n            objValue = object[key],                                                                                    // 2244\n            srcValue = data[1];                                                                                        // 2245\n                                                                                                                       // 2246\n        if (noCustomizer && data[2]) {                                                                                 // 2247\n          if (objValue === undefined && !(key in object)) {                                                            // 2248\n            return false;                                                                                              // 2249\n          }                                                                                                            // 2250\n        } else {                                                                                                       // 2251\n          var result = customizer ? customizer(objValue, srcValue, key) : undefined;                                   // 2252\n          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {                  // 2253\n            return false;                                                                                              // 2254\n          }                                                                                                            // 2255\n        }                                                                                                              // 2256\n      }                                                                                                                // 2257\n      return true;                                                                                                     // 2258\n    }                                                                                                                  // 2259\n                                                                                                                       // 2260\n    /**                                                                                                                // 2261\n     * The base implementation of `_.map` without support for callback shorthands                                      // 2262\n     * and `this` binding.                                                                                             // 2263\n     *                                                                                                                 // 2264\n     * @private                                                                                                        // 2265\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2266\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2267\n     * @returns {Array} Returns the new mapped array.                                                                  // 2268\n     */                                                                                                                // 2269\n    function baseMap(collection, iteratee) {                                                                           // 2270\n      var index = -1,                                                                                                  // 2271\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2272\n                                                                                                                       // 2273\n      baseEach(collection, function(value, key, collection) {                                                          // 2274\n        result[++index] = iteratee(value, key, collection);                                                            // 2275\n      });                                                                                                              // 2276\n      return result;                                                                                                   // 2277\n    }                                                                                                                  // 2278\n                                                                                                                       // 2279\n    /**                                                                                                                // 2280\n     * The base implementation of `_.matches` which does not clone `source`.                                           // 2281\n     *                                                                                                                 // 2282\n     * @private                                                                                                        // 2283\n     * @param {Object} source The object of property values to match.                                                  // 2284\n     * @returns {Function} Returns the new function.                                                                   // 2285\n     */                                                                                                                // 2286\n    function baseMatches(source) {                                                                                     // 2287\n      var matchData = getMatchData(source);                                                                            // 2288\n      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2289\n        var key = matchData[0][0],                                                                                     // 2290\n            value = matchData[0][1];                                                                                   // 2291\n                                                                                                                       // 2292\n        return function(object) {                                                                                      // 2293\n          if (object == null) {                                                                                        // 2294\n            return false;                                                                                              // 2295\n          }                                                                                                            // 2296\n          return object[key] === value && (value !== undefined || (key in toObject(object)));                          // 2297\n        };                                                                                                             // 2298\n      }                                                                                                                // 2299\n      return function(object) {                                                                                        // 2300\n        return baseIsMatch(object, matchData);                                                                         // 2301\n      };                                                                                                               // 2302\n    }                                                                                                                  // 2303\n                                                                                                                       // 2304\n    /**                                                                                                                // 2305\n     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.                                 // 2306\n     *                                                                                                                 // 2307\n     * @private                                                                                                        // 2308\n     * @param {string} path The path of the property to get.                                                           // 2309\n     * @param {*} srcValue The value to compare.                                                                       // 2310\n     * @returns {Function} Returns the new function.                                                                   // 2311\n     */                                                                                                                // 2312\n    function baseMatchesProperty(path, srcValue) {                                                                     // 2313\n      var isArr = isArray(path),                                                                                       // 2314\n          isCommon = isKey(path) && isStrictComparable(srcValue),                                                      // 2315\n          pathKey = (path + '');                                                                                       // 2316\n                                                                                                                       // 2317\n      path = toPath(path);                                                                                             // 2318\n      return function(object) {                                                                                        // 2319\n        if (object == null) {                                                                                          // 2320\n          return false;                                                                                                // 2321\n        }                                                                                                              // 2322\n        var key = pathKey;                                                                                             // 2323\n        object = toObject(object);                                                                                     // 2324\n        if ((isArr || !isCommon) && !(key in object)) {                                                                // 2325\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 2326\n          if (object == null) {                                                                                        // 2327\n            return false;                                                                                              // 2328\n          }                                                                                                            // 2329\n          key = last(path);                                                                                            // 2330\n          object = toObject(object);                                                                                   // 2331\n        }                                                                                                              // 2332\n        return object[key] === srcValue                                                                                // 2333\n          ? (srcValue !== undefined || (key in object))                                                                // 2334\n          : baseIsEqual(srcValue, object[key], undefined, true);                                                       // 2335\n      };                                                                                                               // 2336\n    }                                                                                                                  // 2337\n                                                                                                                       // 2338\n    /**                                                                                                                // 2339\n     * The base implementation of `_.merge` without support for argument juggling,                                     // 2340\n     * multiple sources, and `this` binding `customizer` functions.                                                    // 2341\n     *                                                                                                                 // 2342\n     * @private                                                                                                        // 2343\n     * @param {Object} object The destination object.                                                                  // 2344\n     * @param {Object} source The source object.                                                                       // 2345\n     * @param {Function} [customizer] The function to customize merged values.                                         // 2346\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2347\n     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2348\n     * @returns {Object} Returns `object`.                                                                             // 2349\n     */                                                                                                                // 2350\n    function baseMerge(object, source, customizer, stackA, stackB) {                                                   // 2351\n      if (!isObject(object)) {                                                                                         // 2352\n        return object;                                                                                                 // 2353\n      }                                                                                                                // 2354\n      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),                                 // 2355\n          props = isSrcArr ? undefined : keys(source);                                                                 // 2356\n                                                                                                                       // 2357\n      arrayEach(props || source, function(srcValue, key) {                                                             // 2358\n        if (props) {                                                                                                   // 2359\n          key = srcValue;                                                                                              // 2360\n          srcValue = source[key];                                                                                      // 2361\n        }                                                                                                              // 2362\n        if (isObjectLike(srcValue)) {                                                                                  // 2363\n          stackA || (stackA = []);                                                                                     // 2364\n          stackB || (stackB = []);                                                                                     // 2365\n          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);                                   // 2366\n        }                                                                                                              // 2367\n        else {                                                                                                         // 2368\n          var value = object[key],                                                                                     // 2369\n              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                      // 2370\n              isCommon = result === undefined;                                                                         // 2371\n                                                                                                                       // 2372\n          if (isCommon) {                                                                                              // 2373\n            result = srcValue;                                                                                         // 2374\n          }                                                                                                            // 2375\n          if ((result !== undefined || (isSrcArr && !(key in object))) &&                                              // 2376\n              (isCommon || (result === result ? (result !== value) : (value === value)))) {                            // 2377\n            object[key] = result;                                                                                      // 2378\n          }                                                                                                            // 2379\n        }                                                                                                              // 2380\n      });                                                                                                              // 2381\n      return object;                                                                                                   // 2382\n    }                                                                                                                  // 2383\n                                                                                                                       // 2384\n    /**                                                                                                                // 2385\n     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2386\n     * deep merges and tracks traversed objects enabling objects with circular                                         // 2387\n     * references to be merged.                                                                                        // 2388\n     *                                                                                                                 // 2389\n     * @private                                                                                                        // 2390\n     * @param {Object} object The destination object.                                                                  // 2391\n     * @param {Object} source The source object.                                                                       // 2392\n     * @param {string} key The key of the value to merge.                                                              // 2393\n     * @param {Function} mergeFunc The function to merge values.                                                       // 2394\n     * @param {Function} [customizer] The function to customize merged values.                                         // 2395\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2396\n     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2397\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2398\n     */                                                                                                                // 2399\n    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {                               // 2400\n      var length = stackA.length,                                                                                      // 2401\n          srcValue = source[key];                                                                                      // 2402\n                                                                                                                       // 2403\n      while (length--) {                                                                                               // 2404\n        if (stackA[length] == srcValue) {                                                                              // 2405\n          object[key] = stackB[length];                                                                                // 2406\n          return;                                                                                                      // 2407\n        }                                                                                                              // 2408\n      }                                                                                                                // 2409\n      var value = object[key],                                                                                         // 2410\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                          // 2411\n          isCommon = result === undefined;                                                                             // 2412\n                                                                                                                       // 2413\n      if (isCommon) {                                                                                                  // 2414\n        result = srcValue;                                                                                             // 2415\n        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {                                  // 2416\n          result = isArray(value)                                                                                      // 2417\n            ? value                                                                                                    // 2418\n            : (isArrayLike(value) ? arrayCopy(value) : []);                                                            // 2419\n        }                                                                                                              // 2420\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 2421\n          result = isArguments(value)                                                                                  // 2422\n            ? toPlainObject(value)                                                                                     // 2423\n            : (isPlainObject(value) ? value : {});                                                                     // 2424\n        }                                                                                                              // 2425\n        else {                                                                                                         // 2426\n          isCommon = false;                                                                                            // 2427\n        }                                                                                                              // 2428\n      }                                                                                                                // 2429\n      // Add the source value to the stack of traversed objects and associate                                          // 2430\n      // it with its merged value.                                                                                     // 2431\n      stackA.push(srcValue);                                                                                           // 2432\n      stackB.push(result);                                                                                             // 2433\n                                                                                                                       // 2434\n      if (isCommon) {                                                                                                  // 2435\n        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 2436\n        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);                                         // 2437\n      } else if (result === result ? (result !== value) : (value === value)) {                                         // 2438\n        object[key] = result;                                                                                          // 2439\n      }                                                                                                                // 2440\n    }                                                                                                                  // 2441\n                                                                                                                       // 2442\n    /**                                                                                                                // 2443\n     * The base implementation of `_.property` without support for deep paths.                                         // 2444\n     *                                                                                                                 // 2445\n     * @private                                                                                                        // 2446\n     * @param {string} key The key of the property to get.                                                             // 2447\n     * @returns {Function} Returns the new function.                                                                   // 2448\n     */                                                                                                                // 2449\n    function baseProperty(key) {                                                                                       // 2450\n      return function(object) {                                                                                        // 2451\n        return object == null ? undefined : object[key];                                                               // 2452\n      };                                                                                                               // 2453\n    }                                                                                                                  // 2454\n                                                                                                                       // 2455\n    /**                                                                                                                // 2456\n     * A specialized version of `baseProperty` which supports deep paths.                                              // 2457\n     *                                                                                                                 // 2458\n     * @private                                                                                                        // 2459\n     * @param {Array|string} path The path of the property to get.                                                     // 2460\n     * @returns {Function} Returns the new function.                                                                   // 2461\n     */                                                                                                                // 2462\n    function basePropertyDeep(path) {                                                                                  // 2463\n      var pathKey = (path + '');                                                                                       // 2464\n      path = toPath(path);                                                                                             // 2465\n      return function(object) {                                                                                        // 2466\n        return baseGet(object, path, pathKey);                                                                         // 2467\n      };                                                                                                               // 2468\n    }                                                                                                                  // 2469\n                                                                                                                       // 2470\n    /**                                                                                                                // 2471\n     * The base implementation of `_.pullAt` without support for individual                                            // 2472\n     * index arguments and capturing the removed elements.                                                             // 2473\n     *                                                                                                                 // 2474\n     * @private                                                                                                        // 2475\n     * @param {Array} array The array to modify.                                                                       // 2476\n     * @param {number[]} indexes The indexes of elements to remove.                                                    // 2477\n     * @returns {Array} Returns `array`.                                                                               // 2478\n     */                                                                                                                // 2479\n    function basePullAt(array, indexes) {                                                                              // 2480\n      var length = array ? indexes.length : 0;                                                                         // 2481\n      while (length--) {                                                                                               // 2482\n        var index = indexes[length];                                                                                   // 2483\n        if (index != previous && isIndex(index)) {                                                                     // 2484\n          var previous = index;                                                                                        // 2485\n          splice.call(array, index, 1);                                                                                // 2486\n        }                                                                                                              // 2487\n      }                                                                                                                // 2488\n      return array;                                                                                                    // 2489\n    }                                                                                                                  // 2490\n                                                                                                                       // 2491\n    /**                                                                                                                // 2492\n     * The base implementation of `_.random` without support for argument juggling                                     // 2493\n     * and returning floating-point numbers.                                                                           // 2494\n     *                                                                                                                 // 2495\n     * @private                                                                                                        // 2496\n     * @param {number} min The minimum possible value.                                                                 // 2497\n     * @param {number} max The maximum possible value.                                                                 // 2498\n     * @returns {number} Returns the random number.                                                                    // 2499\n     */                                                                                                                // 2500\n    function baseRandom(min, max) {                                                                                    // 2501\n      return min + nativeFloor(nativeRandom() * (max - min + 1));                                                      // 2502\n    }                                                                                                                  // 2503\n                                                                                                                       // 2504\n    /**                                                                                                                // 2505\n     * The base implementation of `_.reduce` and `_.reduceRight` without support                                       // 2506\n     * for callback shorthands and `this` binding, which iterates over `collection`                                    // 2507\n     * using the provided `eachFunc`.                                                                                  // 2508\n     *                                                                                                                 // 2509\n     * @private                                                                                                        // 2510\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2511\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2512\n     * @param {*} accumulator The initial value.                                                                       // 2513\n     * @param {boolean} initFromCollection Specify using the first or last element                                     // 2514\n     *  of `collection` as the initial value.                                                                          // 2515\n     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2516\n     * @returns {*} Returns the accumulated value.                                                                     // 2517\n     */                                                                                                                // 2518\n    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                             // 2519\n      eachFunc(collection, function(value, index, collection) {                                                        // 2520\n        accumulator = initFromCollection                                                                               // 2521\n          ? (initFromCollection = false, value)                                                                        // 2522\n          : iteratee(accumulator, value, index, collection);                                                           // 2523\n      });                                                                                                              // 2524\n      return accumulator;                                                                                              // 2525\n    }                                                                                                                  // 2526\n                                                                                                                       // 2527\n    /**                                                                                                                // 2528\n     * The base implementation of `setData` without support for hot loop detection.                                    // 2529\n     *                                                                                                                 // 2530\n     * @private                                                                                                        // 2531\n     * @param {Function} func The function to associate metadata with.                                                 // 2532\n     * @param {*} data The metadata.                                                                                   // 2533\n     * @returns {Function} Returns `func`.                                                                             // 2534\n     */                                                                                                                // 2535\n    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 2536\n      metaMap.set(func, data);                                                                                         // 2537\n      return func;                                                                                                     // 2538\n    };                                                                                                                 // 2539\n                                                                                                                       // 2540\n    /**                                                                                                                // 2541\n     * The base implementation of `_.slice` without an iteratee call guard.                                            // 2542\n     *                                                                                                                 // 2543\n     * @private                                                                                                        // 2544\n     * @param {Array} array The array to slice.                                                                        // 2545\n     * @param {number} [start=0] The start position.                                                                   // 2546\n     * @param {number} [end=array.length] The end position.                                                            // 2547\n     * @returns {Array} Returns the slice of `array`.                                                                  // 2548\n     */                                                                                                                // 2549\n    function baseSlice(array, start, end) {                                                                            // 2550\n      var index = -1,                                                                                                  // 2551\n          length = array.length;                                                                                       // 2552\n                                                                                                                       // 2553\n      start = start == null ? 0 : (+start || 0);                                                                       // 2554\n      if (start < 0) {                                                                                                 // 2555\n        start = -start > length ? 0 : (length + start);                                                                // 2556\n      }                                                                                                                // 2557\n      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2558\n      if (end < 0) {                                                                                                   // 2559\n        end += length;                                                                                                 // 2560\n      }                                                                                                                // 2561\n      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 2562\n      start >>>= 0;                                                                                                    // 2563\n                                                                                                                       // 2564\n      var result = Array(length);                                                                                      // 2565\n      while (++index < length) {                                                                                       // 2566\n        result[index] = array[index + start];                                                                          // 2567\n      }                                                                                                                // 2568\n      return result;                                                                                                   // 2569\n    }                                                                                                                  // 2570\n                                                                                                                       // 2571\n    /**                                                                                                                // 2572\n     * The base implementation of `_.some` without support for callback shorthands                                     // 2573\n     * and `this` binding.                                                                                             // 2574\n     *                                                                                                                 // 2575\n     * @private                                                                                                        // 2576\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2577\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2578\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 2579\n     *  else `false`.                                                                                                  // 2580\n     */                                                                                                                // 2581\n    function baseSome(collection, predicate) {                                                                         // 2582\n      var result;                                                                                                      // 2583\n                                                                                                                       // 2584\n      baseEach(collection, function(value, index, collection) {                                                        // 2585\n        result = predicate(value, index, collection);                                                                  // 2586\n        return !result;                                                                                                // 2587\n      });                                                                                                              // 2588\n      return !!result;                                                                                                 // 2589\n    }                                                                                                                  // 2590\n                                                                                                                       // 2591\n    /**                                                                                                                // 2592\n     * The base implementation of `_.sortBy` which uses `comparer` to define                                           // 2593\n     * the sort order of `array` and replaces criteria objects with their                                              // 2594\n     * corresponding values.                                                                                           // 2595\n     *                                                                                                                 // 2596\n     * @private                                                                                                        // 2597\n     * @param {Array} array The array to sort.                                                                         // 2598\n     * @param {Function} comparer The function to define sort order.                                                   // 2599\n     * @returns {Array} Returns `array`.                                                                               // 2600\n     */                                                                                                                // 2601\n    function baseSortBy(array, comparer) {                                                                             // 2602\n      var length = array.length;                                                                                       // 2603\n                                                                                                                       // 2604\n      array.sort(comparer);                                                                                            // 2605\n      while (length--) {                                                                                               // 2606\n        array[length] = array[length].value;                                                                           // 2607\n      }                                                                                                                // 2608\n      return array;                                                                                                    // 2609\n    }                                                                                                                  // 2610\n                                                                                                                       // 2611\n    /**                                                                                                                // 2612\n     * The base implementation of `_.sortByOrder` without param guards.                                                // 2613\n     *                                                                                                                 // 2614\n     * @private                                                                                                        // 2615\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2616\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 2617\n     * @param {boolean[]} orders The sort orders of `iteratees`.                                                       // 2618\n     * @returns {Array} Returns the new sorted array.                                                                  // 2619\n     */                                                                                                                // 2620\n    function baseSortByOrder(collection, iteratees, orders) {                                                          // 2621\n      var callback = getCallback(),                                                                                    // 2622\n          index = -1;                                                                                                  // 2623\n                                                                                                                       // 2624\n      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });                              // 2625\n                                                                                                                       // 2626\n      var result = baseMap(collection, function(value) {                                                               // 2627\n        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });                            // 2628\n        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 2629\n      });                                                                                                              // 2630\n                                                                                                                       // 2631\n      return baseSortBy(result, function(object, other) {                                                              // 2632\n        return compareMultiple(object, other, orders);                                                                 // 2633\n      });                                                                                                              // 2634\n    }                                                                                                                  // 2635\n                                                                                                                       // 2636\n    /**                                                                                                                // 2637\n     * The base implementation of `_.sum` without support for callback shorthands                                      // 2638\n     * and `this` binding.                                                                                             // 2639\n     *                                                                                                                 // 2640\n     * @private                                                                                                        // 2641\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2642\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2643\n     * @returns {number} Returns the sum.                                                                              // 2644\n     */                                                                                                                // 2645\n    function baseSum(collection, iteratee) {                                                                           // 2646\n      var result = 0;                                                                                                  // 2647\n      baseEach(collection, function(value, index, collection) {                                                        // 2648\n        result += +iteratee(value, index, collection) || 0;                                                            // 2649\n      });                                                                                                              // 2650\n      return result;                                                                                                   // 2651\n    }                                                                                                                  // 2652\n                                                                                                                       // 2653\n    /**                                                                                                                // 2654\n     * The base implementation of `_.uniq` without support for callback shorthands                                     // 2655\n     * and `this` binding.                                                                                             // 2656\n     *                                                                                                                 // 2657\n     * @private                                                                                                        // 2658\n     * @param {Array} array The array to inspect.                                                                      // 2659\n     * @param {Function} [iteratee] The function invoked per iteration.                                                // 2660\n     * @returns {Array} Returns the new duplicate free array.                                                          // 2661\n     */                                                                                                                // 2662\n    function baseUniq(array, iteratee) {                                                                               // 2663\n      var index = -1,                                                                                                  // 2664\n          indexOf = getIndexOf(),                                                                                      // 2665\n          length = array.length,                                                                                       // 2666\n          isCommon = indexOf === baseIndexOf,                                                                          // 2667\n          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,                                                            // 2668\n          seen = isLarge ? createCache() : null,                                                                       // 2669\n          result = [];                                                                                                 // 2670\n                                                                                                                       // 2671\n      if (seen) {                                                                                                      // 2672\n        indexOf = cacheIndexOf;                                                                                        // 2673\n        isCommon = false;                                                                                              // 2674\n      } else {                                                                                                         // 2675\n        isLarge = false;                                                                                               // 2676\n        seen = iteratee ? [] : result;                                                                                 // 2677\n      }                                                                                                                // 2678\n      outer:                                                                                                           // 2679\n      while (++index < length) {                                                                                       // 2680\n        var value = array[index],                                                                                      // 2681\n            computed = iteratee ? iteratee(value, index, array) : value;                                               // 2682\n                                                                                                                       // 2683\n        if (isCommon && value === value) {                                                                             // 2684\n          var seenIndex = seen.length;                                                                                 // 2685\n          while (seenIndex--) {                                                                                        // 2686\n            if (seen[seenIndex] === computed) {                                                                        // 2687\n              continue outer;                                                                                          // 2688\n            }                                                                                                          // 2689\n          }                                                                                                            // 2690\n          if (iteratee) {                                                                                              // 2691\n            seen.push(computed);                                                                                       // 2692\n          }                                                                                                            // 2693\n          result.push(value);                                                                                          // 2694\n        }                                                                                                              // 2695\n        else if (indexOf(seen, computed, 0) < 0) {                                                                     // 2696\n          if (iteratee || isLarge) {                                                                                   // 2697\n            seen.push(computed);                                                                                       // 2698\n          }                                                                                                            // 2699\n          result.push(value);                                                                                          // 2700\n        }                                                                                                              // 2701\n      }                                                                                                                // 2702\n      return result;                                                                                                   // 2703\n    }                                                                                                                  // 2704\n                                                                                                                       // 2705\n    /**                                                                                                                // 2706\n     * The base implementation of `_.values` and `_.valuesIn` which creates an                                         // 2707\n     * array of `object` property values corresponding to the property names                                           // 2708\n     * of `props`.                                                                                                     // 2709\n     *                                                                                                                 // 2710\n     * @private                                                                                                        // 2711\n     * @param {Object} object The object to query.                                                                     // 2712\n     * @param {Array} props The property names to get values for.                                                      // 2713\n     * @returns {Object} Returns the array of property values.                                                         // 2714\n     */                                                                                                                // 2715\n    function baseValues(object, props) {                                                                               // 2716\n      var index = -1,                                                                                                  // 2717\n          length = props.length,                                                                                       // 2718\n          result = Array(length);                                                                                      // 2719\n                                                                                                                       // 2720\n      while (++index < length) {                                                                                       // 2721\n        result[index] = object[props[index]];                                                                          // 2722\n      }                                                                                                                // 2723\n      return result;                                                                                                   // 2724\n    }                                                                                                                  // 2725\n                                                                                                                       // 2726\n    /**                                                                                                                // 2727\n     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,                               // 2728\n     * and `_.takeWhile` without support for callback shorthands and `this` binding.                                   // 2729\n     *                                                                                                                 // 2730\n     * @private                                                                                                        // 2731\n     * @param {Array} array The array to query.                                                                        // 2732\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2733\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 2734\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 2735\n     * @returns {Array} Returns the slice of `array`.                                                                  // 2736\n     */                                                                                                                // 2737\n    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 2738\n      var length = array.length,                                                                                       // 2739\n          index = fromRight ? length : -1;                                                                             // 2740\n                                                                                                                       // 2741\n      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}                     // 2742\n      return isDrop                                                                                                    // 2743\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 2744\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 2745\n    }                                                                                                                  // 2746\n                                                                                                                       // 2747\n    /**                                                                                                                // 2748\n     * The base implementation of `wrapperValue` which returns the result of                                           // 2749\n     * performing a sequence of actions on the unwrapped `value`, where each                                           // 2750\n     * successive action is supplied the return value of the previous.                                                 // 2751\n     *                                                                                                                 // 2752\n     * @private                                                                                                        // 2753\n     * @param {*} value The unwrapped value.                                                                           // 2754\n     * @param {Array} actions Actions to peform to resolve the unwrapped value.                                        // 2755\n     * @returns {*} Returns the resolved value.                                                                        // 2756\n     */                                                                                                                // 2757\n    function baseWrapperValue(value, actions) {                                                                        // 2758\n      var result = value;                                                                                              // 2759\n      if (result instanceof LazyWrapper) {                                                                             // 2760\n        result = result.value();                                                                                       // 2761\n      }                                                                                                                // 2762\n      var index = -1,                                                                                                  // 2763\n          length = actions.length;                                                                                     // 2764\n                                                                                                                       // 2765\n      while (++index < length) {                                                                                       // 2766\n        var action = actions[index];                                                                                   // 2767\n        result = action.func.apply(action.thisArg, arrayPush([result], action.args));                                  // 2768\n      }                                                                                                                // 2769\n      return result;                                                                                                   // 2770\n    }                                                                                                                  // 2771\n                                                                                                                       // 2772\n    /**                                                                                                                // 2773\n     * Performs a binary search of `array` to determine the index at which `value`                                     // 2774\n     * should be inserted into `array` in order to maintain its sort order.                                            // 2775\n     *                                                                                                                 // 2776\n     * @private                                                                                                        // 2777\n     * @param {Array} array The sorted array to inspect.                                                               // 2778\n     * @param {*} value The value to evaluate.                                                                         // 2779\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2780\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 2781\n     *  into `array`.                                                                                                  // 2782\n     */                                                                                                                // 2783\n    function binaryIndex(array, value, retHighest) {                                                                   // 2784\n      var low = 0,                                                                                                     // 2785\n          high = array ? array.length : low;                                                                           // 2786\n                                                                                                                       // 2787\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 2788\n        while (low < high) {                                                                                           // 2789\n          var mid = (low + high) >>> 1,                                                                                // 2790\n              computed = array[mid];                                                                                   // 2791\n                                                                                                                       // 2792\n          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 2793\n            low = mid + 1;                                                                                             // 2794\n          } else {                                                                                                     // 2795\n            high = mid;                                                                                                // 2796\n          }                                                                                                            // 2797\n        }                                                                                                              // 2798\n        return high;                                                                                                   // 2799\n      }                                                                                                                // 2800\n      return binaryIndexBy(array, value, identity, retHighest);                                                        // 2801\n    }                                                                                                                  // 2802\n                                                                                                                       // 2803\n    /**                                                                                                                // 2804\n     * This function is like `binaryIndex` except that it invokes `iteratee` for                                       // 2805\n     * `value` and each element of `array` to compute their sort ranking. The                                          // 2806\n     * iteratee is invoked with one argument; (value).                                                                 // 2807\n     *                                                                                                                 // 2808\n     * @private                                                                                                        // 2809\n     * @param {Array} array The sorted array to inspect.                                                               // 2810\n     * @param {*} value The value to evaluate.                                                                         // 2811\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2812\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2813\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 2814\n     *  into `array`.                                                                                                  // 2815\n     */                                                                                                                // 2816\n    function binaryIndexBy(array, value, iteratee, retHighest) {                                                       // 2817\n      value = iteratee(value);                                                                                         // 2818\n                                                                                                                       // 2819\n      var low = 0,                                                                                                     // 2820\n          high = array ? array.length : 0,                                                                             // 2821\n          valIsNaN = value !== value,                                                                                  // 2822\n          valIsNull = value === null,                                                                                  // 2823\n          valIsUndef = value === undefined;                                                                            // 2824\n                                                                                                                       // 2825\n      while (low < high) {                                                                                             // 2826\n        var mid = nativeFloor((low + high) / 2),                                                                       // 2827\n            computed = iteratee(array[mid]),                                                                           // 2828\n            isDef = computed !== undefined,                                                                            // 2829\n            isReflexive = computed === computed;                                                                       // 2830\n                                                                                                                       // 2831\n        if (valIsNaN) {                                                                                                // 2832\n          var setLow = isReflexive || retHighest;                                                                      // 2833\n        } else if (valIsNull) {                                                                                        // 2834\n          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 2835\n        } else if (valIsUndef) {                                                                                       // 2836\n          setLow = isReflexive && (retHighest || isDef);                                                               // 2837\n        } else if (computed == null) {                                                                                 // 2838\n          setLow = false;                                                                                              // 2839\n        } else {                                                                                                       // 2840\n          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 2841\n        }                                                                                                              // 2842\n        if (setLow) {                                                                                                  // 2843\n          low = mid + 1;                                                                                               // 2844\n        } else {                                                                                                       // 2845\n          high = mid;                                                                                                  // 2846\n        }                                                                                                              // 2847\n      }                                                                                                                // 2848\n      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 2849\n    }                                                                                                                  // 2850\n                                                                                                                       // 2851\n    /**                                                                                                                // 2852\n     * A specialized version of `baseCallback` which only supports `this` binding                                      // 2853\n     * and specifying the number of arguments to provide to `func`.                                                    // 2854\n     *                                                                                                                 // 2855\n     * @private                                                                                                        // 2856\n     * @param {Function} func The function to bind.                                                                    // 2857\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 2858\n     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 2859\n     * @returns {Function} Returns the callback.                                                                       // 2860\n     */                                                                                                                // 2861\n    function bindCallback(func, thisArg, argCount) {                                                                   // 2862\n      if (typeof func != 'function') {                                                                                 // 2863\n        return identity;                                                                                               // 2864\n      }                                                                                                                // 2865\n      if (thisArg === undefined) {                                                                                     // 2866\n        return func;                                                                                                   // 2867\n      }                                                                                                                // 2868\n      switch (argCount) {                                                                                              // 2869\n        case 1: return function(value) {                                                                               // 2870\n          return func.call(thisArg, value);                                                                            // 2871\n        };                                                                                                             // 2872\n        case 3: return function(value, index, collection) {                                                            // 2873\n          return func.call(thisArg, value, index, collection);                                                         // 2874\n        };                                                                                                             // 2875\n        case 4: return function(accumulator, value, index, collection) {                                               // 2876\n          return func.call(thisArg, accumulator, value, index, collection);                                            // 2877\n        };                                                                                                             // 2878\n        case 5: return function(value, other, key, object, source) {                                                   // 2879\n          return func.call(thisArg, value, other, key, object, source);                                                // 2880\n        };                                                                                                             // 2881\n      }                                                                                                                // 2882\n      return function() {                                                                                              // 2883\n        return func.apply(thisArg, arguments);                                                                         // 2884\n      };                                                                                                               // 2885\n    }                                                                                                                  // 2886\n                                                                                                                       // 2887\n    /**                                                                                                                // 2888\n     * Creates a clone of the given array buffer.                                                                      // 2889\n     *                                                                                                                 // 2890\n     * @private                                                                                                        // 2891\n     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 2892\n     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 2893\n     */                                                                                                                // 2894\n    function bufferClone(buffer) {                                                                                     // 2895\n      var result = new ArrayBuffer(buffer.byteLength),                                                                 // 2896\n          view = new Uint8Array(result);                                                                               // 2897\n                                                                                                                       // 2898\n      view.set(new Uint8Array(buffer));                                                                                // 2899\n      return result;                                                                                                   // 2900\n    }                                                                                                                  // 2901\n                                                                                                                       // 2902\n    /**                                                                                                                // 2903\n     * Creates an array that is the composition of partially applied arguments,                                        // 2904\n     * placeholders, and provided arguments into a single array of arguments.                                          // 2905\n     *                                                                                                                 // 2906\n     * @private                                                                                                        // 2907\n     * @param {Array|Object} args The provided arguments.                                                              // 2908\n     * @param {Array} partials The arguments to prepend to those provided.                                             // 2909\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 2910\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 2911\n     */                                                                                                                // 2912\n    function composeArgs(args, partials, holders) {                                                                    // 2913\n      var holdersLength = holders.length,                                                                              // 2914\n          argsIndex = -1,                                                                                              // 2915\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 2916\n          leftIndex = -1,                                                                                              // 2917\n          leftLength = partials.length,                                                                                // 2918\n          result = Array(leftLength + argsLength);                                                                     // 2919\n                                                                                                                       // 2920\n      while (++leftIndex < leftLength) {                                                                               // 2921\n        result[leftIndex] = partials[leftIndex];                                                                       // 2922\n      }                                                                                                                // 2923\n      while (++argsIndex < holdersLength) {                                                                            // 2924\n        result[holders[argsIndex]] = args[argsIndex];                                                                  // 2925\n      }                                                                                                                // 2926\n      while (argsLength--) {                                                                                           // 2927\n        result[leftIndex++] = args[argsIndex++];                                                                       // 2928\n      }                                                                                                                // 2929\n      return result;                                                                                                   // 2930\n    }                                                                                                                  // 2931\n                                                                                                                       // 2932\n    /**                                                                                                                // 2933\n     * This function is like `composeArgs` except that the arguments composition                                       // 2934\n     * is tailored for `_.partialRight`.                                                                               // 2935\n     *                                                                                                                 // 2936\n     * @private                                                                                                        // 2937\n     * @param {Array|Object} args The provided arguments.                                                              // 2938\n     * @param {Array} partials The arguments to append to those provided.                                              // 2939\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 2940\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 2941\n     */                                                                                                                // 2942\n    function composeArgsRight(args, partials, holders) {                                                               // 2943\n      var holdersIndex = -1,                                                                                           // 2944\n          holdersLength = holders.length,                                                                              // 2945\n          argsIndex = -1,                                                                                              // 2946\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 2947\n          rightIndex = -1,                                                                                             // 2948\n          rightLength = partials.length,                                                                               // 2949\n          result = Array(argsLength + rightLength);                                                                    // 2950\n                                                                                                                       // 2951\n      while (++argsIndex < argsLength) {                                                                               // 2952\n        result[argsIndex] = args[argsIndex];                                                                           // 2953\n      }                                                                                                                // 2954\n      var offset = argsIndex;                                                                                          // 2955\n      while (++rightIndex < rightLength) {                                                                             // 2956\n        result[offset + rightIndex] = partials[rightIndex];                                                            // 2957\n      }                                                                                                                // 2958\n      while (++holdersIndex < holdersLength) {                                                                         // 2959\n        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 2960\n      }                                                                                                                // 2961\n      return result;                                                                                                   // 2962\n    }                                                                                                                  // 2963\n                                                                                                                       // 2964\n    /**                                                                                                                // 2965\n     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.                                     // 2966\n     *                                                                                                                 // 2967\n     * @private                                                                                                        // 2968\n     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 2969\n     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 2970\n     * @returns {Function} Returns the new aggregator function.                                                        // 2971\n     */                                                                                                                // 2972\n    function createAggregator(setter, initializer) {                                                                   // 2973\n      return function(collection, iteratee, thisArg) {                                                                 // 2974\n        var result = initializer ? initializer() : {};                                                                 // 2975\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 2976\n                                                                                                                       // 2977\n        if (isArray(collection)) {                                                                                     // 2978\n          var index = -1,                                                                                              // 2979\n              length = collection.length;                                                                              // 2980\n                                                                                                                       // 2981\n          while (++index < length) {                                                                                   // 2982\n            var value = collection[index];                                                                             // 2983\n            setter(result, value, iteratee(value, index, collection), collection);                                     // 2984\n          }                                                                                                            // 2985\n        } else {                                                                                                       // 2986\n          baseEach(collection, function(value, key, collection) {                                                      // 2987\n            setter(result, value, iteratee(value, key, collection), collection);                                       // 2988\n          });                                                                                                          // 2989\n        }                                                                                                              // 2990\n        return result;                                                                                                 // 2991\n      };                                                                                                               // 2992\n    }                                                                                                                  // 2993\n                                                                                                                       // 2994\n    /**                                                                                                                // 2995\n     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.                                                      // 2996\n     *                                                                                                                 // 2997\n     * @private                                                                                                        // 2998\n     * @param {Function} assigner The function to assign values.                                                       // 2999\n     * @returns {Function} Returns the new assigner function.                                                          // 3000\n     */                                                                                                                // 3001\n    function createAssigner(assigner) {                                                                                // 3002\n      return restParam(function(object, sources) {                                                                     // 3003\n        var index = -1,                                                                                                // 3004\n            length = object == null ? 0 : sources.length,                                                              // 3005\n            customizer = length > 2 ? sources[length - 2] : undefined,                                                 // 3006\n            guard = length > 2 ? sources[2] : undefined,                                                               // 3007\n            thisArg = length > 1 ? sources[length - 1] : undefined;                                                    // 3008\n                                                                                                                       // 3009\n        if (typeof customizer == 'function') {                                                                         // 3010\n          customizer = bindCallback(customizer, thisArg, 5);                                                           // 3011\n          length -= 2;                                                                                                 // 3012\n        } else {                                                                                                       // 3013\n          customizer = typeof thisArg == 'function' ? thisArg : undefined;                                             // 3014\n          length -= (customizer ? 1 : 0);                                                                              // 3015\n        }                                                                                                              // 3016\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3017\n          customizer = length < 3 ? undefined : customizer;                                                            // 3018\n          length = 1;                                                                                                  // 3019\n        }                                                                                                              // 3020\n        while (++index < length) {                                                                                     // 3021\n          var source = sources[index];                                                                                 // 3022\n          if (source) {                                                                                                // 3023\n            assigner(object, source, customizer);                                                                      // 3024\n          }                                                                                                            // 3025\n        }                                                                                                              // 3026\n        return object;                                                                                                 // 3027\n      });                                                                                                              // 3028\n    }                                                                                                                  // 3029\n                                                                                                                       // 3030\n    /**                                                                                                                // 3031\n     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3032\n     *                                                                                                                 // 3033\n     * @private                                                                                                        // 3034\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3035\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3036\n     * @returns {Function} Returns the new base function.                                                              // 3037\n     */                                                                                                                // 3038\n    function createBaseEach(eachFunc, fromRight) {                                                                     // 3039\n      return function(collection, iteratee) {                                                                          // 3040\n        var length = collection ? getLength(collection) : 0;                                                           // 3041\n        if (!isLength(length)) {                                                                                       // 3042\n          return eachFunc(collection, iteratee);                                                                       // 3043\n        }                                                                                                              // 3044\n        var index = fromRight ? length : -1,                                                                           // 3045\n            iterable = toObject(collection);                                                                           // 3046\n                                                                                                                       // 3047\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3048\n          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3049\n            break;                                                                                                     // 3050\n          }                                                                                                            // 3051\n        }                                                                                                              // 3052\n        return collection;                                                                                             // 3053\n      };                                                                                                               // 3054\n    }                                                                                                                  // 3055\n                                                                                                                       // 3056\n    /**                                                                                                                // 3057\n     * Creates a base function for `_.forIn` or `_.forInRight`.                                                        // 3058\n     *                                                                                                                 // 3059\n     * @private                                                                                                        // 3060\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3061\n     * @returns {Function} Returns the new base function.                                                              // 3062\n     */                                                                                                                // 3063\n    function createBaseFor(fromRight) {                                                                                // 3064\n      return function(object, iteratee, keysFunc) {                                                                    // 3065\n        var iterable = toObject(object),                                                                               // 3066\n            props = keysFunc(object),                                                                                  // 3067\n            length = props.length,                                                                                     // 3068\n            index = fromRight ? length : -1;                                                                           // 3069\n                                                                                                                       // 3070\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3071\n          var key = props[index];                                                                                      // 3072\n          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3073\n            break;                                                                                                     // 3074\n          }                                                                                                            // 3075\n        }                                                                                                              // 3076\n        return object;                                                                                                 // 3077\n      };                                                                                                               // 3078\n    }                                                                                                                  // 3079\n                                                                                                                       // 3080\n    /**                                                                                                                // 3081\n     * Creates a function that wraps `func` and invokes it with the `this`                                             // 3082\n     * binding of `thisArg`.                                                                                           // 3083\n     *                                                                                                                 // 3084\n     * @private                                                                                                        // 3085\n     * @param {Function} func The function to bind.                                                                    // 3086\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3087\n     * @returns {Function} Returns the new bound function.                                                             // 3088\n     */                                                                                                                // 3089\n    function createBindWrapper(func, thisArg) {                                                                        // 3090\n      var Ctor = createCtorWrapper(func);                                                                              // 3091\n                                                                                                                       // 3092\n      function wrapper() {                                                                                             // 3093\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3094\n        return fn.apply(thisArg, arguments);                                                                           // 3095\n      }                                                                                                                // 3096\n      return wrapper;                                                                                                  // 3097\n    }                                                                                                                  // 3098\n                                                                                                                       // 3099\n    /**                                                                                                                // 3100\n     * Creates a `Set` cache object to optimize linear searches of large arrays.                                       // 3101\n     *                                                                                                                 // 3102\n     * @private                                                                                                        // 3103\n     * @param {Array} [values] The values to cache.                                                                    // 3104\n     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.                         // 3105\n     */                                                                                                                // 3106\n    function createCache(values) {                                                                                     // 3107\n      return (nativeCreate && Set) ? new SetCache(values) : null;                                                      // 3108\n    }                                                                                                                  // 3109\n                                                                                                                       // 3110\n    /**                                                                                                                // 3111\n     * Creates a function that produces compound words out of the words in a                                           // 3112\n     * given string.                                                                                                   // 3113\n     *                                                                                                                 // 3114\n     * @private                                                                                                        // 3115\n     * @param {Function} callback The function to combine each word.                                                   // 3116\n     * @returns {Function} Returns the new compounder function.                                                        // 3117\n     */                                                                                                                // 3118\n    function createCompounder(callback) {                                                                              // 3119\n      return function(string) {                                                                                        // 3120\n        var index = -1,                                                                                                // 3121\n            array = words(deburr(string)),                                                                             // 3122\n            length = array.length,                                                                                     // 3123\n            result = '';                                                                                               // 3124\n                                                                                                                       // 3125\n        while (++index < length) {                                                                                     // 3126\n          result = callback(result, array[index], index);                                                              // 3127\n        }                                                                                                              // 3128\n        return result;                                                                                                 // 3129\n      };                                                                                                               // 3130\n    }                                                                                                                  // 3131\n                                                                                                                       // 3132\n    /**                                                                                                                // 3133\n     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3134\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3135\n     *                                                                                                                 // 3136\n     * @private                                                                                                        // 3137\n     * @param {Function} Ctor The constructor to wrap.                                                                 // 3138\n     * @returns {Function} Returns the new wrapped function.                                                           // 3139\n     */                                                                                                                // 3140\n    function createCtorWrapper(Ctor) {                                                                                 // 3141\n      return function() {                                                                                              // 3142\n        // Use a `switch` statement to work with class constructors.                                                   // 3143\n        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.                                                                                           // 3145\n        var args = arguments;                                                                                          // 3146\n        switch (args.length) {                                                                                         // 3147\n          case 0: return new Ctor;                                                                                     // 3148\n          case 1: return new Ctor(args[0]);                                                                            // 3149\n          case 2: return new Ctor(args[0], args[1]);                                                                   // 3150\n          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 3151\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 3152\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 3153\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 3154\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 3155\n        }                                                                                                              // 3156\n        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 3157\n            result = Ctor.apply(thisBinding, args);                                                                    // 3158\n                                                                                                                       // 3159\n        // Mimic the constructor's `return` behavior.                                                                  // 3160\n        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 3161\n        return isObject(result) ? result : thisBinding;                                                                // 3162\n      };                                                                                                               // 3163\n    }                                                                                                                  // 3164\n                                                                                                                       // 3165\n    /**                                                                                                                // 3166\n     * Creates a `_.curry` or `_.curryRight` function.                                                                 // 3167\n     *                                                                                                                 // 3168\n     * @private                                                                                                        // 3169\n     * @param {boolean} flag The curry bit flag.                                                                       // 3170\n     * @returns {Function} Returns the new curry function.                                                             // 3171\n     */                                                                                                                // 3172\n    function createCurry(flag) {                                                                                       // 3173\n      function curryFunc(func, arity, guard) {                                                                         // 3174\n        if (guard && isIterateeCall(func, arity, guard)) {                                                             // 3175\n          arity = undefined;                                                                                           // 3176\n        }                                                                                                              // 3177\n        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);          // 3178\n        result.placeholder = curryFunc.placeholder;                                                                    // 3179\n        return result;                                                                                                 // 3180\n      }                                                                                                                // 3181\n      return curryFunc;                                                                                                // 3182\n    }                                                                                                                  // 3183\n                                                                                                                       // 3184\n    /**                                                                                                                // 3185\n     * Creates a `_.defaults` or `_.defaultsDeep` function.                                                            // 3186\n     *                                                                                                                 // 3187\n     * @private                                                                                                        // 3188\n     * @param {Function} assigner The function to assign values.                                                       // 3189\n     * @param {Function} customizer The function to customize assigned values.                                         // 3190\n     * @returns {Function} Returns the new defaults function.                                                          // 3191\n     */                                                                                                                // 3192\n    function createDefaults(assigner, customizer) {                                                                    // 3193\n      return restParam(function(args) {                                                                                // 3194\n        var object = args[0];                                                                                          // 3195\n        if (object == null) {                                                                                          // 3196\n          return object;                                                                                               // 3197\n        }                                                                                                              // 3198\n        args.push(customizer);                                                                                         // 3199\n        return assigner.apply(undefined, args);                                                                        // 3200\n      });                                                                                                              // 3201\n    }                                                                                                                  // 3202\n                                                                                                                       // 3203\n    /**                                                                                                                // 3204\n     * Creates a `_.max` or `_.min` function.                                                                          // 3205\n     *                                                                                                                 // 3206\n     * @private                                                                                                        // 3207\n     * @param {Function} comparator The function used to compare values.                                               // 3208\n     * @param {*} exValue The initial extremum value.                                                                  // 3209\n     * @returns {Function} Returns the new extremum function.                                                          // 3210\n     */                                                                                                                // 3211\n    function createExtremum(comparator, exValue) {                                                                     // 3212\n      return function(collection, iteratee, thisArg) {                                                                 // 3213\n        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                // 3214\n          iteratee = undefined;                                                                                        // 3215\n        }                                                                                                              // 3216\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3217\n        if (iteratee.length == 1) {                                                                                    // 3218\n          collection = isArray(collection) ? collection : toIterable(collection);                                      // 3219\n          var result = arrayExtremum(collection, iteratee, comparator, exValue);                                       // 3220\n          if (!(collection.length && result === exValue)) {                                                            // 3221\n            return result;                                                                                             // 3222\n          }                                                                                                            // 3223\n        }                                                                                                              // 3224\n        return baseExtremum(collection, iteratee, comparator, exValue);                                                // 3225\n      };                                                                                                               // 3226\n    }                                                                                                                  // 3227\n                                                                                                                       // 3228\n    /**                                                                                                                // 3229\n     * Creates a `_.find` or `_.findLast` function.                                                                    // 3230\n     *                                                                                                                 // 3231\n     * @private                                                                                                        // 3232\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3233\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3234\n     * @returns {Function} Returns the new find function.                                                              // 3235\n     */                                                                                                                // 3236\n    function createFind(eachFunc, fromRight) {                                                                         // 3237\n      return function(collection, predicate, thisArg) {                                                                // 3238\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3239\n        if (isArray(collection)) {                                                                                     // 3240\n          var index = baseFindIndex(collection, predicate, fromRight);                                                 // 3241\n          return index > -1 ? collection[index] : undefined;                                                           // 3242\n        }                                                                                                              // 3243\n        return baseFind(collection, predicate, eachFunc);                                                              // 3244\n      };                                                                                                               // 3245\n    }                                                                                                                  // 3246\n                                                                                                                       // 3247\n    /**                                                                                                                // 3248\n     * Creates a `_.findIndex` or `_.findLastIndex` function.                                                          // 3249\n     *                                                                                                                 // 3250\n     * @private                                                                                                        // 3251\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3252\n     * @returns {Function} Returns the new find function.                                                              // 3253\n     */                                                                                                                // 3254\n    function createFindIndex(fromRight) {                                                                              // 3255\n      return function(array, predicate, thisArg) {                                                                     // 3256\n        if (!(array && array.length)) {                                                                                // 3257\n          return -1;                                                                                                   // 3258\n        }                                                                                                              // 3259\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3260\n        return baseFindIndex(array, predicate, fromRight);                                                             // 3261\n      };                                                                                                               // 3262\n    }                                                                                                                  // 3263\n                                                                                                                       // 3264\n    /**                                                                                                                // 3265\n     * Creates a `_.findKey` or `_.findLastKey` function.                                                              // 3266\n     *                                                                                                                 // 3267\n     * @private                                                                                                        // 3268\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3269\n     * @returns {Function} Returns the new find function.                                                              // 3270\n     */                                                                                                                // 3271\n    function createFindKey(objectFunc) {                                                                               // 3272\n      return function(object, predicate, thisArg) {                                                                    // 3273\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3274\n        return baseFind(object, predicate, objectFunc, true);                                                          // 3275\n      };                                                                                                               // 3276\n    }                                                                                                                  // 3277\n                                                                                                                       // 3278\n    /**                                                                                                                // 3279\n     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 3280\n     *                                                                                                                 // 3281\n     * @private                                                                                                        // 3282\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3283\n     * @returns {Function} Returns the new flow function.                                                              // 3284\n     */                                                                                                                // 3285\n    function createFlow(fromRight) {                                                                                   // 3286\n      return function() {                                                                                              // 3287\n        var wrapper,                                                                                                   // 3288\n            length = arguments.length,                                                                                 // 3289\n            index = fromRight ? length : -1,                                                                           // 3290\n            leftIndex = 0,                                                                                             // 3291\n            funcs = Array(length);                                                                                     // 3292\n                                                                                                                       // 3293\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3294\n          var func = funcs[leftIndex++] = arguments[index];                                                            // 3295\n          if (typeof func != 'function') {                                                                             // 3296\n            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 3297\n          }                                                                                                            // 3298\n          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {                            // 3299\n            wrapper = new LodashWrapper([], true);                                                                     // 3300\n          }                                                                                                            // 3301\n        }                                                                                                              // 3302\n        index = wrapper ? -1 : length;                                                                                 // 3303\n        while (++index < length) {                                                                                     // 3304\n          func = funcs[index];                                                                                         // 3305\n                                                                                                                       // 3306\n          var funcName = getFuncName(func),                                                                            // 3307\n              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 3308\n                                                                                                                       // 3309\n          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 3311\n          } else {                                                                                                     // 3312\n            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 3313\n          }                                                                                                            // 3314\n        }                                                                                                              // 3315\n        return function() {                                                                                            // 3316\n          var args = arguments,                                                                                        // 3317\n              value = args[0];                                                                                         // 3318\n                                                                                                                       // 3319\n          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 3320\n            return wrapper.plant(value).value();                                                                       // 3321\n          }                                                                                                            // 3322\n          var index = 0,                                                                                               // 3323\n              result = length ? funcs[index].apply(this, args) : value;                                                // 3324\n                                                                                                                       // 3325\n          while (++index < length) {                                                                                   // 3326\n            result = funcs[index].call(this, result);                                                                  // 3327\n          }                                                                                                            // 3328\n          return result;                                                                                               // 3329\n        };                                                                                                             // 3330\n      };                                                                                                               // 3331\n    }                                                                                                                  // 3332\n                                                                                                                       // 3333\n    /**                                                                                                                // 3334\n     * Creates a function for `_.forEach` or `_.forEachRight`.                                                         // 3335\n     *                                                                                                                 // 3336\n     * @private                                                                                                        // 3337\n     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3338\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3339\n     * @returns {Function} Returns the new each function.                                                              // 3340\n     */                                                                                                                // 3341\n    function createForEach(arrayFunc, eachFunc) {                                                                      // 3342\n      return function(collection, iteratee, thisArg) {                                                                 // 3343\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3344\n          ? arrayFunc(collection, iteratee)                                                                            // 3345\n          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));                                                  // 3346\n      };                                                                                                               // 3347\n    }                                                                                                                  // 3348\n                                                                                                                       // 3349\n    /**                                                                                                                // 3350\n     * Creates a function for `_.forIn` or `_.forInRight`.                                                             // 3351\n     *                                                                                                                 // 3352\n     * @private                                                                                                        // 3353\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3354\n     * @returns {Function} Returns the new each function.                                                              // 3355\n     */                                                                                                                // 3356\n    function createForIn(objectFunc) {                                                                                 // 3357\n      return function(object, iteratee, thisArg) {                                                                     // 3358\n        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3359\n          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3360\n        }                                                                                                              // 3361\n        return objectFunc(object, iteratee, keysIn);                                                                   // 3362\n      };                                                                                                               // 3363\n    }                                                                                                                  // 3364\n                                                                                                                       // 3365\n    /**                                                                                                                // 3366\n     * Creates a function for `_.forOwn` or `_.forOwnRight`.                                                           // 3367\n     *                                                                                                                 // 3368\n     * @private                                                                                                        // 3369\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3370\n     * @returns {Function} Returns the new each function.                                                              // 3371\n     */                                                                                                                // 3372\n    function createForOwn(objectFunc) {                                                                                // 3373\n      return function(object, iteratee, thisArg) {                                                                     // 3374\n        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3375\n          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3376\n        }                                                                                                              // 3377\n        return objectFunc(object, iteratee);                                                                           // 3378\n      };                                                                                                               // 3379\n    }                                                                                                                  // 3380\n                                                                                                                       // 3381\n    /**                                                                                                                // 3382\n     * Creates a function for `_.mapKeys` or `_.mapValues`.                                                            // 3383\n     *                                                                                                                 // 3384\n     * @private                                                                                                        // 3385\n     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.                                            // 3386\n     * @returns {Function} Returns the new map function.                                                               // 3387\n     */                                                                                                                // 3388\n    function createObjectMapper(isMapKeys) {                                                                           // 3389\n      return function(object, iteratee, thisArg) {                                                                     // 3390\n        var result = {};                                                                                               // 3391\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3392\n                                                                                                                       // 3393\n        baseForOwn(object, function(value, key, object) {                                                              // 3394\n          var mapped = iteratee(value, key, object);                                                                   // 3395\n          key = isMapKeys ? mapped : key;                                                                              // 3396\n          value = isMapKeys ? value : mapped;                                                                          // 3397\n          result[key] = value;                                                                                         // 3398\n        });                                                                                                            // 3399\n        return result;                                                                                                 // 3400\n      };                                                                                                               // 3401\n    }                                                                                                                  // 3402\n                                                                                                                       // 3403\n    /**                                                                                                                // 3404\n     * Creates a function for `_.padLeft` or `_.padRight`.                                                             // 3405\n     *                                                                                                                 // 3406\n     * @private                                                                                                        // 3407\n     * @param {boolean} [fromRight] Specify padding from the right.                                                    // 3408\n     * @returns {Function} Returns the new pad function.                                                               // 3409\n     */                                                                                                                // 3410\n    function createPadDir(fromRight) {                                                                                 // 3411\n      return function(string, length, chars) {                                                                         // 3412\n        string = baseToString(string);                                                                                 // 3413\n        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);           // 3414\n      };                                                                                                               // 3415\n    }                                                                                                                  // 3416\n                                                                                                                       // 3417\n    /**                                                                                                                // 3418\n     * Creates a `_.partial` or `_.partialRight` function.                                                             // 3419\n     *                                                                                                                 // 3420\n     * @private                                                                                                        // 3421\n     * @param {boolean} flag The partial bit flag.                                                                     // 3422\n     * @returns {Function} Returns the new partial function.                                                           // 3423\n     */                                                                                                                // 3424\n    function createPartial(flag) {                                                                                     // 3425\n      var partialFunc = restParam(function(func, partials) {                                                           // 3426\n        var holders = replaceHolders(partials, partialFunc.placeholder);                                               // 3427\n        return createWrapper(func, flag, undefined, partials, holders);                                                // 3428\n      });                                                                                                              // 3429\n      return partialFunc;                                                                                              // 3430\n    }                                                                                                                  // 3431\n                                                                                                                       // 3432\n    /**                                                                                                                // 3433\n     * Creates a function for `_.reduce` or `_.reduceRight`.                                                           // 3434\n     *                                                                                                                 // 3435\n     * @private                                                                                                        // 3436\n     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3437\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3438\n     * @returns {Function} Returns the new each function.                                                              // 3439\n     */                                                                                                                // 3440\n    function createReduce(arrayFunc, eachFunc) {                                                                       // 3441\n      return function(collection, iteratee, accumulator, thisArg) {                                                    // 3442\n        var initFromArray = arguments.length < 3;                                                                      // 3443\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3444\n          ? arrayFunc(collection, iteratee, accumulator, initFromArray)                                                // 3445\n          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);           // 3446\n      };                                                                                                               // 3447\n    }                                                                                                                  // 3448\n                                                                                                                       // 3449\n    /**                                                                                                                // 3450\n     * Creates a function that wraps `func` and invokes it with optional `this`                                        // 3451\n     * binding of, partial application, and currying.                                                                  // 3452\n     *                                                                                                                 // 3453\n     * @private                                                                                                        // 3454\n     * @param {Function|string} func The function or method name to reference.                                         // 3455\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3456\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3457\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 3458\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3459\n     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 3460\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 3461\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 3462\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 3463\n     * @param {number} [arity] The arity of `func`.                                                                    // 3464\n     * @returns {Function} Returns the new wrapped function.                                                           // 3465\n     */                                                                                                                // 3466\n    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,                                                                                  // 3468\n          isBind = bitmask & BIND_FLAG,                                                                                // 3469\n          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 3470\n          isCurry = bitmask & CURRY_FLAG,                                                                              // 3471\n          isCurryBound = bitmask & CURRY_BOUND_FLAG,                                                                   // 3472\n          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 3473\n          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 3474\n                                                                                                                       // 3475\n      function wrapper() {                                                                                             // 3476\n        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3477\n        // converting it to an array before providing it to other functions.                                           // 3478\n        var length = arguments.length,                                                                                 // 3479\n            index = length,                                                                                            // 3480\n            args = Array(length);                                                                                      // 3481\n                                                                                                                       // 3482\n        while (index--) {                                                                                              // 3483\n          args[index] = arguments[index];                                                                              // 3484\n        }                                                                                                              // 3485\n        if (partials) {                                                                                                // 3486\n          args = composeArgs(args, partials, holders);                                                                 // 3487\n        }                                                                                                              // 3488\n        if (partialsRight) {                                                                                           // 3489\n          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 3490\n        }                                                                                                              // 3491\n        if (isCurry || isCurryRight) {                                                                                 // 3492\n          var placeholder = wrapper.placeholder,                                                                       // 3493\n              argsHolders = replaceHolders(args, placeholder);                                                         // 3494\n                                                                                                                       // 3495\n          length -= argsHolders.length;                                                                                // 3496\n          if (length < arity) {                                                                                        // 3497\n            var newArgPos = argPos ? arrayCopy(argPos) : undefined,                                                    // 3498\n                newArity = nativeMax(arity - length, 0),                                                               // 3499\n                newsHolders = isCurry ? argsHolders : undefined,                                                       // 3500\n                newHoldersRight = isCurry ? undefined : argsHolders,                                                   // 3501\n                newPartials = isCurry ? args : undefined,                                                              // 3502\n                newPartialsRight = isCurry ? undefined : args;                                                         // 3503\n                                                                                                                       // 3504\n            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                  // 3505\n            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                 // 3506\n                                                                                                                       // 3507\n            if (!isCurryBound) {                                                                                       // 3508\n              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                 // 3509\n            }                                                                                                          // 3510\n            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],\n                result = createHybridWrapper.apply(undefined, newData);                                                // 3512\n                                                                                                                       // 3513\n            if (isLaziable(func)) {                                                                                    // 3514\n              setData(result, newData);                                                                                // 3515\n            }                                                                                                          // 3516\n            result.placeholder = placeholder;                                                                          // 3517\n            return result;                                                                                             // 3518\n          }                                                                                                            // 3519\n        }                                                                                                              // 3520\n        var thisBinding = isBind ? thisArg : this,                                                                     // 3521\n            fn = isBindKey ? thisBinding[func] : func;                                                                 // 3522\n                                                                                                                       // 3523\n        if (argPos) {                                                                                                  // 3524\n          args = reorder(args, argPos);                                                                                // 3525\n        }                                                                                                              // 3526\n        if (isAry && ary < args.length) {                                                                              // 3527\n          args.length = ary;                                                                                           // 3528\n        }                                                                                                              // 3529\n        if (this && this !== root && this instanceof wrapper) {                                                        // 3530\n          fn = Ctor || createCtorWrapper(func);                                                                        // 3531\n        }                                                                                                              // 3532\n        return fn.apply(thisBinding, args);                                                                            // 3533\n      }                                                                                                                // 3534\n      return wrapper;                                                                                                  // 3535\n    }                                                                                                                  // 3536\n                                                                                                                       // 3537\n    /**                                                                                                                // 3538\n     * Creates the padding required for `string` based on the given `length`.                                          // 3539\n     * The `chars` string is truncated if the number of characters exceeds `length`.                                   // 3540\n     *                                                                                                                 // 3541\n     * @private                                                                                                        // 3542\n     * @param {string} string The string to create padding for.                                                        // 3543\n     * @param {number} [length=0] The padding length.                                                                  // 3544\n     * @param {string} [chars=' '] The string used as padding.                                                         // 3545\n     * @returns {string} Returns the pad for `string`.                                                                 // 3546\n     */                                                                                                                // 3547\n    function createPadding(string, length, chars) {                                                                    // 3548\n      var strLength = string.length;                                                                                   // 3549\n      length = +length;                                                                                                // 3550\n                                                                                                                       // 3551\n      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 3552\n        return '';                                                                                                     // 3553\n      }                                                                                                                // 3554\n      var padLength = length - strLength;                                                                              // 3555\n      chars = chars == null ? ' ' : (chars + '');                                                                      // 3556\n      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);                                  // 3557\n    }                                                                                                                  // 3558\n                                                                                                                       // 3559\n    /**                                                                                                                // 3560\n     * Creates a function that wraps `func` and invokes it with the optional `this`                                    // 3561\n     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 3562\n     * the wrapper.                                                                                                    // 3563\n     *                                                                                                                 // 3564\n     * @private                                                                                                        // 3565\n     * @param {Function} func The function to partially apply arguments to.                                            // 3566\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3567\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 3568\n     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 3569\n     * @returns {Function} Returns the new bound function.                                                             // 3570\n     */                                                                                                                // 3571\n    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 3572\n      var isBind = bitmask & BIND_FLAG,                                                                                // 3573\n          Ctor = createCtorWrapper(func);                                                                              // 3574\n                                                                                                                       // 3575\n      function wrapper() {                                                                                             // 3576\n        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3577\n        // converting it to an array before providing it `func`.                                                       // 3578\n        var argsIndex = -1,                                                                                            // 3579\n            argsLength = arguments.length,                                                                             // 3580\n            leftIndex = -1,                                                                                            // 3581\n            leftLength = partials.length,                                                                              // 3582\n            args = Array(leftLength + argsLength);                                                                     // 3583\n                                                                                                                       // 3584\n        while (++leftIndex < leftLength) {                                                                             // 3585\n          args[leftIndex] = partials[leftIndex];                                                                       // 3586\n        }                                                                                                              // 3587\n        while (argsLength--) {                                                                                         // 3588\n          args[leftIndex++] = arguments[++argsIndex];                                                                  // 3589\n        }                                                                                                              // 3590\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3591\n        return fn.apply(isBind ? thisArg : this, args);                                                                // 3592\n      }                                                                                                                // 3593\n      return wrapper;                                                                                                  // 3594\n    }                                                                                                                  // 3595\n                                                                                                                       // 3596\n    /**                                                                                                                // 3597\n     * Creates a `_.ceil`, `_.floor`, or `_.round` function.                                                           // 3598\n     *                                                                                                                 // 3599\n     * @private                                                                                                        // 3600\n     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 3601\n     * @returns {Function} Returns the new round function.                                                             // 3602\n     */                                                                                                                // 3603\n    function createRound(methodName) {                                                                                 // 3604\n      var func = Math[methodName];                                                                                     // 3605\n      return function(number, precision) {                                                                             // 3606\n        precision = precision === undefined ? 0 : (+precision || 0);                                                   // 3607\n        if (precision) {                                                                                               // 3608\n          precision = pow(10, precision);                                                                              // 3609\n          return func(number * precision) / precision;                                                                 // 3610\n        }                                                                                                              // 3611\n        return func(number);                                                                                           // 3612\n      };                                                                                                               // 3613\n    }                                                                                                                  // 3614\n                                                                                                                       // 3615\n    /**                                                                                                                // 3616\n     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.                                                      // 3617\n     *                                                                                                                 // 3618\n     * @private                                                                                                        // 3619\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3620\n     * @returns {Function} Returns the new index function.                                                             // 3621\n     */                                                                                                                // 3622\n    function createSortedIndex(retHighest) {                                                                           // 3623\n      return function(array, value, iteratee, thisArg) {                                                               // 3624\n        var callback = getCallback(iteratee);                                                                          // 3625\n        return (iteratee == null && callback === baseCallback)                                                         // 3626\n          ? binaryIndex(array, value, retHighest)                                                                      // 3627\n          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);                                   // 3628\n      };                                                                                                               // 3629\n    }                                                                                                                  // 3630\n                                                                                                                       // 3631\n    /**                                                                                                                // 3632\n     * Creates a function that either curries or invokes `func` with optional                                          // 3633\n     * `this` binding and partially applied arguments.                                                                 // 3634\n     *                                                                                                                 // 3635\n     * @private                                                                                                        // 3636\n     * @param {Function|string} func The function or method name to reference.                                         // 3637\n     * @param {number} bitmask The bitmask of flags.                                                                   // 3638\n     *  The bitmask may be composed of the following flags:                                                            // 3639\n     *     1 - `_.bind`                                                                                                // 3640\n     *     2 - `_.bindKey`                                                                                             // 3641\n     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 3642\n     *     8 - `_.curry`                                                                                               // 3643\n     *    16 - `_.curryRight`                                                                                          // 3644\n     *    32 - `_.partial`                                                                                             // 3645\n     *    64 - `_.partialRight`                                                                                        // 3646\n     *   128 - `_.rearg`                                                                                               // 3647\n     *   256 - `_.ary`                                                                                                 // 3648\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3649\n     * @param {Array} [partials] The arguments to be partially applied.                                                // 3650\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3651\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 3652\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 3653\n     * @param {number} [arity] The arity of `func`.                                                                    // 3654\n     * @returns {Function} Returns the new wrapped function.                                                           // 3655\n     */                                                                                                                // 3656\n    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 3657\n      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 3658\n      if (!isBindKey && typeof func != 'function') {                                                                   // 3659\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 3660\n      }                                                                                                                // 3661\n      var length = partials ? partials.length : 0;                                                                     // 3662\n      if (!length) {                                                                                                   // 3663\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 3664\n        partials = holders = undefined;                                                                                // 3665\n      }                                                                                                                // 3666\n      length -= (holders ? holders.length : 0);                                                                        // 3667\n      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 3668\n        var partialsRight = partials,                                                                                  // 3669\n            holdersRight = holders;                                                                                    // 3670\n                                                                                                                       // 3671\n        partials = holders = undefined;                                                                                // 3672\n      }                                                                                                                // 3673\n      var data = isBindKey ? undefined : getData(func),                                                                // 3674\n          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 3675\n                                                                                                                       // 3676\n      if (data) {                                                                                                      // 3677\n        mergeData(newData, data);                                                                                      // 3678\n        bitmask = newData[1];                                                                                          // 3679\n        arity = newData[9];                                                                                            // 3680\n      }                                                                                                                // 3681\n      newData[9] = arity == null                                                                                       // 3682\n        ? (isBindKey ? 0 : func.length)                                                                                // 3683\n        : (nativeMax(arity - length, 0) || 0);                                                                         // 3684\n                                                                                                                       // 3685\n      if (bitmask == BIND_FLAG) {                                                                                      // 3686\n        var result = createBindWrapper(newData[0], newData[2]);                                                        // 3687\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {           // 3688\n        result = createPartialWrapper.apply(undefined, newData);                                                       // 3689\n      } else {                                                                                                         // 3690\n        result = createHybridWrapper.apply(undefined, newData);                                                        // 3691\n      }                                                                                                                // 3692\n      var setter = data ? baseSetData : setData;                                                                       // 3693\n      return setter(result, newData);                                                                                  // 3694\n    }                                                                                                                  // 3695\n                                                                                                                       // 3696\n    /**                                                                                                                // 3697\n     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 3698\n     * partial deep comparisons.                                                                                       // 3699\n     *                                                                                                                 // 3700\n     * @private                                                                                                        // 3701\n     * @param {Array} array The array to compare.                                                                      // 3702\n     * @param {Array} other The other array to compare.                                                                // 3703\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3704\n     * @param {Function} [customizer] The function to customize comparing arrays.                                      // 3705\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3706\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3707\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3708\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 3709\n     */                                                                                                                // 3710\n    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {                               // 3711\n      var index = -1,                                                                                                  // 3712\n          arrLength = array.length,                                                                                    // 3713\n          othLength = other.length;                                                                                    // 3714\n                                                                                                                       // 3715\n      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {                                             // 3716\n        return false;                                                                                                  // 3717\n      }                                                                                                                // 3718\n      // Ignore non-index properties.                                                                                  // 3719\n      while (++index < arrLength) {                                                                                    // 3720\n        var arrValue = array[index],                                                                                   // 3721\n            othValue = other[index],                                                                                   // 3722\n            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n                                                                                                                       // 3724\n        if (result !== undefined) {                                                                                    // 3725\n          if (result) {                                                                                                // 3726\n            continue;                                                                                                  // 3727\n          }                                                                                                            // 3728\n          return false;                                                                                                // 3729\n        }                                                                                                              // 3730\n        // Recursively compare arrays (susceptible to call stack limits).                                              // 3731\n        if (isLoose) {                                                                                                 // 3732\n          if (!arraySome(other, function(othValue) {                                                                   // 3733\n                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);    // 3734\n              })) {                                                                                                    // 3735\n            return false;                                                                                              // 3736\n          }                                                                                                            // 3737\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {   // 3738\n          return false;                                                                                                // 3739\n        }                                                                                                              // 3740\n      }                                                                                                                // 3741\n      return true;                                                                                                     // 3742\n    }                                                                                                                  // 3743\n                                                                                                                       // 3744\n    /**                                                                                                                // 3745\n     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 3746\n     * the same `toStringTag`.                                                                                         // 3747\n     *                                                                                                                 // 3748\n     * **Note:** This function only supports comparing values with tags of                                             // 3749\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 3750\n     *                                                                                                                 // 3751\n     * @private                                                                                                        // 3752\n     * @param {Object} object The object to compare.                                                                   // 3753\n     * @param {Object} other The other object to compare.                                                              // 3754\n     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 3755\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3756\n     */                                                                                                                // 3757\n    function equalByTag(object, other, tag) {                                                                          // 3758\n      switch (tag) {                                                                                                   // 3759\n        case boolTag:                                                                                                  // 3760\n        case dateTag:                                                                                                  // 3761\n          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 3762\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 3763\n          return +object == +other;                                                                                    // 3764\n                                                                                                                       // 3765\n        case errorTag:                                                                                                 // 3766\n          return object.name == other.name && object.message == other.message;                                         // 3767\n                                                                                                                       // 3768\n        case numberTag:                                                                                                // 3769\n          // Treat `NaN` vs. `NaN` as equal.                                                                           // 3770\n          return (object != +object)                                                                                   // 3771\n            ? other != +other                                                                                          // 3772\n            : object == +other;                                                                                        // 3773\n                                                                                                                       // 3774\n        case regexpTag:                                                                                                // 3775\n        case stringTag:                                                                                                // 3776\n          // Coerce regexes to strings and treat strings primitives and string                                         // 3777\n          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 3778\n          return object == (other + '');                                                                               // 3779\n      }                                                                                                                // 3780\n      return false;                                                                                                    // 3781\n    }                                                                                                                  // 3782\n                                                                                                                       // 3783\n    /**                                                                                                                // 3784\n     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 3785\n     * partial deep comparisons.                                                                                       // 3786\n     *                                                                                                                 // 3787\n     * @private                                                                                                        // 3788\n     * @param {Object} object The object to compare.                                                                   // 3789\n     * @param {Object} other The other object to compare.                                                              // 3790\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3791\n     * @param {Function} [customizer] The function to customize comparing values.                                      // 3792\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3793\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3794\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3795\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3796\n     */                                                                                                                // 3797\n    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                             // 3798\n      var objProps = keys(object),                                                                                     // 3799\n          objLength = objProps.length,                                                                                 // 3800\n          othProps = keys(other),                                                                                      // 3801\n          othLength = othProps.length;                                                                                 // 3802\n                                                                                                                       // 3803\n      if (objLength != othLength && !isLoose) {                                                                        // 3804\n        return false;                                                                                                  // 3805\n      }                                                                                                                // 3806\n      var index = objLength;                                                                                           // 3807\n      while (index--) {                                                                                                // 3808\n        var key = objProps[index];                                                                                     // 3809\n        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {                                             // 3810\n          return false;                                                                                                // 3811\n        }                                                                                                              // 3812\n      }                                                                                                                // 3813\n      var skipCtor = isLoose;                                                                                          // 3814\n      while (++index < objLength) {                                                                                    // 3815\n        key = objProps[index];                                                                                         // 3816\n        var objValue = object[key],                                                                                    // 3817\n            othValue = other[key],                                                                                     // 3818\n            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;\n                                                                                                                       // 3820\n        // Recursively compare objects (susceptible to call stack limits).                                             // 3821\n        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {   // 3822\n          return false;                                                                                                // 3823\n        }                                                                                                              // 3824\n        skipCtor || (skipCtor = key == 'constructor');                                                                 // 3825\n      }                                                                                                                // 3826\n      if (!skipCtor) {                                                                                                 // 3827\n        var objCtor = object.constructor,                                                                              // 3828\n            othCtor = other.constructor;                                                                               // 3829\n                                                                                                                       // 3830\n        // Non `Object` object instances with different constructors are not equal.                                    // 3831\n        if (objCtor != othCtor &&                                                                                      // 3832\n            ('constructor' in object && 'constructor' in other) &&                                                     // 3833\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 3834\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 3835\n          return false;                                                                                                // 3836\n        }                                                                                                              // 3837\n      }                                                                                                                // 3838\n      return true;                                                                                                     // 3839\n    }                                                                                                                  // 3840\n                                                                                                                       // 3841\n    /**                                                                                                                // 3842\n     * Gets the appropriate \"callback\" function. If the `_.callback` method is                                         // 3843\n     * customized this function returns the custom method, otherwise it returns                                        // 3844\n     * the `baseCallback` function. If arguments are provided the chosen function                                      // 3845\n     * is invoked with them and its result is returned.                                                                // 3846\n     *                                                                                                                 // 3847\n     * @private                                                                                                        // 3848\n     * @returns {Function} Returns the chosen function or its result.                                                  // 3849\n     */                                                                                                                // 3850\n    function getCallback(func, thisArg, argCount) {                                                                    // 3851\n      var result = lodash.callback || callback;                                                                        // 3852\n      result = result === callback ? baseCallback : result;                                                            // 3853\n      return argCount ? result(func, thisArg, argCount) : result;                                                      // 3854\n    }                                                                                                                  // 3855\n                                                                                                                       // 3856\n    /**                                                                                                                // 3857\n     * Gets metadata for `func`.                                                                                       // 3858\n     *                                                                                                                 // 3859\n     * @private                                                                                                        // 3860\n     * @param {Function} func The function to query.                                                                   // 3861\n     * @returns {*} Returns the metadata for `func`.                                                                   // 3862\n     */                                                                                                                // 3863\n    var getData = !metaMap ? noop : function(func) {                                                                   // 3864\n      return metaMap.get(func);                                                                                        // 3865\n    };                                                                                                                 // 3866\n                                                                                                                       // 3867\n    /**                                                                                                                // 3868\n     * Gets the name of `func`.                                                                                        // 3869\n     *                                                                                                                 // 3870\n     * @private                                                                                                        // 3871\n     * @param {Function} func The function to query.                                                                   // 3872\n     * @returns {string} Returns the function name.                                                                    // 3873\n     */                                                                                                                // 3874\n    function getFuncName(func) {                                                                                       // 3875\n      var result = (func.name + ''),                                                                                   // 3876\n          array = realNames[result],                                                                                   // 3877\n          length = array ? array.length : 0;                                                                           // 3878\n                                                                                                                       // 3879\n      while (length--) {                                                                                               // 3880\n        var data = array[length],                                                                                      // 3881\n            otherFunc = data.func;                                                                                     // 3882\n        if (otherFunc == null || otherFunc == func) {                                                                  // 3883\n          return data.name;                                                                                            // 3884\n        }                                                                                                              // 3885\n      }                                                                                                                // 3886\n      return result;                                                                                                   // 3887\n    }                                                                                                                  // 3888\n                                                                                                                       // 3889\n    /**                                                                                                                // 3890\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is                                           // 3891\n     * customized this function returns the custom method, otherwise it returns                                        // 3892\n     * the `baseIndexOf` function. If arguments are provided the chosen function                                       // 3893\n     * is invoked with them and its result is returned.                                                                // 3894\n     *                                                                                                                 // 3895\n     * @private                                                                                                        // 3896\n     * @returns {Function|number} Returns the chosen function or its result.                                           // 3897\n     */                                                                                                                // 3898\n    function getIndexOf(collection, target, fromIndex) {                                                               // 3899\n      var result = lodash.indexOf || indexOf;                                                                          // 3900\n      result = result === indexOf ? baseIndexOf : result;                                                              // 3901\n      return collection ? result(collection, target, fromIndex) : result;                                              // 3902\n    }                                                                                                                  // 3903\n                                                                                                                       // 3904\n    /**                                                                                                                // 3905\n     * Gets the \"length\" property value of `object`.                                                                   // 3906\n     *                                                                                                                 // 3907\n     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 3908\n     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 3909\n     *                                                                                                                 // 3910\n     * @private                                                                                                        // 3911\n     * @param {Object} object The object to query.                                                                     // 3912\n     * @returns {*} Returns the \"length\" value.                                                                        // 3913\n     */                                                                                                                // 3914\n    var getLength = baseProperty('length');                                                                            // 3915\n                                                                                                                       // 3916\n    /**                                                                                                                // 3917\n     * Gets the propery names, values, and compare flags of `object`.                                                  // 3918\n     *                                                                                                                 // 3919\n     * @private                                                                                                        // 3920\n     * @param {Object} object The object to query.                                                                     // 3921\n     * @returns {Array} Returns the match data of `object`.                                                            // 3922\n     */                                                                                                                // 3923\n    function getMatchData(object) {                                                                                    // 3924\n      var result = pairs(object),                                                                                      // 3925\n          length = result.length;                                                                                      // 3926\n                                                                                                                       // 3927\n      while (length--) {                                                                                               // 3928\n        result[length][2] = isStrictComparable(result[length][1]);                                                     // 3929\n      }                                                                                                                // 3930\n      return result;                                                                                                   // 3931\n    }                                                                                                                  // 3932\n                                                                                                                       // 3933\n    /**                                                                                                                // 3934\n     * Gets the native function at `key` of `object`.                                                                  // 3935\n     *                                                                                                                 // 3936\n     * @private                                                                                                        // 3937\n     * @param {Object} object The object to query.                                                                     // 3938\n     * @param {string} key The key of the method to get.                                                               // 3939\n     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 3940\n     */                                                                                                                // 3941\n    function getNative(object, key) {                                                                                  // 3942\n      var value = object == null ? undefined : object[key];                                                            // 3943\n      return isNative(value) ? value : undefined;                                                                      // 3944\n    }                                                                                                                  // 3945\n                                                                                                                       // 3946\n    /**                                                                                                                // 3947\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 3948\n     *                                                                                                                 // 3949\n     * @private                                                                                                        // 3950\n     * @param {number} start The start of the view.                                                                    // 3951\n     * @param {number} end The end of the view.                                                                        // 3952\n     * @param {Array} transforms The transformations to apply to the view.                                             // 3953\n     * @returns {Object} Returns an object containing the `start` and `end`                                            // 3954\n     *  positions of the view.                                                                                         // 3955\n     */                                                                                                                // 3956\n    function getView(start, end, transforms) {                                                                         // 3957\n      var index = -1,                                                                                                  // 3958\n          length = transforms.length;                                                                                  // 3959\n                                                                                                                       // 3960\n      while (++index < length) {                                                                                       // 3961\n        var data = transforms[index],                                                                                  // 3962\n            size = data.size;                                                                                          // 3963\n                                                                                                                       // 3964\n        switch (data.type) {                                                                                           // 3965\n          case 'drop':      start += size; break;                                                                      // 3966\n          case 'dropRight': end -= size; break;                                                                        // 3967\n          case 'take':      end = nativeMin(end, start + size); break;                                                 // 3968\n          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 3969\n        }                                                                                                              // 3970\n      }                                                                                                                // 3971\n      return { 'start': start, 'end': end };                                                                           // 3972\n    }                                                                                                                  // 3973\n                                                                                                                       // 3974\n    /**                                                                                                                // 3975\n     * Initializes an array clone.                                                                                     // 3976\n     *                                                                                                                 // 3977\n     * @private                                                                                                        // 3978\n     * @param {Array} array The array to clone.                                                                        // 3979\n     * @returns {Array} Returns the initialized clone.                                                                 // 3980\n     */                                                                                                                // 3981\n    function initCloneArray(array) {                                                                                   // 3982\n      var length = array.length,                                                                                       // 3983\n          result = new array.constructor(length);                                                                      // 3984\n                                                                                                                       // 3985\n      // Add array properties assigned by `RegExp#exec`.                                                               // 3986\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 3987\n        result.index = array.index;                                                                                    // 3988\n        result.input = array.input;                                                                                    // 3989\n      }                                                                                                                // 3990\n      return result;                                                                                                   // 3991\n    }                                                                                                                  // 3992\n                                                                                                                       // 3993\n    /**                                                                                                                // 3994\n     * Initializes an object clone.                                                                                    // 3995\n     *                                                                                                                 // 3996\n     * @private                                                                                                        // 3997\n     * @param {Object} object The object to clone.                                                                     // 3998\n     * @returns {Object} Returns the initialized clone.                                                                // 3999\n     */                                                                                                                // 4000\n    function initCloneObject(object) {                                                                                 // 4001\n      var Ctor = object.constructor;                                                                                   // 4002\n      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {                                                      // 4003\n        Ctor = Object;                                                                                                 // 4004\n      }                                                                                                                // 4005\n      return new Ctor;                                                                                                 // 4006\n    }                                                                                                                  // 4007\n                                                                                                                       // 4008\n    /**                                                                                                                // 4009\n     * Initializes an object clone based on its `toStringTag`.                                                         // 4010\n     *                                                                                                                 // 4011\n     * **Note:** This function only supports cloning values with tags of                                               // 4012\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4013\n     *                                                                                                                 // 4014\n     * @private                                                                                                        // 4015\n     * @param {Object} object The object to clone.                                                                     // 4016\n     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4017\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4018\n     * @returns {Object} Returns the initialized clone.                                                                // 4019\n     */                                                                                                                // 4020\n    function initCloneByTag(object, tag, isDeep) {                                                                     // 4021\n      var Ctor = object.constructor;                                                                                   // 4022\n      switch (tag) {                                                                                                   // 4023\n        case arrayBufferTag:                                                                                           // 4024\n          return bufferClone(object);                                                                                  // 4025\n                                                                                                                       // 4026\n        case boolTag:                                                                                                  // 4027\n        case dateTag:                                                                                                  // 4028\n          return new Ctor(+object);                                                                                    // 4029\n                                                                                                                       // 4030\n        case float32Tag: case float64Tag:                                                                              // 4031\n        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4032\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4033\n          var buffer = object.buffer;                                                                                  // 4034\n          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);                    // 4035\n                                                                                                                       // 4036\n        case numberTag:                                                                                                // 4037\n        case stringTag:                                                                                                // 4038\n          return new Ctor(object);                                                                                     // 4039\n                                                                                                                       // 4040\n        case regexpTag:                                                                                                // 4041\n          var result = new Ctor(object.source, reFlags.exec(object));                                                  // 4042\n          result.lastIndex = object.lastIndex;                                                                         // 4043\n      }                                                                                                                // 4044\n      return result;                                                                                                   // 4045\n    }                                                                                                                  // 4046\n                                                                                                                       // 4047\n    /**                                                                                                                // 4048\n     * Invokes the method at `path` on `object`.                                                                       // 4049\n     *                                                                                                                 // 4050\n     * @private                                                                                                        // 4051\n     * @param {Object} object The object to query.                                                                     // 4052\n     * @param {Array|string} path The path of the method to invoke.                                                    // 4053\n     * @param {Array} args The arguments to invoke the method with.                                                    // 4054\n     * @returns {*} Returns the result of the invoked method.                                                          // 4055\n     */                                                                                                                // 4056\n    function invokePath(object, path, args) {                                                                          // 4057\n      if (object != null && !isKey(path, object)) {                                                                    // 4058\n        path = toPath(path);                                                                                           // 4059\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 4060\n        path = last(path);                                                                                             // 4061\n      }                                                                                                                // 4062\n      var func = object == null ? object : object[path];                                                               // 4063\n      return func == null ? undefined : func.apply(object, args);                                                      // 4064\n    }                                                                                                                  // 4065\n                                                                                                                       // 4066\n    /**                                                                                                                // 4067\n     * Checks if `value` is array-like.                                                                                // 4068\n     *                                                                                                                 // 4069\n     * @private                                                                                                        // 4070\n     * @param {*} value The value to check.                                                                            // 4071\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 4072\n     */                                                                                                                // 4073\n    function isArrayLike(value) {                                                                                      // 4074\n      return value != null && isLength(getLength(value));                                                              // 4075\n    }                                                                                                                  // 4076\n                                                                                                                       // 4077\n    /**                                                                                                                // 4078\n     * Checks if `value` is a valid array-like index.                                                                  // 4079\n     *                                                                                                                 // 4080\n     * @private                                                                                                        // 4081\n     * @param {*} value The value to check.                                                                            // 4082\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                    // 4083\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                    // 4084\n     */                                                                                                                // 4085\n    function isIndex(value, length) {                                                                                  // 4086\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                        // 4087\n      length = length == null ? MAX_SAFE_INTEGER : length;                                                             // 4088\n      return value > -1 && value % 1 == 0 && value < length;                                                           // 4089\n    }                                                                                                                  // 4090\n                                                                                                                       // 4091\n    /**                                                                                                                // 4092\n     * Checks if the provided arguments are from an iteratee call.                                                     // 4093\n     *                                                                                                                 // 4094\n     * @private                                                                                                        // 4095\n     * @param {*} value The potential iteratee value argument.                                                         // 4096\n     * @param {*} index The potential iteratee index or key argument.                                                  // 4097\n     * @param {*} object The potential iteratee object argument.                                                       // 4098\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4099\n     */                                                                                                                // 4100\n    function isIterateeCall(value, index, object) {                                                                    // 4101\n      if (!isObject(object)) {                                                                                         // 4102\n        return false;                                                                                                  // 4103\n      }                                                                                                                // 4104\n      var type = typeof index;                                                                                         // 4105\n      if (type == 'number'                                                                                             // 4106\n          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4107\n          : (type == 'string' && index in object)) {                                                                   // 4108\n        var other = object[index];                                                                                     // 4109\n        return value === value ? (value === other) : (other !== other);                                                // 4110\n      }                                                                                                                // 4111\n      return false;                                                                                                    // 4112\n    }                                                                                                                  // 4113\n                                                                                                                       // 4114\n    /**                                                                                                                // 4115\n     * Checks if `value` is a property name and not a property path.                                                   // 4116\n     *                                                                                                                 // 4117\n     * @private                                                                                                        // 4118\n     * @param {*} value The value to check.                                                                            // 4119\n     * @param {Object} [object] The object to query keys on.                                                           // 4120\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4121\n     */                                                                                                                // 4122\n    function isKey(value, object) {                                                                                    // 4123\n      var type = typeof value;                                                                                         // 4124\n      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {                                       // 4125\n        return true;                                                                                                   // 4126\n      }                                                                                                                // 4127\n      if (isArray(value)) {                                                                                            // 4128\n        return false;                                                                                                  // 4129\n      }                                                                                                                // 4130\n      var result = !reIsDeepProp.test(value);                                                                          // 4131\n      return result || (object != null && value in toObject(object));                                                  // 4132\n    }                                                                                                                  // 4133\n                                                                                                                       // 4134\n    /**                                                                                                                // 4135\n     * Checks if `func` has a lazy counterpart.                                                                        // 4136\n     *                                                                                                                 // 4137\n     * @private                                                                                                        // 4138\n     * @param {Function} func The function to check.                                                                   // 4139\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4140\n     */                                                                                                                // 4141\n    function isLaziable(func) {                                                                                        // 4142\n      var funcName = getFuncName(func),                                                                                // 4143\n          other = lodash[funcName];                                                                                    // 4144\n                                                                                                                       // 4145\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4146\n        return false;                                                                                                  // 4147\n      }                                                                                                                // 4148\n      if (func === other) {                                                                                            // 4149\n        return true;                                                                                                   // 4150\n      }                                                                                                                // 4151\n      var data = getData(other);                                                                                       // 4152\n      return !!data && func === data[0];                                                                               // 4153\n    }                                                                                                                  // 4154\n                                                                                                                       // 4155\n    /**                                                                                                                // 4156\n     * Checks if `value` is a valid array-like length.                                                                 // 4157\n     *                                                                                                                 // 4158\n     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).     // 4159\n     *                                                                                                                 // 4160\n     * @private                                                                                                        // 4161\n     * @param {*} value The value to check.                                                                            // 4162\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 4163\n     */                                                                                                                // 4164\n    function isLength(value) {                                                                                         // 4165\n      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 4166\n    }                                                                                                                  // 4167\n                                                                                                                       // 4168\n    /**                                                                                                                // 4169\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 4170\n     *                                                                                                                 // 4171\n     * @private                                                                                                        // 4172\n     * @param {*} value The value to check.                                                                            // 4173\n     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 4174\n     *  equality comparisons, else `false`.                                                                            // 4175\n     */                                                                                                                // 4176\n    function isStrictComparable(value) {                                                                               // 4177\n      return value === value && !isObject(value);                                                                      // 4178\n    }                                                                                                                  // 4179\n                                                                                                                       // 4180\n    /**                                                                                                                // 4181\n     * Merges the function metadata of `source` into `data`.                                                           // 4182\n     *                                                                                                                 // 4183\n     * Merging metadata reduces the number of wrappers required to invoke a function.                                  // 4184\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 4185\n     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 4186\n     * augment function arguments, making the order in which they are executed important,                              // 4187\n     * preventing the merging of metadata. However, we make an exception for a safe                                    // 4188\n     * common case where curried functions have `_.ary` and or `_.rearg` applied.                                      // 4189\n     *                                                                                                                 // 4190\n     * @private                                                                                                        // 4191\n     * @param {Array} data The destination metadata.                                                                   // 4192\n     * @param {Array} source The source metadata.                                                                      // 4193\n     * @returns {Array} Returns `data`.                                                                                // 4194\n     */                                                                                                                // 4195\n    function mergeData(data, source) {                                                                                 // 4196\n      var bitmask = data[1],                                                                                           // 4197\n          srcBitmask = source[1],                                                                                      // 4198\n          newBitmask = bitmask | srcBitmask,                                                                           // 4199\n          isCommon = newBitmask < ARY_FLAG;                                                                            // 4200\n                                                                                                                       // 4201\n      var isCombo =                                                                                                    // 4202\n        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||                                                           // 4203\n        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||                            // 4204\n        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);                                              // 4205\n                                                                                                                       // 4206\n      // Exit early if metadata can't be merged.                                                                       // 4207\n      if (!(isCommon || isCombo)) {                                                                                    // 4208\n        return data;                                                                                                   // 4209\n      }                                                                                                                // 4210\n      // Use source `thisArg` if available.                                                                            // 4211\n      if (srcBitmask & BIND_FLAG) {                                                                                    // 4212\n        data[2] = source[2];                                                                                           // 4213\n        // Set when currying a bound function.                                                                         // 4214\n        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 4215\n      }                                                                                                                // 4216\n      // Compose partial arguments.                                                                                    // 4217\n      var value = source[3];                                                                                           // 4218\n      if (value) {                                                                                                     // 4219\n        var partials = data[3];                                                                                        // 4220\n        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);                               // 4221\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);                              // 4222\n      }                                                                                                                // 4223\n      // Compose partial right arguments.                                                                              // 4224\n      value = source[5];                                                                                               // 4225\n      if (value) {                                                                                                     // 4226\n        partials = data[5];                                                                                            // 4227\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);                          // 4228\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);                              // 4229\n      }                                                                                                                // 4230\n      // Use source `argPos` if available.                                                                             // 4231\n      value = source[7];                                                                                               // 4232\n      if (value) {                                                                                                     // 4233\n        data[7] = arrayCopy(value);                                                                                    // 4234\n      }                                                                                                                // 4235\n      // Use source `ary` if it's smaller.                                                                             // 4236\n      if (srcBitmask & ARY_FLAG) {                                                                                     // 4237\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 4238\n      }                                                                                                                // 4239\n      // Use source `arity` if one is not provided.                                                                    // 4240\n      if (data[9] == null) {                                                                                           // 4241\n        data[9] = source[9];                                                                                           // 4242\n      }                                                                                                                // 4243\n      // Use source `func` and merge bitmasks.                                                                         // 4244\n      data[0] = source[0];                                                                                             // 4245\n      data[1] = newBitmask;                                                                                            // 4246\n                                                                                                                       // 4247\n      return data;                                                                                                     // 4248\n    }                                                                                                                  // 4249\n                                                                                                                       // 4250\n    /**                                                                                                                // 4251\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 4252\n     *                                                                                                                 // 4253\n     * @private                                                                                                        // 4254\n     * @param {*} objectValue The destination object property value.                                                   // 4255\n     * @param {*} sourceValue The source object property value.                                                        // 4256\n     * @returns {*} Returns the value to assign to the destination object.                                             // 4257\n     */                                                                                                                // 4258\n    function mergeDefaults(objectValue, sourceValue) {                                                                 // 4259\n      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);                 // 4260\n    }                                                                                                                  // 4261\n                                                                                                                       // 4262\n    /**                                                                                                                // 4263\n     * A specialized version of `_.pick` which picks `object` properties specified                                     // 4264\n     * by `props`.                                                                                                     // 4265\n     *                                                                                                                 // 4266\n     * @private                                                                                                        // 4267\n     * @param {Object} object The source object.                                                                       // 4268\n     * @param {string[]} props The property names to pick.                                                             // 4269\n     * @returns {Object} Returns the new object.                                                                       // 4270\n     */                                                                                                                // 4271\n    function pickByArray(object, props) {                                                                              // 4272\n      object = toObject(object);                                                                                       // 4273\n                                                                                                                       // 4274\n      var index = -1,                                                                                                  // 4275\n          length = props.length,                                                                                       // 4276\n          result = {};                                                                                                 // 4277\n                                                                                                                       // 4278\n      while (++index < length) {                                                                                       // 4279\n        var key = props[index];                                                                                        // 4280\n        if (key in object) {                                                                                           // 4281\n          result[key] = object[key];                                                                                   // 4282\n        }                                                                                                              // 4283\n      }                                                                                                                // 4284\n      return result;                                                                                                   // 4285\n    }                                                                                                                  // 4286\n                                                                                                                       // 4287\n    /**                                                                                                                // 4288\n     * A specialized version of `_.pick` which picks `object` properties `predicate`                                   // 4289\n     * returns truthy for.                                                                                             // 4290\n     *                                                                                                                 // 4291\n     * @private                                                                                                        // 4292\n     * @param {Object} object The source object.                                                                       // 4293\n     * @param {Function} predicate The function invoked per iteration.                                                 // 4294\n     * @returns {Object} Returns the new object.                                                                       // 4295\n     */                                                                                                                // 4296\n    function pickByCallback(object, predicate) {                                                                       // 4297\n      var result = {};                                                                                                 // 4298\n      baseForIn(object, function(value, key, object) {                                                                 // 4299\n        if (predicate(value, key, object)) {                                                                           // 4300\n          result[key] = value;                                                                                         // 4301\n        }                                                                                                              // 4302\n      });                                                                                                              // 4303\n      return result;                                                                                                   // 4304\n    }                                                                                                                  // 4305\n                                                                                                                       // 4306\n    /**                                                                                                                // 4307\n     * Reorder `array` according to the specified indexes where the element at                                         // 4308\n     * the first index is assigned as the first element, the element at                                                // 4309\n     * the second index is assigned as the second element, and so on.                                                  // 4310\n     *                                                                                                                 // 4311\n     * @private                                                                                                        // 4312\n     * @param {Array} array The array to reorder.                                                                      // 4313\n     * @param {Array} indexes The arranged array indexes.                                                              // 4314\n     * @returns {Array} Returns `array`.                                                                               // 4315\n     */                                                                                                                // 4316\n    function reorder(array, indexes) {                                                                                 // 4317\n      var arrLength = array.length,                                                                                    // 4318\n          length = nativeMin(indexes.length, arrLength),                                                               // 4319\n          oldArray = arrayCopy(array);                                                                                 // 4320\n                                                                                                                       // 4321\n      while (length--) {                                                                                               // 4322\n        var index = indexes[length];                                                                                   // 4323\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 4324\n      }                                                                                                                // 4325\n      return array;                                                                                                    // 4326\n    }                                                                                                                  // 4327\n                                                                                                                       // 4328\n    /**                                                                                                                // 4329\n     * Sets metadata for `func`.                                                                                       // 4330\n     *                                                                                                                 // 4331\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 4332\n     * period of time, it will trip its breaker and transition to an identity function                                 // 4333\n     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n     * for more details.                                                                                               // 4335\n     *                                                                                                                 // 4336\n     * @private                                                                                                        // 4337\n     * @param {Function} func The function to associate metadata with.                                                 // 4338\n     * @param {*} data The metadata.                                                                                   // 4339\n     * @returns {Function} Returns `func`.                                                                             // 4340\n     */                                                                                                                // 4341\n    var setData = (function() {                                                                                        // 4342\n      var count = 0,                                                                                                   // 4343\n          lastCalled = 0;                                                                                              // 4344\n                                                                                                                       // 4345\n      return function(key, value) {                                                                                    // 4346\n        var stamp = now(),                                                                                             // 4347\n            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 4348\n                                                                                                                       // 4349\n        lastCalled = stamp;                                                                                            // 4350\n        if (remaining > 0) {                                                                                           // 4351\n          if (++count >= HOT_COUNT) {                                                                                  // 4352\n            return key;                                                                                                // 4353\n          }                                                                                                            // 4354\n        } else {                                                                                                       // 4355\n          count = 0;                                                                                                   // 4356\n        }                                                                                                              // 4357\n        return baseSetData(key, value);                                                                                // 4358\n      };                                                                                                               // 4359\n    }());                                                                                                              // 4360\n                                                                                                                       // 4361\n    /**                                                                                                                // 4362\n     * A fallback implementation of `Object.keys` which creates an array of the                                        // 4363\n     * own enumerable property names of `object`.                                                                      // 4364\n     *                                                                                                                 // 4365\n     * @private                                                                                                        // 4366\n     * @param {Object} object The object to query.                                                                     // 4367\n     * @returns {Array} Returns the array of property names.                                                           // 4368\n     */                                                                                                                // 4369\n    function shimKeys(object) {                                                                                        // 4370\n      var props = keysIn(object),                                                                                      // 4371\n          propsLength = props.length,                                                                                  // 4372\n          length = propsLength && object.length;                                                                       // 4373\n                                                                                                                       // 4374\n      var allowIndexes = !!length && isLength(length) &&                                                               // 4375\n        (isArray(object) || isArguments(object));                                                                      // 4376\n                                                                                                                       // 4377\n      var index = -1,                                                                                                  // 4378\n          result = [];                                                                                                 // 4379\n                                                                                                                       // 4380\n      while (++index < propsLength) {                                                                                  // 4381\n        var key = props[index];                                                                                        // 4382\n        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                              // 4383\n          result.push(key);                                                                                            // 4384\n        }                                                                                                              // 4385\n      }                                                                                                                // 4386\n      return result;                                                                                                   // 4387\n    }                                                                                                                  // 4388\n                                                                                                                       // 4389\n    /**                                                                                                                // 4390\n     * Converts `value` to an array-like object if it's not one.                                                       // 4391\n     *                                                                                                                 // 4392\n     * @private                                                                                                        // 4393\n     * @param {*} value The value to process.                                                                          // 4394\n     * @returns {Array|Object} Returns the array-like object.                                                          // 4395\n     */                                                                                                                // 4396\n    function toIterable(value) {                                                                                       // 4397\n      if (value == null) {                                                                                             // 4398\n        return [];                                                                                                     // 4399\n      }                                                                                                                // 4400\n      if (!isArrayLike(value)) {                                                                                       // 4401\n        return values(value);                                                                                          // 4402\n      }                                                                                                                // 4403\n      return isObject(value) ? value : Object(value);                                                                  // 4404\n    }                                                                                                                  // 4405\n                                                                                                                       // 4406\n    /**                                                                                                                // 4407\n     * Converts `value` to an object if it's not one.                                                                  // 4408\n     *                                                                                                                 // 4409\n     * @private                                                                                                        // 4410\n     * @param {*} value The value to process.                                                                          // 4411\n     * @returns {Object} Returns the object.                                                                           // 4412\n     */                                                                                                                // 4413\n    function toObject(value) {                                                                                         // 4414\n      return isObject(value) ? value : Object(value);                                                                  // 4415\n    }                                                                                                                  // 4416\n                                                                                                                       // 4417\n    /**                                                                                                                // 4418\n     * Converts `value` to property path array if it's not one.                                                        // 4419\n     *                                                                                                                 // 4420\n     * @private                                                                                                        // 4421\n     * @param {*} value The value to process.                                                                          // 4422\n     * @returns {Array} Returns the property path array.                                                               // 4423\n     */                                                                                                                // 4424\n    function toPath(value) {                                                                                           // 4425\n      if (isArray(value)) {                                                                                            // 4426\n        return value;                                                                                                  // 4427\n      }                                                                                                                // 4428\n      var result = [];                                                                                                 // 4429\n      baseToString(value).replace(rePropName, function(match, number, quote, string) {                                 // 4430\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 4431\n      });                                                                                                              // 4432\n      return result;                                                                                                   // 4433\n    }                                                                                                                  // 4434\n                                                                                                                       // 4435\n    /**                                                                                                                // 4436\n     * Creates a clone of `wrapper`.                                                                                   // 4437\n     *                                                                                                                 // 4438\n     * @private                                                                                                        // 4439\n     * @param {Object} wrapper The wrapper to clone.                                                                   // 4440\n     * @returns {Object} Returns the cloned wrapper.                                                                   // 4441\n     */                                                                                                                // 4442\n    function wrapperClone(wrapper) {                                                                                   // 4443\n      return wrapper instanceof LazyWrapper                                                                            // 4444\n        ? wrapper.clone()                                                                                              // 4445\n        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));                   // 4446\n    }                                                                                                                  // 4447\n                                                                                                                       // 4448\n    /*------------------------------------------------------------------------*/                                       // 4449\n                                                                                                                       // 4450\n    /**                                                                                                                // 4451\n     * Creates an array of elements split into groups the length of `size`.                                            // 4452\n     * If `collection` can't be split evenly, the final chunk will be the remaining                                    // 4453\n     * elements.                                                                                                       // 4454\n     *                                                                                                                 // 4455\n     * @static                                                                                                         // 4456\n     * @memberOf _                                                                                                     // 4457\n     * @category Array                                                                                                 // 4458\n     * @param {Array} array The array to process.                                                                      // 4459\n     * @param {number} [size=1] The length of each chunk.                                                              // 4460\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4461\n     * @returns {Array} Returns the new array containing chunks.                                                       // 4462\n     * @example                                                                                                        // 4463\n     *                                                                                                                 // 4464\n     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 4465\n     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 4466\n     *                                                                                                                 // 4467\n     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 4468\n     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 4469\n     */                                                                                                                // 4470\n    function chunk(array, size, guard) {                                                                               // 4471\n      if (guard ? isIterateeCall(array, size, guard) : size == null) {                                                 // 4472\n        size = 1;                                                                                                      // 4473\n      } else {                                                                                                         // 4474\n        size = nativeMax(nativeFloor(size) || 1, 1);                                                                   // 4475\n      }                                                                                                                // 4476\n      var index = 0,                                                                                                   // 4477\n          length = array ? array.length : 0,                                                                           // 4478\n          resIndex = -1,                                                                                               // 4479\n          result = Array(nativeCeil(length / size));                                                                   // 4480\n                                                                                                                       // 4481\n      while (index < length) {                                                                                         // 4482\n        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 4483\n      }                                                                                                                // 4484\n      return result;                                                                                                   // 4485\n    }                                                                                                                  // 4486\n                                                                                                                       // 4487\n    /**                                                                                                                // 4488\n     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 4489\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.                                                                   // 4490\n     *                                                                                                                 // 4491\n     * @static                                                                                                         // 4492\n     * @memberOf _                                                                                                     // 4493\n     * @category Array                                                                                                 // 4494\n     * @param {Array} array The array to compact.                                                                      // 4495\n     * @returns {Array} Returns the new array of filtered values.                                                      // 4496\n     * @example                                                                                                        // 4497\n     *                                                                                                                 // 4498\n     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 4499\n     * // => [1, 2, 3]                                                                                                 // 4500\n     */                                                                                                                // 4501\n    function compact(array) {                                                                                          // 4502\n      var index = -1,                                                                                                  // 4503\n          length = array ? array.length : 0,                                                                           // 4504\n          resIndex = -1,                                                                                               // 4505\n          result = [];                                                                                                 // 4506\n                                                                                                                       // 4507\n      while (++index < length) {                                                                                       // 4508\n        var value = array[index];                                                                                      // 4509\n        if (value) {                                                                                                   // 4510\n          result[++resIndex] = value;                                                                                  // 4511\n        }                                                                                                              // 4512\n      }                                                                                                                // 4513\n      return result;                                                                                                   // 4514\n    }                                                                                                                  // 4515\n                                                                                                                       // 4516\n    /**                                                                                                                // 4517\n     * Creates an array of unique `array` values not included in the other                                             // 4518\n     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 4519\n     * for equality comparisons.                                                                                       // 4520\n     *                                                                                                                 // 4521\n     * @static                                                                                                         // 4522\n     * @memberOf _                                                                                                     // 4523\n     * @category Array                                                                                                 // 4524\n     * @param {Array} array The array to inspect.                                                                      // 4525\n     * @param {...Array} [values] The arrays of values to exclude.                                                     // 4526\n     * @returns {Array} Returns the new array of filtered values.                                                      // 4527\n     * @example                                                                                                        // 4528\n     *                                                                                                                 // 4529\n     * _.difference([1, 2, 3], [4, 2]);                                                                                // 4530\n     * // => [1, 3]                                                                                                    // 4531\n     */                                                                                                                // 4532\n    var difference = restParam(function(array, values) {                                                               // 4533\n      return (isObjectLike(array) && isArrayLike(array))                                                               // 4534\n        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 4535\n        : [];                                                                                                          // 4536\n    });                                                                                                                // 4537\n                                                                                                                       // 4538\n    /**                                                                                                                // 4539\n     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 4540\n     *                                                                                                                 // 4541\n     * @static                                                                                                         // 4542\n     * @memberOf _                                                                                                     // 4543\n     * @category Array                                                                                                 // 4544\n     * @param {Array} array The array to query.                                                                        // 4545\n     * @param {number} [n=1] The number of elements to drop.                                                           // 4546\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4547\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4548\n     * @example                                                                                                        // 4549\n     *                                                                                                                 // 4550\n     * _.drop([1, 2, 3]);                                                                                              // 4551\n     * // => [2, 3]                                                                                                    // 4552\n     *                                                                                                                 // 4553\n     * _.drop([1, 2, 3], 2);                                                                                           // 4554\n     * // => [3]                                                                                                       // 4555\n     *                                                                                                                 // 4556\n     * _.drop([1, 2, 3], 5);                                                                                           // 4557\n     * // => []                                                                                                        // 4558\n     *                                                                                                                 // 4559\n     * _.drop([1, 2, 3], 0);                                                                                           // 4560\n     * // => [1, 2, 3]                                                                                                 // 4561\n     */                                                                                                                // 4562\n    function drop(array, n, guard) {                                                                                   // 4563\n      var length = array ? array.length : 0;                                                                           // 4564\n      if (!length) {                                                                                                   // 4565\n        return [];                                                                                                     // 4566\n      }                                                                                                                // 4567\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4568\n        n = 1;                                                                                                         // 4569\n      }                                                                                                                // 4570\n      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 4571\n    }                                                                                                                  // 4572\n                                                                                                                       // 4573\n    /**                                                                                                                // 4574\n     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 4575\n     *                                                                                                                 // 4576\n     * @static                                                                                                         // 4577\n     * @memberOf _                                                                                                     // 4578\n     * @category Array                                                                                                 // 4579\n     * @param {Array} array The array to query.                                                                        // 4580\n     * @param {number} [n=1] The number of elements to drop.                                                           // 4581\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4582\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4583\n     * @example                                                                                                        // 4584\n     *                                                                                                                 // 4585\n     * _.dropRight([1, 2, 3]);                                                                                         // 4586\n     * // => [1, 2]                                                                                                    // 4587\n     *                                                                                                                 // 4588\n     * _.dropRight([1, 2, 3], 2);                                                                                      // 4589\n     * // => [1]                                                                                                       // 4590\n     *                                                                                                                 // 4591\n     * _.dropRight([1, 2, 3], 5);                                                                                      // 4592\n     * // => []                                                                                                        // 4593\n     *                                                                                                                 // 4594\n     * _.dropRight([1, 2, 3], 0);                                                                                      // 4595\n     * // => [1, 2, 3]                                                                                                 // 4596\n     */                                                                                                                // 4597\n    function dropRight(array, n, guard) {                                                                              // 4598\n      var length = array ? array.length : 0;                                                                           // 4599\n      if (!length) {                                                                                                   // 4600\n        return [];                                                                                                     // 4601\n      }                                                                                                                // 4602\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4603\n        n = 1;                                                                                                         // 4604\n      }                                                                                                                // 4605\n      n = length - (+n || 0);                                                                                          // 4606\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 4607\n    }                                                                                                                  // 4608\n                                                                                                                       // 4609\n    /**                                                                                                                // 4610\n     * Creates a slice of `array` excluding elements dropped from the end.                                             // 4611\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4612\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4613\n     *                                                                                                                 // 4614\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4615\n     * style callback returns the property value of the given element.                                                 // 4616\n     *                                                                                                                 // 4617\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4618\n     * style callback returns `true` for elements that have a matching property                                        // 4619\n     * value, else `false`.                                                                                            // 4620\n     *                                                                                                                 // 4621\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4622\n     * callback returns `true` for elements that match the properties of the given                                     // 4623\n     * object, else `false`.                                                                                           // 4624\n     *                                                                                                                 // 4625\n     * @static                                                                                                         // 4626\n     * @memberOf _                                                                                                     // 4627\n     * @category Array                                                                                                 // 4628\n     * @param {Array} array The array to query.                                                                        // 4629\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4630\n     *  per iteration.                                                                                                 // 4631\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4632\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4633\n     * @example                                                                                                        // 4634\n     *                                                                                                                 // 4635\n     * _.dropRightWhile([1, 2, 3], function(n) {                                                                       // 4636\n     *   return n > 1;                                                                                                 // 4637\n     * });                                                                                                             // 4638\n     * // => [1]                                                                                                       // 4639\n     *                                                                                                                 // 4640\n     * var users = [                                                                                                   // 4641\n     *   { 'user': 'barney',  'active': true },                                                                        // 4642\n     *   { 'user': 'fred',    'active': false },                                                                       // 4643\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 4644\n     * ];                                                                                                              // 4645\n     *                                                                                                                 // 4646\n     * // using the `_.matches` callback shorthand                                                                     // 4647\n     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 4648\n     * // => ['barney', 'fred']                                                                                        // 4649\n     *                                                                                                                 // 4650\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4651\n     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');                                                      // 4652\n     * // => ['barney']                                                                                                // 4653\n     *                                                                                                                 // 4654\n     * // using the `_.property` callback shorthand                                                                    // 4655\n     * _.pluck(_.dropRightWhile(users, 'active'), 'user');                                                             // 4656\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 4657\n     */                                                                                                                // 4658\n    function dropRightWhile(array, predicate, thisArg) {                                                               // 4659\n      return (array && array.length)                                                                                   // 4660\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)                                             // 4661\n        : [];                                                                                                          // 4662\n    }                                                                                                                  // 4663\n                                                                                                                       // 4664\n    /**                                                                                                                // 4665\n     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 4666\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4667\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4668\n     *                                                                                                                 // 4669\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4670\n     * style callback returns the property value of the given element.                                                 // 4671\n     *                                                                                                                 // 4672\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4673\n     * style callback returns `true` for elements that have a matching property                                        // 4674\n     * value, else `false`.                                                                                            // 4675\n     *                                                                                                                 // 4676\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4677\n     * callback returns `true` for elements that have the properties of the given                                      // 4678\n     * object, else `false`.                                                                                           // 4679\n     *                                                                                                                 // 4680\n     * @static                                                                                                         // 4681\n     * @memberOf _                                                                                                     // 4682\n     * @category Array                                                                                                 // 4683\n     * @param {Array} array The array to query.                                                                        // 4684\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4685\n     *  per iteration.                                                                                                 // 4686\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4687\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4688\n     * @example                                                                                                        // 4689\n     *                                                                                                                 // 4690\n     * _.dropWhile([1, 2, 3], function(n) {                                                                            // 4691\n     *   return n < 3;                                                                                                 // 4692\n     * });                                                                                                             // 4693\n     * // => [3]                                                                                                       // 4694\n     *                                                                                                                 // 4695\n     * var users = [                                                                                                   // 4696\n     *   { 'user': 'barney',  'active': false },                                                                       // 4697\n     *   { 'user': 'fred',    'active': false },                                                                       // 4698\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 4699\n     * ];                                                                                                              // 4700\n     *                                                                                                                 // 4701\n     * // using the `_.matches` callback shorthand                                                                     // 4702\n     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 4703\n     * // => ['fred', 'pebbles']                                                                                       // 4704\n     *                                                                                                                 // 4705\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4706\n     * _.pluck(_.dropWhile(users, 'active', false), 'user');                                                           // 4707\n     * // => ['pebbles']                                                                                               // 4708\n     *                                                                                                                 // 4709\n     * // using the `_.property` callback shorthand                                                                    // 4710\n     * _.pluck(_.dropWhile(users, 'active'), 'user');                                                                  // 4711\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 4712\n     */                                                                                                                // 4713\n    function dropWhile(array, predicate, thisArg) {                                                                    // 4714\n      return (array && array.length)                                                                                   // 4715\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)                                                   // 4716\n        : [];                                                                                                          // 4717\n    }                                                                                                                  // 4718\n                                                                                                                       // 4719\n    /**                                                                                                                // 4720\n     * Fills elements of `array` with `value` from `start` up to, but not                                              // 4721\n     * including, `end`.                                                                                               // 4722\n     *                                                                                                                 // 4723\n     * **Note:** This method mutates `array`.                                                                          // 4724\n     *                                                                                                                 // 4725\n     * @static                                                                                                         // 4726\n     * @memberOf _                                                                                                     // 4727\n     * @category Array                                                                                                 // 4728\n     * @param {Array} array The array to fill.                                                                         // 4729\n     * @param {*} value The value to fill `array` with.                                                                // 4730\n     * @param {number} [start=0] The start position.                                                                   // 4731\n     * @param {number} [end=array.length] The end position.                                                            // 4732\n     * @returns {Array} Returns `array`.                                                                               // 4733\n     * @example                                                                                                        // 4734\n     *                                                                                                                 // 4735\n     * var array = [1, 2, 3];                                                                                          // 4736\n     *                                                                                                                 // 4737\n     * _.fill(array, 'a');                                                                                             // 4738\n     * console.log(array);                                                                                             // 4739\n     * // => ['a', 'a', 'a']                                                                                           // 4740\n     *                                                                                                                 // 4741\n     * _.fill(Array(3), 2);                                                                                            // 4742\n     * // => [2, 2, 2]                                                                                                 // 4743\n     *                                                                                                                 // 4744\n     * _.fill([4, 6, 8], '*', 1, 2);                                                                                   // 4745\n     * // => [4, '*', 8]                                                                                               // 4746\n     */                                                                                                                // 4747\n    function fill(array, value, start, end) {                                                                          // 4748\n      var length = array ? array.length : 0;                                                                           // 4749\n      if (!length) {                                                                                                   // 4750\n        return [];                                                                                                     // 4751\n      }                                                                                                                // 4752\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 4753\n        start = 0;                                                                                                     // 4754\n        end = length;                                                                                                  // 4755\n      }                                                                                                                // 4756\n      return baseFill(array, value, start, end);                                                                       // 4757\n    }                                                                                                                  // 4758\n                                                                                                                       // 4759\n    /**                                                                                                                // 4760\n     * This method is like `_.find` except that it returns the index of the first                                      // 4761\n     * element `predicate` returns truthy for instead of the element itself.                                           // 4762\n     *                                                                                                                 // 4763\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4764\n     * style callback returns the property value of the given element.                                                 // 4765\n     *                                                                                                                 // 4766\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4767\n     * style callback returns `true` for elements that have a matching property                                        // 4768\n     * value, else `false`.                                                                                            // 4769\n     *                                                                                                                 // 4770\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4771\n     * callback returns `true` for elements that have the properties of the given                                      // 4772\n     * object, else `false`.                                                                                           // 4773\n     *                                                                                                                 // 4774\n     * @static                                                                                                         // 4775\n     * @memberOf _                                                                                                     // 4776\n     * @category Array                                                                                                 // 4777\n     * @param {Array} array The array to search.                                                                       // 4778\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4779\n     *  per iteration.                                                                                                 // 4780\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4781\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4782\n     * @example                                                                                                        // 4783\n     *                                                                                                                 // 4784\n     * var users = [                                                                                                   // 4785\n     *   { 'user': 'barney',  'active': false },                                                                       // 4786\n     *   { 'user': 'fred',    'active': false },                                                                       // 4787\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 4788\n     * ];                                                                                                              // 4789\n     *                                                                                                                 // 4790\n     * _.findIndex(users, function(chr) {                                                                              // 4791\n     *   return chr.user == 'barney';                                                                                  // 4792\n     * });                                                                                                             // 4793\n     * // => 0                                                                                                         // 4794\n     *                                                                                                                 // 4795\n     * // using the `_.matches` callback shorthand                                                                     // 4796\n     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 4797\n     * // => 1                                                                                                         // 4798\n     *                                                                                                                 // 4799\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4800\n     * _.findIndex(users, 'active', false);                                                                            // 4801\n     * // => 0                                                                                                         // 4802\n     *                                                                                                                 // 4803\n     * // using the `_.property` callback shorthand                                                                    // 4804\n     * _.findIndex(users, 'active');                                                                                   // 4805\n     * // => 2                                                                                                         // 4806\n     */                                                                                                                // 4807\n    var findIndex = createFindIndex();                                                                                 // 4808\n                                                                                                                       // 4809\n    /**                                                                                                                // 4810\n     * This method is like `_.findIndex` except that it iterates over elements                                         // 4811\n     * of `collection` from right to left.                                                                             // 4812\n     *                                                                                                                 // 4813\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4814\n     * style callback returns the property value of the given element.                                                 // 4815\n     *                                                                                                                 // 4816\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4817\n     * style callback returns `true` for elements that have a matching property                                        // 4818\n     * value, else `false`.                                                                                            // 4819\n     *                                                                                                                 // 4820\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4821\n     * callback returns `true` for elements that have the properties of the given                                      // 4822\n     * object, else `false`.                                                                                           // 4823\n     *                                                                                                                 // 4824\n     * @static                                                                                                         // 4825\n     * @memberOf _                                                                                                     // 4826\n     * @category Array                                                                                                 // 4827\n     * @param {Array} array The array to search.                                                                       // 4828\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4829\n     *  per iteration.                                                                                                 // 4830\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4831\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4832\n     * @example                                                                                                        // 4833\n     *                                                                                                                 // 4834\n     * var users = [                                                                                                   // 4835\n     *   { 'user': 'barney',  'active': true },                                                                        // 4836\n     *   { 'user': 'fred',    'active': false },                                                                       // 4837\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 4838\n     * ];                                                                                                              // 4839\n     *                                                                                                                 // 4840\n     * _.findLastIndex(users, function(chr) {                                                                          // 4841\n     *   return chr.user == 'pebbles';                                                                                 // 4842\n     * });                                                                                                             // 4843\n     * // => 2                                                                                                         // 4844\n     *                                                                                                                 // 4845\n     * // using the `_.matches` callback shorthand                                                                     // 4846\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 4847\n     * // => 0                                                                                                         // 4848\n     *                                                                                                                 // 4849\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4850\n     * _.findLastIndex(users, 'active', false);                                                                        // 4851\n     * // => 2                                                                                                         // 4852\n     *                                                                                                                 // 4853\n     * // using the `_.property` callback shorthand                                                                    // 4854\n     * _.findLastIndex(users, 'active');                                                                               // 4855\n     * // => 0                                                                                                         // 4856\n     */                                                                                                                // 4857\n    var findLastIndex = createFindIndex(true);                                                                         // 4858\n                                                                                                                       // 4859\n    /**                                                                                                                // 4860\n     * Gets the first element of `array`.                                                                              // 4861\n     *                                                                                                                 // 4862\n     * @static                                                                                                         // 4863\n     * @memberOf _                                                                                                     // 4864\n     * @alias head                                                                                                     // 4865\n     * @category Array                                                                                                 // 4866\n     * @param {Array} array The array to query.                                                                        // 4867\n     * @returns {*} Returns the first element of `array`.                                                              // 4868\n     * @example                                                                                                        // 4869\n     *                                                                                                                 // 4870\n     * _.first([1, 2, 3]);                                                                                             // 4871\n     * // => 1                                                                                                         // 4872\n     *                                                                                                                 // 4873\n     * _.first([]);                                                                                                    // 4874\n     * // => undefined                                                                                                 // 4875\n     */                                                                                                                // 4876\n    function first(array) {                                                                                            // 4877\n      return array ? array[0] : undefined;                                                                             // 4878\n    }                                                                                                                  // 4879\n                                                                                                                       // 4880\n    /**                                                                                                                // 4881\n     * Flattens a nested array. If `isDeep` is `true` the array is recursively                                         // 4882\n     * flattened, otherwise it's only flattened a single level.                                                        // 4883\n     *                                                                                                                 // 4884\n     * @static                                                                                                         // 4885\n     * @memberOf _                                                                                                     // 4886\n     * @category Array                                                                                                 // 4887\n     * @param {Array} array The array to flatten.                                                                      // 4888\n     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 4889\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4890\n     * @returns {Array} Returns the new flattened array.                                                               // 4891\n     * @example                                                                                                        // 4892\n     *                                                                                                                 // 4893\n     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 4894\n     * // => [1, 2, 3, [4]]                                                                                            // 4895\n     *                                                                                                                 // 4896\n     * // using `isDeep`                                                                                               // 4897\n     * _.flatten([1, [2, 3, [4]]], true);                                                                              // 4898\n     * // => [1, 2, 3, 4]                                                                                              // 4899\n     */                                                                                                                // 4900\n    function flatten(array, isDeep, guard) {                                                                           // 4901\n      var length = array ? array.length : 0;                                                                           // 4902\n      if (guard && isIterateeCall(array, isDeep, guard)) {                                                             // 4903\n        isDeep = false;                                                                                                // 4904\n      }                                                                                                                // 4905\n      return length ? baseFlatten(array, isDeep) : [];                                                                 // 4906\n    }                                                                                                                  // 4907\n                                                                                                                       // 4908\n    /**                                                                                                                // 4909\n     * Recursively flattens a nested array.                                                                            // 4910\n     *                                                                                                                 // 4911\n     * @static                                                                                                         // 4912\n     * @memberOf _                                                                                                     // 4913\n     * @category Array                                                                                                 // 4914\n     * @param {Array} array The array to recursively flatten.                                                          // 4915\n     * @returns {Array} Returns the new flattened array.                                                               // 4916\n     * @example                                                                                                        // 4917\n     *                                                                                                                 // 4918\n     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 4919\n     * // => [1, 2, 3, 4]                                                                                              // 4920\n     */                                                                                                                // 4921\n    function flattenDeep(array) {                                                                                      // 4922\n      var length = array ? array.length : 0;                                                                           // 4923\n      return length ? baseFlatten(array, true) : [];                                                                   // 4924\n    }                                                                                                                  // 4925\n                                                                                                                       // 4926\n    /**                                                                                                                // 4927\n     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 4928\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 4929\n     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 4930\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 4931\n     * performs a faster binary search.                                                                                // 4932\n     *                                                                                                                 // 4933\n     * @static                                                                                                         // 4934\n     * @memberOf _                                                                                                     // 4935\n     * @category Array                                                                                                 // 4936\n     * @param {Array} array The array to search.                                                                       // 4937\n     * @param {*} value The value to search for.                                                                       // 4938\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`                                        // 4939\n     *  to perform a binary search on a sorted array.                                                                  // 4940\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 4941\n     * @example                                                                                                        // 4942\n     *                                                                                                                 // 4943\n     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 4944\n     * // => 1                                                                                                         // 4945\n     *                                                                                                                 // 4946\n     * // using `fromIndex`                                                                                            // 4947\n     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 4948\n     * // => 3                                                                                                         // 4949\n     *                                                                                                                 // 4950\n     * // performing a binary search                                                                                   // 4951\n     * _.indexOf([1, 1, 2, 2], 2, true);                                                                               // 4952\n     * // => 2                                                                                                         // 4953\n     */                                                                                                                // 4954\n    function indexOf(array, value, fromIndex) {                                                                        // 4955\n      var length = array ? array.length : 0;                                                                           // 4956\n      if (!length) {                                                                                                   // 4957\n        return -1;                                                                                                     // 4958\n      }                                                                                                                // 4959\n      if (typeof fromIndex == 'number') {                                                                              // 4960\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;                                      // 4961\n      } else if (fromIndex) {                                                                                          // 4962\n        var index = binaryIndex(array, value);                                                                         // 4963\n        if (index < length &&                                                                                          // 4964\n            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {                          // 4965\n          return index;                                                                                                // 4966\n        }                                                                                                              // 4967\n        return -1;                                                                                                     // 4968\n      }                                                                                                                // 4969\n      return baseIndexOf(array, value, fromIndex || 0);                                                                // 4970\n    }                                                                                                                  // 4971\n                                                                                                                       // 4972\n    /**                                                                                                                // 4973\n     * Gets all but the last element of `array`.                                                                       // 4974\n     *                                                                                                                 // 4975\n     * @static                                                                                                         // 4976\n     * @memberOf _                                                                                                     // 4977\n     * @category Array                                                                                                 // 4978\n     * @param {Array} array The array to query.                                                                        // 4979\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4980\n     * @example                                                                                                        // 4981\n     *                                                                                                                 // 4982\n     * _.initial([1, 2, 3]);                                                                                           // 4983\n     * // => [1, 2]                                                                                                    // 4984\n     */                                                                                                                // 4985\n    function initial(array) {                                                                                          // 4986\n      return dropRight(array, 1);                                                                                      // 4987\n    }                                                                                                                  // 4988\n                                                                                                                       // 4989\n    /**                                                                                                                // 4990\n     * Creates an array of unique values that are included in all of the provided                                      // 4991\n     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 4992\n     * for equality comparisons.                                                                                       // 4993\n     *                                                                                                                 // 4994\n     * @static                                                                                                         // 4995\n     * @memberOf _                                                                                                     // 4996\n     * @category Array                                                                                                 // 4997\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 4998\n     * @returns {Array} Returns the new array of shared values.                                                        // 4999\n     * @example                                                                                                        // 5000\n     * _.intersection([1, 2], [4, 2], [2, 1]);                                                                         // 5001\n     * // => [2]                                                                                                       // 5002\n     */                                                                                                                // 5003\n    var intersection = restParam(function(arrays) {                                                                    // 5004\n      var othLength = arrays.length,                                                                                   // 5005\n          othIndex = othLength,                                                                                        // 5006\n          caches = Array(length),                                                                                      // 5007\n          indexOf = getIndexOf(),                                                                                      // 5008\n          isCommon = indexOf === baseIndexOf,                                                                          // 5009\n          result = [];                                                                                                 // 5010\n                                                                                                                       // 5011\n      while (othIndex--) {                                                                                             // 5012\n        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];                             // 5013\n        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;                  // 5014\n      }                                                                                                                // 5015\n      var array = arrays[0],                                                                                           // 5016\n          index = -1,                                                                                                  // 5017\n          length = array ? array.length : 0,                                                                           // 5018\n          seen = caches[0];                                                                                            // 5019\n                                                                                                                       // 5020\n      outer:                                                                                                           // 5021\n      while (++index < length) {                                                                                       // 5022\n        value = array[index];                                                                                          // 5023\n        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {                                      // 5024\n          var othIndex = othLength;                                                                                    // 5025\n          while (--othIndex) {                                                                                         // 5026\n            var cache = caches[othIndex];                                                                              // 5027\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {                      // 5028\n              continue outer;                                                                                          // 5029\n            }                                                                                                          // 5030\n          }                                                                                                            // 5031\n          if (seen) {                                                                                                  // 5032\n            seen.push(value);                                                                                          // 5033\n          }                                                                                                            // 5034\n          result.push(value);                                                                                          // 5035\n        }                                                                                                              // 5036\n      }                                                                                                                // 5037\n      return result;                                                                                                   // 5038\n    });                                                                                                                // 5039\n                                                                                                                       // 5040\n    /**                                                                                                                // 5041\n     * Gets the last element of `array`.                                                                               // 5042\n     *                                                                                                                 // 5043\n     * @static                                                                                                         // 5044\n     * @memberOf _                                                                                                     // 5045\n     * @category Array                                                                                                 // 5046\n     * @param {Array} array The array to query.                                                                        // 5047\n     * @returns {*} Returns the last element of `array`.                                                               // 5048\n     * @example                                                                                                        // 5049\n     *                                                                                                                 // 5050\n     * _.last([1, 2, 3]);                                                                                              // 5051\n     * // => 3                                                                                                         // 5052\n     */                                                                                                                // 5053\n    function last(array) {                                                                                             // 5054\n      var length = array ? array.length : 0;                                                                           // 5055\n      return length ? array[length - 1] : undefined;                                                                   // 5056\n    }                                                                                                                  // 5057\n                                                                                                                       // 5058\n    /**                                                                                                                // 5059\n     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5060\n     * `array` from right to left.                                                                                     // 5061\n     *                                                                                                                 // 5062\n     * @static                                                                                                         // 5063\n     * @memberOf _                                                                                                     // 5064\n     * @category Array                                                                                                 // 5065\n     * @param {Array} array The array to search.                                                                       // 5066\n     * @param {*} value The value to search for.                                                                       // 5067\n     * @param {boolean|number} [fromIndex=array.length-1] The index to search from                                     // 5068\n     *  or `true` to perform a binary search on a sorted array.                                                        // 5069\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5070\n     * @example                                                                                                        // 5071\n     *                                                                                                                 // 5072\n     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5073\n     * // => 3                                                                                                         // 5074\n     *                                                                                                                 // 5075\n     * // using `fromIndex`                                                                                            // 5076\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5077\n     * // => 1                                                                                                         // 5078\n     *                                                                                                                 // 5079\n     * // performing a binary search                                                                                   // 5080\n     * _.lastIndexOf([1, 1, 2, 2], 2, true);                                                                           // 5081\n     * // => 3                                                                                                         // 5082\n     */                                                                                                                // 5083\n    function lastIndexOf(array, value, fromIndex) {                                                                    // 5084\n      var length = array ? array.length : 0;                                                                           // 5085\n      if (!length) {                                                                                                   // 5086\n        return -1;                                                                                                     // 5087\n      }                                                                                                                // 5088\n      var index = length;                                                                                              // 5089\n      if (typeof fromIndex == 'number') {                                                                              // 5090\n        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;        // 5091\n      } else if (fromIndex) {                                                                                          // 5092\n        index = binaryIndex(array, value, true) - 1;                                                                   // 5093\n        var other = array[index];                                                                                      // 5094\n        if (value === value ? (value === other) : (other !== other)) {                                                 // 5095\n          return index;                                                                                                // 5096\n        }                                                                                                              // 5097\n        return -1;                                                                                                     // 5098\n      }                                                                                                                // 5099\n      if (value !== value) {                                                                                           // 5100\n        return indexOfNaN(array, index, true);                                                                         // 5101\n      }                                                                                                                // 5102\n      while (index--) {                                                                                                // 5103\n        if (array[index] === value) {                                                                                  // 5104\n          return index;                                                                                                // 5105\n        }                                                                                                              // 5106\n      }                                                                                                                // 5107\n      return -1;                                                                                                       // 5108\n    }                                                                                                                  // 5109\n                                                                                                                       // 5110\n    /**                                                                                                                // 5111\n     * Removes all provided values from `array` using                                                                  // 5112\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5113\n     * for equality comparisons.                                                                                       // 5114\n     *                                                                                                                 // 5115\n     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5116\n     *                                                                                                                 // 5117\n     * @static                                                                                                         // 5118\n     * @memberOf _                                                                                                     // 5119\n     * @category Array                                                                                                 // 5120\n     * @param {Array} array The array to modify.                                                                       // 5121\n     * @param {...*} [values] The values to remove.                                                                    // 5122\n     * @returns {Array} Returns `array`.                                                                               // 5123\n     * @example                                                                                                        // 5124\n     *                                                                                                                 // 5125\n     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 5126\n     *                                                                                                                 // 5127\n     * _.pull(array, 2, 3);                                                                                            // 5128\n     * console.log(array);                                                                                             // 5129\n     * // => [1, 1]                                                                                                    // 5130\n     */                                                                                                                // 5131\n    function pull() {                                                                                                  // 5132\n      var args = arguments,                                                                                            // 5133\n          array = args[0];                                                                                             // 5134\n                                                                                                                       // 5135\n      if (!(array && array.length)) {                                                                                  // 5136\n        return array;                                                                                                  // 5137\n      }                                                                                                                // 5138\n      var index = 0,                                                                                                   // 5139\n          indexOf = getIndexOf(),                                                                                      // 5140\n          length = args.length;                                                                                        // 5141\n                                                                                                                       // 5142\n      while (++index < length) {                                                                                       // 5143\n        var fromIndex = 0,                                                                                             // 5144\n            value = args[index];                                                                                       // 5145\n                                                                                                                       // 5146\n        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {                                                  // 5147\n          splice.call(array, fromIndex, 1);                                                                            // 5148\n        }                                                                                                              // 5149\n      }                                                                                                                // 5150\n      return array;                                                                                                    // 5151\n    }                                                                                                                  // 5152\n                                                                                                                       // 5153\n    /**                                                                                                                // 5154\n     * Removes elements from `array` corresponding to the given indexes and returns                                    // 5155\n     * an array of the removed elements. Indexes may be specified as an array of                                       // 5156\n     * indexes or as individual arguments.                                                                             // 5157\n     *                                                                                                                 // 5158\n     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 5159\n     *                                                                                                                 // 5160\n     * @static                                                                                                         // 5161\n     * @memberOf _                                                                                                     // 5162\n     * @category Array                                                                                                 // 5163\n     * @param {Array} array The array to modify.                                                                       // 5164\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 5165\n     *  specified as individual indexes or arrays of indexes.                                                          // 5166\n     * @returns {Array} Returns the new array of removed elements.                                                     // 5167\n     * @example                                                                                                        // 5168\n     *                                                                                                                 // 5169\n     * var array = [5, 10, 15, 20];                                                                                    // 5170\n     * var evens = _.pullAt(array, 1, 3);                                                                              // 5171\n     *                                                                                                                 // 5172\n     * console.log(array);                                                                                             // 5173\n     * // => [5, 15]                                                                                                   // 5174\n     *                                                                                                                 // 5175\n     * console.log(evens);                                                                                             // 5176\n     * // => [10, 20]                                                                                                  // 5177\n     */                                                                                                                // 5178\n    var pullAt = restParam(function(array, indexes) {                                                                  // 5179\n      indexes = baseFlatten(indexes);                                                                                  // 5180\n                                                                                                                       // 5181\n      var result = baseAt(array, indexes);                                                                             // 5182\n      basePullAt(array, indexes.sort(baseCompareAscending));                                                           // 5183\n      return result;                                                                                                   // 5184\n    });                                                                                                                // 5185\n                                                                                                                       // 5186\n    /**                                                                                                                // 5187\n     * Removes all elements from `array` that `predicate` returns truthy for                                           // 5188\n     * and returns an array of the removed elements. The predicate is bound to                                         // 5189\n     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5190\n     *                                                                                                                 // 5191\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5192\n     * style callback returns the property value of the given element.                                                 // 5193\n     *                                                                                                                 // 5194\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5195\n     * style callback returns `true` for elements that have a matching property                                        // 5196\n     * value, else `false`.                                                                                            // 5197\n     *                                                                                                                 // 5198\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5199\n     * callback returns `true` for elements that have the properties of the given                                      // 5200\n     * object, else `false`.                                                                                           // 5201\n     *                                                                                                                 // 5202\n     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 5203\n     *                                                                                                                 // 5204\n     * @static                                                                                                         // 5205\n     * @memberOf _                                                                                                     // 5206\n     * @category Array                                                                                                 // 5207\n     * @param {Array} array The array to modify.                                                                       // 5208\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5209\n     *  per iteration.                                                                                                 // 5210\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5211\n     * @returns {Array} Returns the new array of removed elements.                                                     // 5212\n     * @example                                                                                                        // 5213\n     *                                                                                                                 // 5214\n     * var array = [1, 2, 3, 4];                                                                                       // 5215\n     * var evens = _.remove(array, function(n) {                                                                       // 5216\n     *   return n % 2 == 0;                                                                                            // 5217\n     * });                                                                                                             // 5218\n     *                                                                                                                 // 5219\n     * console.log(array);                                                                                             // 5220\n     * // => [1, 3]                                                                                                    // 5221\n     *                                                                                                                 // 5222\n     * console.log(evens);                                                                                             // 5223\n     * // => [2, 4]                                                                                                    // 5224\n     */                                                                                                                // 5225\n    function remove(array, predicate, thisArg) {                                                                       // 5226\n      var result = [];                                                                                                 // 5227\n      if (!(array && array.length)) {                                                                                  // 5228\n        return result;                                                                                                 // 5229\n      }                                                                                                                // 5230\n      var index = -1,                                                                                                  // 5231\n          indexes = [],                                                                                                // 5232\n          length = array.length;                                                                                       // 5233\n                                                                                                                       // 5234\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 5235\n      while (++index < length) {                                                                                       // 5236\n        var value = array[index];                                                                                      // 5237\n        if (predicate(value, index, array)) {                                                                          // 5238\n          result.push(value);                                                                                          // 5239\n          indexes.push(index);                                                                                         // 5240\n        }                                                                                                              // 5241\n      }                                                                                                                // 5242\n      basePullAt(array, indexes);                                                                                      // 5243\n      return result;                                                                                                   // 5244\n    }                                                                                                                  // 5245\n                                                                                                                       // 5246\n    /**                                                                                                                // 5247\n     * Gets all but the first element of `array`.                                                                      // 5248\n     *                                                                                                                 // 5249\n     * @static                                                                                                         // 5250\n     * @memberOf _                                                                                                     // 5251\n     * @alias tail                                                                                                     // 5252\n     * @category Array                                                                                                 // 5253\n     * @param {Array} array The array to query.                                                                        // 5254\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5255\n     * @example                                                                                                        // 5256\n     *                                                                                                                 // 5257\n     * _.rest([1, 2, 3]);                                                                                              // 5258\n     * // => [2, 3]                                                                                                    // 5259\n     */                                                                                                                // 5260\n    function rest(array) {                                                                                             // 5261\n      return drop(array, 1);                                                                                           // 5262\n    }                                                                                                                  // 5263\n                                                                                                                       // 5264\n    /**                                                                                                                // 5265\n     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 5266\n     *                                                                                                                 // 5267\n     * **Note:** This method is used instead of `Array#slice` to support node                                          // 5268\n     * lists in IE < 9 and to ensure dense arrays are returned.                                                        // 5269\n     *                                                                                                                 // 5270\n     * @static                                                                                                         // 5271\n     * @memberOf _                                                                                                     // 5272\n     * @category Array                                                                                                 // 5273\n     * @param {Array} array The array to slice.                                                                        // 5274\n     * @param {number} [start=0] The start position.                                                                   // 5275\n     * @param {number} [end=array.length] The end position.                                                            // 5276\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5277\n     */                                                                                                                // 5278\n    function slice(array, start, end) {                                                                                // 5279\n      var length = array ? array.length : 0;                                                                           // 5280\n      if (!length) {                                                                                                   // 5281\n        return [];                                                                                                     // 5282\n      }                                                                                                                // 5283\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 5284\n        start = 0;                                                                                                     // 5285\n        end = length;                                                                                                  // 5286\n      }                                                                                                                // 5287\n      return baseSlice(array, start, end);                                                                             // 5288\n    }                                                                                                                  // 5289\n                                                                                                                       // 5290\n    /**                                                                                                                // 5291\n     * Uses a binary search to determine the lowest index at which `value` should                                      // 5292\n     * be inserted into `array` in order to maintain its sort order. If an iteratee                                    // 5293\n     * function is provided it's invoked for `value` and each element of `array`                                       // 5294\n     * to compute their sort ranking. The iteratee is bound to `thisArg` and                                           // 5295\n     * invoked with one argument; (value).                                                                             // 5296\n     *                                                                                                                 // 5297\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 5298\n     * style callback returns the property value of the given element.                                                 // 5299\n     *                                                                                                                 // 5300\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5301\n     * style callback returns `true` for elements that have a matching property                                        // 5302\n     * value, else `false`.                                                                                            // 5303\n     *                                                                                                                 // 5304\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5305\n     * callback returns `true` for elements that have the properties of the given                                      // 5306\n     * object, else `false`.                                                                                           // 5307\n     *                                                                                                                 // 5308\n     * @static                                                                                                         // 5309\n     * @memberOf _                                                                                                     // 5310\n     * @category Array                                                                                                 // 5311\n     * @param {Array} array The sorted array to inspect.                                                               // 5312\n     * @param {*} value The value to evaluate.                                                                         // 5313\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5314\n     *  per iteration.                                                                                                 // 5315\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5316\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 5317\n     *  into `array`.                                                                                                  // 5318\n     * @example                                                                                                        // 5319\n     *                                                                                                                 // 5320\n     * _.sortedIndex([30, 50], 40);                                                                                    // 5321\n     * // => 1                                                                                                         // 5322\n     *                                                                                                                 // 5323\n     * _.sortedIndex([4, 4, 5, 5], 5);                                                                                 // 5324\n     * // => 2                                                                                                         // 5325\n     *                                                                                                                 // 5326\n     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };                                              // 5327\n     *                                                                                                                 // 5328\n     * // using an iteratee function                                                                                   // 5329\n     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {                                                    // 5330\n     *   return this.data[word];                                                                                       // 5331\n     * }, dict);                                                                                                       // 5332\n     * // => 1                                                                                                         // 5333\n     *                                                                                                                 // 5334\n     * // using the `_.property` callback shorthand                                                                    // 5335\n     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');                                                    // 5336\n     * // => 1                                                                                                         // 5337\n     */                                                                                                                // 5338\n    var sortedIndex = createSortedIndex();                                                                             // 5339\n                                                                                                                       // 5340\n    /**                                                                                                                // 5341\n     * This method is like `_.sortedIndex` except that it returns the highest                                          // 5342\n     * index at which `value` should be inserted into `array` in order to                                              // 5343\n     * maintain its sort order.                                                                                        // 5344\n     *                                                                                                                 // 5345\n     * @static                                                                                                         // 5346\n     * @memberOf _                                                                                                     // 5347\n     * @category Array                                                                                                 // 5348\n     * @param {Array} array The sorted array to inspect.                                                               // 5349\n     * @param {*} value The value to evaluate.                                                                         // 5350\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5351\n     *  per iteration.                                                                                                 // 5352\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5353\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 5354\n     *  into `array`.                                                                                                  // 5355\n     * @example                                                                                                        // 5356\n     *                                                                                                                 // 5357\n     * _.sortedLastIndex([4, 4, 5, 5], 5);                                                                             // 5358\n     * // => 4                                                                                                         // 5359\n     */                                                                                                                // 5360\n    var sortedLastIndex = createSortedIndex(true);                                                                     // 5361\n                                                                                                                       // 5362\n    /**                                                                                                                // 5363\n     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 5364\n     *                                                                                                                 // 5365\n     * @static                                                                                                         // 5366\n     * @memberOf _                                                                                                     // 5367\n     * @category Array                                                                                                 // 5368\n     * @param {Array} array The array to query.                                                                        // 5369\n     * @param {number} [n=1] The number of elements to take.                                                           // 5370\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5371\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5372\n     * @example                                                                                                        // 5373\n     *                                                                                                                 // 5374\n     * _.take([1, 2, 3]);                                                                                              // 5375\n     * // => [1]                                                                                                       // 5376\n     *                                                                                                                 // 5377\n     * _.take([1, 2, 3], 2);                                                                                           // 5378\n     * // => [1, 2]                                                                                                    // 5379\n     *                                                                                                                 // 5380\n     * _.take([1, 2, 3], 5);                                                                                           // 5381\n     * // => [1, 2, 3]                                                                                                 // 5382\n     *                                                                                                                 // 5383\n     * _.take([1, 2, 3], 0);                                                                                           // 5384\n     * // => []                                                                                                        // 5385\n     */                                                                                                                // 5386\n    function take(array, n, guard) {                                                                                   // 5387\n      var length = array ? array.length : 0;                                                                           // 5388\n      if (!length) {                                                                                                   // 5389\n        return [];                                                                                                     // 5390\n      }                                                                                                                // 5391\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5392\n        n = 1;                                                                                                         // 5393\n      }                                                                                                                // 5394\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5395\n    }                                                                                                                  // 5396\n                                                                                                                       // 5397\n    /**                                                                                                                // 5398\n     * Creates a slice of `array` with `n` elements taken from the end.                                                // 5399\n     *                                                                                                                 // 5400\n     * @static                                                                                                         // 5401\n     * @memberOf _                                                                                                     // 5402\n     * @category Array                                                                                                 // 5403\n     * @param {Array} array The array to query.                                                                        // 5404\n     * @param {number} [n=1] The number of elements to take.                                                           // 5405\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5406\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5407\n     * @example                                                                                                        // 5408\n     *                                                                                                                 // 5409\n     * _.takeRight([1, 2, 3]);                                                                                         // 5410\n     * // => [3]                                                                                                       // 5411\n     *                                                                                                                 // 5412\n     * _.takeRight([1, 2, 3], 2);                                                                                      // 5413\n     * // => [2, 3]                                                                                                    // 5414\n     *                                                                                                                 // 5415\n     * _.takeRight([1, 2, 3], 5);                                                                                      // 5416\n     * // => [1, 2, 3]                                                                                                 // 5417\n     *                                                                                                                 // 5418\n     * _.takeRight([1, 2, 3], 0);                                                                                      // 5419\n     * // => []                                                                                                        // 5420\n     */                                                                                                                // 5421\n    function takeRight(array, n, guard) {                                                                              // 5422\n      var length = array ? array.length : 0;                                                                           // 5423\n      if (!length) {                                                                                                   // 5424\n        return [];                                                                                                     // 5425\n      }                                                                                                                // 5426\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5427\n        n = 1;                                                                                                         // 5428\n      }                                                                                                                // 5429\n      n = length - (+n || 0);                                                                                          // 5430\n      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 5431\n    }                                                                                                                  // 5432\n                                                                                                                       // 5433\n    /**                                                                                                                // 5434\n     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 5435\n     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`                                     // 5436\n     * and invoked with three arguments: (value, index, array).                                                        // 5437\n     *                                                                                                                 // 5438\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5439\n     * style callback returns the property value of the given element.                                                 // 5440\n     *                                                                                                                 // 5441\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5442\n     * style callback returns `true` for elements that have a matching property                                        // 5443\n     * value, else `false`.                                                                                            // 5444\n     *                                                                                                                 // 5445\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5446\n     * callback returns `true` for elements that have the properties of the given                                      // 5447\n     * object, else `false`.                                                                                           // 5448\n     *                                                                                                                 // 5449\n     * @static                                                                                                         // 5450\n     * @memberOf _                                                                                                     // 5451\n     * @category Array                                                                                                 // 5452\n     * @param {Array} array The array to query.                                                                        // 5453\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5454\n     *  per iteration.                                                                                                 // 5455\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5456\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5457\n     * @example                                                                                                        // 5458\n     *                                                                                                                 // 5459\n     * _.takeRightWhile([1, 2, 3], function(n) {                                                                       // 5460\n     *   return n > 1;                                                                                                 // 5461\n     * });                                                                                                             // 5462\n     * // => [2, 3]                                                                                                    // 5463\n     *                                                                                                                 // 5464\n     * var users = [                                                                                                   // 5465\n     *   { 'user': 'barney',  'active': true },                                                                        // 5466\n     *   { 'user': 'fred',    'active': false },                                                                       // 5467\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 5468\n     * ];                                                                                                              // 5469\n     *                                                                                                                 // 5470\n     * // using the `_.matches` callback shorthand                                                                     // 5471\n     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 5472\n     * // => ['pebbles']                                                                                               // 5473\n     *                                                                                                                 // 5474\n     * // using the `_.matchesProperty` callback shorthand                                                             // 5475\n     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');                                                      // 5476\n     * // => ['fred', 'pebbles']                                                                                       // 5477\n     *                                                                                                                 // 5478\n     * // using the `_.property` callback shorthand                                                                    // 5479\n     * _.pluck(_.takeRightWhile(users, 'active'), 'user');                                                             // 5480\n     * // => []                                                                                                        // 5481\n     */                                                                                                                // 5482\n    function takeRightWhile(array, predicate, thisArg) {                                                               // 5483\n      return (array && array.length)                                                                                   // 5484\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)                                            // 5485\n        : [];                                                                                                          // 5486\n    }                                                                                                                  // 5487\n                                                                                                                       // 5488\n    /**                                                                                                                // 5489\n     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 5490\n     * are taken until `predicate` returns falsey. The predicate is bound to                                           // 5491\n     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5492\n     *                                                                                                                 // 5493\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5494\n     * style callback returns the property value of the given element.                                                 // 5495\n     *                                                                                                                 // 5496\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5497\n     * style callback returns `true` for elements that have a matching property                                        // 5498\n     * value, else `false`.                                                                                            // 5499\n     *                                                                                                                 // 5500\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5501\n     * callback returns `true` for elements that have the properties of the given                                      // 5502\n     * object, else `false`.                                                                                           // 5503\n     *                                                                                                                 // 5504\n     * @static                                                                                                         // 5505\n     * @memberOf _                                                                                                     // 5506\n     * @category Array                                                                                                 // 5507\n     * @param {Array} array The array to query.                                                                        // 5508\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5509\n     *  per iteration.                                                                                                 // 5510\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5511\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5512\n     * @example                                                                                                        // 5513\n     *                                                                                                                 // 5514\n     * _.takeWhile([1, 2, 3], function(n) {                                                                            // 5515\n     *   return n < 3;                                                                                                 // 5516\n     * });                                                                                                             // 5517\n     * // => [1, 2]                                                                                                    // 5518\n     *                                                                                                                 // 5519\n     * var users = [                                                                                                   // 5520\n     *   { 'user': 'barney',  'active': false },                                                                       // 5521\n     *   { 'user': 'fred',    'active': false},                                                                        // 5522\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 5523\n     * ];                                                                                                              // 5524\n     *                                                                                                                 // 5525\n     * // using the `_.matches` callback shorthand                                                                     // 5526\n     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 5527\n     * // => ['barney']                                                                                                // 5528\n     *                                                                                                                 // 5529\n     * // using the `_.matchesProperty` callback shorthand                                                             // 5530\n     * _.pluck(_.takeWhile(users, 'active', false), 'user');                                                           // 5531\n     * // => ['barney', 'fred']                                                                                        // 5532\n     *                                                                                                                 // 5533\n     * // using the `_.property` callback shorthand                                                                    // 5534\n     * _.pluck(_.takeWhile(users, 'active'), 'user');                                                                  // 5535\n     * // => []                                                                                                        // 5536\n     */                                                                                                                // 5537\n    function takeWhile(array, predicate, thisArg) {                                                                    // 5538\n      return (array && array.length)                                                                                   // 5539\n        ? baseWhile(array, getCallback(predicate, thisArg, 3))                                                         // 5540\n        : [];                                                                                                          // 5541\n    }                                                                                                                  // 5542\n                                                                                                                       // 5543\n    /**                                                                                                                // 5544\n     * Creates an array of unique values, in order, from all of the provided arrays                                    // 5545\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5546\n     * for equality comparisons.                                                                                       // 5547\n     *                                                                                                                 // 5548\n     * @static                                                                                                         // 5549\n     * @memberOf _                                                                                                     // 5550\n     * @category Array                                                                                                 // 5551\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5552\n     * @returns {Array} Returns the new array of combined values.                                                      // 5553\n     * @example                                                                                                        // 5554\n     *                                                                                                                 // 5555\n     * _.union([1, 2], [4, 2], [2, 1]);                                                                                // 5556\n     * // => [1, 2, 4]                                                                                                 // 5557\n     */                                                                                                                // 5558\n    var union = restParam(function(arrays) {                                                                           // 5559\n      return baseUniq(baseFlatten(arrays, false, true));                                                               // 5560\n    });                                                                                                                // 5561\n                                                                                                                       // 5562\n    /**                                                                                                                // 5563\n     * Creates a duplicate-free version of an array, using                                                             // 5564\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5565\n     * for equality comparisons, in which only the first occurence of each element                                     // 5566\n     * is kept. Providing `true` for `isSorted` performs a faster search algorithm                                     // 5567\n     * for sorted arrays. If an iteratee function is provided it's invoked for                                         // 5568\n     * each element in the array to generate the criterion by which uniqueness                                         // 5569\n     * is computed. The `iteratee` is bound to `thisArg` and invoked with three                                        // 5570\n     * arguments: (value, index, array).                                                                               // 5571\n     *                                                                                                                 // 5572\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 5573\n     * style callback returns the property value of the given element.                                                 // 5574\n     *                                                                                                                 // 5575\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5576\n     * style callback returns `true` for elements that have a matching property                                        // 5577\n     * value, else `false`.                                                                                            // 5578\n     *                                                                                                                 // 5579\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5580\n     * callback returns `true` for elements that have the properties of the given                                      // 5581\n     * object, else `false`.                                                                                           // 5582\n     *                                                                                                                 // 5583\n     * @static                                                                                                         // 5584\n     * @memberOf _                                                                                                     // 5585\n     * @alias unique                                                                                                   // 5586\n     * @category Array                                                                                                 // 5587\n     * @param {Array} array The array to inspect.                                                                      // 5588\n     * @param {boolean} [isSorted] Specify the array is sorted.                                                        // 5589\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 5590\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5591\n     * @returns {Array} Returns the new duplicate-value-free array.                                                    // 5592\n     * @example                                                                                                        // 5593\n     *                                                                                                                 // 5594\n     * _.uniq([2, 1, 2]);                                                                                              // 5595\n     * // => [2, 1]                                                                                                    // 5596\n     *                                                                                                                 // 5597\n     * // using `isSorted`                                                                                             // 5598\n     * _.uniq([1, 1, 2], true);                                                                                        // 5599\n     * // => [1, 2]                                                                                                    // 5600\n     *                                                                                                                 // 5601\n     * // using an iteratee function                                                                                   // 5602\n     * _.uniq([1, 2.5, 1.5, 2], function(n) {                                                                          // 5603\n     *   return this.floor(n);                                                                                         // 5604\n     * }, Math);                                                                                                       // 5605\n     * // => [1, 2.5]                                                                                                  // 5606\n     *                                                                                                                 // 5607\n     * // using the `_.property` callback shorthand                                                                    // 5608\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                              // 5609\n     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 5610\n     */                                                                                                                // 5611\n    function uniq(array, isSorted, iteratee, thisArg) {                                                                // 5612\n      var length = array ? array.length : 0;                                                                           // 5613\n      if (!length) {                                                                                                   // 5614\n        return [];                                                                                                     // 5615\n      }                                                                                                                // 5616\n      if (isSorted != null && typeof isSorted != 'boolean') {                                                          // 5617\n        thisArg = iteratee;                                                                                            // 5618\n        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;                                    // 5619\n        isSorted = false;                                                                                              // 5620\n      }                                                                                                                // 5621\n      var callback = getCallback();                                                                                    // 5622\n      if (!(iteratee == null && callback === baseCallback)) {                                                          // 5623\n        iteratee = callback(iteratee, thisArg, 3);                                                                     // 5624\n      }                                                                                                                // 5625\n      return (isSorted && getIndexOf() === baseIndexOf)                                                                // 5626\n        ? sortedUniq(array, iteratee)                                                                                  // 5627\n        : baseUniq(array, iteratee);                                                                                   // 5628\n    }                                                                                                                  // 5629\n                                                                                                                       // 5630\n    /**                                                                                                                // 5631\n     * This method is like `_.zip` except that it accepts an array of grouped                                          // 5632\n     * elements and creates an array regrouping the elements to their pre-zip                                          // 5633\n     * configuration.                                                                                                  // 5634\n     *                                                                                                                 // 5635\n     * @static                                                                                                         // 5636\n     * @memberOf _                                                                                                     // 5637\n     * @category Array                                                                                                 // 5638\n     * @param {Array} array The array of grouped elements to process.                                                  // 5639\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5640\n     * @example                                                                                                        // 5641\n     *                                                                                                                 // 5642\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 5643\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5644\n     *                                                                                                                 // 5645\n     * _.unzip(zipped);                                                                                                // 5646\n     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 5647\n     */                                                                                                                // 5648\n    function unzip(array) {                                                                                            // 5649\n      if (!(array && array.length)) {                                                                                  // 5650\n        return [];                                                                                                     // 5651\n      }                                                                                                                // 5652\n      var index = -1,                                                                                                  // 5653\n          length = 0;                                                                                                  // 5654\n                                                                                                                       // 5655\n      array = arrayFilter(array, function(group) {                                                                     // 5656\n        if (isArrayLike(group)) {                                                                                      // 5657\n          length = nativeMax(group.length, length);                                                                    // 5658\n          return true;                                                                                                 // 5659\n        }                                                                                                              // 5660\n      });                                                                                                              // 5661\n      var result = Array(length);                                                                                      // 5662\n      while (++index < length) {                                                                                       // 5663\n        result[index] = arrayMap(array, baseProperty(index));                                                          // 5664\n      }                                                                                                                // 5665\n      return result;                                                                                                   // 5666\n    }                                                                                                                  // 5667\n                                                                                                                       // 5668\n    /**                                                                                                                // 5669\n     * This method is like `_.unzip` except that it accepts an iteratee to specify                                     // 5670\n     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`                                   // 5671\n     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5672\n     *                                                                                                                 // 5673\n     * @static                                                                                                         // 5674\n     * @memberOf _                                                                                                     // 5675\n     * @category Array                                                                                                 // 5676\n     * @param {Array} array The array of grouped elements to process.                                                  // 5677\n     * @param {Function} [iteratee] The function to combine regrouped values.                                          // 5678\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5679\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5680\n     * @example                                                                                                        // 5681\n     *                                                                                                                 // 5682\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 5683\n     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 5684\n     *                                                                                                                 // 5685\n     * _.unzipWith(zipped, _.add);                                                                                     // 5686\n     * // => [3, 30, 300]                                                                                              // 5687\n     */                                                                                                                // 5688\n    function unzipWith(array, iteratee, thisArg) {                                                                     // 5689\n      var length = array ? array.length : 0;                                                                           // 5690\n      if (!length) {                                                                                                   // 5691\n        return [];                                                                                                     // 5692\n      }                                                                                                                // 5693\n      var result = unzip(array);                                                                                       // 5694\n      if (iteratee == null) {                                                                                          // 5695\n        return result;                                                                                                 // 5696\n      }                                                                                                                // 5697\n      iteratee = bindCallback(iteratee, thisArg, 4);                                                                   // 5698\n      return arrayMap(result, function(group) {                                                                        // 5699\n        return arrayReduce(group, iteratee, undefined, true);                                                          // 5700\n      });                                                                                                              // 5701\n    }                                                                                                                  // 5702\n                                                                                                                       // 5703\n    /**                                                                                                                // 5704\n     * Creates an array excluding all provided values using                                                            // 5705\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5706\n     * for equality comparisons.                                                                                       // 5707\n     *                                                                                                                 // 5708\n     * @static                                                                                                         // 5709\n     * @memberOf _                                                                                                     // 5710\n     * @category Array                                                                                                 // 5711\n     * @param {Array} array The array to filter.                                                                       // 5712\n     * @param {...*} [values] The values to exclude.                                                                   // 5713\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5714\n     * @example                                                                                                        // 5715\n     *                                                                                                                 // 5716\n     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 5717\n     * // => [3]                                                                                                       // 5718\n     */                                                                                                                // 5719\n    var without = restParam(function(array, values) {                                                                  // 5720\n      return isArrayLike(array)                                                                                        // 5721\n        ? baseDifference(array, values)                                                                                // 5722\n        : [];                                                                                                          // 5723\n    });                                                                                                                // 5724\n                                                                                                                       // 5725\n    /**                                                                                                                // 5726\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the provided arrays.                                                                                         // 5728\n     *                                                                                                                 // 5729\n     * @static                                                                                                         // 5730\n     * @memberOf _                                                                                                     // 5731\n     * @category Array                                                                                                 // 5732\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5733\n     * @returns {Array} Returns the new array of values.                                                               // 5734\n     * @example                                                                                                        // 5735\n     *                                                                                                                 // 5736\n     * _.xor([1, 2], [4, 2]);                                                                                          // 5737\n     * // => [1, 4]                                                                                                    // 5738\n     */                                                                                                                // 5739\n    function xor() {                                                                                                   // 5740\n      var index = -1,                                                                                                  // 5741\n          length = arguments.length;                                                                                   // 5742\n                                                                                                                       // 5743\n      while (++index < length) {                                                                                       // 5744\n        var array = arguments[index];                                                                                  // 5745\n        if (isArrayLike(array)) {                                                                                      // 5746\n          var result = result                                                                                          // 5747\n            ? arrayPush(baseDifference(result, array), baseDifference(array, result))                                  // 5748\n            : array;                                                                                                   // 5749\n        }                                                                                                              // 5750\n      }                                                                                                                // 5751\n      return result ? baseUniq(result) : [];                                                                           // 5752\n    }                                                                                                                  // 5753\n                                                                                                                       // 5754\n    /**                                                                                                                // 5755\n     * Creates an array of grouped elements, the first of which contains the first                                     // 5756\n     * elements of the given arrays, the second of which contains the second elements                                  // 5757\n     * of the given arrays, and so on.                                                                                 // 5758\n     *                                                                                                                 // 5759\n     * @static                                                                                                         // 5760\n     * @memberOf _                                                                                                     // 5761\n     * @category Array                                                                                                 // 5762\n     * @param {...Array} [arrays] The arrays to process.                                                               // 5763\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 5764\n     * @example                                                                                                        // 5765\n     *                                                                                                                 // 5766\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 5767\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5768\n     */                                                                                                                // 5769\n    var zip = restParam(unzip);                                                                                        // 5770\n                                                                                                                       // 5771\n    /**                                                                                                                // 5772\n     * The inverse of `_.pairs`; this method returns an object composed from arrays                                    // 5773\n     * of property names and values. Provide either a single two dimensional array,                                    // 5774\n     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names                                    // 5775\n     * and one of corresponding values.                                                                                // 5776\n     *                                                                                                                 // 5777\n     * @static                                                                                                         // 5778\n     * @memberOf _                                                                                                     // 5779\n     * @alias object                                                                                                   // 5780\n     * @category Array                                                                                                 // 5781\n     * @param {Array} props The property names.                                                                        // 5782\n     * @param {Array} [values=[]] The property values.                                                                 // 5783\n     * @returns {Object} Returns the new object.                                                                       // 5784\n     * @example                                                                                                        // 5785\n     *                                                                                                                 // 5786\n     * _.zipObject([['fred', 30], ['barney', 40]]);                                                                    // 5787\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5788\n     *                                                                                                                 // 5789\n     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 5790\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5791\n     */                                                                                                                // 5792\n    function zipObject(props, values) {                                                                                // 5793\n      var index = -1,                                                                                                  // 5794\n          length = props ? props.length : 0,                                                                           // 5795\n          result = {};                                                                                                 // 5796\n                                                                                                                       // 5797\n      if (length && !values && !isArray(props[0])) {                                                                   // 5798\n        values = [];                                                                                                   // 5799\n      }                                                                                                                // 5800\n      while (++index < length) {                                                                                       // 5801\n        var key = props[index];                                                                                        // 5802\n        if (values) {                                                                                                  // 5803\n          result[key] = values[index];                                                                                 // 5804\n        } else if (key) {                                                                                              // 5805\n          result[key[0]] = key[1];                                                                                     // 5806\n        }                                                                                                              // 5807\n      }                                                                                                                // 5808\n      return result;                                                                                                   // 5809\n    }                                                                                                                  // 5810\n                                                                                                                       // 5811\n    /**                                                                                                                // 5812\n     * This method is like `_.zip` except that it accepts an iteratee to specify                                       // 5813\n     * how grouped values should be combined. The `iteratee` is bound to `thisArg`                                     // 5814\n     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5815\n     *                                                                                                                 // 5816\n     * @static                                                                                                         // 5817\n     * @memberOf _                                                                                                     // 5818\n     * @category Array                                                                                                 // 5819\n     * @param {...Array} [arrays] The arrays to process.                                                               // 5820\n     * @param {Function} [iteratee] The function to combine grouped values.                                            // 5821\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5822\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 5823\n     * @example                                                                                                        // 5824\n     *                                                                                                                 // 5825\n     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);                                                                 // 5826\n     * // => [111, 222]                                                                                                // 5827\n     */                                                                                                                // 5828\n    var zipWith = restParam(function(arrays) {                                                                         // 5829\n      var length = arrays.length,                                                                                      // 5830\n          iteratee = length > 2 ? arrays[length - 2] : undefined,                                                      // 5831\n          thisArg = length > 1 ? arrays[length - 1] : undefined;                                                       // 5832\n                                                                                                                       // 5833\n      if (length > 2 && typeof iteratee == 'function') {                                                               // 5834\n        length -= 2;                                                                                                   // 5835\n      } else {                                                                                                         // 5836\n        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;                     // 5837\n        thisArg = undefined;                                                                                           // 5838\n      }                                                                                                                // 5839\n      arrays.length = length;                                                                                          // 5840\n      return unzipWith(arrays, iteratee, thisArg);                                                                     // 5841\n    });                                                                                                                // 5842\n                                                                                                                       // 5843\n    /*------------------------------------------------------------------------*/                                       // 5844\n                                                                                                                       // 5845\n    /**                                                                                                                // 5846\n     * Creates a `lodash` object that wraps `value` with explicit method                                               // 5847\n     * chaining enabled.                                                                                               // 5848\n     *                                                                                                                 // 5849\n     * @static                                                                                                         // 5850\n     * @memberOf _                                                                                                     // 5851\n     * @category Chain                                                                                                 // 5852\n     * @param {*} value The value to wrap.                                                                             // 5853\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5854\n     * @example                                                                                                        // 5855\n     *                                                                                                                 // 5856\n     * var users = [                                                                                                   // 5857\n     *   { 'user': 'barney',  'age': 36 },                                                                             // 5858\n     *   { 'user': 'fred',    'age': 40 },                                                                             // 5859\n     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 5860\n     * ];                                                                                                              // 5861\n     *                                                                                                                 // 5862\n     * var youngest = _.chain(users)                                                                                   // 5863\n     *   .sortBy('age')                                                                                                // 5864\n     *   .map(function(chr) {                                                                                          // 5865\n     *     return chr.user + ' is ' + chr.age;                                                                         // 5866\n     *   })                                                                                                            // 5867\n     *   .first()                                                                                                      // 5868\n     *   .value();                                                                                                     // 5869\n     * // => 'pebbles is 1'                                                                                            // 5870\n     */                                                                                                                // 5871\n    function chain(value) {                                                                                            // 5872\n      var result = lodash(value);                                                                                      // 5873\n      result.__chain__ = true;                                                                                         // 5874\n      return result;                                                                                                   // 5875\n    }                                                                                                                  // 5876\n                                                                                                                       // 5877\n    /**                                                                                                                // 5878\n     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 5879\n     * bound to `thisArg` and invoked with one argument; (value). The purpose of                                       // 5880\n     * this method is to \"tap into\" a method chain in order to perform operations                                      // 5881\n     * on intermediate results within the chain.                                                                       // 5882\n     *                                                                                                                 // 5883\n     * @static                                                                                                         // 5884\n     * @memberOf _                                                                                                     // 5885\n     * @category Chain                                                                                                 // 5886\n     * @param {*} value The value to provide to `interceptor`.                                                         // 5887\n     * @param {Function} interceptor The function to invoke.                                                           // 5888\n     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 5889\n     * @returns {*} Returns `value`.                                                                                   // 5890\n     * @example                                                                                                        // 5891\n     *                                                                                                                 // 5892\n     * _([1, 2, 3])                                                                                                    // 5893\n     *  .tap(function(array) {                                                                                         // 5894\n     *    array.pop();                                                                                                 // 5895\n     *  })                                                                                                             // 5896\n     *  .reverse()                                                                                                     // 5897\n     *  .value();                                                                                                      // 5898\n     * // => [2, 1]                                                                                                    // 5899\n     */                                                                                                                // 5900\n    function tap(value, interceptor, thisArg) {                                                                        // 5901\n      interceptor.call(thisArg, value);                                                                                // 5902\n      return value;                                                                                                    // 5903\n    }                                                                                                                  // 5904\n                                                                                                                       // 5905\n    /**                                                                                                                // 5906\n     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 5907\n     *                                                                                                                 // 5908\n     * @static                                                                                                         // 5909\n     * @memberOf _                                                                                                     // 5910\n     * @category Chain                                                                                                 // 5911\n     * @param {*} value The value to provide to `interceptor`.                                                         // 5912\n     * @param {Function} interceptor The function to invoke.                                                           // 5913\n     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 5914\n     * @returns {*} Returns the result of `interceptor`.                                                               // 5915\n     * @example                                                                                                        // 5916\n     *                                                                                                                 // 5917\n     * _('  abc  ')                                                                                                    // 5918\n     *  .chain()                                                                                                       // 5919\n     *  .trim()                                                                                                        // 5920\n     *  .thru(function(value) {                                                                                        // 5921\n     *    return [value];                                                                                              // 5922\n     *  })                                                                                                             // 5923\n     *  .value();                                                                                                      // 5924\n     * // => ['abc']                                                                                                   // 5925\n     */                                                                                                                // 5926\n    function thru(value, interceptor, thisArg) {                                                                       // 5927\n      return interceptor.call(thisArg, value);                                                                         // 5928\n    }                                                                                                                  // 5929\n                                                                                                                       // 5930\n    /**                                                                                                                // 5931\n     * Enables explicit method chaining on the wrapper object.                                                         // 5932\n     *                                                                                                                 // 5933\n     * @name chain                                                                                                     // 5934\n     * @memberOf _                                                                                                     // 5935\n     * @category Chain                                                                                                 // 5936\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5937\n     * @example                                                                                                        // 5938\n     *                                                                                                                 // 5939\n     * var users = [                                                                                                   // 5940\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 5941\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 5942\n     * ];                                                                                                              // 5943\n     *                                                                                                                 // 5944\n     * // without explicit chaining                                                                                    // 5945\n     * _(users).first();                                                                                               // 5946\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 5947\n     *                                                                                                                 // 5948\n     * // with explicit chaining                                                                                       // 5949\n     * _(users).chain()                                                                                                // 5950\n     *   .first()                                                                                                      // 5951\n     *   .pick('user')                                                                                                 // 5952\n     *   .value();                                                                                                     // 5953\n     * // => { 'user': 'barney' }                                                                                      // 5954\n     */                                                                                                                // 5955\n    function wrapperChain() {                                                                                          // 5956\n      return chain(this);                                                                                              // 5957\n    }                                                                                                                  // 5958\n                                                                                                                       // 5959\n    /**                                                                                                                // 5960\n     * Executes the chained sequence and returns the wrapped result.                                                   // 5961\n     *                                                                                                                 // 5962\n     * @name commit                                                                                                    // 5963\n     * @memberOf _                                                                                                     // 5964\n     * @category Chain                                                                                                 // 5965\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5966\n     * @example                                                                                                        // 5967\n     *                                                                                                                 // 5968\n     * var array = [1, 2];                                                                                             // 5969\n     * var wrapped = _(array).push(3);                                                                                 // 5970\n     *                                                                                                                 // 5971\n     * console.log(array);                                                                                             // 5972\n     * // => [1, 2]                                                                                                    // 5973\n     *                                                                                                                 // 5974\n     * wrapped = wrapped.commit();                                                                                     // 5975\n     * console.log(array);                                                                                             // 5976\n     * // => [1, 2, 3]                                                                                                 // 5977\n     *                                                                                                                 // 5978\n     * wrapped.last();                                                                                                 // 5979\n     * // => 3                                                                                                         // 5980\n     *                                                                                                                 // 5981\n     * console.log(array);                                                                                             // 5982\n     * // => [1, 2, 3]                                                                                                 // 5983\n     */                                                                                                                // 5984\n    function wrapperCommit() {                                                                                         // 5985\n      return new LodashWrapper(this.value(), this.__chain__);                                                          // 5986\n    }                                                                                                                  // 5987\n                                                                                                                       // 5988\n    /**                                                                                                                // 5989\n     * Creates a new array joining a wrapped array with any additional arrays                                          // 5990\n     * and/or values.                                                                                                  // 5991\n     *                                                                                                                 // 5992\n     * @name concat                                                                                                    // 5993\n     * @memberOf _                                                                                                     // 5994\n     * @category Chain                                                                                                 // 5995\n     * @param {...*} [values] The values to concatenate.                                                               // 5996\n     * @returns {Array} Returns the new concatenated array.                                                            // 5997\n     * @example                                                                                                        // 5998\n     *                                                                                                                 // 5999\n     * var array = [1];                                                                                                // 6000\n     * var wrapped = _(array).concat(2, [3], [[4]]);                                                                   // 6001\n     *                                                                                                                 // 6002\n     * console.log(wrapped.value());                                                                                   // 6003\n     * // => [1, 2, 3, [4]]                                                                                            // 6004\n     *                                                                                                                 // 6005\n     * console.log(array);                                                                                             // 6006\n     * // => [1]                                                                                                       // 6007\n     */                                                                                                                // 6008\n    var wrapperConcat = restParam(function(values) {                                                                   // 6009\n      values = baseFlatten(values);                                                                                    // 6010\n      return this.thru(function(array) {                                                                               // 6011\n        return arrayConcat(isArray(array) ? array : [toObject(array)], values);                                        // 6012\n      });                                                                                                              // 6013\n    });                                                                                                                // 6014\n                                                                                                                       // 6015\n    /**                                                                                                                // 6016\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 6017\n     *                                                                                                                 // 6018\n     * @name plant                                                                                                     // 6019\n     * @memberOf _                                                                                                     // 6020\n     * @category Chain                                                                                                 // 6021\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6022\n     * @example                                                                                                        // 6023\n     *                                                                                                                 // 6024\n     * var array = [1, 2];                                                                                             // 6025\n     * var wrapped = _(array).map(function(value) {                                                                    // 6026\n     *   return Math.pow(value, 2);                                                                                    // 6027\n     * });                                                                                                             // 6028\n     *                                                                                                                 // 6029\n     * var other = [3, 4];                                                                                             // 6030\n     * var otherWrapped = wrapped.plant(other);                                                                        // 6031\n     *                                                                                                                 // 6032\n     * otherWrapped.value();                                                                                           // 6033\n     * // => [9, 16]                                                                                                   // 6034\n     *                                                                                                                 // 6035\n     * wrapped.value();                                                                                                // 6036\n     * // => [1, 4]                                                                                                    // 6037\n     */                                                                                                                // 6038\n    function wrapperPlant(value) {                                                                                     // 6039\n      var result,                                                                                                      // 6040\n          parent = this;                                                                                               // 6041\n                                                                                                                       // 6042\n      while (parent instanceof baseLodash) {                                                                           // 6043\n        var clone = wrapperClone(parent);                                                                              // 6044\n        if (result) {                                                                                                  // 6045\n          previous.__wrapped__ = clone;                                                                                // 6046\n        } else {                                                                                                       // 6047\n          result = clone;                                                                                              // 6048\n        }                                                                                                              // 6049\n        var previous = clone;                                                                                          // 6050\n        parent = parent.__wrapped__;                                                                                   // 6051\n      }                                                                                                                // 6052\n      previous.__wrapped__ = value;                                                                                    // 6053\n      return result;                                                                                                   // 6054\n    }                                                                                                                  // 6055\n                                                                                                                       // 6056\n    /**                                                                                                                // 6057\n     * Reverses the wrapped array so the first element becomes the last, the                                           // 6058\n     * second element becomes the second to last, and so on.                                                           // 6059\n     *                                                                                                                 // 6060\n     * **Note:** This method mutates the wrapped array.                                                                // 6061\n     *                                                                                                                 // 6062\n     * @name reverse                                                                                                   // 6063\n     * @memberOf _                                                                                                     // 6064\n     * @category Chain                                                                                                 // 6065\n     * @returns {Object} Returns the new reversed `lodash` wrapper instance.                                           // 6066\n     * @example                                                                                                        // 6067\n     *                                                                                                                 // 6068\n     * var array = [1, 2, 3];                                                                                          // 6069\n     *                                                                                                                 // 6070\n     * _(array).reverse().value()                                                                                      // 6071\n     * // => [3, 2, 1]                                                                                                 // 6072\n     *                                                                                                                 // 6073\n     * console.log(array);                                                                                             // 6074\n     * // => [3, 2, 1]                                                                                                 // 6075\n     */                                                                                                                // 6076\n    function wrapperReverse() {                                                                                        // 6077\n      var value = this.__wrapped__;                                                                                    // 6078\n                                                                                                                       // 6079\n      var interceptor = function(value) {                                                                              // 6080\n        return value.reverse();                                                                                        // 6081\n      };                                                                                                               // 6082\n      if (value instanceof LazyWrapper) {                                                                              // 6083\n        var wrapped = value;                                                                                           // 6084\n        if (this.__actions__.length) {                                                                                 // 6085\n          wrapped = new LazyWrapper(this);                                                                             // 6086\n        }                                                                                                              // 6087\n        wrapped = wrapped.reverse();                                                                                   // 6088\n        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                       // 6089\n        return new LodashWrapper(wrapped, this.__chain__);                                                             // 6090\n      }                                                                                                                // 6091\n      return this.thru(interceptor);                                                                                   // 6092\n    }                                                                                                                  // 6093\n                                                                                                                       // 6094\n    /**                                                                                                                // 6095\n     * Produces the result of coercing the unwrapped value to a string.                                                // 6096\n     *                                                                                                                 // 6097\n     * @name toString                                                                                                  // 6098\n     * @memberOf _                                                                                                     // 6099\n     * @category Chain                                                                                                 // 6100\n     * @returns {string} Returns the coerced string value.                                                             // 6101\n     * @example                                                                                                        // 6102\n     *                                                                                                                 // 6103\n     * _([1, 2, 3]).toString();                                                                                        // 6104\n     * // => '1,2,3'                                                                                                   // 6105\n     */                                                                                                                // 6106\n    function wrapperToString() {                                                                                       // 6107\n      return (this.value() + '');                                                                                      // 6108\n    }                                                                                                                  // 6109\n                                                                                                                       // 6110\n    /**                                                                                                                // 6111\n     * Executes the chained sequence to extract the unwrapped value.                                                   // 6112\n     *                                                                                                                 // 6113\n     * @name value                                                                                                     // 6114\n     * @memberOf _                                                                                                     // 6115\n     * @alias run, toJSON, valueOf                                                                                     // 6116\n     * @category Chain                                                                                                 // 6117\n     * @returns {*} Returns the resolved unwrapped value.                                                              // 6118\n     * @example                                                                                                        // 6119\n     *                                                                                                                 // 6120\n     * _([1, 2, 3]).value();                                                                                           // 6121\n     * // => [1, 2, 3]                                                                                                 // 6122\n     */                                                                                                                // 6123\n    function wrapperValue() {                                                                                          // 6124\n      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 6125\n    }                                                                                                                  // 6126\n                                                                                                                       // 6127\n    /*------------------------------------------------------------------------*/                                       // 6128\n                                                                                                                       // 6129\n    /**                                                                                                                // 6130\n     * Creates an array of elements corresponding to the given keys, or indexes,                                       // 6131\n     * of `collection`. Keys may be specified as individual arguments or as arrays                                     // 6132\n     * of keys.                                                                                                        // 6133\n     *                                                                                                                 // 6134\n     * @static                                                                                                         // 6135\n     * @memberOf _                                                                                                     // 6136\n     * @category Collection                                                                                            // 6137\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6138\n     * @param {...(number|number[]|string|string[])} [props] The property names                                        // 6139\n     *  or indexes of elements to pick, specified individually or in arrays.                                           // 6140\n     * @returns {Array} Returns the new array of picked elements.                                                      // 6141\n     * @example                                                                                                        // 6142\n     *                                                                                                                 // 6143\n     * _.at(['a', 'b', 'c'], [0, 2]);                                                                                  // 6144\n     * // => ['a', 'c']                                                                                                // 6145\n     *                                                                                                                 // 6146\n     * _.at(['barney', 'fred', 'pebbles'], 0, 2);                                                                      // 6147\n     * // => ['barney', 'pebbles']                                                                                     // 6148\n     */                                                                                                                // 6149\n    var at = restParam(function(collection, props) {                                                                   // 6150\n      return baseAt(collection, baseFlatten(props));                                                                   // 6151\n    });                                                                                                                // 6152\n                                                                                                                       // 6153\n    /**                                                                                                                // 6154\n     * Creates an object composed of keys generated from the results of running                                        // 6155\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6156\n     * of each key is the number of times the key was returned by `iteratee`.                                          // 6157\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6158\n     * (value, index|key, collection).                                                                                 // 6159\n     *                                                                                                                 // 6160\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6161\n     * style callback returns the property value of the given element.                                                 // 6162\n     *                                                                                                                 // 6163\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6164\n     * style callback returns `true` for elements that have a matching property                                        // 6165\n     * value, else `false`.                                                                                            // 6166\n     *                                                                                                                 // 6167\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6168\n     * callback returns `true` for elements that have the properties of the given                                      // 6169\n     * object, else `false`.                                                                                           // 6170\n     *                                                                                                                 // 6171\n     * @static                                                                                                         // 6172\n     * @memberOf _                                                                                                     // 6173\n     * @category Collection                                                                                            // 6174\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6175\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6176\n     *  per iteration.                                                                                                 // 6177\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6178\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6179\n     * @example                                                                                                        // 6180\n     *                                                                                                                 // 6181\n     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6182\n     *   return Math.floor(n);                                                                                         // 6183\n     * });                                                                                                             // 6184\n     * // => { '4': 1, '6': 2 }                                                                                        // 6185\n     *                                                                                                                 // 6186\n     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6187\n     *   return this.floor(n);                                                                                         // 6188\n     * }, Math);                                                                                                       // 6189\n     * // => { '4': 1, '6': 2 }                                                                                        // 6190\n     *                                                                                                                 // 6191\n     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 6192\n     * // => { '3': 2, '5': 1 }                                                                                        // 6193\n     */                                                                                                                // 6194\n    var countBy = createAggregator(function(result, value, key) {                                                      // 6195\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 6196\n    });                                                                                                                // 6197\n                                                                                                                       // 6198\n    /**                                                                                                                // 6199\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 6200\n     * The predicate is bound to `thisArg` and invoked with three arguments:                                           // 6201\n     * (value, index|key, collection).                                                                                 // 6202\n     *                                                                                                                 // 6203\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6204\n     * style callback returns the property value of the given element.                                                 // 6205\n     *                                                                                                                 // 6206\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6207\n     * style callback returns `true` for elements that have a matching property                                        // 6208\n     * value, else `false`.                                                                                            // 6209\n     *                                                                                                                 // 6210\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6211\n     * callback returns `true` for elements that have the properties of the given                                      // 6212\n     * object, else `false`.                                                                                           // 6213\n     *                                                                                                                 // 6214\n     * @static                                                                                                         // 6215\n     * @memberOf _                                                                                                     // 6216\n     * @alias all                                                                                                      // 6217\n     * @category Collection                                                                                            // 6218\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6219\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6220\n     *  per iteration.                                                                                                 // 6221\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6222\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 6223\n     *  else `false`.                                                                                                  // 6224\n     * @example                                                                                                        // 6225\n     *                                                                                                                 // 6226\n     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 6227\n     * // => false                                                                                                     // 6228\n     *                                                                                                                 // 6229\n     * var users = [                                                                                                   // 6230\n     *   { 'user': 'barney', 'active': false },                                                                        // 6231\n     *   { 'user': 'fred',   'active': false }                                                                         // 6232\n     * ];                                                                                                              // 6233\n     *                                                                                                                 // 6234\n     * // using the `_.matches` callback shorthand                                                                     // 6235\n     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 6236\n     * // => false                                                                                                     // 6237\n     *                                                                                                                 // 6238\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6239\n     * _.every(users, 'active', false);                                                                                // 6240\n     * // => true                                                                                                      // 6241\n     *                                                                                                                 // 6242\n     * // using the `_.property` callback shorthand                                                                    // 6243\n     * _.every(users, 'active');                                                                                       // 6244\n     * // => false                                                                                                     // 6245\n     */                                                                                                                // 6246\n    function every(collection, predicate, thisArg) {                                                                   // 6247\n      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 6248\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 6249\n        predicate = undefined;                                                                                         // 6250\n      }                                                                                                                // 6251\n      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 6252\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 6253\n      }                                                                                                                // 6254\n      return func(collection, predicate);                                                                              // 6255\n    }                                                                                                                  // 6256\n                                                                                                                       // 6257\n    /**                                                                                                                // 6258\n     * Iterates over elements of `collection`, returning an array of all elements                                      // 6259\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6260\n     * invoked with three arguments: (value, index|key, collection).                                                   // 6261\n     *                                                                                                                 // 6262\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6263\n     * style callback returns the property value of the given element.                                                 // 6264\n     *                                                                                                                 // 6265\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6266\n     * style callback returns `true` for elements that have a matching property                                        // 6267\n     * value, else `false`.                                                                                            // 6268\n     *                                                                                                                 // 6269\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6270\n     * callback returns `true` for elements that have the properties of the given                                      // 6271\n     * object, else `false`.                                                                                           // 6272\n     *                                                                                                                 // 6273\n     * @static                                                                                                         // 6274\n     * @memberOf _                                                                                                     // 6275\n     * @alias select                                                                                                   // 6276\n     * @category Collection                                                                                            // 6277\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6278\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6279\n     *  per iteration.                                                                                                 // 6280\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6281\n     * @returns {Array} Returns the new filtered array.                                                                // 6282\n     * @example                                                                                                        // 6283\n     *                                                                                                                 // 6284\n     * _.filter([4, 5, 6], function(n) {                                                                               // 6285\n     *   return n % 2 == 0;                                                                                            // 6286\n     * });                                                                                                             // 6287\n     * // => [4, 6]                                                                                                    // 6288\n     *                                                                                                                 // 6289\n     * var users = [                                                                                                   // 6290\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6291\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6292\n     * ];                                                                                                              // 6293\n     *                                                                                                                 // 6294\n     * // using the `_.matches` callback shorthand                                                                     // 6295\n     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');                                                // 6296\n     * // => ['barney']                                                                                                // 6297\n     *                                                                                                                 // 6298\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6299\n     * _.pluck(_.filter(users, 'active', false), 'user');                                                              // 6300\n     * // => ['fred']                                                                                                  // 6301\n     *                                                                                                                 // 6302\n     * // using the `_.property` callback shorthand                                                                    // 6303\n     * _.pluck(_.filter(users, 'active'), 'user');                                                                     // 6304\n     * // => ['barney']                                                                                                // 6305\n     */                                                                                                                // 6306\n    function filter(collection, predicate, thisArg) {                                                                  // 6307\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6308\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6309\n      return func(collection, predicate);                                                                              // 6310\n    }                                                                                                                  // 6311\n                                                                                                                       // 6312\n    /**                                                                                                                // 6313\n     * Iterates over elements of `collection`, returning the first element                                             // 6314\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6315\n     * invoked with three arguments: (value, index|key, collection).                                                   // 6316\n     *                                                                                                                 // 6317\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6318\n     * style callback returns the property value of the given element.                                                 // 6319\n     *                                                                                                                 // 6320\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6321\n     * style callback returns `true` for elements that have a matching property                                        // 6322\n     * value, else `false`.                                                                                            // 6323\n     *                                                                                                                 // 6324\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6325\n     * callback returns `true` for elements that have the properties of the given                                      // 6326\n     * object, else `false`.                                                                                           // 6327\n     *                                                                                                                 // 6328\n     * @static                                                                                                         // 6329\n     * @memberOf _                                                                                                     // 6330\n     * @alias detect                                                                                                   // 6331\n     * @category Collection                                                                                            // 6332\n     * @param {Array|Object|string} collection The collection to search.                                               // 6333\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6334\n     *  per iteration.                                                                                                 // 6335\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6336\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6337\n     * @example                                                                                                        // 6338\n     *                                                                                                                 // 6339\n     * var users = [                                                                                                   // 6340\n     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 6341\n     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 6342\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 6343\n     * ];                                                                                                              // 6344\n     *                                                                                                                 // 6345\n     * _.result(_.find(users, function(chr) {                                                                          // 6346\n     *   return chr.age < 40;                                                                                          // 6347\n     * }), 'user');                                                                                                    // 6348\n     * // => 'barney'                                                                                                  // 6349\n     *                                                                                                                 // 6350\n     * // using the `_.matches` callback shorthand                                                                     // 6351\n     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');                                                  // 6352\n     * // => 'pebbles'                                                                                                 // 6353\n     *                                                                                                                 // 6354\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6355\n     * _.result(_.find(users, 'active', false), 'user');                                                               // 6356\n     * // => 'fred'                                                                                                    // 6357\n     *                                                                                                                 // 6358\n     * // using the `_.property` callback shorthand                                                                    // 6359\n     * _.result(_.find(users, 'active'), 'user');                                                                      // 6360\n     * // => 'barney'                                                                                                  // 6361\n     */                                                                                                                // 6362\n    var find = createFind(baseEach);                                                                                   // 6363\n                                                                                                                       // 6364\n    /**                                                                                                                // 6365\n     * This method is like `_.find` except that it iterates over elements of                                           // 6366\n     * `collection` from right to left.                                                                                // 6367\n     *                                                                                                                 // 6368\n     * @static                                                                                                         // 6369\n     * @memberOf _                                                                                                     // 6370\n     * @category Collection                                                                                            // 6371\n     * @param {Array|Object|string} collection The collection to search.                                               // 6372\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6373\n     *  per iteration.                                                                                                 // 6374\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6375\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6376\n     * @example                                                                                                        // 6377\n     *                                                                                                                 // 6378\n     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 6379\n     *   return n % 2 == 1;                                                                                            // 6380\n     * });                                                                                                             // 6381\n     * // => 3                                                                                                         // 6382\n     */                                                                                                                // 6383\n    var findLast = createFind(baseEachRight, true);                                                                    // 6384\n                                                                                                                       // 6385\n    /**                                                                                                                // 6386\n     * Performs a deep comparison between each element in `collection` and the                                         // 6387\n     * source object, returning the first element that has equivalent property                                         // 6388\n     * values.                                                                                                         // 6389\n     *                                                                                                                 // 6390\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 6391\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 6392\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 6393\n     * own or inherited property value see `_.matchesProperty`.                                                        // 6394\n     *                                                                                                                 // 6395\n     * @static                                                                                                         // 6396\n     * @memberOf _                                                                                                     // 6397\n     * @category Collection                                                                                            // 6398\n     * @param {Array|Object|string} collection The collection to search.                                               // 6399\n     * @param {Object} source The object of property values to match.                                                  // 6400\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6401\n     * @example                                                                                                        // 6402\n     *                                                                                                                 // 6403\n     * var users = [                                                                                                   // 6404\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6405\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6406\n     * ];                                                                                                              // 6407\n     *                                                                                                                 // 6408\n     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');                                            // 6409\n     * // => 'barney'                                                                                                  // 6410\n     *                                                                                                                 // 6411\n     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');                                           // 6412\n     * // => 'fred'                                                                                                    // 6413\n     */                                                                                                                // 6414\n    function findWhere(collection, source) {                                                                           // 6415\n      return find(collection, baseMatches(source));                                                                    // 6416\n    }                                                                                                                  // 6417\n                                                                                                                       // 6418\n    /**                                                                                                                // 6419\n     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 6420\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6421\n     * (value, index|key, collection). Iteratee functions may exit iteration early                                     // 6422\n     * by explicitly returning `false`.                                                                                // 6423\n     *                                                                                                                 // 6424\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property                                 // 6425\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`                                        // 6426\n     * may be used for object iteration.                                                                               // 6427\n     *                                                                                                                 // 6428\n     * @static                                                                                                         // 6429\n     * @memberOf _                                                                                                     // 6430\n     * @alias each                                                                                                     // 6431\n     * @category Collection                                                                                            // 6432\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6433\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6434\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6435\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 6436\n     * @example                                                                                                        // 6437\n     *                                                                                                                 // 6438\n     * _([1, 2]).forEach(function(n) {                                                                                 // 6439\n     *   console.log(n);                                                                                               // 6440\n     * }).value();                                                                                                     // 6441\n     * // => logs each value from left to right and returns the array                                                  // 6442\n     *                                                                                                                 // 6443\n     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {                                                                // 6444\n     *   console.log(n, key);                                                                                          // 6445\n     * });                                                                                                             // 6446\n     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)                       // 6447\n     */                                                                                                                // 6448\n    var forEach = createForEach(arrayEach, baseEach);                                                                  // 6449\n                                                                                                                       // 6450\n    /**                                                                                                                // 6451\n     * This method is like `_.forEach` except that it iterates over elements of                                        // 6452\n     * `collection` from right to left.                                                                                // 6453\n     *                                                                                                                 // 6454\n     * @static                                                                                                         // 6455\n     * @memberOf _                                                                                                     // 6456\n     * @alias eachRight                                                                                                // 6457\n     * @category Collection                                                                                            // 6458\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6459\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6460\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6461\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 6462\n     * @example                                                                                                        // 6463\n     *                                                                                                                 // 6464\n     * _([1, 2]).forEachRight(function(n) {                                                                            // 6465\n     *   console.log(n);                                                                                               // 6466\n     * }).value();                                                                                                     // 6467\n     * // => logs each value from right to left and returns the array                                                  // 6468\n     */                                                                                                                // 6469\n    var forEachRight = createForEach(arrayEachRight, baseEachRight);                                                   // 6470\n                                                                                                                       // 6471\n    /**                                                                                                                // 6472\n     * Creates an object composed of keys generated from the results of running                                        // 6473\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6474\n     * of each key is an array of the elements responsible for generating the key.                                     // 6475\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6476\n     * (value, index|key, collection).                                                                                 // 6477\n     *                                                                                                                 // 6478\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6479\n     * style callback returns the property value of the given element.                                                 // 6480\n     *                                                                                                                 // 6481\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6482\n     * style callback returns `true` for elements that have a matching property                                        // 6483\n     * value, else `false`.                                                                                            // 6484\n     *                                                                                                                 // 6485\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6486\n     * callback returns `true` for elements that have the properties of the given                                      // 6487\n     * object, else `false`.                                                                                           // 6488\n     *                                                                                                                 // 6489\n     * @static                                                                                                         // 6490\n     * @memberOf _                                                                                                     // 6491\n     * @category Collection                                                                                            // 6492\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6493\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6494\n     *  per iteration.                                                                                                 // 6495\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6496\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6497\n     * @example                                                                                                        // 6498\n     *                                                                                                                 // 6499\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6500\n     *   return Math.floor(n);                                                                                         // 6501\n     * });                                                                                                             // 6502\n     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6503\n     *                                                                                                                 // 6504\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6505\n     *   return this.floor(n);                                                                                         // 6506\n     * }, Math);                                                                                                       // 6507\n     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6508\n     *                                                                                                                 // 6509\n     * // using the `_.property` callback shorthand                                                                    // 6510\n     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 6511\n     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 6512\n     */                                                                                                                // 6513\n    var groupBy = createAggregator(function(result, value, key) {                                                      // 6514\n      if (hasOwnProperty.call(result, key)) {                                                                          // 6515\n        result[key].push(value);                                                                                       // 6516\n      } else {                                                                                                         // 6517\n        result[key] = [value];                                                                                         // 6518\n      }                                                                                                                // 6519\n    });                                                                                                                // 6520\n                                                                                                                       // 6521\n    /**                                                                                                                // 6522\n     * Checks if `target` is in `collection` using                                                                     // 6523\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6524\n     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 6525\n     * from the end of `collection`.                                                                                   // 6526\n     *                                                                                                                 // 6527\n     * @static                                                                                                         // 6528\n     * @memberOf _                                                                                                     // 6529\n     * @alias contains, include                                                                                        // 6530\n     * @category Collection                                                                                            // 6531\n     * @param {Array|Object|string} collection The collection to search.                                               // 6532\n     * @param {*} target The value to search for.                                                                      // 6533\n     * @param {number} [fromIndex=0] The index to search from.                                                         // 6534\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 6535\n     * @returns {boolean} Returns `true` if a matching element is found, else `false`.                                 // 6536\n     * @example                                                                                                        // 6537\n     *                                                                                                                 // 6538\n     * _.includes([1, 2, 3], 1);                                                                                       // 6539\n     * // => true                                                                                                      // 6540\n     *                                                                                                                 // 6541\n     * _.includes([1, 2, 3], 1, 2);                                                                                    // 6542\n     * // => false                                                                                                     // 6543\n     *                                                                                                                 // 6544\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 6545\n     * // => true                                                                                                      // 6546\n     *                                                                                                                 // 6547\n     * _.includes('pebbles', 'eb');                                                                                    // 6548\n     * // => true                                                                                                      // 6549\n     */                                                                                                                // 6550\n    function includes(collection, target, fromIndex, guard) {                                                          // 6551\n      var length = collection ? getLength(collection) : 0;                                                             // 6552\n      if (!isLength(length)) {                                                                                         // 6553\n        collection = values(collection);                                                                               // 6554\n        length = collection.length;                                                                                    // 6555\n      }                                                                                                                // 6556\n      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {                       // 6557\n        fromIndex = 0;                                                                                                 // 6558\n      } else {                                                                                                         // 6559\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);                               // 6560\n      }                                                                                                                // 6561\n      return (typeof collection == 'string' || !isArray(collection) && isString(collection))                           // 6562\n        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)                                          // 6563\n        : (!!length && getIndexOf(collection, target, fromIndex) > -1);                                                // 6564\n    }                                                                                                                  // 6565\n                                                                                                                       // 6566\n    /**                                                                                                                // 6567\n     * Creates an object composed of keys generated from the results of running                                        // 6568\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6569\n     * of each key is the last element responsible for generating the key. The                                         // 6570\n     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 6571\n     * (value, index|key, collection).                                                                                 // 6572\n     *                                                                                                                 // 6573\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6574\n     * style callback returns the property value of the given element.                                                 // 6575\n     *                                                                                                                 // 6576\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6577\n     * style callback returns `true` for elements that have a matching property                                        // 6578\n     * value, else `false`.                                                                                            // 6579\n     *                                                                                                                 // 6580\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6581\n     * callback returns `true` for elements that have the properties of the given                                      // 6582\n     * object, else `false`.                                                                                           // 6583\n     *                                                                                                                 // 6584\n     * @static                                                                                                         // 6585\n     * @memberOf _                                                                                                     // 6586\n     * @category Collection                                                                                            // 6587\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6588\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6589\n     *  per iteration.                                                                                                 // 6590\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6591\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6592\n     * @example                                                                                                        // 6593\n     *                                                                                                                 // 6594\n     * var keyData = [                                                                                                 // 6595\n     *   { 'dir': 'left', 'code': 97 },                                                                                // 6596\n     *   { 'dir': 'right', 'code': 100 }                                                                               // 6597\n     * ];                                                                                                              // 6598\n     *                                                                                                                 // 6599\n     * _.indexBy(keyData, 'dir');                                                                                      // 6600\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 6601\n     *                                                                                                                 // 6602\n     * _.indexBy(keyData, function(object) {                                                                           // 6603\n     *   return String.fromCharCode(object.code);                                                                      // 6604\n     * });                                                                                                             // 6605\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6606\n     *                                                                                                                 // 6607\n     * _.indexBy(keyData, function(object) {                                                                           // 6608\n     *   return this.fromCharCode(object.code);                                                                        // 6609\n     * }, String);                                                                                                     // 6610\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6611\n     */                                                                                                                // 6612\n    var indexBy = createAggregator(function(result, value, key) {                                                      // 6613\n      result[key] = value;                                                                                             // 6614\n    });                                                                                                                // 6615\n                                                                                                                       // 6616\n    /**                                                                                                                // 6617\n     * Invokes the method at `path` of each element in `collection`, returning                                         // 6618\n     * an array of the results of each invoked method. Any additional arguments                                        // 6619\n     * are provided to each invoked method. If `methodName` is a function it's                                         // 6620\n     * invoked for, and `this` bound to, each element in `collection`.                                                 // 6621\n     *                                                                                                                 // 6622\n     * @static                                                                                                         // 6623\n     * @memberOf _                                                                                                     // 6624\n     * @category Collection                                                                                            // 6625\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6626\n     * @param {Array|Function|string} path The path of the method to invoke or                                         // 6627\n     *  the function invoked per iteration.                                                                            // 6628\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 6629\n     * @returns {Array} Returns the array of results.                                                                  // 6630\n     * @example                                                                                                        // 6631\n     *                                                                                                                 // 6632\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');                                                                       // 6633\n     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 6634\n     *                                                                                                                 // 6635\n     * _.invoke([123, 456], String.prototype.split, '');                                                               // 6636\n     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 6637\n     */                                                                                                                // 6638\n    var invoke = restParam(function(collection, path, args) {                                                          // 6639\n      var index = -1,                                                                                                  // 6640\n          isFunc = typeof path == 'function',                                                                          // 6641\n          isProp = isKey(path),                                                                                        // 6642\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 6643\n                                                                                                                       // 6644\n      baseEach(collection, function(value) {                                                                           // 6645\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 6646\n        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);                              // 6647\n      });                                                                                                              // 6648\n      return result;                                                                                                   // 6649\n    });                                                                                                                // 6650\n                                                                                                                       // 6651\n    /**                                                                                                                // 6652\n     * Creates an array of values by running each element in `collection` through                                      // 6653\n     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three                                         // 6654\n     * arguments: (value, index|key, collection).                                                                      // 6655\n     *                                                                                                                 // 6656\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6657\n     * style callback returns the property value of the given element.                                                 // 6658\n     *                                                                                                                 // 6659\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6660\n     * style callback returns `true` for elements that have a matching property                                        // 6661\n     * value, else `false`.                                                                                            // 6662\n     *                                                                                                                 // 6663\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6664\n     * callback returns `true` for elements that have the properties of the given                                      // 6665\n     * object, else `false`.                                                                                           // 6666\n     *                                                                                                                 // 6667\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6668\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 6669\n     *                                                                                                                 // 6670\n     * The guarded methods are:                                                                                        // 6671\n     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,                                           // 6672\n     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,                                        // 6673\n     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,                                         // 6674\n     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,                                          // 6675\n     * `sum`, `uniq`, and `words`                                                                                      // 6676\n     *                                                                                                                 // 6677\n     * @static                                                                                                         // 6678\n     * @memberOf _                                                                                                     // 6679\n     * @alias collect                                                                                                  // 6680\n     * @category Collection                                                                                            // 6681\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6682\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6683\n     *  per iteration.                                                                                                 // 6684\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6685\n     * @returns {Array} Returns the new mapped array.                                                                  // 6686\n     * @example                                                                                                        // 6687\n     *                                                                                                                 // 6688\n     * function timesThree(n) {                                                                                        // 6689\n     *   return n * 3;                                                                                                 // 6690\n     * }                                                                                                               // 6691\n     *                                                                                                                 // 6692\n     * _.map([1, 2], timesThree);                                                                                      // 6693\n     * // => [3, 6]                                                                                                    // 6694\n     *                                                                                                                 // 6695\n     * _.map({ 'a': 1, 'b': 2 }, timesThree);                                                                          // 6696\n     * // => [3, 6] (iteration order is not guaranteed)                                                                // 6697\n     *                                                                                                                 // 6698\n     * var users = [                                                                                                   // 6699\n     *   { 'user': 'barney' },                                                                                         // 6700\n     *   { 'user': 'fred' }                                                                                            // 6701\n     * ];                                                                                                              // 6702\n     *                                                                                                                 // 6703\n     * // using the `_.property` callback shorthand                                                                    // 6704\n     * _.map(users, 'user');                                                                                           // 6705\n     * // => ['barney', 'fred']                                                                                        // 6706\n     */                                                                                                                // 6707\n    function map(collection, iteratee, thisArg) {                                                                      // 6708\n      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 6709\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 6710\n      return func(collection, iteratee);                                                                               // 6711\n    }                                                                                                                  // 6712\n                                                                                                                       // 6713\n    /**                                                                                                                // 6714\n     * Creates an array of elements split into two groups, the first of which                                          // 6715\n     * contains elements `predicate` returns truthy for, while the second of which                                     // 6716\n     * contains elements `predicate` returns falsey for. The predicate is bound                                        // 6717\n     * to `thisArg` and invoked with three arguments: (value, index|key, collection).                                  // 6718\n     *                                                                                                                 // 6719\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6720\n     * style callback returns the property value of the given element.                                                 // 6721\n     *                                                                                                                 // 6722\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6723\n     * style callback returns `true` for elements that have a matching property                                        // 6724\n     * value, else `false`.                                                                                            // 6725\n     *                                                                                                                 // 6726\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6727\n     * callback returns `true` for elements that have the properties of the given                                      // 6728\n     * object, else `false`.                                                                                           // 6729\n     *                                                                                                                 // 6730\n     * @static                                                                                                         // 6731\n     * @memberOf _                                                                                                     // 6732\n     * @category Collection                                                                                            // 6733\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6734\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6735\n     *  per iteration.                                                                                                 // 6736\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6737\n     * @returns {Array} Returns the array of grouped elements.                                                         // 6738\n     * @example                                                                                                        // 6739\n     *                                                                                                                 // 6740\n     * _.partition([1, 2, 3], function(n) {                                                                            // 6741\n     *   return n % 2;                                                                                                 // 6742\n     * });                                                                                                             // 6743\n     * // => [[1, 3], [2]]                                                                                             // 6744\n     *                                                                                                                 // 6745\n     * _.partition([1.2, 2.3, 3.4], function(n) {                                                                      // 6746\n     *   return this.floor(n) % 2;                                                                                     // 6747\n     * }, Math);                                                                                                       // 6748\n     * // => [[1.2, 3.4], [2.3]]                                                                                       // 6749\n     *                                                                                                                 // 6750\n     * var users = [                                                                                                   // 6751\n     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 6752\n     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 6753\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 6754\n     * ];                                                                                                              // 6755\n     *                                                                                                                 // 6756\n     * var mapper = function(array) {                                                                                  // 6757\n     *   return _.pluck(array, 'user');                                                                                // 6758\n     * };                                                                                                              // 6759\n     *                                                                                                                 // 6760\n     * // using the `_.matches` callback shorthand                                                                     // 6761\n     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);                                               // 6762\n     * // => [['pebbles'], ['barney', 'fred']]                                                                         // 6763\n     *                                                                                                                 // 6764\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6765\n     * _.map(_.partition(users, 'active', false), mapper);                                                             // 6766\n     * // => [['barney', 'pebbles'], ['fred']]                                                                         // 6767\n     *                                                                                                                 // 6768\n     * // using the `_.property` callback shorthand                                                                    // 6769\n     * _.map(_.partition(users, 'active'), mapper);                                                                    // 6770\n     * // => [['fred'], ['barney', 'pebbles']]                                                                         // 6771\n     */                                                                                                                // 6772\n    var partition = createAggregator(function(result, value, key) {                                                    // 6773\n      result[key ? 0 : 1].push(value);                                                                                 // 6774\n    }, function() { return [[], []]; });                                                                               // 6775\n                                                                                                                       // 6776\n    /**                                                                                                                // 6777\n     * Gets the property value of `path` from all elements in `collection`.                                            // 6778\n     *                                                                                                                 // 6779\n     * @static                                                                                                         // 6780\n     * @memberOf _                                                                                                     // 6781\n     * @category Collection                                                                                            // 6782\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6783\n     * @param {Array|string} path The path of the property to pluck.                                                   // 6784\n     * @returns {Array} Returns the property values.                                                                   // 6785\n     * @example                                                                                                        // 6786\n     *                                                                                                                 // 6787\n     * var users = [                                                                                                   // 6788\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 6789\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 6790\n     * ];                                                                                                              // 6791\n     *                                                                                                                 // 6792\n     * _.pluck(users, 'user');                                                                                         // 6793\n     * // => ['barney', 'fred']                                                                                        // 6794\n     *                                                                                                                 // 6795\n     * var userIndex = _.indexBy(users, 'user');                                                                       // 6796\n     * _.pluck(userIndex, 'age');                                                                                      // 6797\n     * // => [36, 40] (iteration order is not guaranteed)                                                              // 6798\n     */                                                                                                                // 6799\n    function pluck(collection, path) {                                                                                 // 6800\n      return map(collection, property(path));                                                                          // 6801\n    }                                                                                                                  // 6802\n                                                                                                                       // 6803\n    /**                                                                                                                // 6804\n     * Reduces `collection` to a value which is the accumulated result of running                                      // 6805\n     * each element in `collection` through `iteratee`, where each successive                                          // 6806\n     * invocation is supplied the return value of the previous. If `accumulator`                                       // 6807\n     * is not provided the first element of `collection` is used as the initial                                        // 6808\n     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:                                    // 6809\n     * (accumulator, value, index|key, collection).                                                                    // 6810\n     *                                                                                                                 // 6811\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6812\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 6813\n     *                                                                                                                 // 6814\n     * The guarded methods are:                                                                                        // 6815\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,                                         // 6816\n     * and `sortByOrder`                                                                                               // 6817\n     *                                                                                                                 // 6818\n     * @static                                                                                                         // 6819\n     * @memberOf _                                                                                                     // 6820\n     * @alias foldl, inject                                                                                            // 6821\n     * @category Collection                                                                                            // 6822\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6823\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6824\n     * @param {*} [accumulator] The initial value.                                                                     // 6825\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6826\n     * @returns {*} Returns the accumulated value.                                                                     // 6827\n     * @example                                                                                                        // 6828\n     *                                                                                                                 // 6829\n     * _.reduce([1, 2], function(total, n) {                                                                           // 6830\n     *   return total + n;                                                                                             // 6831\n     * });                                                                                                             // 6832\n     * // => 3                                                                                                         // 6833\n     *                                                                                                                 // 6834\n     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                         // 6835\n     *   result[key] = n * 3;                                                                                          // 6836\n     *   return result;                                                                                                // 6837\n     * }, {});                                                                                                         // 6838\n     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)                                                    // 6839\n     */                                                                                                                // 6840\n    var reduce = createReduce(arrayReduce, baseEach);                                                                  // 6841\n                                                                                                                       // 6842\n    /**                                                                                                                // 6843\n     * This method is like `_.reduce` except that it iterates over elements of                                         // 6844\n     * `collection` from right to left.                                                                                // 6845\n     *                                                                                                                 // 6846\n     * @static                                                                                                         // 6847\n     * @memberOf _                                                                                                     // 6848\n     * @alias foldr                                                                                                    // 6849\n     * @category Collection                                                                                            // 6850\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6851\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6852\n     * @param {*} [accumulator] The initial value.                                                                     // 6853\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6854\n     * @returns {*} Returns the accumulated value.                                                                     // 6855\n     * @example                                                                                                        // 6856\n     *                                                                                                                 // 6857\n     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 6858\n     *                                                                                                                 // 6859\n     * _.reduceRight(array, function(flattened, other) {                                                               // 6860\n     *   return flattened.concat(other);                                                                               // 6861\n     * }, []);                                                                                                         // 6862\n     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 6863\n     */                                                                                                                // 6864\n    var reduceRight = createReduce(arrayReduceRight, baseEachRight);                                                   // 6865\n                                                                                                                       // 6866\n    /**                                                                                                                // 6867\n     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 6868\n     * that `predicate` does **not** return truthy for.                                                                // 6869\n     *                                                                                                                 // 6870\n     * @static                                                                                                         // 6871\n     * @memberOf _                                                                                                     // 6872\n     * @category Collection                                                                                            // 6873\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6874\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6875\n     *  per iteration.                                                                                                 // 6876\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6877\n     * @returns {Array} Returns the new filtered array.                                                                // 6878\n     * @example                                                                                                        // 6879\n     *                                                                                                                 // 6880\n     * _.reject([1, 2, 3, 4], function(n) {                                                                            // 6881\n     *   return n % 2 == 0;                                                                                            // 6882\n     * });                                                                                                             // 6883\n     * // => [1, 3]                                                                                                    // 6884\n     *                                                                                                                 // 6885\n     * var users = [                                                                                                   // 6886\n     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 6887\n     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 6888\n     * ];                                                                                                              // 6889\n     *                                                                                                                 // 6890\n     * // using the `_.matches` callback shorthand                                                                     // 6891\n     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');                                                // 6892\n     * // => ['barney']                                                                                                // 6893\n     *                                                                                                                 // 6894\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6895\n     * _.pluck(_.reject(users, 'active', false), 'user');                                                              // 6896\n     * // => ['fred']                                                                                                  // 6897\n     *                                                                                                                 // 6898\n     * // using the `_.property` callback shorthand                                                                    // 6899\n     * _.pluck(_.reject(users, 'active'), 'user');                                                                     // 6900\n     * // => ['barney']                                                                                                // 6901\n     */                                                                                                                // 6902\n    function reject(collection, predicate, thisArg) {                                                                  // 6903\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6904\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6905\n      return func(collection, function(value, index, collection) {                                                     // 6906\n        return !predicate(value, index, collection);                                                                   // 6907\n      });                                                                                                              // 6908\n    }                                                                                                                  // 6909\n                                                                                                                       // 6910\n    /**                                                                                                                // 6911\n     * Gets a random element or `n` random elements from a collection.                                                 // 6912\n     *                                                                                                                 // 6913\n     * @static                                                                                                         // 6914\n     * @memberOf _                                                                                                     // 6915\n     * @category Collection                                                                                            // 6916\n     * @param {Array|Object|string} collection The collection to sample.                                               // 6917\n     * @param {number} [n] The number of elements to sample.                                                           // 6918\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 6919\n     * @returns {*} Returns the random sample(s).                                                                      // 6920\n     * @example                                                                                                        // 6921\n     *                                                                                                                 // 6922\n     * _.sample([1, 2, 3, 4]);                                                                                         // 6923\n     * // => 2                                                                                                         // 6924\n     *                                                                                                                 // 6925\n     * _.sample([1, 2, 3, 4], 2);                                                                                      // 6926\n     * // => [3, 1]                                                                                                    // 6927\n     */                                                                                                                // 6928\n    function sample(collection, n, guard) {                                                                            // 6929\n      if (guard ? isIterateeCall(collection, n, guard) : n == null) {                                                  // 6930\n        collection = toIterable(collection);                                                                           // 6931\n        var length = collection.length;                                                                                // 6932\n        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;                                         // 6933\n      }                                                                                                                // 6934\n      var index = -1,                                                                                                  // 6935\n          result = toArray(collection),                                                                                // 6936\n          length = result.length,                                                                                      // 6937\n          lastIndex = length - 1;                                                                                      // 6938\n                                                                                                                       // 6939\n      n = nativeMin(n < 0 ? 0 : (+n || 0), length);                                                                    // 6940\n      while (++index < n) {                                                                                            // 6941\n        var rand = baseRandom(index, lastIndex),                                                                       // 6942\n            value = result[rand];                                                                                      // 6943\n                                                                                                                       // 6944\n        result[rand] = result[index];                                                                                  // 6945\n        result[index] = value;                                                                                         // 6946\n      }                                                                                                                // 6947\n      result.length = n;                                                                                               // 6948\n      return result;                                                                                                   // 6949\n    }                                                                                                                  // 6950\n                                                                                                                       // 6951\n    /**                                                                                                                // 6952\n     * Creates an array of shuffled values, using a version of the                                                     // 6953\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 6954\n     *                                                                                                                 // 6955\n     * @static                                                                                                         // 6956\n     * @memberOf _                                                                                                     // 6957\n     * @category Collection                                                                                            // 6958\n     * @param {Array|Object|string} collection The collection to shuffle.                                              // 6959\n     * @returns {Array} Returns the new shuffled array.                                                                // 6960\n     * @example                                                                                                        // 6961\n     *                                                                                                                 // 6962\n     * _.shuffle([1, 2, 3, 4]);                                                                                        // 6963\n     * // => [4, 1, 3, 2]                                                                                              // 6964\n     */                                                                                                                // 6965\n    function shuffle(collection) {                                                                                     // 6966\n      return sample(collection, POSITIVE_INFINITY);                                                                    // 6967\n    }                                                                                                                  // 6968\n                                                                                                                       // 6969\n    /**                                                                                                                // 6970\n     * Gets the size of `collection` by returning its length for array-like                                            // 6971\n     * values or the number of own enumerable properties for objects.                                                  // 6972\n     *                                                                                                                 // 6973\n     * @static                                                                                                         // 6974\n     * @memberOf _                                                                                                     // 6975\n     * @category Collection                                                                                            // 6976\n     * @param {Array|Object|string} collection The collection to inspect.                                              // 6977\n     * @returns {number} Returns the size of `collection`.                                                             // 6978\n     * @example                                                                                                        // 6979\n     *                                                                                                                 // 6980\n     * _.size([1, 2, 3]);                                                                                              // 6981\n     * // => 3                                                                                                         // 6982\n     *                                                                                                                 // 6983\n     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 6984\n     * // => 2                                                                                                         // 6985\n     *                                                                                                                 // 6986\n     * _.size('pebbles');                                                                                              // 6987\n     * // => 7                                                                                                         // 6988\n     */                                                                                                                // 6989\n    function size(collection) {                                                                                        // 6990\n      var length = collection ? getLength(collection) : 0;                                                             // 6991\n      return isLength(length) ? length : keys(collection).length;                                                      // 6992\n    }                                                                                                                  // 6993\n                                                                                                                       // 6994\n    /**                                                                                                                // 6995\n     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 6996\n     * The function returns as soon as it finds a passing value and does not iterate                                   // 6997\n     * over the entire collection. The predicate is bound to `thisArg` and invoked                                     // 6998\n     * with three arguments: (value, index|key, collection).                                                           // 6999\n     *                                                                                                                 // 7000\n     * If a property name is provided for `predicate` the created `_.property`                                         // 7001\n     * style callback returns the property value of the given element.                                                 // 7002\n     *                                                                                                                 // 7003\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7004\n     * style callback returns `true` for elements that have a matching property                                        // 7005\n     * value, else `false`.                                                                                            // 7006\n     *                                                                                                                 // 7007\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 7008\n     * callback returns `true` for elements that have the properties of the given                                      // 7009\n     * object, else `false`.                                                                                           // 7010\n     *                                                                                                                 // 7011\n     * @static                                                                                                         // 7012\n     * @memberOf _                                                                                                     // 7013\n     * @alias any                                                                                                      // 7014\n     * @category Collection                                                                                            // 7015\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7016\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7017\n     *  per iteration.                                                                                                 // 7018\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7019\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 7020\n     *  else `false`.                                                                                                  // 7021\n     * @example                                                                                                        // 7022\n     *                                                                                                                 // 7023\n     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7024\n     * // => true                                                                                                      // 7025\n     *                                                                                                                 // 7026\n     * var users = [                                                                                                   // 7027\n     *   { 'user': 'barney', 'active': true },                                                                         // 7028\n     *   { 'user': 'fred',   'active': false }                                                                         // 7029\n     * ];                                                                                                              // 7030\n     *                                                                                                                 // 7031\n     * // using the `_.matches` callback shorthand                                                                     // 7032\n     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 7033\n     * // => false                                                                                                     // 7034\n     *                                                                                                                 // 7035\n     * // using the `_.matchesProperty` callback shorthand                                                             // 7036\n     * _.some(users, 'active', false);                                                                                 // 7037\n     * // => true                                                                                                      // 7038\n     *                                                                                                                 // 7039\n     * // using the `_.property` callback shorthand                                                                    // 7040\n     * _.some(users, 'active');                                                                                        // 7041\n     * // => true                                                                                                      // 7042\n     */                                                                                                                // 7043\n    function some(collection, predicate, thisArg) {                                                                    // 7044\n      var func = isArray(collection) ? arraySome : baseSome;                                                           // 7045\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 7046\n        predicate = undefined;                                                                                         // 7047\n      }                                                                                                                // 7048\n      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 7049\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 7050\n      }                                                                                                                // 7051\n      return func(collection, predicate);                                                                              // 7052\n    }                                                                                                                  // 7053\n                                                                                                                       // 7054\n    /**                                                                                                                // 7055\n     * Creates an array of elements, sorted in ascending order by the results of                                       // 7056\n     * running each element in a collection through `iteratee`. This method performs                                   // 7057\n     * a stable sort, that is, it preserves the original sort order of equal elements.                                 // 7058\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 7059\n     * (value, index|key, collection).                                                                                 // 7060\n     *                                                                                                                 // 7061\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 7062\n     * style callback returns the property value of the given element.                                                 // 7063\n     *                                                                                                                 // 7064\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7065\n     * style callback returns `true` for elements that have a matching property                                        // 7066\n     * value, else `false`.                                                                                            // 7067\n     *                                                                                                                 // 7068\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 7069\n     * callback returns `true` for elements that have the properties of the given                                      // 7070\n     * object, else `false`.                                                                                           // 7071\n     *                                                                                                                 // 7072\n     * @static                                                                                                         // 7073\n     * @memberOf _                                                                                                     // 7074\n     * @category Collection                                                                                            // 7075\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7076\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 7077\n     *  per iteration.                                                                                                 // 7078\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7079\n     * @returns {Array} Returns the new sorted array.                                                                  // 7080\n     * @example                                                                                                        // 7081\n     *                                                                                                                 // 7082\n     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7083\n     *   return Math.sin(n);                                                                                           // 7084\n     * });                                                                                                             // 7085\n     * // => [3, 1, 2]                                                                                                 // 7086\n     *                                                                                                                 // 7087\n     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7088\n     *   return this.sin(n);                                                                                           // 7089\n     * }, Math);                                                                                                       // 7090\n     * // => [3, 1, 2]                                                                                                 // 7091\n     *                                                                                                                 // 7092\n     * var users = [                                                                                                   // 7093\n     *   { 'user': 'fred' },                                                                                           // 7094\n     *   { 'user': 'pebbles' },                                                                                        // 7095\n     *   { 'user': 'barney' }                                                                                          // 7096\n     * ];                                                                                                              // 7097\n     *                                                                                                                 // 7098\n     * // using the `_.property` callback shorthand                                                                    // 7099\n     * _.pluck(_.sortBy(users, 'user'), 'user');                                                                       // 7100\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 7101\n     */                                                                                                                // 7102\n    function sortBy(collection, iteratee, thisArg) {                                                                   // 7103\n      if (collection == null) {                                                                                        // 7104\n        return [];                                                                                                     // 7105\n      }                                                                                                                // 7106\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 7107\n        iteratee = undefined;                                                                                          // 7108\n      }                                                                                                                // 7109\n      var index = -1;                                                                                                  // 7110\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 7111\n                                                                                                                       // 7112\n      var result = baseMap(collection, function(value, key, collection) {                                              // 7113\n        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };                     // 7114\n      });                                                                                                              // 7115\n      return baseSortBy(result, compareAscending);                                                                     // 7116\n    }                                                                                                                  // 7117\n                                                                                                                       // 7118\n    /**                                                                                                                // 7119\n     * This method is like `_.sortBy` except that it can sort by multiple iteratees                                    // 7120\n     * or property names.                                                                                              // 7121\n     *                                                                                                                 // 7122\n     * If a property name is provided for an iteratee the created `_.property`                                         // 7123\n     * style callback returns the property value of the given element.                                                 // 7124\n     *                                                                                                                 // 7125\n     * If an object is provided for an iteratee the created `_.matches` style                                          // 7126\n     * callback returns `true` for elements that have the properties of the given                                      // 7127\n     * object, else `false`.                                                                                           // 7128\n     *                                                                                                                 // 7129\n     * @static                                                                                                         // 7130\n     * @memberOf _                                                                                                     // 7131\n     * @category Collection                                                                                            // 7132\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7133\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees                                     // 7134\n     *  The iteratees to sort by, specified as individual values or arrays of values.                                  // 7135\n     * @returns {Array} Returns the new sorted array.                                                                  // 7136\n     * @example                                                                                                        // 7137\n     *                                                                                                                 // 7138\n     * var users = [                                                                                                   // 7139\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 7140\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 7141\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 7142\n     *   { 'user': 'barney', 'age': 34 }                                                                               // 7143\n     * ];                                                                                                              // 7144\n     *                                                                                                                 // 7145\n     * _.map(_.sortByAll(users, ['user', 'age']), _.values);                                                           // 7146\n     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                              // 7147\n     *                                                                                                                 // 7148\n     * _.map(_.sortByAll(users, 'user', function(chr) {                                                                // 7149\n     *   return Math.floor(chr.age / 10);                                                                              // 7150\n     * }), _.values);                                                                                                  // 7151\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7152\n     */                                                                                                                // 7153\n    var sortByAll = restParam(function(collection, iteratees) {                                                        // 7154\n      if (collection == null) {                                                                                        // 7155\n        return [];                                                                                                     // 7156\n      }                                                                                                                // 7157\n      var guard = iteratees[2];                                                                                        // 7158\n      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {                                                // 7159\n        iteratees.length = 1;                                                                                          // 7160\n      }                                                                                                                // 7161\n      return baseSortByOrder(collection, baseFlatten(iteratees), []);                                                  // 7162\n    });                                                                                                                // 7163\n                                                                                                                       // 7164\n    /**                                                                                                                // 7165\n     * This method is like `_.sortByAll` except that it allows specifying the                                          // 7166\n     * sort orders of the iteratees to sort by. If `orders` is unspecified, all                                        // 7167\n     * values are sorted in ascending order. Otherwise, a value is sorted in                                           // 7168\n     * ascending order if its corresponding order is \"asc\", and descending if \"desc\".                                  // 7169\n     *                                                                                                                 // 7170\n     * If a property name is provided for an iteratee the created `_.property`                                         // 7171\n     * style callback returns the property value of the given element.                                                 // 7172\n     *                                                                                                                 // 7173\n     * If an object is provided for an iteratee the created `_.matches` style                                          // 7174\n     * callback returns `true` for elements that have the properties of the given                                      // 7175\n     * object, else `false`.                                                                                           // 7176\n     *                                                                                                                 // 7177\n     * @static                                                                                                         // 7178\n     * @memberOf _                                                                                                     // 7179\n     * @category Collection                                                                                            // 7180\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7181\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 7182\n     * @param {boolean[]} [orders] The sort orders of `iteratees`.                                                     // 7183\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 7184\n     * @returns {Array} Returns the new sorted array.                                                                  // 7185\n     * @example                                                                                                        // 7186\n     *                                                                                                                 // 7187\n     * var users = [                                                                                                   // 7188\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 7189\n     *   { 'user': 'barney', 'age': 34 },                                                                              // 7190\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 7191\n     *   { 'user': 'barney', 'age': 36 }                                                                               // 7192\n     * ];                                                                                                              // 7193\n     *                                                                                                                 // 7194\n     * // sort by `user` in ascending order and by `age` in descending order                                           // 7195\n     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);                                        // 7196\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7197\n     */                                                                                                                // 7198\n    function sortByOrder(collection, iteratees, orders, guard) {                                                       // 7199\n      if (collection == null) {                                                                                        // 7200\n        return [];                                                                                                     // 7201\n      }                                                                                                                // 7202\n      if (guard && isIterateeCall(iteratees, orders, guard)) {                                                         // 7203\n        orders = undefined;                                                                                            // 7204\n      }                                                                                                                // 7205\n      if (!isArray(iteratees)) {                                                                                       // 7206\n        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7207\n      }                                                                                                                // 7208\n      if (!isArray(orders)) {                                                                                          // 7209\n        orders = orders == null ? [] : [orders];                                                                       // 7210\n      }                                                                                                                // 7211\n      return baseSortByOrder(collection, iteratees, orders);                                                           // 7212\n    }                                                                                                                  // 7213\n                                                                                                                       // 7214\n    /**                                                                                                                // 7215\n     * Performs a deep comparison between each element in `collection` and the                                         // 7216\n     * source object, returning an array of all elements that have equivalent                                          // 7217\n     * property values.                                                                                                // 7218\n     *                                                                                                                 // 7219\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 7220\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 7221\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 7222\n     * own or inherited property value see `_.matchesProperty`.                                                        // 7223\n     *                                                                                                                 // 7224\n     * @static                                                                                                         // 7225\n     * @memberOf _                                                                                                     // 7226\n     * @category Collection                                                                                            // 7227\n     * @param {Array|Object|string} collection The collection to search.                                               // 7228\n     * @param {Object} source The object of property values to match.                                                  // 7229\n     * @returns {Array} Returns the new filtered array.                                                                // 7230\n     * @example                                                                                                        // 7231\n     *                                                                                                                 // 7232\n     * var users = [                                                                                                   // 7233\n     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },                                          // 7234\n     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }                                // 7235\n     * ];                                                                                                              // 7236\n     *                                                                                                                 // 7237\n     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');                                                // 7238\n     * // => ['barney']                                                                                                // 7239\n     *                                                                                                                 // 7240\n     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');                                                          // 7241\n     * // => ['fred']                                                                                                  // 7242\n     */                                                                                                                // 7243\n    function where(collection, source) {                                                                               // 7244\n      return filter(collection, baseMatches(source));                                                                  // 7245\n    }                                                                                                                  // 7246\n                                                                                                                       // 7247\n    /*------------------------------------------------------------------------*/                                       // 7248\n                                                                                                                       // 7249\n    /**                                                                                                                // 7250\n     * Gets the number of milliseconds that have elapsed since the Unix epoch                                          // 7251\n     * (1 January 1970 00:00:00 UTC).                                                                                  // 7252\n     *                                                                                                                 // 7253\n     * @static                                                                                                         // 7254\n     * @memberOf _                                                                                                     // 7255\n     * @category Date                                                                                                  // 7256\n     * @example                                                                                                        // 7257\n     *                                                                                                                 // 7258\n     * _.defer(function(stamp) {                                                                                       // 7259\n     *   console.log(_.now() - stamp);                                                                                 // 7260\n     * }, _.now());                                                                                                    // 7261\n     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 7262\n     */                                                                                                                // 7263\n    var now = nativeNow || function() {                                                                                // 7264\n      return new Date().getTime();                                                                                     // 7265\n    };                                                                                                                 // 7266\n                                                                                                                       // 7267\n    /*------------------------------------------------------------------------*/                                       // 7268\n                                                                                                                       // 7269\n    /**                                                                                                                // 7270\n     * The opposite of `_.before`; this method creates a function that invokes                                         // 7271\n     * `func` once it's called `n` or more times.                                                                      // 7272\n     *                                                                                                                 // 7273\n     * @static                                                                                                         // 7274\n     * @memberOf _                                                                                                     // 7275\n     * @category Function                                                                                              // 7276\n     * @param {number} n The number of calls before `func` is invoked.                                                 // 7277\n     * @param {Function} func The function to restrict.                                                                // 7278\n     * @returns {Function} Returns the new restricted function.                                                        // 7279\n     * @example                                                                                                        // 7280\n     *                                                                                                                 // 7281\n     * var saves = ['profile', 'settings'];                                                                            // 7282\n     *                                                                                                                 // 7283\n     * var done = _.after(saves.length, function() {                                                                   // 7284\n     *   console.log('done saving!');                                                                                  // 7285\n     * });                                                                                                             // 7286\n     *                                                                                                                 // 7287\n     * _.forEach(saves, function(type) {                                                                               // 7288\n     *   asyncSave({ 'type': type, 'complete': done });                                                                // 7289\n     * });                                                                                                             // 7290\n     * // => logs 'done saving!' after the two async saves have completed                                              // 7291\n     */                                                                                                                // 7292\n    function after(n, func) {                                                                                          // 7293\n      if (typeof func != 'function') {                                                                                 // 7294\n        if (typeof n == 'function') {                                                                                  // 7295\n          var temp = n;                                                                                                // 7296\n          n = func;                                                                                                    // 7297\n          func = temp;                                                                                                 // 7298\n        } else {                                                                                                       // 7299\n          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7300\n        }                                                                                                              // 7301\n      }                                                                                                                // 7302\n      n = nativeIsFinite(n = +n) ? n : 0;                                                                              // 7303\n      return function() {                                                                                              // 7304\n        if (--n < 1) {                                                                                                 // 7305\n          return func.apply(this, arguments);                                                                          // 7306\n        }                                                                                                              // 7307\n      };                                                                                                               // 7308\n    }                                                                                                                  // 7309\n                                                                                                                       // 7310\n    /**                                                                                                                // 7311\n     * Creates a function that accepts up to `n` arguments ignoring any                                                // 7312\n     * additional arguments.                                                                                           // 7313\n     *                                                                                                                 // 7314\n     * @static                                                                                                         // 7315\n     * @memberOf _                                                                                                     // 7316\n     * @category Function                                                                                              // 7317\n     * @param {Function} func The function to cap arguments for.                                                       // 7318\n     * @param {number} [n=func.length] The arity cap.                                                                  // 7319\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7320\n     * @returns {Function} Returns the new function.                                                                   // 7321\n     * @example                                                                                                        // 7322\n     *                                                                                                                 // 7323\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 7324\n     * // => [6, 8, 10]                                                                                                // 7325\n     */                                                                                                                // 7326\n    function ary(func, n, guard) {                                                                                     // 7327\n      if (guard && isIterateeCall(func, n, guard)) {                                                                   // 7328\n        n = undefined;                                                                                                 // 7329\n      }                                                                                                                // 7330\n      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);                                                   // 7331\n      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 7332\n    }                                                                                                                  // 7333\n                                                                                                                       // 7334\n    /**                                                                                                                // 7335\n     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 7336\n     * of the created function, while it's called less than `n` times. Subsequent                                      // 7337\n     * calls to the created function return the result of the last `func` invocation.                                  // 7338\n     *                                                                                                                 // 7339\n     * @static                                                                                                         // 7340\n     * @memberOf _                                                                                                     // 7341\n     * @category Function                                                                                              // 7342\n     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 7343\n     * @param {Function} func The function to restrict.                                                                // 7344\n     * @returns {Function} Returns the new restricted function.                                                        // 7345\n     * @example                                                                                                        // 7346\n     *                                                                                                                 // 7347\n     * jQuery('#add').on('click', _.before(5, addContactToList));                                                      // 7348\n     * // => allows adding up to 4 contacts to the list                                                                // 7349\n     */                                                                                                                // 7350\n    function before(n, func) {                                                                                         // 7351\n      var result;                                                                                                      // 7352\n      if (typeof func != 'function') {                                                                                 // 7353\n        if (typeof n == 'function') {                                                                                  // 7354\n          var temp = n;                                                                                                // 7355\n          n = func;                                                                                                    // 7356\n          func = temp;                                                                                                 // 7357\n        } else {                                                                                                       // 7358\n          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7359\n        }                                                                                                              // 7360\n      }                                                                                                                // 7361\n      return function() {                                                                                              // 7362\n        if (--n > 0) {                                                                                                 // 7363\n          result = func.apply(this, arguments);                                                                        // 7364\n        }                                                                                                              // 7365\n        if (n <= 1) {                                                                                                  // 7366\n          func = undefined;                                                                                            // 7367\n        }                                                                                                              // 7368\n        return result;                                                                                                 // 7369\n      };                                                                                                               // 7370\n    }                                                                                                                  // 7371\n                                                                                                                       // 7372\n    /**                                                                                                                // 7373\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 7374\n     * and prepends any additional `_.bind` arguments to those provided to the                                         // 7375\n     * bound function.                                                                                                 // 7376\n     *                                                                                                                 // 7377\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 7378\n     * may be used as a placeholder for partially applied arguments.                                                   // 7379\n     *                                                                                                                 // 7380\n     * **Note:** Unlike native `Function#bind` this method does not set the \"length\"                                   // 7381\n     * property of bound functions.                                                                                    // 7382\n     *                                                                                                                 // 7383\n     * @static                                                                                                         // 7384\n     * @memberOf _                                                                                                     // 7385\n     * @category Function                                                                                              // 7386\n     * @param {Function} func The function to bind.                                                                    // 7387\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 7388\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7389\n     * @returns {Function} Returns the new bound function.                                                             // 7390\n     * @example                                                                                                        // 7391\n     *                                                                                                                 // 7392\n     * var greet = function(greeting, punctuation) {                                                                   // 7393\n     *   return greeting + ' ' + this.user + punctuation;                                                              // 7394\n     * };                                                                                                              // 7395\n     *                                                                                                                 // 7396\n     * var object = { 'user': 'fred' };                                                                                // 7397\n     *                                                                                                                 // 7398\n     * var bound = _.bind(greet, object, 'hi');                                                                        // 7399\n     * bound('!');                                                                                                     // 7400\n     * // => 'hi fred!'                                                                                                // 7401\n     *                                                                                                                 // 7402\n     * // using placeholders                                                                                           // 7403\n     * var bound = _.bind(greet, object, _, '!');                                                                      // 7404\n     * bound('hi');                                                                                                    // 7405\n     * // => 'hi fred!'                                                                                                // 7406\n     */                                                                                                                // 7407\n    var bind = restParam(function(func, thisArg, partials) {                                                           // 7408\n      var bitmask = BIND_FLAG;                                                                                         // 7409\n      if (partials.length) {                                                                                           // 7410\n        var holders = replaceHolders(partials, bind.placeholder);                                                      // 7411\n        bitmask |= PARTIAL_FLAG;                                                                                       // 7412\n      }                                                                                                                // 7413\n      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 7414\n    });                                                                                                                // 7415\n                                                                                                                       // 7416\n    /**                                                                                                                // 7417\n     * Binds methods of an object to the object itself, overwriting the existing                                       // 7418\n     * method. Method names may be specified as individual arguments or as arrays                                      // 7419\n     * of method names. If no method names are provided all enumerable function                                        // 7420\n     * properties, own and inherited, of `object` are bound.                                                           // 7421\n     *                                                                                                                 // 7422\n     * **Note:** This method does not set the \"length\" property of bound functions.                                    // 7423\n     *                                                                                                                 // 7424\n     * @static                                                                                                         // 7425\n     * @memberOf _                                                                                                     // 7426\n     * @category Function                                                                                              // 7427\n     * @param {Object} object The object to bind and assign the bound methods to.                                      // 7428\n     * @param {...(string|string[])} [methodNames] The object method names to bind,                                    // 7429\n     *  specified as individual method names or arrays of method names.                                                // 7430\n     * @returns {Object} Returns `object`.                                                                             // 7431\n     * @example                                                                                                        // 7432\n     *                                                                                                                 // 7433\n     * var view = {                                                                                                    // 7434\n     *   'label': 'docs',                                                                                              // 7435\n     *   'onClick': function() {                                                                                       // 7436\n     *     console.log('clicked ' + this.label);                                                                       // 7437\n     *   }                                                                                                             // 7438\n     * };                                                                                                              // 7439\n     *                                                                                                                 // 7440\n     * _.bindAll(view);                                                                                                // 7441\n     * jQuery('#docs').on('click', view.onClick);                                                                      // 7442\n     * // => logs 'clicked docs' when the element is clicked                                                           // 7443\n     */                                                                                                                // 7444\n    var bindAll = restParam(function(object, methodNames) {                                                            // 7445\n      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);                                 // 7446\n                                                                                                                       // 7447\n      var index = -1,                                                                                                  // 7448\n          length = methodNames.length;                                                                                 // 7449\n                                                                                                                       // 7450\n      while (++index < length) {                                                                                       // 7451\n        var key = methodNames[index];                                                                                  // 7452\n        object[key] = createWrapper(object[key], BIND_FLAG, object);                                                   // 7453\n      }                                                                                                                // 7454\n      return object;                                                                                                   // 7455\n    });                                                                                                                // 7456\n                                                                                                                       // 7457\n    /**                                                                                                                // 7458\n     * Creates a function that invokes the method at `object[key]` and prepends                                        // 7459\n     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 7460\n     *                                                                                                                 // 7461\n     * This method differs from `_.bind` by allowing bound functions to reference                                      // 7462\n     * methods that may be redefined or don't yet exist.                                                               // 7463\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 7464\n     * for more details.                                                                                               // 7465\n     *                                                                                                                 // 7466\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 7467\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 7468\n     *                                                                                                                 // 7469\n     * @static                                                                                                         // 7470\n     * @memberOf _                                                                                                     // 7471\n     * @category Function                                                                                              // 7472\n     * @param {Object} object The object the method belongs to.                                                        // 7473\n     * @param {string} key The key of the method.                                                                      // 7474\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7475\n     * @returns {Function} Returns the new bound function.                                                             // 7476\n     * @example                                                                                                        // 7477\n     *                                                                                                                 // 7478\n     * var object = {                                                                                                  // 7479\n     *   'user': 'fred',                                                                                               // 7480\n     *   'greet': function(greeting, punctuation) {                                                                    // 7481\n     *     return greeting + ' ' + this.user + punctuation;                                                            // 7482\n     *   }                                                                                                             // 7483\n     * };                                                                                                              // 7484\n     *                                                                                                                 // 7485\n     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 7486\n     * bound('!');                                                                                                     // 7487\n     * // => 'hi fred!'                                                                                                // 7488\n     *                                                                                                                 // 7489\n     * object.greet = function(greeting, punctuation) {                                                                // 7490\n     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 7491\n     * };                                                                                                              // 7492\n     *                                                                                                                 // 7493\n     * bound('!');                                                                                                     // 7494\n     * // => 'hiya fred!'                                                                                              // 7495\n     *                                                                                                                 // 7496\n     * // using placeholders                                                                                           // 7497\n     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 7498\n     * bound('hi');                                                                                                    // 7499\n     * // => 'hiya fred!'                                                                                              // 7500\n     */                                                                                                                // 7501\n    var bindKey = restParam(function(object, key, partials) {                                                          // 7502\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 7503\n      if (partials.length) {                                                                                           // 7504\n        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 7505\n        bitmask |= PARTIAL_FLAG;                                                                                       // 7506\n      }                                                                                                                // 7507\n      return createWrapper(key, bitmask, object, partials, holders);                                                   // 7508\n    });                                                                                                                // 7509\n                                                                                                                       // 7510\n    /**                                                                                                                // 7511\n     * Creates a function that accepts one or more arguments of `func` that when                                       // 7512\n     * called either invokes `func` returning its result, if all `func` arguments                                      // 7513\n     * have been provided, or returns a function that accepts one or more of the                                       // 7514\n     * remaining `func` arguments, and so on. The arity of `func` may be specified                                     // 7515\n     * if `func.length` is not sufficient.                                                                             // 7516\n     *                                                                                                                 // 7517\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 7518\n     * may be used as a placeholder for provided arguments.                                                            // 7519\n     *                                                                                                                 // 7520\n     * **Note:** This method does not set the \"length\" property of curried functions.                                  // 7521\n     *                                                                                                                 // 7522\n     * @static                                                                                                         // 7523\n     * @memberOf _                                                                                                     // 7524\n     * @category Function                                                                                              // 7525\n     * @param {Function} func The function to curry.                                                                   // 7526\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7527\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7528\n     * @returns {Function} Returns the new curried function.                                                           // 7529\n     * @example                                                                                                        // 7530\n     *                                                                                                                 // 7531\n     * var abc = function(a, b, c) {                                                                                   // 7532\n     *   return [a, b, c];                                                                                             // 7533\n     * };                                                                                                              // 7534\n     *                                                                                                                 // 7535\n     * var curried = _.curry(abc);                                                                                     // 7536\n     *                                                                                                                 // 7537\n     * curried(1)(2)(3);                                                                                               // 7538\n     * // => [1, 2, 3]                                                                                                 // 7539\n     *                                                                                                                 // 7540\n     * curried(1, 2)(3);                                                                                               // 7541\n     * // => [1, 2, 3]                                                                                                 // 7542\n     *                                                                                                                 // 7543\n     * curried(1, 2, 3);                                                                                               // 7544\n     * // => [1, 2, 3]                                                                                                 // 7545\n     *                                                                                                                 // 7546\n     * // using placeholders                                                                                           // 7547\n     * curried(1)(_, 3)(2);                                                                                            // 7548\n     * // => [1, 2, 3]                                                                                                 // 7549\n     */                                                                                                                // 7550\n    var curry = createCurry(CURRY_FLAG);                                                                               // 7551\n                                                                                                                       // 7552\n    /**                                                                                                                // 7553\n     * This method is like `_.curry` except that arguments are applied to `func`                                       // 7554\n     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 7555\n     *                                                                                                                 // 7556\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 7557\n     * builds, may be used as a placeholder for provided arguments.                                                    // 7558\n     *                                                                                                                 // 7559\n     * **Note:** This method does not set the \"length\" property of curried functions.                                  // 7560\n     *                                                                                                                 // 7561\n     * @static                                                                                                         // 7562\n     * @memberOf _                                                                                                     // 7563\n     * @category Function                                                                                              // 7564\n     * @param {Function} func The function to curry.                                                                   // 7565\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7566\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7567\n     * @returns {Function} Returns the new curried function.                                                           // 7568\n     * @example                                                                                                        // 7569\n     *                                                                                                                 // 7570\n     * var abc = function(a, b, c) {                                                                                   // 7571\n     *   return [a, b, c];                                                                                             // 7572\n     * };                                                                                                              // 7573\n     *                                                                                                                 // 7574\n     * var curried = _.curryRight(abc);                                                                                // 7575\n     *                                                                                                                 // 7576\n     * curried(3)(2)(1);                                                                                               // 7577\n     * // => [1, 2, 3]                                                                                                 // 7578\n     *                                                                                                                 // 7579\n     * curried(2, 3)(1);                                                                                               // 7580\n     * // => [1, 2, 3]                                                                                                 // 7581\n     *                                                                                                                 // 7582\n     * curried(1, 2, 3);                                                                                               // 7583\n     * // => [1, 2, 3]                                                                                                 // 7584\n     *                                                                                                                 // 7585\n     * // using placeholders                                                                                           // 7586\n     * curried(3)(1, _)(2);                                                                                            // 7587\n     * // => [1, 2, 3]                                                                                                 // 7588\n     */                                                                                                                // 7589\n    var curryRight = createCurry(CURRY_RIGHT_FLAG);                                                                    // 7590\n                                                                                                                       // 7591\n    /**                                                                                                                // 7592\n     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 7593\n     * milliseconds have elapsed since the last time the debounced function was                                        // 7594\n     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 7595\n     * delayed invocations. Provide an options object to indicate that `func`                                          // 7596\n     * should be invoked on the leading and/or trailing edge of the `wait` timeout.                                    // 7597\n     * Subsequent calls to the debounced function return the result of the last                                        // 7598\n     * `func` invocation.                                                                                              // 7599\n     *                                                                                                                 // 7600\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 7601\n     * on the trailing edge of the timeout only if the the debounced function is                                       // 7602\n     * invoked more than once during the `wait` timeout.                                                               // 7603\n     *                                                                                                                 // 7604\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 7605\n     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 7606\n     *                                                                                                                 // 7607\n     * @static                                                                                                         // 7608\n     * @memberOf _                                                                                                     // 7609\n     * @category Function                                                                                              // 7610\n     * @param {Function} func The function to debounce.                                                                // 7611\n     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 7612\n     * @param {Object} [options] The options object.                                                                   // 7613\n     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 7614\n     *  edge of the timeout.                                                                                           // 7615\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 7616\n     *  delayed before it's invoked.                                                                                   // 7617\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 7618\n     *  edge of the timeout.                                                                                           // 7619\n     * @returns {Function} Returns the new debounced function.                                                         // 7620\n     * @example                                                                                                        // 7621\n     *                                                                                                                 // 7622\n     * // avoid costly calculations while the window size is in flux                                                   // 7623\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 7624\n     *                                                                                                                 // 7625\n     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls                                 // 7626\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {                                                      // 7627\n     *   'leading': true,                                                                                              // 7628\n     *   'trailing': false                                                                                             // 7629\n     * }));                                                                                                            // 7630\n     *                                                                                                                 // 7631\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 7632\n     * var source = new EventSource('/stream');                                                                        // 7633\n     * jQuery(source).on('message', _.debounce(batchLog, 250, {                                                        // 7634\n     *   'maxWait': 1000                                                                                               // 7635\n     * }));                                                                                                            // 7636\n     *                                                                                                                 // 7637\n     * // cancel a debounced call                                                                                      // 7638\n     * var todoChanges = _.debounce(batchLog, 1000);                                                                   // 7639\n     * Object.observe(models.todo, todoChanges);                                                                       // 7640\n     *                                                                                                                 // 7641\n     * Object.observe(models, function(changes) {                                                                      // 7642\n     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {                                                   // 7643\n     *     todoChanges.cancel();                                                                                       // 7644\n     *   }                                                                                                             // 7645\n     * }, ['delete']);                                                                                                 // 7646\n     *                                                                                                                 // 7647\n     * // ...at some point `models.todo` is changed                                                                    // 7648\n     * models.todo.completed = true;                                                                                   // 7649\n     *                                                                                                                 // 7650\n     * // ...before 1 second has passed `models.todo` is deleted                                                       // 7651\n     * // which cancels the debounced `todoChanges` call                                                               // 7652\n     * delete models.todo;                                                                                             // 7653\n     */                                                                                                                // 7654\n    function debounce(func, wait, options) {                                                                           // 7655\n      var args,                                                                                                        // 7656\n          maxTimeoutId,                                                                                                // 7657\n          result,                                                                                                      // 7658\n          stamp,                                                                                                       // 7659\n          thisArg,                                                                                                     // 7660\n          timeoutId,                                                                                                   // 7661\n          trailingCall,                                                                                                // 7662\n          lastCalled = 0,                                                                                              // 7663\n          maxWait = false,                                                                                             // 7664\n          trailing = true;                                                                                             // 7665\n                                                                                                                       // 7666\n      if (typeof func != 'function') {                                                                                 // 7667\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7668\n      }                                                                                                                // 7669\n      wait = wait < 0 ? 0 : (+wait || 0);                                                                              // 7670\n      if (options === true) {                                                                                          // 7671\n        var leading = true;                                                                                            // 7672\n        trailing = false;                                                                                              // 7673\n      } else if (isObject(options)) {                                                                                  // 7674\n        leading = !!options.leading;                                                                                   // 7675\n        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);                                      // 7676\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 7677\n      }                                                                                                                // 7678\n                                                                                                                       // 7679\n      function cancel() {                                                                                              // 7680\n        if (timeoutId) {                                                                                               // 7681\n          clearTimeout(timeoutId);                                                                                     // 7682\n        }                                                                                                              // 7683\n        if (maxTimeoutId) {                                                                                            // 7684\n          clearTimeout(maxTimeoutId);                                                                                  // 7685\n        }                                                                                                              // 7686\n        lastCalled = 0;                                                                                                // 7687\n        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7688\n      }                                                                                                                // 7689\n                                                                                                                       // 7690\n      function complete(isCalled, id) {                                                                                // 7691\n        if (id) {                                                                                                      // 7692\n          clearTimeout(id);                                                                                            // 7693\n        }                                                                                                              // 7694\n        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7695\n        if (isCalled) {                                                                                                // 7696\n          lastCalled = now();                                                                                          // 7697\n          result = func.apply(thisArg, args);                                                                          // 7698\n          if (!timeoutId && !maxTimeoutId) {                                                                           // 7699\n            args = thisArg = undefined;                                                                                // 7700\n          }                                                                                                            // 7701\n        }                                                                                                              // 7702\n      }                                                                                                                // 7703\n                                                                                                                       // 7704\n      function delayed() {                                                                                             // 7705\n        var remaining = wait - (now() - stamp);                                                                        // 7706\n        if (remaining <= 0 || remaining > wait) {                                                                      // 7707\n          complete(trailingCall, maxTimeoutId);                                                                        // 7708\n        } else {                                                                                                       // 7709\n          timeoutId = setTimeout(delayed, remaining);                                                                  // 7710\n        }                                                                                                              // 7711\n      }                                                                                                                // 7712\n                                                                                                                       // 7713\n      function maxDelayed() {                                                                                          // 7714\n        complete(trailing, timeoutId);                                                                                 // 7715\n      }                                                                                                                // 7716\n                                                                                                                       // 7717\n      function debounced() {                                                                                           // 7718\n        args = arguments;                                                                                              // 7719\n        stamp = now();                                                                                                 // 7720\n        thisArg = this;                                                                                                // 7721\n        trailingCall = trailing && (timeoutId || !leading);                                                            // 7722\n                                                                                                                       // 7723\n        if (maxWait === false) {                                                                                       // 7724\n          var leadingCall = leading && !timeoutId;                                                                     // 7725\n        } else {                                                                                                       // 7726\n          if (!maxTimeoutId && !leading) {                                                                             // 7727\n            lastCalled = stamp;                                                                                        // 7728\n          }                                                                                                            // 7729\n          var remaining = maxWait - (stamp - lastCalled),                                                              // 7730\n              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 7731\n                                                                                                                       // 7732\n          if (isCalled) {                                                                                              // 7733\n            if (maxTimeoutId) {                                                                                        // 7734\n              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 7735\n            }                                                                                                          // 7736\n            lastCalled = stamp;                                                                                        // 7737\n            result = func.apply(thisArg, args);                                                                        // 7738\n          }                                                                                                            // 7739\n          else if (!maxTimeoutId) {                                                                                    // 7740\n            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 7741\n          }                                                                                                            // 7742\n        }                                                                                                              // 7743\n        if (isCalled && timeoutId) {                                                                                   // 7744\n          timeoutId = clearTimeout(timeoutId);                                                                         // 7745\n        }                                                                                                              // 7746\n        else if (!timeoutId && wait !== maxWait) {                                                                     // 7747\n          timeoutId = setTimeout(delayed, wait);                                                                       // 7748\n        }                                                                                                              // 7749\n        if (leadingCall) {                                                                                             // 7750\n          isCalled = true;                                                                                             // 7751\n          result = func.apply(thisArg, args);                                                                          // 7752\n        }                                                                                                              // 7753\n        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 7754\n          args = thisArg = undefined;                                                                                  // 7755\n        }                                                                                                              // 7756\n        return result;                                                                                                 // 7757\n      }                                                                                                                // 7758\n      debounced.cancel = cancel;                                                                                       // 7759\n      return debounced;                                                                                                // 7760\n    }                                                                                                                  // 7761\n                                                                                                                       // 7762\n    /**                                                                                                                // 7763\n     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 7764\n     * additional arguments are provided to `func` when it's invoked.                                                  // 7765\n     *                                                                                                                 // 7766\n     * @static                                                                                                         // 7767\n     * @memberOf _                                                                                                     // 7768\n     * @category Function                                                                                              // 7769\n     * @param {Function} func The function to defer.                                                                   // 7770\n     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7771\n     * @returns {number} Returns the timer id.                                                                         // 7772\n     * @example                                                                                                        // 7773\n     *                                                                                                                 // 7774\n     * _.defer(function(text) {                                                                                        // 7775\n     *   console.log(text);                                                                                            // 7776\n     * }, 'deferred');                                                                                                 // 7777\n     * // logs 'deferred' after one or more milliseconds                                                               // 7778\n     */                                                                                                                // 7779\n    var defer = restParam(function(func, args) {                                                                       // 7780\n      return baseDelay(func, 1, args);                                                                                 // 7781\n    });                                                                                                                // 7782\n                                                                                                                       // 7783\n    /**                                                                                                                // 7784\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 7785\n     * provided to `func` when it's invoked.                                                                           // 7786\n     *                                                                                                                 // 7787\n     * @static                                                                                                         // 7788\n     * @memberOf _                                                                                                     // 7789\n     * @category Function                                                                                              // 7790\n     * @param {Function} func The function to delay.                                                                   // 7791\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 7792\n     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7793\n     * @returns {number} Returns the timer id.                                                                         // 7794\n     * @example                                                                                                        // 7795\n     *                                                                                                                 // 7796\n     * _.delay(function(text) {                                                                                        // 7797\n     *   console.log(text);                                                                                            // 7798\n     * }, 1000, 'later');                                                                                              // 7799\n     * // => logs 'later' after one second                                                                             // 7800\n     */                                                                                                                // 7801\n    var delay = restParam(function(func, wait, args) {                                                                 // 7802\n      return baseDelay(func, wait, args);                                                                              // 7803\n    });                                                                                                                // 7804\n                                                                                                                       // 7805\n    /**                                                                                                                // 7806\n     * Creates a function that returns the result of invoking the provided                                             // 7807\n     * functions with the `this` binding of the created function, where each                                           // 7808\n     * successive invocation is supplied the return value of the previous.                                             // 7809\n     *                                                                                                                 // 7810\n     * @static                                                                                                         // 7811\n     * @memberOf _                                                                                                     // 7812\n     * @category Function                                                                                              // 7813\n     * @param {...Function} [funcs] Functions to invoke.                                                               // 7814\n     * @returns {Function} Returns the new function.                                                                   // 7815\n     * @example                                                                                                        // 7816\n     *                                                                                                                 // 7817\n     * function square(n) {                                                                                            // 7818\n     *   return n * n;                                                                                                 // 7819\n     * }                                                                                                               // 7820\n     *                                                                                                                 // 7821\n     * var addSquare = _.flow(_.add, square);                                                                          // 7822\n     * addSquare(1, 2);                                                                                                // 7823\n     * // => 9                                                                                                         // 7824\n     */                                                                                                                // 7825\n    var flow = createFlow();                                                                                           // 7826\n                                                                                                                       // 7827\n    /**                                                                                                                // 7828\n     * This method is like `_.flow` except that it creates a function that                                             // 7829\n     * invokes the provided functions from right to left.                                                              // 7830\n     *                                                                                                                 // 7831\n     * @static                                                                                                         // 7832\n     * @memberOf _                                                                                                     // 7833\n     * @alias backflow, compose                                                                                        // 7834\n     * @category Function                                                                                              // 7835\n     * @param {...Function} [funcs] Functions to invoke.                                                               // 7836\n     * @returns {Function} Returns the new function.                                                                   // 7837\n     * @example                                                                                                        // 7838\n     *                                                                                                                 // 7839\n     * function square(n) {                                                                                            // 7840\n     *   return n * n;                                                                                                 // 7841\n     * }                                                                                                               // 7842\n     *                                                                                                                 // 7843\n     * var addSquare = _.flowRight(square, _.add);                                                                     // 7844\n     * addSquare(1, 2);                                                                                                // 7845\n     * // => 9                                                                                                         // 7846\n     */                                                                                                                // 7847\n    var flowRight = createFlow(true);                                                                                  // 7848\n                                                                                                                       // 7849\n    /**                                                                                                                // 7850\n     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 7851\n     * provided it determines the cache key for storing the result based on the                                        // 7852\n     * arguments provided to the memoized function. By default, the first argument                                     // 7853\n     * provided to the memoized function is coerced to a string and used as the                                        // 7854\n     * cache key. The `func` is invoked with the `this` binding of the memoized                                        // 7855\n     * function.                                                                                                       // 7856\n     *                                                                                                                 // 7857\n     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 7858\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 7859\n     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `get`, `has`, and `set`.                                                                    // 7861\n     *                                                                                                                 // 7862\n     * @static                                                                                                         // 7863\n     * @memberOf _                                                                                                     // 7864\n     * @category Function                                                                                              // 7865\n     * @param {Function} func The function to have its output memoized.                                                // 7866\n     * @param {Function} [resolver] The function to resolve the cache key.                                             // 7867\n     * @returns {Function} Returns the new memoizing function.                                                         // 7868\n     * @example                                                                                                        // 7869\n     *                                                                                                                 // 7870\n     * var upperCase = _.memoize(function(string) {                                                                    // 7871\n     *   return string.toUpperCase();                                                                                  // 7872\n     * });                                                                                                             // 7873\n     *                                                                                                                 // 7874\n     * upperCase('fred');                                                                                              // 7875\n     * // => 'FRED'                                                                                                    // 7876\n     *                                                                                                                 // 7877\n     * // modifying the result cache                                                                                   // 7878\n     * upperCase.cache.set('fred', 'BARNEY');                                                                          // 7879\n     * upperCase('fred');                                                                                              // 7880\n     * // => 'BARNEY'                                                                                                  // 7881\n     *                                                                                                                 // 7882\n     * // replacing `_.memoize.Cache`                                                                                  // 7883\n     * var object = { 'user': 'fred' };                                                                                // 7884\n     * var other = { 'user': 'barney' };                                                                               // 7885\n     * var identity = _.memoize(_.identity);                                                                           // 7886\n     *                                                                                                                 // 7887\n     * identity(object);                                                                                               // 7888\n     * // => { 'user': 'fred' }                                                                                        // 7889\n     * identity(other);                                                                                                // 7890\n     * // => { 'user': 'fred' }                                                                                        // 7891\n     *                                                                                                                 // 7892\n     * _.memoize.Cache = WeakMap;                                                                                      // 7893\n     * var identity = _.memoize(_.identity);                                                                           // 7894\n     *                                                                                                                 // 7895\n     * identity(object);                                                                                               // 7896\n     * // => { 'user': 'fred' }                                                                                        // 7897\n     * identity(other);                                                                                                // 7898\n     * // => { 'user': 'barney' }                                                                                      // 7899\n     */                                                                                                                // 7900\n    function memoize(func, resolver) {                                                                                 // 7901\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 7902\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7903\n      }                                                                                                                // 7904\n      var memoized = function() {                                                                                      // 7905\n        var args = arguments,                                                                                          // 7906\n            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 7907\n            cache = memoized.cache;                                                                                    // 7908\n                                                                                                                       // 7909\n        if (cache.has(key)) {                                                                                          // 7910\n          return cache.get(key);                                                                                       // 7911\n        }                                                                                                              // 7912\n        var result = func.apply(this, args);                                                                           // 7913\n        memoized.cache = cache.set(key, result);                                                                       // 7914\n        return result;                                                                                                 // 7915\n      };                                                                                                               // 7916\n      memoized.cache = new memoize.Cache;                                                                              // 7917\n      return memoized;                                                                                                 // 7918\n    }                                                                                                                  // 7919\n                                                                                                                       // 7920\n    /**                                                                                                                // 7921\n     * Creates a function that runs each argument through a corresponding                                              // 7922\n     * transform function.                                                                                             // 7923\n     *                                                                                                                 // 7924\n     * @static                                                                                                         // 7925\n     * @memberOf _                                                                                                     // 7926\n     * @category Function                                                                                              // 7927\n     * @param {Function} func The function to wrap.                                                                    // 7928\n     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 7929\n     * arguments, specified as individual functions or arrays of functions.                                            // 7930\n     * @returns {Function} Returns the new function.                                                                   // 7931\n     * @example                                                                                                        // 7932\n     *                                                                                                                 // 7933\n     * function doubled(n) {                                                                                           // 7934\n     *   return n * 2;                                                                                                 // 7935\n     * }                                                                                                               // 7936\n     *                                                                                                                 // 7937\n     * function square(n) {                                                                                            // 7938\n     *   return n * n;                                                                                                 // 7939\n     * }                                                                                                               // 7940\n     *                                                                                                                 // 7941\n     * var modded = _.modArgs(function(x, y) {                                                                         // 7942\n     *   return [x, y];                                                                                                // 7943\n     * }, square, doubled);                                                                                            // 7944\n     *                                                                                                                 // 7945\n     * modded(1, 2);                                                                                                   // 7946\n     * // => [1, 4]                                                                                                    // 7947\n     *                                                                                                                 // 7948\n     * modded(5, 10);                                                                                                  // 7949\n     * // => [25, 20]                                                                                                  // 7950\n     */                                                                                                                // 7951\n    var modArgs = restParam(function(func, transforms) {                                                               // 7952\n      transforms = baseFlatten(transforms);                                                                            // 7953\n      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {                                      // 7954\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7955\n      }                                                                                                                // 7956\n      var length = transforms.length;                                                                                  // 7957\n      return restParam(function(args) {                                                                                // 7958\n        var index = nativeMin(args.length, length);                                                                    // 7959\n        while (index--) {                                                                                              // 7960\n          args[index] = transforms[index](args[index]);                                                                // 7961\n        }                                                                                                              // 7962\n        return func.apply(this, args);                                                                                 // 7963\n      });                                                                                                              // 7964\n    });                                                                                                                // 7965\n                                                                                                                       // 7966\n    /**                                                                                                                // 7967\n     * Creates a function that negates the result of the predicate `func`. The                                         // 7968\n     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 7969\n     * created function.                                                                                               // 7970\n     *                                                                                                                 // 7971\n     * @static                                                                                                         // 7972\n     * @memberOf _                                                                                                     // 7973\n     * @category Function                                                                                              // 7974\n     * @param {Function} predicate The predicate to negate.                                                            // 7975\n     * @returns {Function} Returns the new function.                                                                   // 7976\n     * @example                                                                                                        // 7977\n     *                                                                                                                 // 7978\n     * function isEven(n) {                                                                                            // 7979\n     *   return n % 2 == 0;                                                                                            // 7980\n     * }                                                                                                               // 7981\n     *                                                                                                                 // 7982\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 7983\n     * // => [1, 3, 5]                                                                                                 // 7984\n     */                                                                                                                // 7985\n    function negate(predicate) {                                                                                       // 7986\n      if (typeof predicate != 'function') {                                                                            // 7987\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7988\n      }                                                                                                                // 7989\n      return function() {                                                                                              // 7990\n        return !predicate.apply(this, arguments);                                                                      // 7991\n      };                                                                                                               // 7992\n    }                                                                                                                  // 7993\n                                                                                                                       // 7994\n    /**                                                                                                                // 7995\n     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 7996\n     * to the function return the value of the first call. The `func` is invoked                                       // 7997\n     * with the `this` binding and arguments of the created function.                                                  // 7998\n     *                                                                                                                 // 7999\n     * @static                                                                                                         // 8000\n     * @memberOf _                                                                                                     // 8001\n     * @category Function                                                                                              // 8002\n     * @param {Function} func The function to restrict.                                                                // 8003\n     * @returns {Function} Returns the new restricted function.                                                        // 8004\n     * @example                                                                                                        // 8005\n     *                                                                                                                 // 8006\n     * var initialize = _.once(createApplication);                                                                     // 8007\n     * initialize();                                                                                                   // 8008\n     * initialize();                                                                                                   // 8009\n     * // `initialize` invokes `createApplication` once                                                                // 8010\n     */                                                                                                                // 8011\n    function once(func) {                                                                                              // 8012\n      return before(2, func);                                                                                          // 8013\n    }                                                                                                                  // 8014\n                                                                                                                       // 8015\n    /**                                                                                                                // 8016\n     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8017\n     * to those provided to the new function. This method is like `_.bind` except                                      // 8018\n     * it does **not** alter the `this` binding.                                                                       // 8019\n     *                                                                                                                 // 8020\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8021\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8022\n     *                                                                                                                 // 8023\n     * **Note:** This method does not set the \"length\" property of partially                                           // 8024\n     * applied functions.                                                                                              // 8025\n     *                                                                                                                 // 8026\n     * @static                                                                                                         // 8027\n     * @memberOf _                                                                                                     // 8028\n     * @category Function                                                                                              // 8029\n     * @param {Function} func The function to partially apply arguments to.                                            // 8030\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8031\n     * @returns {Function} Returns the new partially applied function.                                                 // 8032\n     * @example                                                                                                        // 8033\n     *                                                                                                                 // 8034\n     * var greet = function(greeting, name) {                                                                          // 8035\n     *   return greeting + ' ' + name;                                                                                 // 8036\n     * };                                                                                                              // 8037\n     *                                                                                                                 // 8038\n     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8039\n     * sayHelloTo('fred');                                                                                             // 8040\n     * // => 'hello fred'                                                                                              // 8041\n     *                                                                                                                 // 8042\n     * // using placeholders                                                                                           // 8043\n     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8044\n     * greetFred('hi');                                                                                                // 8045\n     * // => 'hi fred'                                                                                                 // 8046\n     */                                                                                                                // 8047\n    var partial = createPartial(PARTIAL_FLAG);                                                                         // 8048\n                                                                                                                       // 8049\n    /**                                                                                                                // 8050\n     * This method is like `_.partial` except that partially applied arguments                                         // 8051\n     * are appended to those provided to the new function.                                                             // 8052\n     *                                                                                                                 // 8053\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8054\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8055\n     *                                                                                                                 // 8056\n     * **Note:** This method does not set the \"length\" property of partially                                           // 8057\n     * applied functions.                                                                                              // 8058\n     *                                                                                                                 // 8059\n     * @static                                                                                                         // 8060\n     * @memberOf _                                                                                                     // 8061\n     * @category Function                                                                                              // 8062\n     * @param {Function} func The function to partially apply arguments to.                                            // 8063\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8064\n     * @returns {Function} Returns the new partially applied function.                                                 // 8065\n     * @example                                                                                                        // 8066\n     *                                                                                                                 // 8067\n     * var greet = function(greeting, name) {                                                                          // 8068\n     *   return greeting + ' ' + name;                                                                                 // 8069\n     * };                                                                                                              // 8070\n     *                                                                                                                 // 8071\n     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8072\n     * greetFred('hi');                                                                                                // 8073\n     * // => 'hi fred'                                                                                                 // 8074\n     *                                                                                                                 // 8075\n     * // using placeholders                                                                                           // 8076\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8077\n     * sayHelloTo('fred');                                                                                             // 8078\n     * // => 'hello fred'                                                                                              // 8079\n     */                                                                                                                // 8080\n    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);                                                              // 8081\n                                                                                                                       // 8082\n    /**                                                                                                                // 8083\n     * Creates a function that invokes `func` with arguments arranged according                                        // 8084\n     * to the specified indexes where the argument value at the first index is                                         // 8085\n     * provided as the first argument, the argument value at the second index is                                       // 8086\n     * provided as the second argument, and so on.                                                                     // 8087\n     *                                                                                                                 // 8088\n     * @static                                                                                                         // 8089\n     * @memberOf _                                                                                                     // 8090\n     * @category Function                                                                                              // 8091\n     * @param {Function} func The function to rearrange arguments for.                                                 // 8092\n     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8093\n     *  specified as individual indexes or arrays of indexes.                                                          // 8094\n     * @returns {Function} Returns the new function.                                                                   // 8095\n     * @example                                                                                                        // 8096\n     *                                                                                                                 // 8097\n     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8098\n     *   return [a, b, c];                                                                                             // 8099\n     * }, 2, 0, 1);                                                                                                    // 8100\n     *                                                                                                                 // 8101\n     * rearged('b', 'c', 'a')                                                                                          // 8102\n     * // => ['a', 'b', 'c']                                                                                           // 8103\n     *                                                                                                                 // 8104\n     * var map = _.rearg(_.map, [1, 0]);                                                                               // 8105\n     * map(function(n) {                                                                                               // 8106\n     *   return n * 3;                                                                                                 // 8107\n     * }, [1, 2, 3]);                                                                                                  // 8108\n     * // => [3, 6, 9]                                                                                                 // 8109\n     */                                                                                                                // 8110\n    var rearg = restParam(function(func, indexes) {                                                                    // 8111\n      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8112\n    });                                                                                                                // 8113\n                                                                                                                       // 8114\n    /**                                                                                                                // 8115\n     * Creates a function that invokes `func` with the `this` binding of the                                           // 8116\n     * created function and arguments from `start` and beyond provided as an array.                                    // 8117\n     *                                                                                                                 // 8118\n     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).\n     *                                                                                                                 // 8120\n     * @static                                                                                                         // 8121\n     * @memberOf _                                                                                                     // 8122\n     * @category Function                                                                                              // 8123\n     * @param {Function} func The function to apply a rest parameter to.                                               // 8124\n     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8125\n     * @returns {Function} Returns the new function.                                                                   // 8126\n     * @example                                                                                                        // 8127\n     *                                                                                                                 // 8128\n     * var say = _.restParam(function(what, names) {                                                                   // 8129\n     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8130\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8131\n     * });                                                                                                             // 8132\n     *                                                                                                                 // 8133\n     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8134\n     * // => 'hello fred, barney, & pebbles'                                                                           // 8135\n     */                                                                                                                // 8136\n    function restParam(func, start) {                                                                                  // 8137\n      if (typeof func != 'function') {                                                                                 // 8138\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8139\n      }                                                                                                                // 8140\n      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);                                   // 8141\n      return function() {                                                                                              // 8142\n        var args = arguments,                                                                                          // 8143\n            index = -1,                                                                                                // 8144\n            length = nativeMax(args.length - start, 0),                                                                // 8145\n            rest = Array(length);                                                                                      // 8146\n                                                                                                                       // 8147\n        while (++index < length) {                                                                                     // 8148\n          rest[index] = args[start + index];                                                                           // 8149\n        }                                                                                                              // 8150\n        switch (start) {                                                                                               // 8151\n          case 0: return func.call(this, rest);                                                                        // 8152\n          case 1: return func.call(this, args[0], rest);                                                               // 8153\n          case 2: return func.call(this, args[0], args[1], rest);                                                      // 8154\n        }                                                                                                              // 8155\n        var otherArgs = Array(start + 1);                                                                              // 8156\n        index = -1;                                                                                                    // 8157\n        while (++index < start) {                                                                                      // 8158\n          otherArgs[index] = args[index];                                                                              // 8159\n        }                                                                                                              // 8160\n        otherArgs[start] = rest;                                                                                       // 8161\n        return func.apply(this, otherArgs);                                                                            // 8162\n      };                                                                                                               // 8163\n    }                                                                                                                  // 8164\n                                                                                                                       // 8165\n    /**                                                                                                                // 8166\n     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8167\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8168\n     *                                                                                                                 // 8169\n     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).\n     *                                                                                                                 // 8171\n     * @static                                                                                                         // 8172\n     * @memberOf _                                                                                                     // 8173\n     * @category Function                                                                                              // 8174\n     * @param {Function} func The function to spread arguments over.                                                   // 8175\n     * @returns {Function} Returns the new function.                                                                   // 8176\n     * @example                                                                                                        // 8177\n     *                                                                                                                 // 8178\n     * var say = _.spread(function(who, what) {                                                                        // 8179\n     *   return who + ' says ' + what;                                                                                 // 8180\n     * });                                                                                                             // 8181\n     *                                                                                                                 // 8182\n     * say(['fred', 'hello']);                                                                                         // 8183\n     * // => 'fred says hello'                                                                                         // 8184\n     *                                                                                                                 // 8185\n     * // with a Promise                                                                                               // 8186\n     * var numbers = Promise.all([                                                                                     // 8187\n     *   Promise.resolve(40),                                                                                          // 8188\n     *   Promise.resolve(36)                                                                                           // 8189\n     * ]);                                                                                                             // 8190\n     *                                                                                                                 // 8191\n     * numbers.then(_.spread(function(x, y) {                                                                          // 8192\n     *   return x + y;                                                                                                 // 8193\n     * }));                                                                                                            // 8194\n     * // => a Promise of 76                                                                                           // 8195\n     */                                                                                                                // 8196\n    function spread(func) {                                                                                            // 8197\n      if (typeof func != 'function') {                                                                                 // 8198\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8199\n      }                                                                                                                // 8200\n      return function(array) {                                                                                         // 8201\n        return func.apply(this, array);                                                                                // 8202\n      };                                                                                                               // 8203\n    }                                                                                                                  // 8204\n                                                                                                                       // 8205\n    /**                                                                                                                // 8206\n     * Creates a throttled function that only invokes `func` at most once per                                          // 8207\n     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8208\n     * method to cancel delayed invocations. Provide an options object to indicate                                     // 8209\n     * that `func` should be invoked on the leading and/or trailing edge of the                                        // 8210\n     * `wait` timeout. Subsequent calls to the throttled function return the                                           // 8211\n     * result of the last `func` call.                                                                                 // 8212\n     *                                                                                                                 // 8213\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8214\n     * on the trailing edge of the timeout only if the the throttled function is                                       // 8215\n     * invoked more than once during the `wait` timeout.                                                               // 8216\n     *                                                                                                                 // 8217\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8218\n     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8219\n     *                                                                                                                 // 8220\n     * @static                                                                                                         // 8221\n     * @memberOf _                                                                                                     // 8222\n     * @category Function                                                                                              // 8223\n     * @param {Function} func The function to throttle.                                                                // 8224\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8225\n     * @param {Object} [options] The options object.                                                                   // 8226\n     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8227\n     *  edge of the timeout.                                                                                           // 8228\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8229\n     *  edge of the timeout.                                                                                           // 8230\n     * @returns {Function} Returns the new throttled function.                                                         // 8231\n     * @example                                                                                                        // 8232\n     *                                                                                                                 // 8233\n     * // avoid excessively updating the position while scrolling                                                      // 8234\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8235\n     *                                                                                                                 // 8236\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8237\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {                                             // 8238\n     *   'trailing': false                                                                                             // 8239\n     * }));                                                                                                            // 8240\n     *                                                                                                                 // 8241\n     * // cancel a trailing throttled call                                                                             // 8242\n     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8243\n     */                                                                                                                // 8244\n    function throttle(func, wait, options) {                                                                           // 8245\n      var leading = true,                                                                                              // 8246\n          trailing = true;                                                                                             // 8247\n                                                                                                                       // 8248\n      if (typeof func != 'function') {                                                                                 // 8249\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8250\n      }                                                                                                                // 8251\n      if (options === false) {                                                                                         // 8252\n        leading = false;                                                                                               // 8253\n      } else if (isObject(options)) {                                                                                  // 8254\n        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8255\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8256\n      }                                                                                                                // 8257\n      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });                     // 8258\n    }                                                                                                                  // 8259\n                                                                                                                       // 8260\n    /**                                                                                                                // 8261\n     * Creates a function that provides `value` to the wrapper function as its                                         // 8262\n     * first argument. Any additional arguments provided to the function are                                           // 8263\n     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 8264\n     * with the `this` binding of the created function.                                                                // 8265\n     *                                                                                                                 // 8266\n     * @static                                                                                                         // 8267\n     * @memberOf _                                                                                                     // 8268\n     * @category Function                                                                                              // 8269\n     * @param {*} value The value to wrap.                                                                             // 8270\n     * @param {Function} wrapper The wrapper function.                                                                 // 8271\n     * @returns {Function} Returns the new function.                                                                   // 8272\n     * @example                                                                                                        // 8273\n     *                                                                                                                 // 8274\n     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 8275\n     *   return '<p>' + func(text) + '</p>';                                                                           // 8276\n     * });                                                                                                             // 8277\n     *                                                                                                                 // 8278\n     * p('fred, barney, & pebbles');                                                                                   // 8279\n     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 8280\n     */                                                                                                                // 8281\n    function wrap(value, wrapper) {                                                                                    // 8282\n      wrapper = wrapper == null ? identity : wrapper;                                                                  // 8283\n      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);                                             // 8284\n    }                                                                                                                  // 8285\n                                                                                                                       // 8286\n    /*------------------------------------------------------------------------*/                                       // 8287\n                                                                                                                       // 8288\n    /**                                                                                                                // 8289\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,                                    // 8290\n     * otherwise they are assigned by reference. If `customizer` is provided it's                                      // 8291\n     * invoked to produce the cloned values. If `customizer` returns `undefined`                                       // 8292\n     * cloning is handled by the method instead. The `customizer` is bound to                                          // 8293\n     * `thisArg` and invoked with up to three argument; (value [, index|key, object]).                                 // 8294\n     *                                                                                                                 // 8295\n     * **Note:** This method is loosely based on the                                                                   // 8296\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by                                         // 8298\n     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8299\n     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8300\n     * Maps, Sets, and WeakMaps.                                                                                       // 8301\n     *                                                                                                                 // 8302\n     * @static                                                                                                         // 8303\n     * @memberOf _                                                                                                     // 8304\n     * @category Lang                                                                                                  // 8305\n     * @param {*} value The value to clone.                                                                            // 8306\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 8307\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 8308\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8309\n     * @returns {*} Returns the cloned value.                                                                          // 8310\n     * @example                                                                                                        // 8311\n     *                                                                                                                 // 8312\n     * var users = [                                                                                                   // 8313\n     *   { 'user': 'barney' },                                                                                         // 8314\n     *   { 'user': 'fred' }                                                                                            // 8315\n     * ];                                                                                                              // 8316\n     *                                                                                                                 // 8317\n     * var shallow = _.clone(users);                                                                                   // 8318\n     * shallow[0] === users[0];                                                                                        // 8319\n     * // => true                                                                                                      // 8320\n     *                                                                                                                 // 8321\n     * var deep = _.clone(users, true);                                                                                // 8322\n     * deep[0] === users[0];                                                                                           // 8323\n     * // => false                                                                                                     // 8324\n     *                                                                                                                 // 8325\n     * // using a customizer callback                                                                                  // 8326\n     * var el = _.clone(document.body, function(value) {                                                               // 8327\n     *   if (_.isElement(value)) {                                                                                     // 8328\n     *     return value.cloneNode(false);                                                                              // 8329\n     *   }                                                                                                             // 8330\n     * });                                                                                                             // 8331\n     *                                                                                                                 // 8332\n     * el === document.body                                                                                            // 8333\n     * // => false                                                                                                     // 8334\n     * el.nodeName                                                                                                     // 8335\n     * // => BODY                                                                                                      // 8336\n     * el.childNodes.length;                                                                                           // 8337\n     * // => 0                                                                                                         // 8338\n     */                                                                                                                // 8339\n    function clone(value, isDeep, customizer, thisArg) {                                                               // 8340\n      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {                         // 8341\n        isDeep = false;                                                                                                // 8342\n      }                                                                                                                // 8343\n      else if (typeof isDeep == 'function') {                                                                          // 8344\n        thisArg = customizer;                                                                                          // 8345\n        customizer = isDeep;                                                                                           // 8346\n        isDeep = false;                                                                                                // 8347\n      }                                                                                                                // 8348\n      return typeof customizer == 'function'                                                                           // 8349\n        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))                                               // 8350\n        : baseClone(value, isDeep);                                                                                    // 8351\n    }                                                                                                                  // 8352\n                                                                                                                       // 8353\n    /**                                                                                                                // 8354\n     * Creates a deep clone of `value`. If `customizer` is provided it's invoked                                       // 8355\n     * to produce the cloned values. If `customizer` returns `undefined` cloning                                       // 8356\n     * is handled by the method instead. The `customizer` is bound to `thisArg`                                        // 8357\n     * and invoked with up to three argument; (value [, index|key, object]).                                           // 8358\n     *                                                                                                                 // 8359\n     * **Note:** This method is loosely based on the                                                                   // 8360\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by                                         // 8362\n     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8363\n     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8364\n     * Maps, Sets, and WeakMaps.                                                                                       // 8365\n     *                                                                                                                 // 8366\n     * @static                                                                                                         // 8367\n     * @memberOf _                                                                                                     // 8368\n     * @category Lang                                                                                                  // 8369\n     * @param {*} value The value to deep clone.                                                                       // 8370\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 8371\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8372\n     * @returns {*} Returns the deep cloned value.                                                                     // 8373\n     * @example                                                                                                        // 8374\n     *                                                                                                                 // 8375\n     * var users = [                                                                                                   // 8376\n     *   { 'user': 'barney' },                                                                                         // 8377\n     *   { 'user': 'fred' }                                                                                            // 8378\n     * ];                                                                                                              // 8379\n     *                                                                                                                 // 8380\n     * var deep = _.cloneDeep(users);                                                                                  // 8381\n     * deep[0] === users[0];                                                                                           // 8382\n     * // => false                                                                                                     // 8383\n     *                                                                                                                 // 8384\n     * // using a customizer callback                                                                                  // 8385\n     * var el = _.cloneDeep(document.body, function(value) {                                                           // 8386\n     *   if (_.isElement(value)) {                                                                                     // 8387\n     *     return value.cloneNode(true);                                                                               // 8388\n     *   }                                                                                                             // 8389\n     * });                                                                                                             // 8390\n     *                                                                                                                 // 8391\n     * el === document.body                                                                                            // 8392\n     * // => false                                                                                                     // 8393\n     * el.nodeName                                                                                                     // 8394\n     * // => BODY                                                                                                      // 8395\n     * el.childNodes.length;                                                                                           // 8396\n     * // => 20                                                                                                        // 8397\n     */                                                                                                                // 8398\n    function cloneDeep(value, customizer, thisArg) {                                                                   // 8399\n      return typeof customizer == 'function'                                                                           // 8400\n        ? baseClone(value, true, bindCallback(customizer, thisArg, 3))                                                 // 8401\n        : baseClone(value, true);                                                                                      // 8402\n    }                                                                                                                  // 8403\n                                                                                                                       // 8404\n    /**                                                                                                                // 8405\n     * Checks if `value` is greater than `other`.                                                                      // 8406\n     *                                                                                                                 // 8407\n     * @static                                                                                                         // 8408\n     * @memberOf _                                                                                                     // 8409\n     * @category Lang                                                                                                  // 8410\n     * @param {*} value The value to compare.                                                                          // 8411\n     * @param {*} other The other value to compare.                                                                    // 8412\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 8413\n     * @example                                                                                                        // 8414\n     *                                                                                                                 // 8415\n     * _.gt(3, 1);                                                                                                     // 8416\n     * // => true                                                                                                      // 8417\n     *                                                                                                                 // 8418\n     * _.gt(3, 3);                                                                                                     // 8419\n     * // => false                                                                                                     // 8420\n     *                                                                                                                 // 8421\n     * _.gt(1, 3);                                                                                                     // 8422\n     * // => false                                                                                                     // 8423\n     */                                                                                                                // 8424\n    function gt(value, other) {                                                                                        // 8425\n      return value > other;                                                                                            // 8426\n    }                                                                                                                  // 8427\n                                                                                                                       // 8428\n    /**                                                                                                                // 8429\n     * Checks if `value` is greater than or equal to `other`.                                                          // 8430\n     *                                                                                                                 // 8431\n     * @static                                                                                                         // 8432\n     * @memberOf _                                                                                                     // 8433\n     * @category Lang                                                                                                  // 8434\n     * @param {*} value The value to compare.                                                                          // 8435\n     * @param {*} other The other value to compare.                                                                    // 8436\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 8437\n     * @example                                                                                                        // 8438\n     *                                                                                                                 // 8439\n     * _.gte(3, 1);                                                                                                    // 8440\n     * // => true                                                                                                      // 8441\n     *                                                                                                                 // 8442\n     * _.gte(3, 3);                                                                                                    // 8443\n     * // => true                                                                                                      // 8444\n     *                                                                                                                 // 8445\n     * _.gte(1, 3);                                                                                                    // 8446\n     * // => false                                                                                                     // 8447\n     */                                                                                                                // 8448\n    function gte(value, other) {                                                                                       // 8449\n      return value >= other;                                                                                           // 8450\n    }                                                                                                                  // 8451\n                                                                                                                       // 8452\n    /**                                                                                                                // 8453\n     * Checks if `value` is classified as an `arguments` object.                                                       // 8454\n     *                                                                                                                 // 8455\n     * @static                                                                                                         // 8456\n     * @memberOf _                                                                                                     // 8457\n     * @category Lang                                                                                                  // 8458\n     * @param {*} value The value to check.                                                                            // 8459\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8460\n     * @example                                                                                                        // 8461\n     *                                                                                                                 // 8462\n     * _.isArguments(function() { return arguments; }());                                                              // 8463\n     * // => true                                                                                                      // 8464\n     *                                                                                                                 // 8465\n     * _.isArguments([1, 2, 3]);                                                                                       // 8466\n     * // => false                                                                                                     // 8467\n     */                                                                                                                // 8468\n    function isArguments(value) {                                                                                      // 8469\n      return isObjectLike(value) && isArrayLike(value) &&                                                              // 8470\n        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');                           // 8471\n    }                                                                                                                  // 8472\n                                                                                                                       // 8473\n    /**                                                                                                                // 8474\n     * Checks if `value` is classified as an `Array` object.                                                           // 8475\n     *                                                                                                                 // 8476\n     * @static                                                                                                         // 8477\n     * @memberOf _                                                                                                     // 8478\n     * @category Lang                                                                                                  // 8479\n     * @param {*} value The value to check.                                                                            // 8480\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8481\n     * @example                                                                                                        // 8482\n     *                                                                                                                 // 8483\n     * _.isArray([1, 2, 3]);                                                                                           // 8484\n     * // => true                                                                                                      // 8485\n     *                                                                                                                 // 8486\n     * _.isArray(function() { return arguments; }());                                                                  // 8487\n     * // => false                                                                                                     // 8488\n     */                                                                                                                // 8489\n    var isArray = nativeIsArray || function(value) {                                                                   // 8490\n      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;                     // 8491\n    };                                                                                                                 // 8492\n                                                                                                                       // 8493\n    /**                                                                                                                // 8494\n     * Checks if `value` is classified as a boolean primitive or object.                                               // 8495\n     *                                                                                                                 // 8496\n     * @static                                                                                                         // 8497\n     * @memberOf _                                                                                                     // 8498\n     * @category Lang                                                                                                  // 8499\n     * @param {*} value The value to check.                                                                            // 8500\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8501\n     * @example                                                                                                        // 8502\n     *                                                                                                                 // 8503\n     * _.isBoolean(false);                                                                                             // 8504\n     * // => true                                                                                                      // 8505\n     *                                                                                                                 // 8506\n     * _.isBoolean(null);                                                                                              // 8507\n     * // => false                                                                                                     // 8508\n     */                                                                                                                // 8509\n    function isBoolean(value) {                                                                                        // 8510\n      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);         // 8511\n    }                                                                                                                  // 8512\n                                                                                                                       // 8513\n    /**                                                                                                                // 8514\n     * Checks if `value` is classified as a `Date` object.                                                             // 8515\n     *                                                                                                                 // 8516\n     * @static                                                                                                         // 8517\n     * @memberOf _                                                                                                     // 8518\n     * @category Lang                                                                                                  // 8519\n     * @param {*} value The value to check.                                                                            // 8520\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8521\n     * @example                                                                                                        // 8522\n     *                                                                                                                 // 8523\n     * _.isDate(new Date);                                                                                             // 8524\n     * // => true                                                                                                      // 8525\n     *                                                                                                                 // 8526\n     * _.isDate('Mon April 23 2012');                                                                                  // 8527\n     * // => false                                                                                                     // 8528\n     */                                                                                                                // 8529\n    function isDate(value) {                                                                                           // 8530\n      return isObjectLike(value) && objToString.call(value) == dateTag;                                                // 8531\n    }                                                                                                                  // 8532\n                                                                                                                       // 8533\n    /**                                                                                                                // 8534\n     * Checks if `value` is a DOM element.                                                                             // 8535\n     *                                                                                                                 // 8536\n     * @static                                                                                                         // 8537\n     * @memberOf _                                                                                                     // 8538\n     * @category Lang                                                                                                  // 8539\n     * @param {*} value The value to check.                                                                            // 8540\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 8541\n     * @example                                                                                                        // 8542\n     *                                                                                                                 // 8543\n     * _.isElement(document.body);                                                                                     // 8544\n     * // => true                                                                                                      // 8545\n     *                                                                                                                 // 8546\n     * _.isElement('<body>');                                                                                          // 8547\n     * // => false                                                                                                     // 8548\n     */                                                                                                                // 8549\n    function isElement(value) {                                                                                        // 8550\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 8551\n    }                                                                                                                  // 8552\n                                                                                                                       // 8553\n    /**                                                                                                                // 8554\n     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 8555\n     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 8556\n     * greater than `0` or an object with own enumerable properties.                                                   // 8557\n     *                                                                                                                 // 8558\n     * @static                                                                                                         // 8559\n     * @memberOf _                                                                                                     // 8560\n     * @category Lang                                                                                                  // 8561\n     * @param {Array|Object|string} value The value to inspect.                                                        // 8562\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 8563\n     * @example                                                                                                        // 8564\n     *                                                                                                                 // 8565\n     * _.isEmpty(null);                                                                                                // 8566\n     * // => true                                                                                                      // 8567\n     *                                                                                                                 // 8568\n     * _.isEmpty(true);                                                                                                // 8569\n     * // => true                                                                                                      // 8570\n     *                                                                                                                 // 8571\n     * _.isEmpty(1);                                                                                                   // 8572\n     * // => true                                                                                                      // 8573\n     *                                                                                                                 // 8574\n     * _.isEmpty([1, 2, 3]);                                                                                           // 8575\n     * // => false                                                                                                     // 8576\n     *                                                                                                                 // 8577\n     * _.isEmpty({ 'a': 1 });                                                                                          // 8578\n     * // => false                                                                                                     // 8579\n     */                                                                                                                // 8580\n    function isEmpty(value) {                                                                                          // 8581\n      if (value == null) {                                                                                             // 8582\n        return true;                                                                                                   // 8583\n      }                                                                                                                // 8584\n      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||                            // 8585\n          (isObjectLike(value) && isFunction(value.splice)))) {                                                        // 8586\n        return !value.length;                                                                                          // 8587\n      }                                                                                                                // 8588\n      return !keys(value).length;                                                                                      // 8589\n    }                                                                                                                  // 8590\n                                                                                                                       // 8591\n    /**                                                                                                                // 8592\n     * Performs a deep comparison between two values to determine if they are                                          // 8593\n     * equivalent. If `customizer` is provided it's invoked to compare values.                                         // 8594\n     * If `customizer` returns `undefined` comparisons are handled by the method                                       // 8595\n     * instead. The `customizer` is bound to `thisArg` and invoked with up to                                          // 8596\n     * three arguments: (value, other [, index|key]).                                                                  // 8597\n     *                                                                                                                 // 8598\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 8599\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 8600\n     * their own, not inherited, enumerable properties. Functions and DOM nodes                                        // 8601\n     * are **not** supported. Provide a customizer function to extend support                                          // 8602\n     * for comparing other values.                                                                                     // 8603\n     *                                                                                                                 // 8604\n     * @static                                                                                                         // 8605\n     * @memberOf _                                                                                                     // 8606\n     * @alias eq                                                                                                       // 8607\n     * @category Lang                                                                                                  // 8608\n     * @param {*} value The value to compare.                                                                          // 8609\n     * @param {*} other The other value to compare.                                                                    // 8610\n     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8611\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8612\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 8613\n     * @example                                                                                                        // 8614\n     *                                                                                                                 // 8615\n     * var object = { 'user': 'fred' };                                                                                // 8616\n     * var other = { 'user': 'fred' };                                                                                 // 8617\n     *                                                                                                                 // 8618\n     * object == other;                                                                                                // 8619\n     * // => false                                                                                                     // 8620\n     *                                                                                                                 // 8621\n     * _.isEqual(object, other);                                                                                       // 8622\n     * // => true                                                                                                      // 8623\n     *                                                                                                                 // 8624\n     * // using a customizer callback                                                                                  // 8625\n     * var array = ['hello', 'goodbye'];                                                                               // 8626\n     * var other = ['hi', 'goodbye'];                                                                                  // 8627\n     *                                                                                                                 // 8628\n     * _.isEqual(array, other, function(value, other) {                                                                // 8629\n     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {                                        // 8630\n     *     return true;                                                                                                // 8631\n     *   }                                                                                                             // 8632\n     * });                                                                                                             // 8633\n     * // => true                                                                                                      // 8634\n     */                                                                                                                // 8635\n    function isEqual(value, other, customizer, thisArg) {                                                              // 8636\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8637\n      var result = customizer ? customizer(value, other) : undefined;                                                  // 8638\n      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                 // 8639\n    }                                                                                                                  // 8640\n                                                                                                                       // 8641\n    /**                                                                                                                // 8642\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 8643\n     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 8644\n     *                                                                                                                 // 8645\n     * @static                                                                                                         // 8646\n     * @memberOf _                                                                                                     // 8647\n     * @category Lang                                                                                                  // 8648\n     * @param {*} value The value to check.                                                                            // 8649\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 8650\n     * @example                                                                                                        // 8651\n     *                                                                                                                 // 8652\n     * _.isError(new Error);                                                                                           // 8653\n     * // => true                                                                                                      // 8654\n     *                                                                                                                 // 8655\n     * _.isError(Error);                                                                                               // 8656\n     * // => false                                                                                                     // 8657\n     */                                                                                                                // 8658\n    function isError(value) {                                                                                          // 8659\n      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;           // 8660\n    }                                                                                                                  // 8661\n                                                                                                                       // 8662\n    /**                                                                                                                // 8663\n     * Checks if `value` is a finite primitive number.                                                                 // 8664\n     *                                                                                                                 // 8665\n     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n     *                                                                                                                 // 8667\n     * @static                                                                                                         // 8668\n     * @memberOf _                                                                                                     // 8669\n     * @category Lang                                                                                                  // 8670\n     * @param {*} value The value to check.                                                                            // 8671\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 8672\n     * @example                                                                                                        // 8673\n     *                                                                                                                 // 8674\n     * _.isFinite(10);                                                                                                 // 8675\n     * // => true                                                                                                      // 8676\n     *                                                                                                                 // 8677\n     * _.isFinite('10');                                                                                               // 8678\n     * // => false                                                                                                     // 8679\n     *                                                                                                                 // 8680\n     * _.isFinite(true);                                                                                               // 8681\n     * // => false                                                                                                     // 8682\n     *                                                                                                                 // 8683\n     * _.isFinite(Object(10));                                                                                         // 8684\n     * // => false                                                                                                     // 8685\n     *                                                                                                                 // 8686\n     * _.isFinite(Infinity);                                                                                           // 8687\n     * // => false                                                                                                     // 8688\n     */                                                                                                                // 8689\n    function isFinite(value) {                                                                                         // 8690\n      return typeof value == 'number' && nativeIsFinite(value);                                                        // 8691\n    }                                                                                                                  // 8692\n                                                                                                                       // 8693\n    /**                                                                                                                // 8694\n     * Checks if `value` is classified as a `Function` object.                                                         // 8695\n     *                                                                                                                 // 8696\n     * @static                                                                                                         // 8697\n     * @memberOf _                                                                                                     // 8698\n     * @category Lang                                                                                                  // 8699\n     * @param {*} value The value to check.                                                                            // 8700\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8701\n     * @example                                                                                                        // 8702\n     *                                                                                                                 // 8703\n     * _.isFunction(_);                                                                                                // 8704\n     * // => true                                                                                                      // 8705\n     *                                                                                                                 // 8706\n     * _.isFunction(/abc/);                                                                                            // 8707\n     * // => false                                                                                                     // 8708\n     */                                                                                                                // 8709\n    function isFunction(value) {                                                                                       // 8710\n      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 8711\n      // in older versions of Chrome and Safari which return 'function' for regexes                                    // 8712\n      // and Safari 8 which returns 'object' for typed array constructors.                                             // 8713\n      return isObject(value) && objToString.call(value) == funcTag;                                                    // 8714\n    }                                                                                                                  // 8715\n                                                                                                                       // 8716\n    /**                                                                                                                // 8717\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 8718\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 8719\n     *                                                                                                                 // 8720\n     * @static                                                                                                         // 8721\n     * @memberOf _                                                                                                     // 8722\n     * @category Lang                                                                                                  // 8723\n     * @param {*} value The value to check.                                                                            // 8724\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 8725\n     * @example                                                                                                        // 8726\n     *                                                                                                                 // 8727\n     * _.isObject({});                                                                                                 // 8728\n     * // => true                                                                                                      // 8729\n     *                                                                                                                 // 8730\n     * _.isObject([1, 2, 3]);                                                                                          // 8731\n     * // => true                                                                                                      // 8732\n     *                                                                                                                 // 8733\n     * _.isObject(1);                                                                                                  // 8734\n     * // => false                                                                                                     // 8735\n     */                                                                                                                // 8736\n    function isObject(value) {                                                                                         // 8737\n      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 8738\n      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 8739\n      var type = typeof value;                                                                                         // 8740\n      return !!value && (type == 'object' || type == 'function');                                                      // 8741\n    }                                                                                                                  // 8742\n                                                                                                                       // 8743\n    /**                                                                                                                // 8744\n     * Performs a deep comparison between `object` and `source` to determine if                                        // 8745\n     * `object` contains equivalent property values. If `customizer` is provided                                       // 8746\n     * it's invoked to compare values. If `customizer` returns `undefined`                                             // 8747\n     * comparisons are handled by the method instead. The `customizer` is bound                                        // 8748\n     * to `thisArg` and invoked with three arguments: (value, other, index|key).                                       // 8749\n     *                                                                                                                 // 8750\n     * **Note:** This method supports comparing properties of arrays, booleans,                                        // 8751\n     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions                                      // 8752\n     * and DOM nodes are **not** supported. Provide a customizer function to extend                                    // 8753\n     * support for comparing other values.                                                                             // 8754\n     *                                                                                                                 // 8755\n     * @static                                                                                                         // 8756\n     * @memberOf _                                                                                                     // 8757\n     * @category Lang                                                                                                  // 8758\n     * @param {Object} object The object to inspect.                                                                   // 8759\n     * @param {Object} source The object of property values to match.                                                  // 8760\n     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8761\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8762\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 8763\n     * @example                                                                                                        // 8764\n     *                                                                                                                 // 8765\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 8766\n     *                                                                                                                 // 8767\n     * _.isMatch(object, { 'age': 40 });                                                                               // 8768\n     * // => true                                                                                                      // 8769\n     *                                                                                                                 // 8770\n     * _.isMatch(object, { 'age': 36 });                                                                               // 8771\n     * // => false                                                                                                     // 8772\n     *                                                                                                                 // 8773\n     * // using a customizer callback                                                                                  // 8774\n     * var object = { 'greeting': 'hello' };                                                                           // 8775\n     * var source = { 'greeting': 'hi' };                                                                              // 8776\n     *                                                                                                                 // 8777\n     * _.isMatch(object, source, function(value, other) {                                                              // 8778\n     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;                          // 8779\n     * });                                                                                                             // 8780\n     * // => true                                                                                                      // 8781\n     */                                                                                                                // 8782\n    function isMatch(object, source, customizer, thisArg) {                                                            // 8783\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8784\n      return baseIsMatch(object, getMatchData(source), customizer);                                                    // 8785\n    }                                                                                                                  // 8786\n                                                                                                                       // 8787\n    /**                                                                                                                // 8788\n     * Checks if `value` is `NaN`.                                                                                     // 8789\n     *                                                                                                                 // 8790\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 8791\n     * which returns `true` for `undefined` and other non-numeric values.                                              // 8792\n     *                                                                                                                 // 8793\n     * @static                                                                                                         // 8794\n     * @memberOf _                                                                                                     // 8795\n     * @category Lang                                                                                                  // 8796\n     * @param {*} value The value to check.                                                                            // 8797\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 8798\n     * @example                                                                                                        // 8799\n     *                                                                                                                 // 8800\n     * _.isNaN(NaN);                                                                                                   // 8801\n     * // => true                                                                                                      // 8802\n     *                                                                                                                 // 8803\n     * _.isNaN(new Number(NaN));                                                                                       // 8804\n     * // => true                                                                                                      // 8805\n     *                                                                                                                 // 8806\n     * isNaN(undefined);                                                                                               // 8807\n     * // => true                                                                                                      // 8808\n     *                                                                                                                 // 8809\n     * _.isNaN(undefined);                                                                                             // 8810\n     * // => false                                                                                                     // 8811\n     */                                                                                                                // 8812\n    function isNaN(value) {                                                                                            // 8813\n      // An `NaN` primitive is the only value that is not equal to itself.                                             // 8814\n      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.                           // 8815\n      return isNumber(value) && value != +value;                                                                       // 8816\n    }                                                                                                                  // 8817\n                                                                                                                       // 8818\n    /**                                                                                                                // 8819\n     * Checks if `value` is a native function.                                                                         // 8820\n     *                                                                                                                 // 8821\n     * @static                                                                                                         // 8822\n     * @memberOf _                                                                                                     // 8823\n     * @category Lang                                                                                                  // 8824\n     * @param {*} value The value to check.                                                                            // 8825\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 8826\n     * @example                                                                                                        // 8827\n     *                                                                                                                 // 8828\n     * _.isNative(Array.prototype.push);                                                                               // 8829\n     * // => true                                                                                                      // 8830\n     *                                                                                                                 // 8831\n     * _.isNative(_);                                                                                                  // 8832\n     * // => false                                                                                                     // 8833\n     */                                                                                                                // 8834\n    function isNative(value) {                                                                                         // 8835\n      if (value == null) {                                                                                             // 8836\n        return false;                                                                                                  // 8837\n      }                                                                                                                // 8838\n      if (isFunction(value)) {                                                                                         // 8839\n        return reIsNative.test(fnToString.call(value));                                                                // 8840\n      }                                                                                                                // 8841\n      return isObjectLike(value) && reIsHostCtor.test(value);                                                          // 8842\n    }                                                                                                                  // 8843\n                                                                                                                       // 8844\n    /**                                                                                                                // 8845\n     * Checks if `value` is `null`.                                                                                    // 8846\n     *                                                                                                                 // 8847\n     * @static                                                                                                         // 8848\n     * @memberOf _                                                                                                     // 8849\n     * @category Lang                                                                                                  // 8850\n     * @param {*} value The value to check.                                                                            // 8851\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 8852\n     * @example                                                                                                        // 8853\n     *                                                                                                                 // 8854\n     * _.isNull(null);                                                                                                 // 8855\n     * // => true                                                                                                      // 8856\n     *                                                                                                                 // 8857\n     * _.isNull(void 0);                                                                                               // 8858\n     * // => false                                                                                                     // 8859\n     */                                                                                                                // 8860\n    function isNull(value) {                                                                                           // 8861\n      return value === null;                                                                                           // 8862\n    }                                                                                                                  // 8863\n                                                                                                                       // 8864\n    /**                                                                                                                // 8865\n     * Checks if `value` is classified as a `Number` primitive or object.                                              // 8866\n     *                                                                                                                 // 8867\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 8868\n     * as numbers, use the `_.isFinite` method.                                                                        // 8869\n     *                                                                                                                 // 8870\n     * @static                                                                                                         // 8871\n     * @memberOf _                                                                                                     // 8872\n     * @category Lang                                                                                                  // 8873\n     * @param {*} value The value to check.                                                                            // 8874\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8875\n     * @example                                                                                                        // 8876\n     *                                                                                                                 // 8877\n     * _.isNumber(8.4);                                                                                                // 8878\n     * // => true                                                                                                      // 8879\n     *                                                                                                                 // 8880\n     * _.isNumber(NaN);                                                                                                // 8881\n     * // => true                                                                                                      // 8882\n     *                                                                                                                 // 8883\n     * _.isNumber('8.4');                                                                                              // 8884\n     * // => false                                                                                                     // 8885\n     */                                                                                                                // 8886\n    function isNumber(value) {                                                                                         // 8887\n      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);                // 8888\n    }                                                                                                                  // 8889\n                                                                                                                       // 8890\n    /**                                                                                                                // 8891\n     * Checks if `value` is a plain object, that is, an object created by the                                          // 8892\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 8893\n     *                                                                                                                 // 8894\n     * **Note:** This method assumes objects created by the `Object` constructor                                       // 8895\n     * have no inherited enumerable properties.                                                                        // 8896\n     *                                                                                                                 // 8897\n     * @static                                                                                                         // 8898\n     * @memberOf _                                                                                                     // 8899\n     * @category Lang                                                                                                  // 8900\n     * @param {*} value The value to check.                                                                            // 8901\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 8902\n     * @example                                                                                                        // 8903\n     *                                                                                                                 // 8904\n     * function Foo() {                                                                                                // 8905\n     *   this.a = 1;                                                                                                   // 8906\n     * }                                                                                                               // 8907\n     *                                                                                                                 // 8908\n     * _.isPlainObject(new Foo);                                                                                       // 8909\n     * // => false                                                                                                     // 8910\n     *                                                                                                                 // 8911\n     * _.isPlainObject([1, 2, 3]);                                                                                     // 8912\n     * // => false                                                                                                     // 8913\n     *                                                                                                                 // 8914\n     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 8915\n     * // => true                                                                                                      // 8916\n     *                                                                                                                 // 8917\n     * _.isPlainObject(Object.create(null));                                                                           // 8918\n     * // => true                                                                                                      // 8919\n     */                                                                                                                // 8920\n    function isPlainObject(value) {                                                                                    // 8921\n      var Ctor;                                                                                                        // 8922\n                                                                                                                       // 8923\n      // Exit early for non `Object` objects.                                                                          // 8924\n      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||                     // 8925\n          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n        return false;                                                                                                  // 8927\n      }                                                                                                                // 8928\n      // IE < 9 iterates inherited properties before own properties. If the first                                      // 8929\n      // iterated property is an object's own property then there are no inherited                                     // 8930\n      // enumerable properties.                                                                                        // 8931\n      var result;                                                                                                      // 8932\n      // In most environments an object's own properties are iterated before                                           // 8933\n      // its inherited properties. If the last iterated property is an object's                                        // 8934\n      // own property then there are no inherited enumerable properties.                                               // 8935\n      baseForIn(value, function(subValue, key) {                                                                       // 8936\n        result = key;                                                                                                  // 8937\n      });                                                                                                              // 8938\n      return result === undefined || hasOwnProperty.call(value, result);                                               // 8939\n    }                                                                                                                  // 8940\n                                                                                                                       // 8941\n    /**                                                                                                                // 8942\n     * Checks if `value` is classified as a `RegExp` object.                                                           // 8943\n     *                                                                                                                 // 8944\n     * @static                                                                                                         // 8945\n     * @memberOf _                                                                                                     // 8946\n     * @category Lang                                                                                                  // 8947\n     * @param {*} value The value to check.                                                                            // 8948\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8949\n     * @example                                                                                                        // 8950\n     *                                                                                                                 // 8951\n     * _.isRegExp(/abc/);                                                                                              // 8952\n     * // => true                                                                                                      // 8953\n     *                                                                                                                 // 8954\n     * _.isRegExp('/abc/');                                                                                            // 8955\n     * // => false                                                                                                     // 8956\n     */                                                                                                                // 8957\n    function isRegExp(value) {                                                                                         // 8958\n      return isObject(value) && objToString.call(value) == regexpTag;                                                  // 8959\n    }                                                                                                                  // 8960\n                                                                                                                       // 8961\n    /**                                                                                                                // 8962\n     * Checks if `value` is classified as a `String` primitive or object.                                              // 8963\n     *                                                                                                                 // 8964\n     * @static                                                                                                         // 8965\n     * @memberOf _                                                                                                     // 8966\n     * @category Lang                                                                                                  // 8967\n     * @param {*} value The value to check.                                                                            // 8968\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8969\n     * @example                                                                                                        // 8970\n     *                                                                                                                 // 8971\n     * _.isString('abc');                                                                                              // 8972\n     * // => true                                                                                                      // 8973\n     *                                                                                                                 // 8974\n     * _.isString(1);                                                                                                  // 8975\n     * // => false                                                                                                     // 8976\n     */                                                                                                                // 8977\n    function isString(value) {                                                                                         // 8978\n      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);                // 8979\n    }                                                                                                                  // 8980\n                                                                                                                       // 8981\n    /**                                                                                                                // 8982\n     * Checks if `value` is classified as a typed array.                                                               // 8983\n     *                                                                                                                 // 8984\n     * @static                                                                                                         // 8985\n     * @memberOf _                                                                                                     // 8986\n     * @category Lang                                                                                                  // 8987\n     * @param {*} value The value to check.                                                                            // 8988\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8989\n     * @example                                                                                                        // 8990\n     *                                                                                                                 // 8991\n     * _.isTypedArray(new Uint8Array);                                                                                 // 8992\n     * // => true                                                                                                      // 8993\n     *                                                                                                                 // 8994\n     * _.isTypedArray([]);                                                                                             // 8995\n     * // => false                                                                                                     // 8996\n     */                                                                                                                // 8997\n    function isTypedArray(value) {                                                                                     // 8998\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];               // 8999\n    }                                                                                                                  // 9000\n                                                                                                                       // 9001\n    /**                                                                                                                // 9002\n     * Checks if `value` is `undefined`.                                                                               // 9003\n     *                                                                                                                 // 9004\n     * @static                                                                                                         // 9005\n     * @memberOf _                                                                                                     // 9006\n     * @category Lang                                                                                                  // 9007\n     * @param {*} value The value to check.                                                                            // 9008\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 9009\n     * @example                                                                                                        // 9010\n     *                                                                                                                 // 9011\n     * _.isUndefined(void 0);                                                                                          // 9012\n     * // => true                                                                                                      // 9013\n     *                                                                                                                 // 9014\n     * _.isUndefined(null);                                                                                            // 9015\n     * // => false                                                                                                     // 9016\n     */                                                                                                                // 9017\n    function isUndefined(value) {                                                                                      // 9018\n      return value === undefined;                                                                                      // 9019\n    }                                                                                                                  // 9020\n                                                                                                                       // 9021\n    /**                                                                                                                // 9022\n     * Checks if `value` is less than `other`.                                                                         // 9023\n     *                                                                                                                 // 9024\n     * @static                                                                                                         // 9025\n     * @memberOf _                                                                                                     // 9026\n     * @category Lang                                                                                                  // 9027\n     * @param {*} value The value to compare.                                                                          // 9028\n     * @param {*} other The other value to compare.                                                                    // 9029\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 9030\n     * @example                                                                                                        // 9031\n     *                                                                                                                 // 9032\n     * _.lt(1, 3);                                                                                                     // 9033\n     * // => true                                                                                                      // 9034\n     *                                                                                                                 // 9035\n     * _.lt(3, 3);                                                                                                     // 9036\n     * // => false                                                                                                     // 9037\n     *                                                                                                                 // 9038\n     * _.lt(3, 1);                                                                                                     // 9039\n     * // => false                                                                                                     // 9040\n     */                                                                                                                // 9041\n    function lt(value, other) {                                                                                        // 9042\n      return value < other;                                                                                            // 9043\n    }                                                                                                                  // 9044\n                                                                                                                       // 9045\n    /**                                                                                                                // 9046\n     * Checks if `value` is less than or equal to `other`.                                                             // 9047\n     *                                                                                                                 // 9048\n     * @static                                                                                                         // 9049\n     * @memberOf _                                                                                                     // 9050\n     * @category Lang                                                                                                  // 9051\n     * @param {*} value The value to compare.                                                                          // 9052\n     * @param {*} other The other value to compare.                                                                    // 9053\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 9054\n     * @example                                                                                                        // 9055\n     *                                                                                                                 // 9056\n     * _.lte(1, 3);                                                                                                    // 9057\n     * // => true                                                                                                      // 9058\n     *                                                                                                                 // 9059\n     * _.lte(3, 3);                                                                                                    // 9060\n     * // => true                                                                                                      // 9061\n     *                                                                                                                 // 9062\n     * _.lte(3, 1);                                                                                                    // 9063\n     * // => false                                                                                                     // 9064\n     */                                                                                                                // 9065\n    function lte(value, other) {                                                                                       // 9066\n      return value <= other;                                                                                           // 9067\n    }                                                                                                                  // 9068\n                                                                                                                       // 9069\n    /**                                                                                                                // 9070\n     * Converts `value` to an array.                                                                                   // 9071\n     *                                                                                                                 // 9072\n     * @static                                                                                                         // 9073\n     * @memberOf _                                                                                                     // 9074\n     * @category Lang                                                                                                  // 9075\n     * @param {*} value The value to convert.                                                                          // 9076\n     * @returns {Array} Returns the converted array.                                                                   // 9077\n     * @example                                                                                                        // 9078\n     *                                                                                                                 // 9079\n     * (function() {                                                                                                   // 9080\n     *   return _.toArray(arguments).slice(1);                                                                         // 9081\n     * }(1, 2, 3));                                                                                                    // 9082\n     * // => [2, 3]                                                                                                    // 9083\n     */                                                                                                                // 9084\n    function toArray(value) {                                                                                          // 9085\n      var length = value ? getLength(value) : 0;                                                                       // 9086\n      if (!isLength(length)) {                                                                                         // 9087\n        return values(value);                                                                                          // 9088\n      }                                                                                                                // 9089\n      if (!length) {                                                                                                   // 9090\n        return [];                                                                                                     // 9091\n      }                                                                                                                // 9092\n      return arrayCopy(value);                                                                                         // 9093\n    }                                                                                                                  // 9094\n                                                                                                                       // 9095\n    /**                                                                                                                // 9096\n     * Converts `value` to a plain object flattening inherited enumerable                                              // 9097\n     * properties of `value` to own properties of the plain object.                                                    // 9098\n     *                                                                                                                 // 9099\n     * @static                                                                                                         // 9100\n     * @memberOf _                                                                                                     // 9101\n     * @category Lang                                                                                                  // 9102\n     * @param {*} value The value to convert.                                                                          // 9103\n     * @returns {Object} Returns the converted plain object.                                                           // 9104\n     * @example                                                                                                        // 9105\n     *                                                                                                                 // 9106\n     * function Foo() {                                                                                                // 9107\n     *   this.b = 2;                                                                                                   // 9108\n     * }                                                                                                               // 9109\n     *                                                                                                                 // 9110\n     * Foo.prototype.c = 3;                                                                                            // 9111\n     *                                                                                                                 // 9112\n     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 9113\n     * // => { 'a': 1, 'b': 2 }                                                                                        // 9114\n     *                                                                                                                 // 9115\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 9116\n     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 9117\n     */                                                                                                                // 9118\n    function toPlainObject(value) {                                                                                    // 9119\n      return baseCopy(value, keysIn(value));                                                                           // 9120\n    }                                                                                                                  // 9121\n                                                                                                                       // 9122\n    /*------------------------------------------------------------------------*/                                       // 9123\n                                                                                                                       // 9124\n    /**                                                                                                                // 9125\n     * Recursively merges own enumerable properties of the source object(s), that                                      // 9126\n     * don't resolve to `undefined` into the destination object. Subsequent sources                                    // 9127\n     * overwrite property assignments of previous sources. If `customizer` is                                          // 9128\n     * provided it's invoked to produce the merged values of the destination and                                       // 9129\n     * source properties. If `customizer` returns `undefined` merging is handled                                       // 9130\n     * by the method instead. The `customizer` is bound to `thisArg` and invoked                                       // 9131\n     * with five arguments: (objectValue, sourceValue, key, object, source).                                           // 9132\n     *                                                                                                                 // 9133\n     * @static                                                                                                         // 9134\n     * @memberOf _                                                                                                     // 9135\n     * @category Object                                                                                                // 9136\n     * @param {Object} object The destination object.                                                                  // 9137\n     * @param {...Object} [sources] The source objects.                                                                // 9138\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 9139\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9140\n     * @returns {Object} Returns `object`.                                                                             // 9141\n     * @example                                                                                                        // 9142\n     *                                                                                                                 // 9143\n     * var users = {                                                                                                   // 9144\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 9145\n     * };                                                                                                              // 9146\n     *                                                                                                                 // 9147\n     * var ages = {                                                                                                    // 9148\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 9149\n     * };                                                                                                              // 9150\n     *                                                                                                                 // 9151\n     * _.merge(users, ages);                                                                                           // 9152\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 9153\n     *                                                                                                                 // 9154\n     * // using a customizer callback                                                                                  // 9155\n     * var object = {                                                                                                  // 9156\n     *   'fruits': ['apple'],                                                                                          // 9157\n     *   'vegetables': ['beet']                                                                                        // 9158\n     * };                                                                                                              // 9159\n     *                                                                                                                 // 9160\n     * var other = {                                                                                                   // 9161\n     *   'fruits': ['banana'],                                                                                         // 9162\n     *   'vegetables': ['carrot']                                                                                      // 9163\n     * };                                                                                                              // 9164\n     *                                                                                                                 // 9165\n     * _.merge(object, other, function(a, b) {                                                                         // 9166\n     *   if (_.isArray(a)) {                                                                                           // 9167\n     *     return a.concat(b);                                                                                         // 9168\n     *   }                                                                                                             // 9169\n     * });                                                                                                             // 9170\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 9171\n     */                                                                                                                // 9172\n    var merge = createAssigner(baseMerge);                                                                             // 9173\n                                                                                                                       // 9174\n    /**                                                                                                                // 9175\n     * Assigns own enumerable properties of source object(s) to the destination                                        // 9176\n     * object. Subsequent sources overwrite property assignments of previous sources.                                  // 9177\n     * If `customizer` is provided it's invoked to produce the assigned values.                                        // 9178\n     * The `customizer` is bound to `thisArg` and invoked with five arguments:                                         // 9179\n     * (objectValue, sourceValue, key, object, source).                                                                // 9180\n     *                                                                                                                 // 9181\n     * **Note:** This method mutates `object` and is based on                                                          // 9182\n     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).                               // 9183\n     *                                                                                                                 // 9184\n     * @static                                                                                                         // 9185\n     * @memberOf _                                                                                                     // 9186\n     * @alias extend                                                                                                   // 9187\n     * @category Object                                                                                                // 9188\n     * @param {Object} object The destination object.                                                                  // 9189\n     * @param {...Object} [sources] The source objects.                                                                // 9190\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 9191\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9192\n     * @returns {Object} Returns `object`.                                                                             // 9193\n     * @example                                                                                                        // 9194\n     *                                                                                                                 // 9195\n     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });                                              // 9196\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 9197\n     *                                                                                                                 // 9198\n     * // using a customizer callback                                                                                  // 9199\n     * var defaults = _.partialRight(_.assign, function(value, other) {                                                // 9200\n     *   return _.isUndefined(value) ? other : value;                                                                  // 9201\n     * });                                                                                                             // 9202\n     *                                                                                                                 // 9203\n     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                              // 9204\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9205\n     */                                                                                                                // 9206\n    var assign = createAssigner(function(object, source, customizer) {                                                 // 9207\n      return customizer                                                                                                // 9208\n        ? assignWith(object, source, customizer)                                                                       // 9209\n        : baseAssign(object, source);                                                                                  // 9210\n    });                                                                                                                // 9211\n                                                                                                                       // 9212\n    /**                                                                                                                // 9213\n     * Creates an object that inherits from the given `prototype` object. If a                                         // 9214\n     * `properties` object is provided its own enumerable properties are assigned                                      // 9215\n     * to the created object.                                                                                          // 9216\n     *                                                                                                                 // 9217\n     * @static                                                                                                         // 9218\n     * @memberOf _                                                                                                     // 9219\n     * @category Object                                                                                                // 9220\n     * @param {Object} prototype The object to inherit from.                                                           // 9221\n     * @param {Object} [properties] The properties to assign to the object.                                            // 9222\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9223\n     * @returns {Object} Returns the new object.                                                                       // 9224\n     * @example                                                                                                        // 9225\n     *                                                                                                                 // 9226\n     * function Shape() {                                                                                              // 9227\n     *   this.x = 0;                                                                                                   // 9228\n     *   this.y = 0;                                                                                                   // 9229\n     * }                                                                                                               // 9230\n     *                                                                                                                 // 9231\n     * function Circle() {                                                                                             // 9232\n     *   Shape.call(this);                                                                                             // 9233\n     * }                                                                                                               // 9234\n     *                                                                                                                 // 9235\n     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 9236\n     *   'constructor': Circle                                                                                         // 9237\n     * });                                                                                                             // 9238\n     *                                                                                                                 // 9239\n     * var circle = new Circle;                                                                                        // 9240\n     * circle instanceof Circle;                                                                                       // 9241\n     * // => true                                                                                                      // 9242\n     *                                                                                                                 // 9243\n     * circle instanceof Shape;                                                                                        // 9244\n     * // => true                                                                                                      // 9245\n     */                                                                                                                // 9246\n    function create(prototype, properties, guard) {                                                                    // 9247\n      var result = baseCreate(prototype);                                                                              // 9248\n      if (guard && isIterateeCall(prototype, properties, guard)) {                                                     // 9249\n        properties = undefined;                                                                                        // 9250\n      }                                                                                                                // 9251\n      return properties ? baseAssign(result, properties) : result;                                                     // 9252\n    }                                                                                                                  // 9253\n                                                                                                                       // 9254\n    /**                                                                                                                // 9255\n     * Assigns own enumerable properties of source object(s) to the destination                                        // 9256\n     * object for all destination properties that resolve to `undefined`. Once a                                       // 9257\n     * property is set, additional values of the same property are ignored.                                            // 9258\n     *                                                                                                                 // 9259\n     * **Note:** This method mutates `object`.                                                                         // 9260\n     *                                                                                                                 // 9261\n     * @static                                                                                                         // 9262\n     * @memberOf _                                                                                                     // 9263\n     * @category Object                                                                                                // 9264\n     * @param {Object} object The destination object.                                                                  // 9265\n     * @param {...Object} [sources] The source objects.                                                                // 9266\n     * @returns {Object} Returns `object`.                                                                             // 9267\n     * @example                                                                                                        // 9268\n     *                                                                                                                 // 9269\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 9270\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9271\n     */                                                                                                                // 9272\n    var defaults = createDefaults(assign, assignDefaults);                                                             // 9273\n                                                                                                                       // 9274\n    /**                                                                                                                // 9275\n     * This method is like `_.defaults` except that it recursively assigns                                             // 9276\n     * default properties.                                                                                             // 9277\n     *                                                                                                                 // 9278\n     * **Note:** This method mutates `object`.                                                                         // 9279\n     *                                                                                                                 // 9280\n     * @static                                                                                                         // 9281\n     * @memberOf _                                                                                                     // 9282\n     * @category Object                                                                                                // 9283\n     * @param {Object} object The destination object.                                                                  // 9284\n     * @param {...Object} [sources] The source objects.                                                                // 9285\n     * @returns {Object} Returns `object`.                                                                             // 9286\n     * @example                                                                                                        // 9287\n     *                                                                                                                 // 9288\n     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 9289\n     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 9290\n     *                                                                                                                 // 9291\n     */                                                                                                                // 9292\n    var defaultsDeep = createDefaults(merge, mergeDefaults);                                                           // 9293\n                                                                                                                       // 9294\n    /**                                                                                                                // 9295\n     * This method is like `_.find` except that it returns the key of the first                                        // 9296\n     * element `predicate` returns truthy for instead of the element itself.                                           // 9297\n     *                                                                                                                 // 9298\n     * If a property name is provided for `predicate` the created `_.property`                                         // 9299\n     * style callback returns the property value of the given element.                                                 // 9300\n     *                                                                                                                 // 9301\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9302\n     * style callback returns `true` for elements that have a matching property                                        // 9303\n     * value, else `false`.                                                                                            // 9304\n     *                                                                                                                 // 9305\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 9306\n     * callback returns `true` for elements that have the properties of the given                                      // 9307\n     * object, else `false`.                                                                                           // 9308\n     *                                                                                                                 // 9309\n     * @static                                                                                                         // 9310\n     * @memberOf _                                                                                                     // 9311\n     * @category Object                                                                                                // 9312\n     * @param {Object} object The object to search.                                                                    // 9313\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9314\n     *  per iteration.                                                                                                 // 9315\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9316\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9317\n     * @example                                                                                                        // 9318\n     *                                                                                                                 // 9319\n     * var users = {                                                                                                   // 9320\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9321\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9322\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9323\n     * };                                                                                                              // 9324\n     *                                                                                                                 // 9325\n     * _.findKey(users, function(chr) {                                                                                // 9326\n     *   return chr.age < 40;                                                                                          // 9327\n     * });                                                                                                             // 9328\n     * // => 'barney' (iteration order is not guaranteed)                                                              // 9329\n     *                                                                                                                 // 9330\n     * // using the `_.matches` callback shorthand                                                                     // 9331\n     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 9332\n     * // => 'pebbles'                                                                                                 // 9333\n     *                                                                                                                 // 9334\n     * // using the `_.matchesProperty` callback shorthand                                                             // 9335\n     * _.findKey(users, 'active', false);                                                                              // 9336\n     * // => 'fred'                                                                                                    // 9337\n     *                                                                                                                 // 9338\n     * // using the `_.property` callback shorthand                                                                    // 9339\n     * _.findKey(users, 'active');                                                                                     // 9340\n     * // => 'barney'                                                                                                  // 9341\n     */                                                                                                                // 9342\n    var findKey = createFindKey(baseForOwn);                                                                           // 9343\n                                                                                                                       // 9344\n    /**                                                                                                                // 9345\n     * This method is like `_.findKey` except that it iterates over elements of                                        // 9346\n     * a collection in the opposite order.                                                                             // 9347\n     *                                                                                                                 // 9348\n     * If a property name is provided for `predicate` the created `_.property`                                         // 9349\n     * style callback returns the property value of the given element.                                                 // 9350\n     *                                                                                                                 // 9351\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9352\n     * style callback returns `true` for elements that have a matching property                                        // 9353\n     * value, else `false`.                                                                                            // 9354\n     *                                                                                                                 // 9355\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 9356\n     * callback returns `true` for elements that have the properties of the given                                      // 9357\n     * object, else `false`.                                                                                           // 9358\n     *                                                                                                                 // 9359\n     * @static                                                                                                         // 9360\n     * @memberOf _                                                                                                     // 9361\n     * @category Object                                                                                                // 9362\n     * @param {Object} object The object to search.                                                                    // 9363\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9364\n     *  per iteration.                                                                                                 // 9365\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9366\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9367\n     * @example                                                                                                        // 9368\n     *                                                                                                                 // 9369\n     * var users = {                                                                                                   // 9370\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9371\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9372\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9373\n     * };                                                                                                              // 9374\n     *                                                                                                                 // 9375\n     * _.findLastKey(users, function(chr) {                                                                            // 9376\n     *   return chr.age < 40;                                                                                          // 9377\n     * });                                                                                                             // 9378\n     * // => returns `pebbles` assuming `_.findKey` returns `barney`                                                   // 9379\n     *                                                                                                                 // 9380\n     * // using the `_.matches` callback shorthand                                                                     // 9381\n     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 9382\n     * // => 'barney'                                                                                                  // 9383\n     *                                                                                                                 // 9384\n     * // using the `_.matchesProperty` callback shorthand                                                             // 9385\n     * _.findLastKey(users, 'active', false);                                                                          // 9386\n     * // => 'fred'                                                                                                    // 9387\n     *                                                                                                                 // 9388\n     * // using the `_.property` callback shorthand                                                                    // 9389\n     * _.findLastKey(users, 'active');                                                                                 // 9390\n     * // => 'pebbles'                                                                                                 // 9391\n     */                                                                                                                // 9392\n    var findLastKey = createFindKey(baseForOwnRight);                                                                  // 9393\n                                                                                                                       // 9394\n    /**                                                                                                                // 9395\n     * Iterates over own and inherited enumerable properties of an object invoking                                     // 9396\n     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked                                  // 9397\n     * with three arguments: (value, key, object). Iteratee functions may exit                                         // 9398\n     * iteration early by explicitly returning `false`.                                                                // 9399\n     *                                                                                                                 // 9400\n     * @static                                                                                                         // 9401\n     * @memberOf _                                                                                                     // 9402\n     * @category Object                                                                                                // 9403\n     * @param {Object} object The object to iterate over.                                                              // 9404\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9405\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9406\n     * @returns {Object} Returns `object`.                                                                             // 9407\n     * @example                                                                                                        // 9408\n     *                                                                                                                 // 9409\n     * function Foo() {                                                                                                // 9410\n     *   this.a = 1;                                                                                                   // 9411\n     *   this.b = 2;                                                                                                   // 9412\n     * }                                                                                                               // 9413\n     *                                                                                                                 // 9414\n     * Foo.prototype.c = 3;                                                                                            // 9415\n     *                                                                                                                 // 9416\n     * _.forIn(new Foo, function(value, key) {                                                                         // 9417\n     *   console.log(key);                                                                                             // 9418\n     * });                                                                                                             // 9419\n     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)                                                // 9420\n     */                                                                                                                // 9421\n    var forIn = createForIn(baseFor);                                                                                  // 9422\n                                                                                                                       // 9423\n    /**                                                                                                                // 9424\n     * This method is like `_.forIn` except that it iterates over properties of                                        // 9425\n     * `object` in the opposite order.                                                                                 // 9426\n     *                                                                                                                 // 9427\n     * @static                                                                                                         // 9428\n     * @memberOf _                                                                                                     // 9429\n     * @category Object                                                                                                // 9430\n     * @param {Object} object The object to iterate over.                                                              // 9431\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9432\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9433\n     * @returns {Object} Returns `object`.                                                                             // 9434\n     * @example                                                                                                        // 9435\n     *                                                                                                                 // 9436\n     * function Foo() {                                                                                                // 9437\n     *   this.a = 1;                                                                                                   // 9438\n     *   this.b = 2;                                                                                                   // 9439\n     * }                                                                                                               // 9440\n     *                                                                                                                 // 9441\n     * Foo.prototype.c = 3;                                                                                            // 9442\n     *                                                                                                                 // 9443\n     * _.forInRight(new Foo, function(value, key) {                                                                    // 9444\n     *   console.log(key);                                                                                             // 9445\n     * });                                                                                                             // 9446\n     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'                                         // 9447\n     */                                                                                                                // 9448\n    var forInRight = createForIn(baseForRight);                                                                        // 9449\n                                                                                                                       // 9450\n    /**                                                                                                                // 9451\n     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 9452\n     * for each property. The `iteratee` is bound to `thisArg` and invoked with                                        // 9453\n     * three arguments: (value, key, object). Iteratee functions may exit iteration                                    // 9454\n     * early by explicitly returning `false`.                                                                          // 9455\n     *                                                                                                                 // 9456\n     * @static                                                                                                         // 9457\n     * @memberOf _                                                                                                     // 9458\n     * @category Object                                                                                                // 9459\n     * @param {Object} object The object to iterate over.                                                              // 9460\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9461\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9462\n     * @returns {Object} Returns `object`.                                                                             // 9463\n     * @example                                                                                                        // 9464\n     *                                                                                                                 // 9465\n     * function Foo() {                                                                                                // 9466\n     *   this.a = 1;                                                                                                   // 9467\n     *   this.b = 2;                                                                                                   // 9468\n     * }                                                                                                               // 9469\n     *                                                                                                                 // 9470\n     * Foo.prototype.c = 3;                                                                                            // 9471\n     *                                                                                                                 // 9472\n     * _.forOwn(new Foo, function(value, key) {                                                                        // 9473\n     *   console.log(key);                                                                                             // 9474\n     * });                                                                                                             // 9475\n     * // => logs 'a' and 'b' (iteration order is not guaranteed)                                                      // 9476\n     */                                                                                                                // 9477\n    var forOwn = createForOwn(baseForOwn);                                                                             // 9478\n                                                                                                                       // 9479\n    /**                                                                                                                // 9480\n     * This method is like `_.forOwn` except that it iterates over properties of                                       // 9481\n     * `object` in the opposite order.                                                                                 // 9482\n     *                                                                                                                 // 9483\n     * @static                                                                                                         // 9484\n     * @memberOf _                                                                                                     // 9485\n     * @category Object                                                                                                // 9486\n     * @param {Object} object The object to iterate over.                                                              // 9487\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9488\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9489\n     * @returns {Object} Returns `object`.                                                                             // 9490\n     * @example                                                                                                        // 9491\n     *                                                                                                                 // 9492\n     * function Foo() {                                                                                                // 9493\n     *   this.a = 1;                                                                                                   // 9494\n     *   this.b = 2;                                                                                                   // 9495\n     * }                                                                                                               // 9496\n     *                                                                                                                 // 9497\n     * Foo.prototype.c = 3;                                                                                            // 9498\n     *                                                                                                                 // 9499\n     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 9500\n     *   console.log(key);                                                                                             // 9501\n     * });                                                                                                             // 9502\n     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'                                                     // 9503\n     */                                                                                                                // 9504\n    var forOwnRight = createForOwn(baseForOwnRight);                                                                   // 9505\n                                                                                                                       // 9506\n    /**                                                                                                                // 9507\n     * Creates an array of function property names from all enumerable properties,                                     // 9508\n     * own and inherited, of `object`.                                                                                 // 9509\n     *                                                                                                                 // 9510\n     * @static                                                                                                         // 9511\n     * @memberOf _                                                                                                     // 9512\n     * @alias methods                                                                                                  // 9513\n     * @category Object                                                                                                // 9514\n     * @param {Object} object The object to inspect.                                                                   // 9515\n     * @returns {Array} Returns the new array of property names.                                                       // 9516\n     * @example                                                                                                        // 9517\n     *                                                                                                                 // 9518\n     * _.functions(_);                                                                                                 // 9519\n     * // => ['after', 'ary', 'assign', ...]                                                                           // 9520\n     */                                                                                                                // 9521\n    function functions(object) {                                                                                       // 9522\n      return baseFunctions(object, keysIn(object));                                                                    // 9523\n    }                                                                                                                  // 9524\n                                                                                                                       // 9525\n    /**                                                                                                                // 9526\n     * Gets the property value at `path` of `object`. If the resolved value is                                         // 9527\n     * `undefined` the `defaultValue` is used in its place.                                                            // 9528\n     *                                                                                                                 // 9529\n     * @static                                                                                                         // 9530\n     * @memberOf _                                                                                                     // 9531\n     * @category Object                                                                                                // 9532\n     * @param {Object} object The object to query.                                                                     // 9533\n     * @param {Array|string} path The path of the property to get.                                                     // 9534\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9535\n     * @returns {*} Returns the resolved value.                                                                        // 9536\n     * @example                                                                                                        // 9537\n     *                                                                                                                 // 9538\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9539\n     *                                                                                                                 // 9540\n     * _.get(object, 'a[0].b.c');                                                                                      // 9541\n     * // => 3                                                                                                         // 9542\n     *                                                                                                                 // 9543\n     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 9544\n     * // => 3                                                                                                         // 9545\n     *                                                                                                                 // 9546\n     * _.get(object, 'a.b.c', 'default');                                                                              // 9547\n     * // => 'default'                                                                                                 // 9548\n     */                                                                                                                // 9549\n    function get(object, path, defaultValue) {                                                                         // 9550\n      var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));                            // 9551\n      return result === undefined ? defaultValue : result;                                                             // 9552\n    }                                                                                                                  // 9553\n                                                                                                                       // 9554\n    /**                                                                                                                // 9555\n     * Checks if `path` is a direct property.                                                                          // 9556\n     *                                                                                                                 // 9557\n     * @static                                                                                                         // 9558\n     * @memberOf _                                                                                                     // 9559\n     * @category Object                                                                                                // 9560\n     * @param {Object} object The object to query.                                                                     // 9561\n     * @param {Array|string} path The path to check.                                                                   // 9562\n     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.                                 // 9563\n     * @example                                                                                                        // 9564\n     *                                                                                                                 // 9565\n     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 9566\n     *                                                                                                                 // 9567\n     * _.has(object, 'a');                                                                                             // 9568\n     * // => true                                                                                                      // 9569\n     *                                                                                                                 // 9570\n     * _.has(object, 'a.b.c');                                                                                         // 9571\n     * // => true                                                                                                      // 9572\n     *                                                                                                                 // 9573\n     * _.has(object, ['a', 'b', 'c']);                                                                                 // 9574\n     * // => true                                                                                                      // 9575\n     */                                                                                                                // 9576\n    function has(object, path) {                                                                                       // 9577\n      if (object == null) {                                                                                            // 9578\n        return false;                                                                                                  // 9579\n      }                                                                                                                // 9580\n      var result = hasOwnProperty.call(object, path);                                                                  // 9581\n      if (!result && !isKey(path)) {                                                                                   // 9582\n        path = toPath(path);                                                                                           // 9583\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 9584\n        if (object == null) {                                                                                          // 9585\n          return false;                                                                                                // 9586\n        }                                                                                                              // 9587\n        path = last(path);                                                                                             // 9588\n        result = hasOwnProperty.call(object, path);                                                                    // 9589\n      }                                                                                                                // 9590\n      return result || (isLength(object.length) && isIndex(path, object.length) &&                                     // 9591\n        (isArray(object) || isArguments(object)));                                                                     // 9592\n    }                                                                                                                  // 9593\n                                                                                                                       // 9594\n    /**                                                                                                                // 9595\n     * Creates an object composed of the inverted keys and values of `object`.                                         // 9596\n     * If `object` contains duplicate values, subsequent values overwrite property                                     // 9597\n     * assignments of previous values unless `multiValue` is `true`.                                                   // 9598\n     *                                                                                                                 // 9599\n     * @static                                                                                                         // 9600\n     * @memberOf _                                                                                                     // 9601\n     * @category Object                                                                                                // 9602\n     * @param {Object} object The object to invert.                                                                    // 9603\n     * @param {boolean} [multiValue] Allow multiple values per key.                                                    // 9604\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9605\n     * @returns {Object} Returns the new inverted object.                                                              // 9606\n     * @example                                                                                                        // 9607\n     *                                                                                                                 // 9608\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 9609\n     *                                                                                                                 // 9610\n     * _.invert(object);                                                                                               // 9611\n     * // => { '1': 'c', '2': 'b' }                                                                                    // 9612\n     *                                                                                                                 // 9613\n     * // with `multiValue`                                                                                            // 9614\n     * _.invert(object, true);                                                                                         // 9615\n     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 9616\n     */                                                                                                                // 9617\n    function invert(object, multiValue, guard) {                                                                       // 9618\n      if (guard && isIterateeCall(object, multiValue, guard)) {                                                        // 9619\n        multiValue = undefined;                                                                                        // 9620\n      }                                                                                                                // 9621\n      var index = -1,                                                                                                  // 9622\n          props = keys(object),                                                                                        // 9623\n          length = props.length,                                                                                       // 9624\n          result = {};                                                                                                 // 9625\n                                                                                                                       // 9626\n      while (++index < length) {                                                                                       // 9627\n        var key = props[index],                                                                                        // 9628\n            value = object[key];                                                                                       // 9629\n                                                                                                                       // 9630\n        if (multiValue) {                                                                                              // 9631\n          if (hasOwnProperty.call(result, value)) {                                                                    // 9632\n            result[value].push(key);                                                                                   // 9633\n          } else {                                                                                                     // 9634\n            result[value] = [key];                                                                                     // 9635\n          }                                                                                                            // 9636\n        }                                                                                                              // 9637\n        else {                                                                                                         // 9638\n          result[value] = key;                                                                                         // 9639\n        }                                                                                                              // 9640\n      }                                                                                                                // 9641\n      return result;                                                                                                   // 9642\n    }                                                                                                                  // 9643\n                                                                                                                       // 9644\n    /**                                                                                                                // 9645\n     * Creates an array of the own enumerable property names of `object`.                                              // 9646\n     *                                                                                                                 // 9647\n     * **Note:** Non-object values are coerced to objects. See the                                                     // 9648\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 9649\n     * for more details.                                                                                               // 9650\n     *                                                                                                                 // 9651\n     * @static                                                                                                         // 9652\n     * @memberOf _                                                                                                     // 9653\n     * @category Object                                                                                                // 9654\n     * @param {Object} object The object to query.                                                                     // 9655\n     * @returns {Array} Returns the array of property names.                                                           // 9656\n     * @example                                                                                                        // 9657\n     *                                                                                                                 // 9658\n     * function Foo() {                                                                                                // 9659\n     *   this.a = 1;                                                                                                   // 9660\n     *   this.b = 2;                                                                                                   // 9661\n     * }                                                                                                               // 9662\n     *                                                                                                                 // 9663\n     * Foo.prototype.c = 3;                                                                                            // 9664\n     *                                                                                                                 // 9665\n     * _.keys(new Foo);                                                                                                // 9666\n     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 9667\n     *                                                                                                                 // 9668\n     * _.keys('hi');                                                                                                   // 9669\n     * // => ['0', '1']                                                                                                // 9670\n     */                                                                                                                // 9671\n    var keys = !nativeKeys ? shimKeys : function(object) {                                                             // 9672\n      var Ctor = object == null ? undefined : object.constructor;                                                      // 9673\n      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                  // 9674\n          (typeof object != 'function' && isArrayLike(object))) {                                                      // 9675\n        return shimKeys(object);                                                                                       // 9676\n      }                                                                                                                // 9677\n      return isObject(object) ? nativeKeys(object) : [];                                                               // 9678\n    };                                                                                                                 // 9679\n                                                                                                                       // 9680\n    /**                                                                                                                // 9681\n     * Creates an array of the own and inherited enumerable property names of `object`.                                // 9682\n     *                                                                                                                 // 9683\n     * **Note:** Non-object values are coerced to objects.                                                             // 9684\n     *                                                                                                                 // 9685\n     * @static                                                                                                         // 9686\n     * @memberOf _                                                                                                     // 9687\n     * @category Object                                                                                                // 9688\n     * @param {Object} object The object to query.                                                                     // 9689\n     * @returns {Array} Returns the array of property names.                                                           // 9690\n     * @example                                                                                                        // 9691\n     *                                                                                                                 // 9692\n     * function Foo() {                                                                                                // 9693\n     *   this.a = 1;                                                                                                   // 9694\n     *   this.b = 2;                                                                                                   // 9695\n     * }                                                                                                               // 9696\n     *                                                                                                                 // 9697\n     * Foo.prototype.c = 3;                                                                                            // 9698\n     *                                                                                                                 // 9699\n     * _.keysIn(new Foo);                                                                                              // 9700\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 9701\n     */                                                                                                                // 9702\n    function keysIn(object) {                                                                                          // 9703\n      if (object == null) {                                                                                            // 9704\n        return [];                                                                                                     // 9705\n      }                                                                                                                // 9706\n      if (!isObject(object)) {                                                                                         // 9707\n        object = Object(object);                                                                                       // 9708\n      }                                                                                                                // 9709\n      var length = object.length;                                                                                      // 9710\n      length = (length && isLength(length) &&                                                                          // 9711\n        (isArray(object) || isArguments(object)) && length) || 0;                                                      // 9712\n                                                                                                                       // 9713\n      var Ctor = object.constructor,                                                                                   // 9714\n          index = -1,                                                                                                  // 9715\n          isProto = typeof Ctor == 'function' && Ctor.prototype === object,                                            // 9716\n          result = Array(length),                                                                                      // 9717\n          skipIndexes = length > 0;                                                                                    // 9718\n                                                                                                                       // 9719\n      while (++index < length) {                                                                                       // 9720\n        result[index] = (index + '');                                                                                  // 9721\n      }                                                                                                                // 9722\n      for (var key in object) {                                                                                        // 9723\n        if (!(skipIndexes && isIndex(key, length)) &&                                                                  // 9724\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 9725\n          result.push(key);                                                                                            // 9726\n        }                                                                                                              // 9727\n      }                                                                                                                // 9728\n      return result;                                                                                                   // 9729\n    }                                                                                                                  // 9730\n                                                                                                                       // 9731\n    /**                                                                                                                // 9732\n     * The opposite of `_.mapValues`; this method creates an object with the                                           // 9733\n     * same values as `object` and keys generated by running each own enumerable                                       // 9734\n     * property of `object` through `iteratee`.                                                                        // 9735\n     *                                                                                                                 // 9736\n     * @static                                                                                                         // 9737\n     * @memberOf _                                                                                                     // 9738\n     * @category Object                                                                                                // 9739\n     * @param {Object} object The object to iterate over.                                                              // 9740\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9741\n     *  per iteration.                                                                                                 // 9742\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9743\n     * @returns {Object} Returns the new mapped object.                                                                // 9744\n     * @example                                                                                                        // 9745\n     *                                                                                                                 // 9746\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 9747\n     *   return key + value;                                                                                           // 9748\n     * });                                                                                                             // 9749\n     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 9750\n     */                                                                                                                // 9751\n    var mapKeys = createObjectMapper(true);                                                                            // 9752\n                                                                                                                       // 9753\n    /**                                                                                                                // 9754\n     * Creates an object with the same keys as `object` and values generated by                                        // 9755\n     * running each own enumerable property of `object` through `iteratee`. The                                        // 9756\n     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 9757\n     * (value, key, object).                                                                                           // 9758\n     *                                                                                                                 // 9759\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 9760\n     * style callback returns the property value of the given element.                                                 // 9761\n     *                                                                                                                 // 9762\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9763\n     * style callback returns `true` for elements that have a matching property                                        // 9764\n     * value, else `false`.                                                                                            // 9765\n     *                                                                                                                 // 9766\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 9767\n     * callback returns `true` for elements that have the properties of the given                                      // 9768\n     * object, else `false`.                                                                                           // 9769\n     *                                                                                                                 // 9770\n     * @static                                                                                                         // 9771\n     * @memberOf _                                                                                                     // 9772\n     * @category Object                                                                                                // 9773\n     * @param {Object} object The object to iterate over.                                                              // 9774\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9775\n     *  per iteration.                                                                                                 // 9776\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9777\n     * @returns {Object} Returns the new mapped object.                                                                // 9778\n     * @example                                                                                                        // 9779\n     *                                                                                                                 // 9780\n     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {                                                                   // 9781\n     *   return n * 3;                                                                                                 // 9782\n     * });                                                                                                             // 9783\n     * // => { 'a': 3, 'b': 6 }                                                                                        // 9784\n     *                                                                                                                 // 9785\n     * var users = {                                                                                                   // 9786\n     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 9787\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 9788\n     * };                                                                                                              // 9789\n     *                                                                                                                 // 9790\n     * // using the `_.property` callback shorthand                                                                    // 9791\n     * _.mapValues(users, 'age');                                                                                      // 9792\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 9793\n     */                                                                                                                // 9794\n    var mapValues = createObjectMapper();                                                                              // 9795\n                                                                                                                       // 9796\n    /**                                                                                                                // 9797\n     * The opposite of `_.pick`; this method creates an object composed of the                                         // 9798\n     * own and inherited enumerable properties of `object` that are not omitted.                                       // 9799\n     *                                                                                                                 // 9800\n     * @static                                                                                                         // 9801\n     * @memberOf _                                                                                                     // 9802\n     * @category Object                                                                                                // 9803\n     * @param {Object} object The source object.                                                                       // 9804\n     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9805\n     *  iteration or property names to omit, specified as individual property                                          // 9806\n     *  names or arrays of property names.                                                                             // 9807\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9808\n     * @returns {Object} Returns the new object.                                                                       // 9809\n     * @example                                                                                                        // 9810\n     *                                                                                                                 // 9811\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9812\n     *                                                                                                                 // 9813\n     * _.omit(object, 'age');                                                                                          // 9814\n     * // => { 'user': 'fred' }                                                                                        // 9815\n     *                                                                                                                 // 9816\n     * _.omit(object, _.isNumber);                                                                                     // 9817\n     * // => { 'user': 'fred' }                                                                                        // 9818\n     */                                                                                                                // 9819\n    var omit = restParam(function(object, props) {                                                                     // 9820\n      if (object == null) {                                                                                            // 9821\n        return {};                                                                                                     // 9822\n      }                                                                                                                // 9823\n      if (typeof props[0] != 'function') {                                                                             // 9824\n        var props = arrayMap(baseFlatten(props), String);                                                              // 9825\n        return pickByArray(object, baseDifference(keysIn(object), props));                                             // 9826\n      }                                                                                                                // 9827\n      var predicate = bindCallback(props[0], props[1], 3);                                                             // 9828\n      return pickByCallback(object, function(value, key, object) {                                                     // 9829\n        return !predicate(value, key, object);                                                                         // 9830\n      });                                                                                                              // 9831\n    });                                                                                                                // 9832\n                                                                                                                       // 9833\n    /**                                                                                                                // 9834\n     * Creates a two dimensional array of the key-value pairs for `object`,                                            // 9835\n     * e.g. `[[key1, value1], [key2, value2]]`.                                                                        // 9836\n     *                                                                                                                 // 9837\n     * @static                                                                                                         // 9838\n     * @memberOf _                                                                                                     // 9839\n     * @category Object                                                                                                // 9840\n     * @param {Object} object The object to query.                                                                     // 9841\n     * @returns {Array} Returns the new array of key-value pairs.                                                      // 9842\n     * @example                                                                                                        // 9843\n     *                                                                                                                 // 9844\n     * _.pairs({ 'barney': 36, 'fred': 40 });                                                                          // 9845\n     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)                                        // 9846\n     */                                                                                                                // 9847\n    function pairs(object) {                                                                                           // 9848\n      object = toObject(object);                                                                                       // 9849\n                                                                                                                       // 9850\n      var index = -1,                                                                                                  // 9851\n          props = keys(object),                                                                                        // 9852\n          length = props.length,                                                                                       // 9853\n          result = Array(length);                                                                                      // 9854\n                                                                                                                       // 9855\n      while (++index < length) {                                                                                       // 9856\n        var key = props[index];                                                                                        // 9857\n        result[index] = [key, object[key]];                                                                            // 9858\n      }                                                                                                                // 9859\n      return result;                                                                                                   // 9860\n    }                                                                                                                  // 9861\n                                                                                                                       // 9862\n    /**                                                                                                                // 9863\n     * Creates an object composed of the picked `object` properties. Property                                          // 9864\n     * names may be specified as individual arguments or as arrays of property                                         // 9865\n     * names. If `predicate` is provided it's invoked for each property of `object`                                    // 9866\n     * picking the properties `predicate` returns truthy for. The predicate is                                         // 9867\n     * bound to `thisArg` and invoked with three arguments: (value, key, object).                                      // 9868\n     *                                                                                                                 // 9869\n     * @static                                                                                                         // 9870\n     * @memberOf _                                                                                                     // 9871\n     * @category Object                                                                                                // 9872\n     * @param {Object} object The source object.                                                                       // 9873\n     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9874\n     *  iteration or property names to pick, specified as individual property                                          // 9875\n     *  names or arrays of property names.                                                                             // 9876\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9877\n     * @returns {Object} Returns the new object.                                                                       // 9878\n     * @example                                                                                                        // 9879\n     *                                                                                                                 // 9880\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9881\n     *                                                                                                                 // 9882\n     * _.pick(object, 'user');                                                                                         // 9883\n     * // => { 'user': 'fred' }                                                                                        // 9884\n     *                                                                                                                 // 9885\n     * _.pick(object, _.isString);                                                                                     // 9886\n     * // => { 'user': 'fred' }                                                                                        // 9887\n     */                                                                                                                // 9888\n    var pick = restParam(function(object, props) {                                                                     // 9889\n      if (object == null) {                                                                                            // 9890\n        return {};                                                                                                     // 9891\n      }                                                                                                                // 9892\n      return typeof props[0] == 'function'                                                                             // 9893\n        ? pickByCallback(object, bindCallback(props[0], props[1], 3))                                                  // 9894\n        : pickByArray(object, baseFlatten(props));                                                                     // 9895\n    });                                                                                                                // 9896\n                                                                                                                       // 9897\n    /**                                                                                                                // 9898\n     * This method is like `_.get` except that if the resolved value is a function                                     // 9899\n     * it's invoked with the `this` binding of its parent object and its result                                        // 9900\n     * is returned.                                                                                                    // 9901\n     *                                                                                                                 // 9902\n     * @static                                                                                                         // 9903\n     * @memberOf _                                                                                                     // 9904\n     * @category Object                                                                                                // 9905\n     * @param {Object} object The object to query.                                                                     // 9906\n     * @param {Array|string} path The path of the property to resolve.                                                 // 9907\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9908\n     * @returns {*} Returns the resolved value.                                                                        // 9909\n     * @example                                                                                                        // 9910\n     *                                                                                                                 // 9911\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 9912\n     *                                                                                                                 // 9913\n     * _.result(object, 'a[0].b.c1');                                                                                  // 9914\n     * // => 3                                                                                                         // 9915\n     *                                                                                                                 // 9916\n     * _.result(object, 'a[0].b.c2');                                                                                  // 9917\n     * // => 4                                                                                                         // 9918\n     *                                                                                                                 // 9919\n     * _.result(object, 'a.b.c', 'default');                                                                           // 9920\n     * // => 'default'                                                                                                 // 9921\n     *                                                                                                                 // 9922\n     * _.result(object, 'a.b.c', _.constant('default'));                                                               // 9923\n     * // => 'default'                                                                                                 // 9924\n     */                                                                                                                // 9925\n    function result(object, path, defaultValue) {                                                                      // 9926\n      var result = object == null ? undefined : object[path];                                                          // 9927\n      if (result === undefined) {                                                                                      // 9928\n        if (object != null && !isKey(path, object)) {                                                                  // 9929\n          path = toPath(path);                                                                                         // 9930\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 9931\n          result = object == null ? undefined : object[last(path)];                                                    // 9932\n        }                                                                                                              // 9933\n        result = result === undefined ? defaultValue : result;                                                         // 9934\n      }                                                                                                                // 9935\n      return isFunction(result) ? result.call(object) : result;                                                        // 9936\n    }                                                                                                                  // 9937\n                                                                                                                       // 9938\n    /**                                                                                                                // 9939\n     * Sets the property value of `path` on `object`. If a portion of `path`                                           // 9940\n     * does not exist it's created.                                                                                    // 9941\n     *                                                                                                                 // 9942\n     * @static                                                                                                         // 9943\n     * @memberOf _                                                                                                     // 9944\n     * @category Object                                                                                                // 9945\n     * @param {Object} object The object to augment.                                                                   // 9946\n     * @param {Array|string} path The path of the property to set.                                                     // 9947\n     * @param {*} value The value to set.                                                                              // 9948\n     * @returns {Object} Returns `object`.                                                                             // 9949\n     * @example                                                                                                        // 9950\n     *                                                                                                                 // 9951\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9952\n     *                                                                                                                 // 9953\n     * _.set(object, 'a[0].b.c', 4);                                                                                   // 9954\n     * console.log(object.a[0].b.c);                                                                                   // 9955\n     * // => 4                                                                                                         // 9956\n     *                                                                                                                 // 9957\n     * _.set(object, 'x[0].y.z', 5);                                                                                   // 9958\n     * console.log(object.x[0].y.z);                                                                                   // 9959\n     * // => 5                                                                                                         // 9960\n     */                                                                                                                // 9961\n    function set(object, path, value) {                                                                                // 9962\n      if (object == null) {                                                                                            // 9963\n        return object;                                                                                                 // 9964\n      }                                                                                                                // 9965\n      var pathKey = (path + '');                                                                                       // 9966\n      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);                              // 9967\n                                                                                                                       // 9968\n      var index = -1,                                                                                                  // 9969\n          length = path.length,                                                                                        // 9970\n          lastIndex = length - 1,                                                                                      // 9971\n          nested = object;                                                                                             // 9972\n                                                                                                                       // 9973\n      while (nested != null && ++index < length) {                                                                     // 9974\n        var key = path[index];                                                                                         // 9975\n        if (isObject(nested)) {                                                                                        // 9976\n          if (index == lastIndex) {                                                                                    // 9977\n            nested[key] = value;                                                                                       // 9978\n          } else if (nested[key] == null) {                                                                            // 9979\n            nested[key] = isIndex(path[index + 1]) ? [] : {};                                                          // 9980\n          }                                                                                                            // 9981\n        }                                                                                                              // 9982\n        nested = nested[key];                                                                                          // 9983\n      }                                                                                                                // 9984\n      return object;                                                                                                   // 9985\n    }                                                                                                                  // 9986\n                                                                                                                       // 9987\n    /**                                                                                                                // 9988\n     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 9989\n     * `accumulator` object which is the result of running each of its own enumerable                                  // 9990\n     * properties through `iteratee`, with each invocation potentially mutating                                        // 9991\n     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked                                      // 9992\n     * with four arguments: (accumulator, value, key, object). Iteratee functions                                      // 9993\n     * may exit iteration early by explicitly returning `false`.                                                       // 9994\n     *                                                                                                                 // 9995\n     * @static                                                                                                         // 9996\n     * @memberOf _                                                                                                     // 9997\n     * @category Object                                                                                                // 9998\n     * @param {Array|Object} object The object to iterate over.                                                        // 9999\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10000\n     * @param {*} [accumulator] The custom accumulator value.                                                          // 10001\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 10002\n     * @returns {*} Returns the accumulated value.                                                                     // 10003\n     * @example                                                                                                        // 10004\n     *                                                                                                                 // 10005\n     * _.transform([2, 3, 4], function(result, n) {                                                                    // 10006\n     *   result.push(n *= n);                                                                                          // 10007\n     *   return n % 2 == 0;                                                                                            // 10008\n     * });                                                                                                             // 10009\n     * // => [4, 9]                                                                                                    // 10010\n     *                                                                                                                 // 10011\n     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                      // 10012\n     *   result[key] = n * 3;                                                                                          // 10013\n     * });                                                                                                             // 10014\n     * // => { 'a': 3, 'b': 6 }                                                                                        // 10015\n     */                                                                                                                // 10016\n    function transform(object, iteratee, accumulator, thisArg) {                                                       // 10017\n      var isArr = isArray(object) || isTypedArray(object);                                                             // 10018\n      iteratee = getCallback(iteratee, thisArg, 4);                                                                    // 10019\n                                                                                                                       // 10020\n      if (accumulator == null) {                                                                                       // 10021\n        if (isArr || isObject(object)) {                                                                               // 10022\n          var Ctor = object.constructor;                                                                               // 10023\n          if (isArr) {                                                                                                 // 10024\n            accumulator = isArray(object) ? new Ctor : [];                                                             // 10025\n          } else {                                                                                                     // 10026\n            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 10027\n          }                                                                                                            // 10028\n        } else {                                                                                                       // 10029\n          accumulator = {};                                                                                            // 10030\n        }                                                                                                              // 10031\n      }                                                                                                                // 10032\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 10033\n        return iteratee(accumulator, value, index, object);                                                            // 10034\n      });                                                                                                              // 10035\n      return accumulator;                                                                                              // 10036\n    }                                                                                                                  // 10037\n                                                                                                                       // 10038\n    /**                                                                                                                // 10039\n     * Creates an array of the own enumerable property values of `object`.                                             // 10040\n     *                                                                                                                 // 10041\n     * **Note:** Non-object values are coerced to objects.                                                             // 10042\n     *                                                                                                                 // 10043\n     * @static                                                                                                         // 10044\n     * @memberOf _                                                                                                     // 10045\n     * @category Object                                                                                                // 10046\n     * @param {Object} object The object to query.                                                                     // 10047\n     * @returns {Array} Returns the array of property values.                                                          // 10048\n     * @example                                                                                                        // 10049\n     *                                                                                                                 // 10050\n     * function Foo() {                                                                                                // 10051\n     *   this.a = 1;                                                                                                   // 10052\n     *   this.b = 2;                                                                                                   // 10053\n     * }                                                                                                               // 10054\n     *                                                                                                                 // 10055\n     * Foo.prototype.c = 3;                                                                                            // 10056\n     *                                                                                                                 // 10057\n     * _.values(new Foo);                                                                                              // 10058\n     * // => [1, 2] (iteration order is not guaranteed)                                                                // 10059\n     *                                                                                                                 // 10060\n     * _.values('hi');                                                                                                 // 10061\n     * // => ['h', 'i']                                                                                                // 10062\n     */                                                                                                                // 10063\n    function values(object) {                                                                                          // 10064\n      return baseValues(object, keys(object));                                                                         // 10065\n    }                                                                                                                  // 10066\n                                                                                                                       // 10067\n    /**                                                                                                                // 10068\n     * Creates an array of the own and inherited enumerable property values                                            // 10069\n     * of `object`.                                                                                                    // 10070\n     *                                                                                                                 // 10071\n     * **Note:** Non-object values are coerced to objects.                                                             // 10072\n     *                                                                                                                 // 10073\n     * @static                                                                                                         // 10074\n     * @memberOf _                                                                                                     // 10075\n     * @category Object                                                                                                // 10076\n     * @param {Object} object The object to query.                                                                     // 10077\n     * @returns {Array} Returns the array of property values.                                                          // 10078\n     * @example                                                                                                        // 10079\n     *                                                                                                                 // 10080\n     * function Foo() {                                                                                                // 10081\n     *   this.a = 1;                                                                                                   // 10082\n     *   this.b = 2;                                                                                                   // 10083\n     * }                                                                                                               // 10084\n     *                                                                                                                 // 10085\n     * Foo.prototype.c = 3;                                                                                            // 10086\n     *                                                                                                                 // 10087\n     * _.valuesIn(new Foo);                                                                                            // 10088\n     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 10089\n     */                                                                                                                // 10090\n    function valuesIn(object) {                                                                                        // 10091\n      return baseValues(object, keysIn(object));                                                                       // 10092\n    }                                                                                                                  // 10093\n                                                                                                                       // 10094\n    /*------------------------------------------------------------------------*/                                       // 10095\n                                                                                                                       // 10096\n    /**                                                                                                                // 10097\n     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 10098\n     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 10099\n     *                                                                                                                 // 10100\n     * @static                                                                                                         // 10101\n     * @memberOf _                                                                                                     // 10102\n     * @category Number                                                                                                // 10103\n     * @param {number} n The number to check.                                                                          // 10104\n     * @param {number} [start=0] The start of the range.                                                               // 10105\n     * @param {number} end The end of the range.                                                                       // 10106\n     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.                                         // 10107\n     * @example                                                                                                        // 10108\n     *                                                                                                                 // 10109\n     * _.inRange(3, 2, 4);                                                                                             // 10110\n     * // => true                                                                                                      // 10111\n     *                                                                                                                 // 10112\n     * _.inRange(4, 8);                                                                                                // 10113\n     * // => true                                                                                                      // 10114\n     *                                                                                                                 // 10115\n     * _.inRange(4, 2);                                                                                                // 10116\n     * // => false                                                                                                     // 10117\n     *                                                                                                                 // 10118\n     * _.inRange(2, 2);                                                                                                // 10119\n     * // => false                                                                                                     // 10120\n     *                                                                                                                 // 10121\n     * _.inRange(1.2, 2);                                                                                              // 10122\n     * // => true                                                                                                      // 10123\n     *                                                                                                                 // 10124\n     * _.inRange(5.2, 4);                                                                                              // 10125\n     * // => false                                                                                                     // 10126\n     */                                                                                                                // 10127\n    function inRange(value, start, end) {                                                                              // 10128\n      start = +start || 0;                                                                                             // 10129\n      if (end === undefined) {                                                                                         // 10130\n        end = start;                                                                                                   // 10131\n        start = 0;                                                                                                     // 10132\n      } else {                                                                                                         // 10133\n        end = +end || 0;                                                                                               // 10134\n      }                                                                                                                // 10135\n      return value >= nativeMin(start, end) && value < nativeMax(start, end);                                          // 10136\n    }                                                                                                                  // 10137\n                                                                                                                       // 10138\n    /**                                                                                                                // 10139\n     * Produces a random number between `min` and `max` (inclusive). If only one                                       // 10140\n     * argument is provided a number between `0` and the given number is returned.                                     // 10141\n     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point                                  // 10142\n     * number is returned instead of an integer.                                                                       // 10143\n     *                                                                                                                 // 10144\n     * @static                                                                                                         // 10145\n     * @memberOf _                                                                                                     // 10146\n     * @category Number                                                                                                // 10147\n     * @param {number} [min=0] The minimum possible value.                                                             // 10148\n     * @param {number} [max=1] The maximum possible value.                                                             // 10149\n     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 10150\n     * @returns {number} Returns the random number.                                                                    // 10151\n     * @example                                                                                                        // 10152\n     *                                                                                                                 // 10153\n     * _.random(0, 5);                                                                                                 // 10154\n     * // => an integer between 0 and 5                                                                                // 10155\n     *                                                                                                                 // 10156\n     * _.random(5);                                                                                                    // 10157\n     * // => also an integer between 0 and 5                                                                           // 10158\n     *                                                                                                                 // 10159\n     * _.random(5, true);                                                                                              // 10160\n     * // => a floating-point number between 0 and 5                                                                   // 10161\n     *                                                                                                                 // 10162\n     * _.random(1.2, 5.2);                                                                                             // 10163\n     * // => a floating-point number between 1.2 and 5.2                                                               // 10164\n     */                                                                                                                // 10165\n    function random(min, max, floating) {                                                                              // 10166\n      if (floating && isIterateeCall(min, max, floating)) {                                                            // 10167\n        max = floating = undefined;                                                                                    // 10168\n      }                                                                                                                // 10169\n      var noMin = min == null,                                                                                         // 10170\n          noMax = max == null;                                                                                         // 10171\n                                                                                                                       // 10172\n      if (floating == null) {                                                                                          // 10173\n        if (noMax && typeof min == 'boolean') {                                                                        // 10174\n          floating = min;                                                                                              // 10175\n          min = 1;                                                                                                     // 10176\n        }                                                                                                              // 10177\n        else if (typeof max == 'boolean') {                                                                            // 10178\n          floating = max;                                                                                              // 10179\n          noMax = true;                                                                                                // 10180\n        }                                                                                                              // 10181\n      }                                                                                                                // 10182\n      if (noMin && noMax) {                                                                                            // 10183\n        max = 1;                                                                                                       // 10184\n        noMax = false;                                                                                                 // 10185\n      }                                                                                                                // 10186\n      min = +min || 0;                                                                                                 // 10187\n      if (noMax) {                                                                                                     // 10188\n        max = min;                                                                                                     // 10189\n        min = 0;                                                                                                       // 10190\n      } else {                                                                                                         // 10191\n        max = +max || 0;                                                                                               // 10192\n      }                                                                                                                // 10193\n      if (floating || min % 1 || max % 1) {                                                                            // 10194\n        var rand = nativeRandom();                                                                                     // 10195\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);              // 10196\n      }                                                                                                                // 10197\n      return baseRandom(min, max);                                                                                     // 10198\n    }                                                                                                                  // 10199\n                                                                                                                       // 10200\n    /*------------------------------------------------------------------------*/                                       // 10201\n                                                                                                                       // 10202\n    /**                                                                                                                // 10203\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 10204\n     *                                                                                                                 // 10205\n     * @static                                                                                                         // 10206\n     * @memberOf _                                                                                                     // 10207\n     * @category String                                                                                                // 10208\n     * @param {string} [string=''] The string to convert.                                                              // 10209\n     * @returns {string} Returns the camel cased string.                                                               // 10210\n     * @example                                                                                                        // 10211\n     *                                                                                                                 // 10212\n     * _.camelCase('Foo Bar');                                                                                         // 10213\n     * // => 'fooBar'                                                                                                  // 10214\n     *                                                                                                                 // 10215\n     * _.camelCase('--foo-bar');                                                                                       // 10216\n     * // => 'fooBar'                                                                                                  // 10217\n     *                                                                                                                 // 10218\n     * _.camelCase('__foo_bar__');                                                                                     // 10219\n     * // => 'fooBar'                                                                                                  // 10220\n     */                                                                                                                // 10221\n    var camelCase = createCompounder(function(result, word, index) {                                                   // 10222\n      word = word.toLowerCase();                                                                                       // 10223\n      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);                                 // 10224\n    });                                                                                                                // 10225\n                                                                                                                       // 10226\n    /**                                                                                                                // 10227\n     * Capitalizes the first character of `string`.                                                                    // 10228\n     *                                                                                                                 // 10229\n     * @static                                                                                                         // 10230\n     * @memberOf _                                                                                                     // 10231\n     * @category String                                                                                                // 10232\n     * @param {string} [string=''] The string to capitalize.                                                           // 10233\n     * @returns {string} Returns the capitalized string.                                                               // 10234\n     * @example                                                                                                        // 10235\n     *                                                                                                                 // 10236\n     * _.capitalize('fred');                                                                                           // 10237\n     * // => 'Fred'                                                                                                    // 10238\n     */                                                                                                                // 10239\n    function capitalize(string) {                                                                                      // 10240\n      string = baseToString(string);                                                                                   // 10241\n      return string && (string.charAt(0).toUpperCase() + string.slice(1));                                             // 10242\n    }                                                                                                                  // 10243\n                                                                                                                       // 10244\n    /**                                                                                                                // 10245\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *                                                                                                                 // 10248\n     * @static                                                                                                         // 10249\n     * @memberOf _                                                                                                     // 10250\n     * @category String                                                                                                // 10251\n     * @param {string} [string=''] The string to deburr.                                                               // 10252\n     * @returns {string} Returns the deburred string.                                                                  // 10253\n     * @example                                                                                                        // 10254\n     *                                                                                                                 // 10255\n     * _.deburr('dÃ©jÃ  vu');                                                                                            // 10256\n     * // => 'deja vu'                                                                                                 // 10257\n     */                                                                                                                // 10258\n    function deburr(string) {                                                                                          // 10259\n      string = baseToString(string);                                                                                   // 10260\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 10261\n    }                                                                                                                  // 10262\n                                                                                                                       // 10263\n    /**                                                                                                                // 10264\n     * Checks if `string` ends with the given target string.                                                           // 10265\n     *                                                                                                                 // 10266\n     * @static                                                                                                         // 10267\n     * @memberOf _                                                                                                     // 10268\n     * @category String                                                                                                // 10269\n     * @param {string} [string=''] The string to search.                                                               // 10270\n     * @param {string} [target] The string to search for.                                                              // 10271\n     * @param {number} [position=string.length] The position to search from.                                           // 10272\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 10273\n     * @example                                                                                                        // 10274\n     *                                                                                                                 // 10275\n     * _.endsWith('abc', 'c');                                                                                         // 10276\n     * // => true                                                                                                      // 10277\n     *                                                                                                                 // 10278\n     * _.endsWith('abc', 'b');                                                                                         // 10279\n     * // => false                                                                                                     // 10280\n     *                                                                                                                 // 10281\n     * _.endsWith('abc', 'b', 2);                                                                                      // 10282\n     * // => true                                                                                                      // 10283\n     */                                                                                                                // 10284\n    function endsWith(string, target, position) {                                                                      // 10285\n      string = baseToString(string);                                                                                   // 10286\n      target = (target + '');                                                                                          // 10287\n                                                                                                                       // 10288\n      var length = string.length;                                                                                      // 10289\n      position = position === undefined                                                                                // 10290\n        ? length                                                                                                       // 10291\n        : nativeMin(position < 0 ? 0 : (+position || 0), length);                                                      // 10292\n                                                                                                                       // 10293\n      position -= target.length;                                                                                       // 10294\n      return position >= 0 && string.indexOf(target, position) == position;                                            // 10295\n    }                                                                                                                  // 10296\n                                                                                                                       // 10297\n    /**                                                                                                                // 10298\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to                                       // 10299\n     * their corresponding HTML entities.                                                                              // 10300\n     *                                                                                                                 // 10301\n     * **Note:** No other characters are escaped. To escape additional characters                                      // 10302\n     * use a third-party library like [_he_](https://mths.be/he).                                                      // 10303\n     *                                                                                                                 // 10304\n     * Though the \">\" character is escaped for symmetry, characters like                                               // 10305\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning                                             // 10306\n     * unless they're part of a tag or unquoted attribute value.                                                       // 10307\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 10308\n     * (under \"semi-related fun fact\") for more details.                                                               // 10309\n     *                                                                                                                 // 10310\n     * Backticks are escaped because in Internet Explorer < 9, they can break out                                      // 10311\n     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                      // 10312\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 10313\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 10314\n     * for more details.                                                                                               // 10315\n     *                                                                                                                 // 10316\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 10317\n     * to reduce XSS vectors.                                                                                          // 10318\n     *                                                                                                                 // 10319\n     * @static                                                                                                         // 10320\n     * @memberOf _                                                                                                     // 10321\n     * @category String                                                                                                // 10322\n     * @param {string} [string=''] The string to escape.                                                               // 10323\n     * @returns {string} Returns the escaped string.                                                                   // 10324\n     * @example                                                                                                        // 10325\n     *                                                                                                                 // 10326\n     * _.escape('fred, barney, & pebbles');                                                                            // 10327\n     * // => 'fred, barney, &amp; pebbles'                                                                             // 10328\n     */                                                                                                                // 10329\n    function escape(string) {                                                                                          // 10330\n      // Reset `lastIndex` because in IE < 9 `String#replace` does not.                                                // 10331\n      string = baseToString(string);                                                                                   // 10332\n      return (string && reHasUnescapedHtml.test(string))                                                               // 10333\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 10334\n        : string;                                                                                                      // 10335\n    }                                                                                                                  // 10336\n                                                                                                                       // 10337\n    /**                                                                                                                // 10338\n     * Escapes the `RegExp` special characters \"\\\", \"/\", \"^\", \"$\", \".\", \"|\", \"?\",                                      // 10339\n     * \"*\", \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.                                                          // 10340\n     *                                                                                                                 // 10341\n     * @static                                                                                                         // 10342\n     * @memberOf _                                                                                                     // 10343\n     * @category String                                                                                                // 10344\n     * @param {string} [string=''] The string to escape.                                                               // 10345\n     * @returns {string} Returns the escaped string.                                                                   // 10346\n     * @example                                                                                                        // 10347\n     *                                                                                                                 // 10348\n     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 10349\n     * // => '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'                                                                   // 10350\n     */                                                                                                                // 10351\n    function escapeRegExp(string) {                                                                                    // 10352\n      string = baseToString(string);                                                                                   // 10353\n      return (string && reHasRegExpChars.test(string))                                                                 // 10354\n        ? string.replace(reRegExpChars, escapeRegExpChar)                                                              // 10355\n        : (string || '(?:)');                                                                                          // 10356\n    }                                                                                                                  // 10357\n                                                                                                                       // 10358\n    /**                                                                                                                // 10359\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 10360\n     *                                                                                                                 // 10361\n     * @static                                                                                                         // 10362\n     * @memberOf _                                                                                                     // 10363\n     * @category String                                                                                                // 10364\n     * @param {string} [string=''] The string to convert.                                                              // 10365\n     * @returns {string} Returns the kebab cased string.                                                               // 10366\n     * @example                                                                                                        // 10367\n     *                                                                                                                 // 10368\n     * _.kebabCase('Foo Bar');                                                                                         // 10369\n     * // => 'foo-bar'                                                                                                 // 10370\n     *                                                                                                                 // 10371\n     * _.kebabCase('fooBar');                                                                                          // 10372\n     * // => 'foo-bar'                                                                                                 // 10373\n     *                                                                                                                 // 10374\n     * _.kebabCase('__foo_bar__');                                                                                     // 10375\n     * // => 'foo-bar'                                                                                                 // 10376\n     */                                                                                                                // 10377\n    var kebabCase = createCompounder(function(result, word, index) {                                                   // 10378\n      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 10379\n    });                                                                                                                // 10380\n                                                                                                                       // 10381\n    /**                                                                                                                // 10382\n     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 10383\n     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 10384\n     *                                                                                                                 // 10385\n     * @static                                                                                                         // 10386\n     * @memberOf _                                                                                                     // 10387\n     * @category String                                                                                                // 10388\n     * @param {string} [string=''] The string to pad.                                                                  // 10389\n     * @param {number} [length=0] The padding length.                                                                  // 10390\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10391\n     * @returns {string} Returns the padded string.                                                                    // 10392\n     * @example                                                                                                        // 10393\n     *                                                                                                                 // 10394\n     * _.pad('abc', 8);                                                                                                // 10395\n     * // => '  abc   '                                                                                                // 10396\n     *                                                                                                                 // 10397\n     * _.pad('abc', 8, '_-');                                                                                          // 10398\n     * // => '_-abc_-_'                                                                                                // 10399\n     *                                                                                                                 // 10400\n     * _.pad('abc', 3);                                                                                                // 10401\n     * // => 'abc'                                                                                                     // 10402\n     */                                                                                                                // 10403\n    function pad(string, length, chars) {                                                                              // 10404\n      string = baseToString(string);                                                                                   // 10405\n      length = +length;                                                                                                // 10406\n                                                                                                                       // 10407\n      var strLength = string.length;                                                                                   // 10408\n      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 10409\n        return string;                                                                                                 // 10410\n      }                                                                                                                // 10411\n      var mid = (length - strLength) / 2,                                                                              // 10412\n          leftLength = nativeFloor(mid),                                                                               // 10413\n          rightLength = nativeCeil(mid);                                                                               // 10414\n                                                                                                                       // 10415\n      chars = createPadding('', rightLength, chars);                                                                   // 10416\n      return chars.slice(0, leftLength) + string + chars;                                                              // 10417\n    }                                                                                                                  // 10418\n                                                                                                                       // 10419\n    /**                                                                                                                // 10420\n     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 10421\n     * characters are truncated if they exceed `length`.                                                               // 10422\n     *                                                                                                                 // 10423\n     * @static                                                                                                         // 10424\n     * @memberOf _                                                                                                     // 10425\n     * @category String                                                                                                // 10426\n     * @param {string} [string=''] The string to pad.                                                                  // 10427\n     * @param {number} [length=0] The padding length.                                                                  // 10428\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10429\n     * @returns {string} Returns the padded string.                                                                    // 10430\n     * @example                                                                                                        // 10431\n     *                                                                                                                 // 10432\n     * _.padLeft('abc', 6);                                                                                            // 10433\n     * // => '   abc'                                                                                                  // 10434\n     *                                                                                                                 // 10435\n     * _.padLeft('abc', 6, '_-');                                                                                      // 10436\n     * // => '_-_abc'                                                                                                  // 10437\n     *                                                                                                                 // 10438\n     * _.padLeft('abc', 3);                                                                                            // 10439\n     * // => 'abc'                                                                                                     // 10440\n     */                                                                                                                // 10441\n    var padLeft = createPadDir();                                                                                      // 10442\n                                                                                                                       // 10443\n    /**                                                                                                                // 10444\n     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 10445\n     * characters are truncated if they exceed `length`.                                                               // 10446\n     *                                                                                                                 // 10447\n     * @static                                                                                                         // 10448\n     * @memberOf _                                                                                                     // 10449\n     * @category String                                                                                                // 10450\n     * @param {string} [string=''] The string to pad.                                                                  // 10451\n     * @param {number} [length=0] The padding length.                                                                  // 10452\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10453\n     * @returns {string} Returns the padded string.                                                                    // 10454\n     * @example                                                                                                        // 10455\n     *                                                                                                                 // 10456\n     * _.padRight('abc', 6);                                                                                           // 10457\n     * // => 'abc   '                                                                                                  // 10458\n     *                                                                                                                 // 10459\n     * _.padRight('abc', 6, '_-');                                                                                     // 10460\n     * // => 'abc_-_'                                                                                                  // 10461\n     *                                                                                                                 // 10462\n     * _.padRight('abc', 3);                                                                                           // 10463\n     * // => 'abc'                                                                                                     // 10464\n     */                                                                                                                // 10465\n    var padRight = createPadDir(true);                                                                                 // 10466\n                                                                                                                       // 10467\n    /**                                                                                                                // 10468\n     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 10469\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 10470\n     * in which case a `radix` of `16` is used.                                                                        // 10471\n     *                                                                                                                 // 10472\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 10473\n     * of `parseInt`.                                                                                                  // 10474\n     *                                                                                                                 // 10475\n     * @static                                                                                                         // 10476\n     * @memberOf _                                                                                                     // 10477\n     * @category String                                                                                                // 10478\n     * @param {string} string The string to convert.                                                                   // 10479\n     * @param {number} [radix] The radix to interpret `value` by.                                                      // 10480\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10481\n     * @returns {number} Returns the converted integer.                                                                // 10482\n     * @example                                                                                                        // 10483\n     *                                                                                                                 // 10484\n     * _.parseInt('08');                                                                                               // 10485\n     * // => 8                                                                                                         // 10486\n     *                                                                                                                 // 10487\n     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 10488\n     * // => [6, 8, 10]                                                                                                // 10489\n     */                                                                                                                // 10490\n    function parseInt(string, radix, guard) {                                                                          // 10491\n      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.                                                        // 10492\n      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 10493\n      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 10494\n      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {                                              // 10495\n        radix = 0;                                                                                                     // 10496\n      } else if (radix) {                                                                                              // 10497\n        radix = +radix;                                                                                                // 10498\n      }                                                                                                                // 10499\n      string = trim(string);                                                                                           // 10500\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 10501\n    }                                                                                                                  // 10502\n                                                                                                                       // 10503\n    /**                                                                                                                // 10504\n     * Repeats the given string `n` times.                                                                             // 10505\n     *                                                                                                                 // 10506\n     * @static                                                                                                         // 10507\n     * @memberOf _                                                                                                     // 10508\n     * @category String                                                                                                // 10509\n     * @param {string} [string=''] The string to repeat.                                                               // 10510\n     * @param {number} [n=0] The number of times to repeat the string.                                                 // 10511\n     * @returns {string} Returns the repeated string.                                                                  // 10512\n     * @example                                                                                                        // 10513\n     *                                                                                                                 // 10514\n     * _.repeat('*', 3);                                                                                               // 10515\n     * // => '***'                                                                                                     // 10516\n     *                                                                                                                 // 10517\n     * _.repeat('abc', 2);                                                                                             // 10518\n     * // => 'abcabc'                                                                                                  // 10519\n     *                                                                                                                 // 10520\n     * _.repeat('abc', 0);                                                                                             // 10521\n     * // => ''                                                                                                        // 10522\n     */                                                                                                                // 10523\n    function repeat(string, n) {                                                                                       // 10524\n      var result = '';                                                                                                 // 10525\n      string = baseToString(string);                                                                                   // 10526\n      n = +n;                                                                                                          // 10527\n      if (n < 1 || !string || !nativeIsFinite(n)) {                                                                    // 10528\n        return result;                                                                                                 // 10529\n      }                                                                                                                // 10530\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 10531\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 10532\n      do {                                                                                                             // 10533\n        if (n % 2) {                                                                                                   // 10534\n          result += string;                                                                                            // 10535\n        }                                                                                                              // 10536\n        n = nativeFloor(n / 2);                                                                                        // 10537\n        string += string;                                                                                              // 10538\n      } while (n);                                                                                                     // 10539\n                                                                                                                       // 10540\n      return result;                                                                                                   // 10541\n    }                                                                                                                  // 10542\n                                                                                                                       // 10543\n    /**                                                                                                                // 10544\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 10545\n     *                                                                                                                 // 10546\n     * @static                                                                                                         // 10547\n     * @memberOf _                                                                                                     // 10548\n     * @category String                                                                                                // 10549\n     * @param {string} [string=''] The string to convert.                                                              // 10550\n     * @returns {string} Returns the snake cased string.                                                               // 10551\n     * @example                                                                                                        // 10552\n     *                                                                                                                 // 10553\n     * _.snakeCase('Foo Bar');                                                                                         // 10554\n     * // => 'foo_bar'                                                                                                 // 10555\n     *                                                                                                                 // 10556\n     * _.snakeCase('fooBar');                                                                                          // 10557\n     * // => 'foo_bar'                                                                                                 // 10558\n     *                                                                                                                 // 10559\n     * _.snakeCase('--foo-bar');                                                                                       // 10560\n     * // => 'foo_bar'                                                                                                 // 10561\n     */                                                                                                                // 10562\n    var snakeCase = createCompounder(function(result, word, index) {                                                   // 10563\n      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 10564\n    });                                                                                                                // 10565\n                                                                                                                       // 10566\n    /**                                                                                                                // 10567\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 10568\n     *                                                                                                                 // 10569\n     * @static                                                                                                         // 10570\n     * @memberOf _                                                                                                     // 10571\n     * @category String                                                                                                // 10572\n     * @param {string} [string=''] The string to convert.                                                              // 10573\n     * @returns {string} Returns the start cased string.                                                               // 10574\n     * @example                                                                                                        // 10575\n     *                                                                                                                 // 10576\n     * _.startCase('--foo-bar');                                                                                       // 10577\n     * // => 'Foo Bar'                                                                                                 // 10578\n     *                                                                                                                 // 10579\n     * _.startCase('fooBar');                                                                                          // 10580\n     * // => 'Foo Bar'                                                                                                 // 10581\n     *                                                                                                                 // 10582\n     * _.startCase('__foo_bar__');                                                                                     // 10583\n     * // => 'Foo Bar'                                                                                                 // 10584\n     */                                                                                                                // 10585\n    var startCase = createCompounder(function(result, word, index) {                                                   // 10586\n      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));                             // 10587\n    });                                                                                                                // 10588\n                                                                                                                       // 10589\n    /**                                                                                                                // 10590\n     * Checks if `string` starts with the given target string.                                                         // 10591\n     *                                                                                                                 // 10592\n     * @static                                                                                                         // 10593\n     * @memberOf _                                                                                                     // 10594\n     * @category String                                                                                                // 10595\n     * @param {string} [string=''] The string to search.                                                               // 10596\n     * @param {string} [target] The string to search for.                                                              // 10597\n     * @param {number} [position=0] The position to search from.                                                       // 10598\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 10599\n     * @example                                                                                                        // 10600\n     *                                                                                                                 // 10601\n     * _.startsWith('abc', 'a');                                                                                       // 10602\n     * // => true                                                                                                      // 10603\n     *                                                                                                                 // 10604\n     * _.startsWith('abc', 'b');                                                                                       // 10605\n     * // => false                                                                                                     // 10606\n     *                                                                                                                 // 10607\n     * _.startsWith('abc', 'b', 1);                                                                                    // 10608\n     * // => true                                                                                                      // 10609\n     */                                                                                                                // 10610\n    function startsWith(string, target, position) {                                                                    // 10611\n      string = baseToString(string);                                                                                   // 10612\n      position = position == null                                                                                      // 10613\n        ? 0                                                                                                            // 10614\n        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);                                               // 10615\n                                                                                                                       // 10616\n      return string.lastIndexOf(target, position) == position;                                                         // 10617\n    }                                                                                                                  // 10618\n                                                                                                                       // 10619\n    /**                                                                                                                // 10620\n     * Creates a compiled template function that can interpolate data properties                                       // 10621\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in                                        // 10622\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data                                      // 10623\n     * properties may be accessed as free variables in the template. If a setting                                      // 10624\n     * object is provided it takes precedence over `_.templateSettings` values.                                        // 10625\n     *                                                                                                                 // 10626\n     * **Note:** In the development build `_.template` utilizes                                                        // 10627\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 10628\n     * for easier debugging.                                                                                           // 10629\n     *                                                                                                                 // 10630\n     * For more information on precompiling templates see                                                              // 10631\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 10632\n     *                                                                                                                 // 10633\n     * For more information on Chrome extension sandboxes see                                                          // 10634\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 10635\n     *                                                                                                                 // 10636\n     * @static                                                                                                         // 10637\n     * @memberOf _                                                                                                     // 10638\n     * @category String                                                                                                // 10639\n     * @param {string} [string=''] The template string.                                                                // 10640\n     * @param {Object} [options] The options object.                                                                   // 10641\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.                                                   // 10642\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.                                                    // 10643\n     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 10644\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.                                              // 10645\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 10646\n     * @param {string} [options.variable] The data object variable name.                                               // 10647\n     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.                                   // 10648\n     * @returns {Function} Returns the compiled template function.                                                     // 10649\n     * @example                                                                                                        // 10650\n     *                                                                                                                 // 10651\n     * // using the \"interpolate\" delimiter to create a compiled template                                              // 10652\n     * var compiled = _.template('hello <%= user %>!');                                                                // 10653\n     * compiled({ 'user': 'fred' });                                                                                   // 10654\n     * // => 'hello fred!'                                                                                             // 10655\n     *                                                                                                                 // 10656\n     * // using the HTML \"escape\" delimiter to escape data property values                                             // 10657\n     * var compiled = _.template('<b><%- value %></b>');                                                               // 10658\n     * compiled({ 'value': '<script>' });                                                                              // 10659\n     * // => '<b>&lt;script&gt;</b>'                                                                                   // 10660\n     *                                                                                                                 // 10661\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML                                       // 10662\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 10663\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10664\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 10665\n     *                                                                                                                 // 10666\n     * // using the internal `print` function in \"evaluate\" delimiters                                                 // 10667\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');                                                    // 10668\n     * compiled({ 'user': 'barney' });                                                                                 // 10669\n     * // => 'hello barney!'                                                                                           // 10670\n     *                                                                                                                 // 10671\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter                              // 10672\n     * var compiled = _.template('hello ${ user }!');                                                                  // 10673\n     * compiled({ 'user': 'pebbles' });                                                                                // 10674\n     * // => 'hello pebbles!'                                                                                          // 10675\n     *                                                                                                                 // 10676\n     * // using custom template delimiters                                                                             // 10677\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;                                                             // 10678\n     * var compiled = _.template('hello {{ user }}!');                                                                 // 10679\n     * compiled({ 'user': 'mustache' });                                                                               // 10680\n     * // => 'hello mustache!'                                                                                         // 10681\n     *                                                                                                                 // 10682\n     * // using backslashes to treat delimiters as plain text                                                          // 10683\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');                                                         // 10684\n     * compiled({ 'value': 'ignored' });                                                                               // 10685\n     * // => '<%- value %>'                                                                                            // 10686\n     *                                                                                                                 // 10687\n     * // using the `imports` option to import `jQuery` as `jq`                                                        // 10688\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 10689\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 10690\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10691\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 10692\n     *                                                                                                                 // 10693\n     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 10694\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 10695\n     * compiled(data);                                                                                                 // 10696\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector           // 10697\n     *                                                                                                                 // 10698\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 10699\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 10700\n     * compiled.source;                                                                                                // 10701\n     * // => function(data) {                                                                                          // 10702\n     * //   var __t, __p = '';                                                                                         // 10703\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 10704\n     * //   return __p;                                                                                                // 10705\n     * // }                                                                                                            // 10706\n     *                                                                                                                 // 10707\n     * // using the `source` property to inline compiled templates for meaningful                                      // 10708\n     * // line numbers in error messages and a stack trace                                                             // 10709\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');                                                                                                             // 10714\n     */                                                                                                                // 10715\n    function template(string, options, otherOptions) {                                                                 // 10716\n      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 10717\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 10718\n      var settings = lodash.templateSettings;                                                                          // 10719\n                                                                                                                       // 10720\n      if (otherOptions && isIterateeCall(string, options, otherOptions)) {                                             // 10721\n        options = otherOptions = undefined;                                                                            // 10722\n      }                                                                                                                // 10723\n      string = baseToString(string);                                                                                   // 10724\n      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);                      // 10725\n                                                                                                                       // 10726\n      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),                  // 10727\n          importsKeys = keys(imports),                                                                                 // 10728\n          importsValues = baseValues(imports, importsKeys);                                                            // 10729\n                                                                                                                       // 10730\n      var isEscaping,                                                                                                  // 10731\n          isEvaluating,                                                                                                // 10732\n          index = 0,                                                                                                   // 10733\n          interpolate = options.interpolate || reNoMatch,                                                              // 10734\n          source = \"__p += '\";                                                                                         // 10735\n                                                                                                                       // 10736\n      // Compile the regexp to match each delimiter.                                                                   // 10737\n      var reDelimiters = RegExp(                                                                                       // 10738\n        (options.escape || reNoMatch).source + '|' +                                                                   // 10739\n        interpolate.source + '|' +                                                                                     // 10740\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 10741\n        (options.evaluate || reNoMatch).source + '|$'                                                                  // 10742\n      , 'g');                                                                                                          // 10743\n                                                                                                                       // 10744\n      // Use a sourceURL for easier debugging.                                                                         // 10745\n      var sourceURL = '//# sourceURL=' +                                                                               // 10746\n        ('sourceURL' in options                                                                                        // 10747\n          ? options.sourceURL                                                                                          // 10748\n          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 10749\n        ) + '\\n';                                                                                                      // 10750\n                                                                                                                       // 10751\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 10753\n                                                                                                                       // 10754\n        // Escape characters that can't be included in string literals.                                                // 10755\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 10756\n                                                                                                                       // 10757\n        // Replace delimiters with snippets.                                                                           // 10758\n        if (escapeValue) {                                                                                             // 10759\n          isEscaping = true;                                                                                           // 10760\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";                                                              // 10761\n        }                                                                                                              // 10762\n        if (evaluateValue) {                                                                                           // 10763\n          isEvaluating = true;                                                                                         // 10764\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";                                                            // 10765\n        }                                                                                                              // 10766\n        if (interpolateValue) {                                                                                        // 10767\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";                               // 10768\n        }                                                                                                              // 10769\n        index = offset + match.length;                                                                                 // 10770\n                                                                                                                       // 10771\n        // The JS engine embedded in Adobe products requires returning the `match`                                     // 10772\n        // string in order to produce the correct `offset` value.                                                      // 10773\n        return match;                                                                                                  // 10774\n      });                                                                                                              // 10775\n                                                                                                                       // 10776\n      source += \"';\\n\";                                                                                                // 10777\n                                                                                                                       // 10778\n      // If `variable` is not specified wrap a with-statement around the generated                                     // 10779\n      // code to add the data object to the top of the scope chain.                                                    // 10780\n      var variable = options.variable;                                                                                 // 10781\n      if (!variable) {                                                                                                 // 10782\n        source = 'with (obj) {\\n' + source + '\\n}\\n';                                                                  // 10783\n      }                                                                                                                // 10784\n      // Cleanup code by stripping empty strings.                                                                      // 10785\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 10786\n        .replace(reEmptyStringMiddle, '$1')                                                                            // 10787\n        .replace(reEmptyStringTrailing, '$1;');                                                                        // 10788\n                                                                                                                       // 10789\n      // Frame code as the function body.                                                                              // 10790\n      source = 'function(' + (variable || 'obj') + ') {\\n' +                                                           // 10791\n        (variable                                                                                                      // 10792\n          ? ''                                                                                                         // 10793\n          : 'obj || (obj = {});\\n'                                                                                     // 10794\n        ) +                                                                                                            // 10795\n        \"var __t, __p = ''\" +                                                                                          // 10796\n        (isEscaping                                                                                                    // 10797\n           ? ', __e = _.escape'                                                                                        // 10798\n           : ''                                                                                                        // 10799\n        ) +                                                                                                            // 10800\n        (isEvaluating                                                                                                  // 10801\n          ? ', __j = Array.prototype.join;\\n' +                                                                        // 10802\n            \"function print() { __p += __j.call(arguments, '') }\\n\"                                                    // 10803\n          : ';\\n'                                                                                                      // 10804\n        ) +                                                                                                            // 10805\n        source +                                                                                                       // 10806\n        'return __p\\n}';                                                                                               // 10807\n                                                                                                                       // 10808\n      var result = attempt(function() {                                                                                // 10809\n        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 10810\n      });                                                                                                              // 10811\n                                                                                                                       // 10812\n      // Provide the compiled function's source by its `toString` method or                                            // 10813\n      // the `source` property as a convenience for inlining compiled templates.                                       // 10814\n      result.source = source;                                                                                          // 10815\n      if (isError(result)) {                                                                                           // 10816\n        throw result;                                                                                                  // 10817\n      }                                                                                                                // 10818\n      return result;                                                                                                   // 10819\n    }                                                                                                                  // 10820\n                                                                                                                       // 10821\n    /**                                                                                                                // 10822\n     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 10823\n     *                                                                                                                 // 10824\n     * @static                                                                                                         // 10825\n     * @memberOf _                                                                                                     // 10826\n     * @category String                                                                                                // 10827\n     * @param {string} [string=''] The string to trim.                                                                 // 10828\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10829\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10830\n     * @returns {string} Returns the trimmed string.                                                                   // 10831\n     * @example                                                                                                        // 10832\n     *                                                                                                                 // 10833\n     * _.trim('  abc  ');                                                                                              // 10834\n     * // => 'abc'                                                                                                     // 10835\n     *                                                                                                                 // 10836\n     * _.trim('-_-abc-_-', '_-');                                                                                      // 10837\n     * // => 'abc'                                                                                                     // 10838\n     *                                                                                                                 // 10839\n     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 10840\n     * // => ['foo', 'bar']                                                                                            // 10841\n     */                                                                                                                // 10842\n    function trim(string, chars, guard) {                                                                              // 10843\n      var value = string;                                                                                              // 10844\n      string = baseToString(string);                                                                                   // 10845\n      if (!string) {                                                                                                   // 10846\n        return string;                                                                                                 // 10847\n      }                                                                                                                // 10848\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10849\n        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);                                  // 10850\n      }                                                                                                                // 10851\n      chars = (chars + '');                                                                                            // 10852\n      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);                          // 10853\n    }                                                                                                                  // 10854\n                                                                                                                       // 10855\n    /**                                                                                                                // 10856\n     * Removes leading whitespace or specified characters from `string`.                                               // 10857\n     *                                                                                                                 // 10858\n     * @static                                                                                                         // 10859\n     * @memberOf _                                                                                                     // 10860\n     * @category String                                                                                                // 10861\n     * @param {string} [string=''] The string to trim.                                                                 // 10862\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10863\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10864\n     * @returns {string} Returns the trimmed string.                                                                   // 10865\n     * @example                                                                                                        // 10866\n     *                                                                                                                 // 10867\n     * _.trimLeft('  abc  ');                                                                                          // 10868\n     * // => 'abc  '                                                                                                   // 10869\n     *                                                                                                                 // 10870\n     * _.trimLeft('-_-abc-_-', '_-');                                                                                  // 10871\n     * // => 'abc-_-'                                                                                                  // 10872\n     */                                                                                                                // 10873\n    function trimLeft(string, chars, guard) {                                                                          // 10874\n      var value = string;                                                                                              // 10875\n      string = baseToString(string);                                                                                   // 10876\n      if (!string) {                                                                                                   // 10877\n        return string;                                                                                                 // 10878\n      }                                                                                                                // 10879\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10880\n        return string.slice(trimmedLeftIndex(string));                                                                 // 10881\n      }                                                                                                                // 10882\n      return string.slice(charsLeftIndex(string, (chars + '')));                                                       // 10883\n    }                                                                                                                  // 10884\n                                                                                                                       // 10885\n    /**                                                                                                                // 10886\n     * Removes trailing whitespace or specified characters from `string`.                                              // 10887\n     *                                                                                                                 // 10888\n     * @static                                                                                                         // 10889\n     * @memberOf _                                                                                                     // 10890\n     * @category String                                                                                                // 10891\n     * @param {string} [string=''] The string to trim.                                                                 // 10892\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10893\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10894\n     * @returns {string} Returns the trimmed string.                                                                   // 10895\n     * @example                                                                                                        // 10896\n     *                                                                                                                 // 10897\n     * _.trimRight('  abc  ');                                                                                         // 10898\n     * // => '  abc'                                                                                                   // 10899\n     *                                                                                                                 // 10900\n     * _.trimRight('-_-abc-_-', '_-');                                                                                 // 10901\n     * // => '-_-abc'                                                                                                  // 10902\n     */                                                                                                                // 10903\n    function trimRight(string, chars, guard) {                                                                         // 10904\n      var value = string;                                                                                              // 10905\n      string = baseToString(string);                                                                                   // 10906\n      if (!string) {                                                                                                   // 10907\n        return string;                                                                                                 // 10908\n      }                                                                                                                // 10909\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10910\n        return string.slice(0, trimmedRightIndex(string) + 1);                                                         // 10911\n      }                                                                                                                // 10912\n      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);                                               // 10913\n    }                                                                                                                  // 10914\n                                                                                                                       // 10915\n    /**                                                                                                                // 10916\n     * Truncates `string` if it's longer than the given maximum string length.                                         // 10917\n     * The last characters of the truncated string are replaced with the omission                                      // 10918\n     * string which defaults to \"...\".                                                                                 // 10919\n     *                                                                                                                 // 10920\n     * @static                                                                                                         // 10921\n     * @memberOf _                                                                                                     // 10922\n     * @category String                                                                                                // 10923\n     * @param {string} [string=''] The string to truncate.                                                             // 10924\n     * @param {Object|number} [options] The options object or maximum string length.                                   // 10925\n     * @param {number} [options.length=30] The maximum string length.                                                  // 10926\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 10927\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 10928\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10929\n     * @returns {string} Returns the truncated string.                                                                 // 10930\n     * @example                                                                                                        // 10931\n     *                                                                                                                 // 10932\n     * _.trunc('hi-diddly-ho there, neighborino');                                                                     // 10933\n     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 10934\n     *                                                                                                                 // 10935\n     * _.trunc('hi-diddly-ho there, neighborino', 24);                                                                 // 10936\n     * // => 'hi-diddly-ho there, n...'                                                                                // 10937\n     *                                                                                                                 // 10938\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10939\n     *   'length': 24,                                                                                                 // 10940\n     *   'separator': ' '                                                                                              // 10941\n     * });                                                                                                             // 10942\n     * // => 'hi-diddly-ho there,...'                                                                                  // 10943\n     *                                                                                                                 // 10944\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10945\n     *   'length': 24,                                                                                                 // 10946\n     *   'separator': /,? +/                                                                                           // 10947\n     * });                                                                                                             // 10948\n     * // => 'hi-diddly-ho there...'                                                                                   // 10949\n     *                                                                                                                 // 10950\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10951\n     *   'omission': ' [...]'                                                                                          // 10952\n     * });                                                                                                             // 10953\n     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 10954\n     */                                                                                                                // 10955\n    function trunc(string, options, guard) {                                                                           // 10956\n      if (guard && isIterateeCall(string, options, guard)) {                                                           // 10957\n        options = undefined;                                                                                           // 10958\n      }                                                                                                                // 10959\n      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 10960\n          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 10961\n                                                                                                                       // 10962\n      if (options != null) {                                                                                           // 10963\n        if (isObject(options)) {                                                                                       // 10964\n          var separator = 'separator' in options ? options.separator : separator;                                      // 10965\n          length = 'length' in options ? (+options.length || 0) : length;                                              // 10966\n          omission = 'omission' in options ? baseToString(options.omission) : omission;                                // 10967\n        } else {                                                                                                       // 10968\n          length = +options || 0;                                                                                      // 10969\n        }                                                                                                              // 10970\n      }                                                                                                                // 10971\n      string = baseToString(string);                                                                                   // 10972\n      if (length >= string.length) {                                                                                   // 10973\n        return string;                                                                                                 // 10974\n      }                                                                                                                // 10975\n      var end = length - omission.length;                                                                              // 10976\n      if (end < 1) {                                                                                                   // 10977\n        return omission;                                                                                               // 10978\n      }                                                                                                                // 10979\n      var result = string.slice(0, end);                                                                               // 10980\n      if (separator == null) {                                                                                         // 10981\n        return result + omission;                                                                                      // 10982\n      }                                                                                                                // 10983\n      if (isRegExp(separator)) {                                                                                       // 10984\n        if (string.slice(end).search(separator)) {                                                                     // 10985\n          var match,                                                                                                   // 10986\n              newEnd,                                                                                                  // 10987\n              substring = string.slice(0, end);                                                                        // 10988\n                                                                                                                       // 10989\n          if (!separator.global) {                                                                                     // 10990\n            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');                               // 10991\n          }                                                                                                            // 10992\n          separator.lastIndex = 0;                                                                                     // 10993\n          while ((match = separator.exec(substring))) {                                                                // 10994\n            newEnd = match.index;                                                                                      // 10995\n          }                                                                                                            // 10996\n          result = result.slice(0, newEnd == null ? end : newEnd);                                                     // 10997\n        }                                                                                                              // 10998\n      } else if (string.indexOf(separator, end) != end) {                                                              // 10999\n        var index = result.lastIndexOf(separator);                                                                     // 11000\n        if (index > -1) {                                                                                              // 11001\n          result = result.slice(0, index);                                                                             // 11002\n        }                                                                                                              // 11003\n      }                                                                                                                // 11004\n      return result + omission;                                                                                        // 11005\n    }                                                                                                                  // 11006\n                                                                                                                       // 11007\n    /**                                                                                                                // 11008\n     * The inverse of `_.escape`; this method converts the HTML entities                                               // 11009\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 11010\n     * corresponding characters.                                                                                       // 11011\n     *                                                                                                                 // 11012\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 11013\n     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 11014\n     *                                                                                                                 // 11015\n     * @static                                                                                                         // 11016\n     * @memberOf _                                                                                                     // 11017\n     * @category String                                                                                                // 11018\n     * @param {string} [string=''] The string to unescape.                                                             // 11019\n     * @returns {string} Returns the unescaped string.                                                                 // 11020\n     * @example                                                                                                        // 11021\n     *                                                                                                                 // 11022\n     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 11023\n     * // => 'fred, barney, & pebbles'                                                                                 // 11024\n     */                                                                                                                // 11025\n    function unescape(string) {                                                                                        // 11026\n      string = baseToString(string);                                                                                   // 11027\n      return (string && reHasEscapedHtml.test(string))                                                                 // 11028\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 11029\n        : string;                                                                                                      // 11030\n    }                                                                                                                  // 11031\n                                                                                                                       // 11032\n    /**                                                                                                                // 11033\n     * Splits `string` into an array of its words.                                                                     // 11034\n     *                                                                                                                 // 11035\n     * @static                                                                                                         // 11036\n     * @memberOf _                                                                                                     // 11037\n     * @category String                                                                                                // 11038\n     * @param {string} [string=''] The string to inspect.                                                              // 11039\n     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 11040\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11041\n     * @returns {Array} Returns the words of `string`.                                                                 // 11042\n     * @example                                                                                                        // 11043\n     *                                                                                                                 // 11044\n     * _.words('fred, barney, & pebbles');                                                                             // 11045\n     * // => ['fred', 'barney', 'pebbles']                                                                             // 11046\n     *                                                                                                                 // 11047\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 11048\n     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 11049\n     */                                                                                                                // 11050\n    function words(string, pattern, guard) {                                                                           // 11051\n      if (guard && isIterateeCall(string, pattern, guard)) {                                                           // 11052\n        pattern = undefined;                                                                                           // 11053\n      }                                                                                                                // 11054\n      string = baseToString(string);                                                                                   // 11055\n      return string.match(pattern || reWords) || [];                                                                   // 11056\n    }                                                                                                                  // 11057\n                                                                                                                       // 11058\n    /*------------------------------------------------------------------------*/                                       // 11059\n                                                                                                                       // 11060\n    /**                                                                                                                // 11061\n     * Attempts to invoke `func`, returning either the result or the caught error                                      // 11062\n     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 11063\n     *                                                                                                                 // 11064\n     * @static                                                                                                         // 11065\n     * @memberOf _                                                                                                     // 11066\n     * @category Utility                                                                                               // 11067\n     * @param {Function} func The function to attempt.                                                                 // 11068\n     * @returns {*} Returns the `func` result or error object.                                                         // 11069\n     * @example                                                                                                        // 11070\n     *                                                                                                                 // 11071\n     * // avoid throwing errors for invalid selectors                                                                  // 11072\n     * var elements = _.attempt(function(selector) {                                                                   // 11073\n     *   return document.querySelectorAll(selector);                                                                   // 11074\n     * }, '>_>');                                                                                                      // 11075\n     *                                                                                                                 // 11076\n     * if (_.isError(elements)) {                                                                                      // 11077\n     *   elements = [];                                                                                                // 11078\n     * }                                                                                                               // 11079\n     */                                                                                                                // 11080\n    var attempt = restParam(function(func, args) {                                                                     // 11081\n      try {                                                                                                            // 11082\n        return func.apply(undefined, args);                                                                            // 11083\n      } catch(e) {                                                                                                     // 11084\n        return isError(e) ? e : new Error(e);                                                                          // 11085\n      }                                                                                                                // 11086\n    });                                                                                                                // 11087\n                                                                                                                       // 11088\n    /**                                                                                                                // 11089\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 11090\n     * and arguments of the created function. If `func` is a property name the                                         // 11091\n     * created callback returns the property value for a given element. If `func`                                      // 11092\n     * is an object the created callback returns `true` for elements that contain                                      // 11093\n     * the equivalent object properties, otherwise it returns `false`.                                                 // 11094\n     *                                                                                                                 // 11095\n     * @static                                                                                                         // 11096\n     * @memberOf _                                                                                                     // 11097\n     * @alias iteratee                                                                                                 // 11098\n     * @category Utility                                                                                               // 11099\n     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 11100\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 11101\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11102\n     * @returns {Function} Returns the callback.                                                                       // 11103\n     * @example                                                                                                        // 11104\n     *                                                                                                                 // 11105\n     * var users = [                                                                                                   // 11106\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11107\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11108\n     * ];                                                                                                              // 11109\n     *                                                                                                                 // 11110\n     * // wrap to create custom callback shorthands                                                                    // 11111\n     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {                                             // 11112\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);                                                                // 11113\n     *   if (!match) {                                                                                                 // 11114\n     *     return callback(func, thisArg);                                                                             // 11115\n     *   }                                                                                                             // 11116\n     *   return function(object) {                                                                                     // 11117\n     *     return match[2] == 'gt'                                                                                     // 11118\n     *       ? object[match[1]] > match[3]                                                                             // 11119\n     *       : object[match[1]] < match[3];                                                                            // 11120\n     *   };                                                                                                            // 11121\n     * });                                                                                                             // 11122\n     *                                                                                                                 // 11123\n     * _.filter(users, 'age__gt36');                                                                                   // 11124\n     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 11125\n     */                                                                                                                // 11126\n    function callback(func, thisArg, guard) {                                                                          // 11127\n      if (guard && isIterateeCall(func, thisArg, guard)) {                                                             // 11128\n        thisArg = undefined;                                                                                           // 11129\n      }                                                                                                                // 11130\n      return isObjectLike(func)                                                                                        // 11131\n        ? matches(func)                                                                                                // 11132\n        : baseCallback(func, thisArg);                                                                                 // 11133\n    }                                                                                                                  // 11134\n                                                                                                                       // 11135\n    /**                                                                                                                // 11136\n     * Creates a function that returns `value`.                                                                        // 11137\n     *                                                                                                                 // 11138\n     * @static                                                                                                         // 11139\n     * @memberOf _                                                                                                     // 11140\n     * @category Utility                                                                                               // 11141\n     * @param {*} value The value to return from the new function.                                                     // 11142\n     * @returns {Function} Returns the new function.                                                                   // 11143\n     * @example                                                                                                        // 11144\n     *                                                                                                                 // 11145\n     * var object = { 'user': 'fred' };                                                                                // 11146\n     * var getter = _.constant(object);                                                                                // 11147\n     *                                                                                                                 // 11148\n     * getter() === object;                                                                                            // 11149\n     * // => true                                                                                                      // 11150\n     */                                                                                                                // 11151\n    function constant(value) {                                                                                         // 11152\n      return function() {                                                                                              // 11153\n        return value;                                                                                                  // 11154\n      };                                                                                                               // 11155\n    }                                                                                                                  // 11156\n                                                                                                                       // 11157\n    /**                                                                                                                // 11158\n     * This method returns the first argument provided to it.                                                          // 11159\n     *                                                                                                                 // 11160\n     * @static                                                                                                         // 11161\n     * @memberOf _                                                                                                     // 11162\n     * @category Utility                                                                                               // 11163\n     * @param {*} value Any value.                                                                                     // 11164\n     * @returns {*} Returns `value`.                                                                                   // 11165\n     * @example                                                                                                        // 11166\n     *                                                                                                                 // 11167\n     * var object = { 'user': 'fred' };                                                                                // 11168\n     *                                                                                                                 // 11169\n     * _.identity(object) === object;                                                                                  // 11170\n     * // => true                                                                                                      // 11171\n     */                                                                                                                // 11172\n    function identity(value) {                                                                                         // 11173\n      return value;                                                                                                    // 11174\n    }                                                                                                                  // 11175\n                                                                                                                       // 11176\n    /**                                                                                                                // 11177\n     * Creates a function that performs a deep comparison between a given object                                       // 11178\n     * and `source`, returning `true` if the given object has equivalent property                                      // 11179\n     * values, else `false`.                                                                                           // 11180\n     *                                                                                                                 // 11181\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11182\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11183\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 11184\n     * own or inherited property value see `_.matchesProperty`.                                                        // 11185\n     *                                                                                                                 // 11186\n     * @static                                                                                                         // 11187\n     * @memberOf _                                                                                                     // 11188\n     * @category Utility                                                                                               // 11189\n     * @param {Object} source The object of property values to match.                                                  // 11190\n     * @returns {Function} Returns the new function.                                                                   // 11191\n     * @example                                                                                                        // 11192\n     *                                                                                                                 // 11193\n     * var users = [                                                                                                   // 11194\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 11195\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 11196\n     * ];                                                                                                              // 11197\n     *                                                                                                                 // 11198\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 11199\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 11200\n     */                                                                                                                // 11201\n    function matches(source) {                                                                                         // 11202\n      return baseMatches(baseClone(source, true));                                                                     // 11203\n    }                                                                                                                  // 11204\n                                                                                                                       // 11205\n    /**                                                                                                                // 11206\n     * Creates a function that compares the property value of `path` on a given                                        // 11207\n     * object to `value`.                                                                                              // 11208\n     *                                                                                                                 // 11209\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11210\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11211\n     * their own, not inherited, enumerable properties.                                                                // 11212\n     *                                                                                                                 // 11213\n     * @static                                                                                                         // 11214\n     * @memberOf _                                                                                                     // 11215\n     * @category Utility                                                                                               // 11216\n     * @param {Array|string} path The path of the property to get.                                                     // 11217\n     * @param {*} srcValue The value to match.                                                                         // 11218\n     * @returns {Function} Returns the new function.                                                                   // 11219\n     * @example                                                                                                        // 11220\n     *                                                                                                                 // 11221\n     * var users = [                                                                                                   // 11222\n     *   { 'user': 'barney' },                                                                                         // 11223\n     *   { 'user': 'fred' }                                                                                            // 11224\n     * ];                                                                                                              // 11225\n     *                                                                                                                 // 11226\n     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 11227\n     * // => { 'user': 'fred' }                                                                                        // 11228\n     */                                                                                                                // 11229\n    function matchesProperty(path, srcValue) {                                                                         // 11230\n      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 11231\n    }                                                                                                                  // 11232\n                                                                                                                       // 11233\n    /**                                                                                                                // 11234\n     * Creates a function that invokes the method at `path` on a given object.                                         // 11235\n     * Any additional arguments are provided to the invoked method.                                                    // 11236\n     *                                                                                                                 // 11237\n     * @static                                                                                                         // 11238\n     * @memberOf _                                                                                                     // 11239\n     * @category Utility                                                                                               // 11240\n     * @param {Array|string} path The path of the method to invoke.                                                    // 11241\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11242\n     * @returns {Function} Returns the new function.                                                                   // 11243\n     * @example                                                                                                        // 11244\n     *                                                                                                                 // 11245\n     * var objects = [                                                                                                 // 11246\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 11247\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 11248\n     * ];                                                                                                              // 11249\n     *                                                                                                                 // 11250\n     * _.map(objects, _.method('a.b.c'));                                                                              // 11251\n     * // => [2, 1]                                                                                                    // 11252\n     *                                                                                                                 // 11253\n     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                                // 11254\n     * // => [1, 2]                                                                                                    // 11255\n     */                                                                                                                // 11256\n    var method = restParam(function(path, args) {                                                                      // 11257\n      return function(object) {                                                                                        // 11258\n        return invokePath(object, path, args);                                                                         // 11259\n      };                                                                                                               // 11260\n    });                                                                                                                // 11261\n                                                                                                                       // 11262\n    /**                                                                                                                // 11263\n     * The opposite of `_.method`; this method creates a function that invokes                                         // 11264\n     * the method at a given path on `object`. Any additional arguments are                                            // 11265\n     * provided to the invoked method.                                                                                 // 11266\n     *                                                                                                                 // 11267\n     * @static                                                                                                         // 11268\n     * @memberOf _                                                                                                     // 11269\n     * @category Utility                                                                                               // 11270\n     * @param {Object} object The object to query.                                                                     // 11271\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11272\n     * @returns {Function} Returns the new function.                                                                   // 11273\n     * @example                                                                                                        // 11274\n     *                                                                                                                 // 11275\n     * var array = _.times(3, _.constant),                                                                             // 11276\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11277\n     *                                                                                                                 // 11278\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 11279\n     * // => [2, 0]                                                                                                    // 11280\n     *                                                                                                                 // 11281\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 11282\n     * // => [2, 0]                                                                                                    // 11283\n     */                                                                                                                // 11284\n    var methodOf = restParam(function(object, args) {                                                                  // 11285\n      return function(path) {                                                                                          // 11286\n        return invokePath(object, path, args);                                                                         // 11287\n      };                                                                                                               // 11288\n    });                                                                                                                // 11289\n                                                                                                                       // 11290\n    /**                                                                                                                // 11291\n     * Adds all own enumerable function properties of a source object to the                                           // 11292\n     * destination object. If `object` is a function then methods are added to                                         // 11293\n     * its prototype as well.                                                                                          // 11294\n     *                                                                                                                 // 11295\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 11296\n     * avoid conflicts caused by modifying the original.                                                               // 11297\n     *                                                                                                                 // 11298\n     * @static                                                                                                         // 11299\n     * @memberOf _                                                                                                     // 11300\n     * @category Utility                                                                                               // 11301\n     * @param {Function|Object} [object=lodash] The destination object.                                                // 11302\n     * @param {Object} source The object of functions to add.                                                          // 11303\n     * @param {Object} [options] The options object.                                                                   // 11304\n     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 11305\n     *  are chainable.                                                                                                 // 11306\n     * @returns {Function|Object} Returns `object`.                                                                    // 11307\n     * @example                                                                                                        // 11308\n     *                                                                                                                 // 11309\n     * function vowels(string) {                                                                                       // 11310\n     *   return _.filter(string, function(v) {                                                                         // 11311\n     *     return /[aeiou]/i.test(v);                                                                                  // 11312\n     *   });                                                                                                           // 11313\n     * }                                                                                                               // 11314\n     *                                                                                                                 // 11315\n     * _.mixin({ 'vowels': vowels });                                                                                  // 11316\n     * _.vowels('fred');                                                                                               // 11317\n     * // => ['e']                                                                                                     // 11318\n     *                                                                                                                 // 11319\n     * _('fred').vowels().value();                                                                                     // 11320\n     * // => ['e']                                                                                                     // 11321\n     *                                                                                                                 // 11322\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 11323\n     * _('fred').vowels();                                                                                             // 11324\n     * // => ['e']                                                                                                     // 11325\n     */                                                                                                                // 11326\n    function mixin(object, source, options) {                                                                          // 11327\n      if (options == null) {                                                                                           // 11328\n        var isObj = isObject(source),                                                                                  // 11329\n            props = isObj ? keys(source) : undefined,                                                                  // 11330\n            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;                          // 11331\n                                                                                                                       // 11332\n        if (!(methodNames ? methodNames.length : isObj)) {                                                             // 11333\n          methodNames = false;                                                                                         // 11334\n          options = source;                                                                                            // 11335\n          source = object;                                                                                             // 11336\n          object = this;                                                                                               // 11337\n        }                                                                                                              // 11338\n      }                                                                                                                // 11339\n      if (!methodNames) {                                                                                              // 11340\n        methodNames = baseFunctions(source, keys(source));                                                             // 11341\n      }                                                                                                                // 11342\n      var chain = true,                                                                                                // 11343\n          index = -1,                                                                                                  // 11344\n          isFunc = isFunction(object),                                                                                 // 11345\n          length = methodNames.length;                                                                                 // 11346\n                                                                                                                       // 11347\n      if (options === false) {                                                                                         // 11348\n        chain = false;                                                                                                 // 11349\n      } else if (isObject(options) && 'chain' in options) {                                                            // 11350\n        chain = options.chain;                                                                                         // 11351\n      }                                                                                                                // 11352\n      while (++index < length) {                                                                                       // 11353\n        var methodName = methodNames[index],                                                                           // 11354\n            func = source[methodName];                                                                                 // 11355\n                                                                                                                       // 11356\n        object[methodName] = func;                                                                                     // 11357\n        if (isFunc) {                                                                                                  // 11358\n          object.prototype[methodName] = (function(func) {                                                             // 11359\n            return function() {                                                                                        // 11360\n              var chainAll = this.__chain__;                                                                           // 11361\n              if (chain || chainAll) {                                                                                 // 11362\n                var result = object(this.__wrapped__),                                                                 // 11363\n                    actions = result.__actions__ = arrayCopy(this.__actions__);                                        // 11364\n                                                                                                                       // 11365\n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                  // 11366\n                result.__chain__ = chainAll;                                                                           // 11367\n                return result;                                                                                         // 11368\n              }                                                                                                        // 11369\n              return func.apply(object, arrayPush([this.value()], arguments));                                         // 11370\n            };                                                                                                         // 11371\n          }(func));                                                                                                    // 11372\n        }                                                                                                              // 11373\n      }                                                                                                                // 11374\n      return object;                                                                                                   // 11375\n    }                                                                                                                  // 11376\n                                                                                                                       // 11377\n    /**                                                                                                                // 11378\n     * Reverts the `_` variable to its previous value and returns a reference to                                       // 11379\n     * the `lodash` function.                                                                                          // 11380\n     *                                                                                                                 // 11381\n     * @static                                                                                                         // 11382\n     * @memberOf _                                                                                                     // 11383\n     * @category Utility                                                                                               // 11384\n     * @returns {Function} Returns the `lodash` function.                                                              // 11385\n     * @example                                                                                                        // 11386\n     *                                                                                                                 // 11387\n     * var lodash = _.noConflict();                                                                                    // 11388\n     */                                                                                                                // 11389\n    function noConflict() {                                                                                            // 11390\n      root._ = oldDash;                                                                                                // 11391\n      return this;                                                                                                     // 11392\n    }                                                                                                                  // 11393\n                                                                                                                       // 11394\n    /**                                                                                                                // 11395\n     * A no-operation function that returns `undefined` regardless of the                                              // 11396\n     * arguments it receives.                                                                                          // 11397\n     *                                                                                                                 // 11398\n     * @static                                                                                                         // 11399\n     * @memberOf _                                                                                                     // 11400\n     * @category Utility                                                                                               // 11401\n     * @example                                                                                                        // 11402\n     *                                                                                                                 // 11403\n     * var object = { 'user': 'fred' };                                                                                // 11404\n     *                                                                                                                 // 11405\n     * _.noop(object) === undefined;                                                                                   // 11406\n     * // => true                                                                                                      // 11407\n     */                                                                                                                // 11408\n    function noop() {                                                                                                  // 11409\n      // No operation performed.                                                                                       // 11410\n    }                                                                                                                  // 11411\n                                                                                                                       // 11412\n    /**                                                                                                                // 11413\n     * Creates a function that returns the property value at `path` on a                                               // 11414\n     * given object.                                                                                                   // 11415\n     *                                                                                                                 // 11416\n     * @static                                                                                                         // 11417\n     * @memberOf _                                                                                                     // 11418\n     * @category Utility                                                                                               // 11419\n     * @param {Array|string} path The path of the property to get.                                                     // 11420\n     * @returns {Function} Returns the new function.                                                                   // 11421\n     * @example                                                                                                        // 11422\n     *                                                                                                                 // 11423\n     * var objects = [                                                                                                 // 11424\n     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 11425\n     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 11426\n     * ];                                                                                                              // 11427\n     *                                                                                                                 // 11428\n     * _.map(objects, _.property('a.b.c'));                                                                            // 11429\n     * // => [2, 1]                                                                                                    // 11430\n     *                                                                                                                 // 11431\n     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                               // 11432\n     * // => [1, 2]                                                                                                    // 11433\n     */                                                                                                                // 11434\n    function property(path) {                                                                                          // 11435\n      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 11436\n    }                                                                                                                  // 11437\n                                                                                                                       // 11438\n    /**                                                                                                                // 11439\n     * The opposite of `_.property`; this method creates a function that returns                                       // 11440\n     * the property value at a given path on `object`.                                                                 // 11441\n     *                                                                                                                 // 11442\n     * @static                                                                                                         // 11443\n     * @memberOf _                                                                                                     // 11444\n     * @category Utility                                                                                               // 11445\n     * @param {Object} object The object to query.                                                                     // 11446\n     * @returns {Function} Returns the new function.                                                                   // 11447\n     * @example                                                                                                        // 11448\n     *                                                                                                                 // 11449\n     * var array = [0, 1, 2],                                                                                          // 11450\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11451\n     *                                                                                                                 // 11452\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 11453\n     * // => [2, 0]                                                                                                    // 11454\n     *                                                                                                                 // 11455\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 11456\n     * // => [2, 0]                                                                                                    // 11457\n     */                                                                                                                // 11458\n    function propertyOf(object) {                                                                                      // 11459\n      return function(path) {                                                                                          // 11460\n        return baseGet(object, toPath(path), (path + ''));                                                             // 11461\n      };                                                                                                               // 11462\n    }                                                                                                                  // 11463\n                                                                                                                       // 11464\n    /**                                                                                                                // 11465\n     * Creates an array of numbers (positive and/or negative) progressing from                                         // 11466\n     * `start` up to, but not including, `end`. If `end` is not specified it's                                         // 11467\n     * set to `start` with `start` then set to `0`. If `end` is less than `start`                                      // 11468\n     * a zero-length range is created unless a negative `step` is specified.                                           // 11469\n     *                                                                                                                 // 11470\n     * @static                                                                                                         // 11471\n     * @memberOf _                                                                                                     // 11472\n     * @category Utility                                                                                               // 11473\n     * @param {number} [start=0] The start of the range.                                                               // 11474\n     * @param {number} end The end of the range.                                                                       // 11475\n     * @param {number} [step=1] The value to increment or decrement by.                                                // 11476\n     * @returns {Array} Returns the new array of numbers.                                                              // 11477\n     * @example                                                                                                        // 11478\n     *                                                                                                                 // 11479\n     * _.range(4);                                                                                                     // 11480\n     * // => [0, 1, 2, 3]                                                                                              // 11481\n     *                                                                                                                 // 11482\n     * _.range(1, 5);                                                                                                  // 11483\n     * // => [1, 2, 3, 4]                                                                                              // 11484\n     *                                                                                                                 // 11485\n     * _.range(0, 20, 5);                                                                                              // 11486\n     * // => [0, 5, 10, 15]                                                                                            // 11487\n     *                                                                                                                 // 11488\n     * _.range(0, -4, -1);                                                                                             // 11489\n     * // => [0, -1, -2, -3]                                                                                           // 11490\n     *                                                                                                                 // 11491\n     * _.range(1, 4, 0);                                                                                               // 11492\n     * // => [1, 1, 1]                                                                                                 // 11493\n     *                                                                                                                 // 11494\n     * _.range(0);                                                                                                     // 11495\n     * // => []                                                                                                        // 11496\n     */                                                                                                                // 11497\n    function range(start, end, step) {                                                                                 // 11498\n      if (step && isIterateeCall(start, end, step)) {                                                                  // 11499\n        end = step = undefined;                                                                                        // 11500\n      }                                                                                                                // 11501\n      start = +start || 0;                                                                                             // 11502\n      step = step == null ? 1 : (+step || 0);                                                                          // 11503\n                                                                                                                       // 11504\n      if (end == null) {                                                                                               // 11505\n        end = start;                                                                                                   // 11506\n        start = 0;                                                                                                     // 11507\n      } else {                                                                                                         // 11508\n        end = +end || 0;                                                                                               // 11509\n      }                                                                                                                // 11510\n      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.                                         // 11511\n      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.                                                   // 11512\n      var index = -1,                                                                                                  // 11513\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 11514\n          result = Array(length);                                                                                      // 11515\n                                                                                                                       // 11516\n      while (++index < length) {                                                                                       // 11517\n        result[index] = start;                                                                                         // 11518\n        start += step;                                                                                                 // 11519\n      }                                                                                                                // 11520\n      return result;                                                                                                   // 11521\n    }                                                                                                                  // 11522\n                                                                                                                       // 11523\n    /**                                                                                                                // 11524\n     * Invokes the iteratee function `n` times, returning an array of the results                                      // 11525\n     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with                                       // 11526\n     * one argument; (index).                                                                                          // 11527\n     *                                                                                                                 // 11528\n     * @static                                                                                                         // 11529\n     * @memberOf _                                                                                                     // 11530\n     * @category Utility                                                                                               // 11531\n     * @param {number} n The number of times to invoke `iteratee`.                                                     // 11532\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11533\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11534\n     * @returns {Array} Returns the array of results.                                                                  // 11535\n     * @example                                                                                                        // 11536\n     *                                                                                                                 // 11537\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));                                                   // 11538\n     * // => [3, 6, 4]                                                                                                 // 11539\n     *                                                                                                                 // 11540\n     * _.times(3, function(n) {                                                                                        // 11541\n     *   mage.castSpell(n);                                                                                            // 11542\n     * });                                                                                                             // 11543\n     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`                                     // 11544\n     *                                                                                                                 // 11545\n     * _.times(3, function(n) {                                                                                        // 11546\n     *   this.cast(n);                                                                                                 // 11547\n     * }, mage);                                                                                                       // 11548\n     * // => also invokes `mage.castSpell(n)` three times                                                              // 11549\n     */                                                                                                                // 11550\n    function times(n, iteratee, thisArg) {                                                                             // 11551\n      n = nativeFloor(n);                                                                                              // 11552\n                                                                                                                       // 11553\n      // Exit early to avoid a JSC JIT bug in Safari 8                                                                 // 11554\n      // where `Array(0)` is treated as `Array(1)`.                                                                    // 11555\n      if (n < 1 || !nativeIsFinite(n)) {                                                                               // 11556\n        return [];                                                                                                     // 11557\n      }                                                                                                                // 11558\n      var index = -1,                                                                                                  // 11559\n          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));                                                              // 11560\n                                                                                                                       // 11561\n      iteratee = bindCallback(iteratee, thisArg, 1);                                                                   // 11562\n      while (++index < n) {                                                                                            // 11563\n        if (index < MAX_ARRAY_LENGTH) {                                                                                // 11564\n          result[index] = iteratee(index);                                                                             // 11565\n        } else {                                                                                                       // 11566\n          iteratee(index);                                                                                             // 11567\n        }                                                                                                              // 11568\n      }                                                                                                                // 11569\n      return result;                                                                                                   // 11570\n    }                                                                                                                  // 11571\n                                                                                                                       // 11572\n    /**                                                                                                                // 11573\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 11574\n     *                                                                                                                 // 11575\n     * @static                                                                                                         // 11576\n     * @memberOf _                                                                                                     // 11577\n     * @category Utility                                                                                               // 11578\n     * @param {string} [prefix] The value to prefix the ID with.                                                       // 11579\n     * @returns {string} Returns the unique ID.                                                                        // 11580\n     * @example                                                                                                        // 11581\n     *                                                                                                                 // 11582\n     * _.uniqueId('contact_');                                                                                         // 11583\n     * // => 'contact_104'                                                                                             // 11584\n     *                                                                                                                 // 11585\n     * _.uniqueId();                                                                                                   // 11586\n     * // => '105'                                                                                                     // 11587\n     */                                                                                                                // 11588\n    function uniqueId(prefix) {                                                                                        // 11589\n      var id = ++idCounter;                                                                                            // 11590\n      return baseToString(prefix) + id;                                                                                // 11591\n    }                                                                                                                  // 11592\n                                                                                                                       // 11593\n    /*------------------------------------------------------------------------*/                                       // 11594\n                                                                                                                       // 11595\n    /**                                                                                                                // 11596\n     * Adds two numbers.                                                                                               // 11597\n     *                                                                                                                 // 11598\n     * @static                                                                                                         // 11599\n     * @memberOf _                                                                                                     // 11600\n     * @category Math                                                                                                  // 11601\n     * @param {number} augend The first number to add.                                                                 // 11602\n     * @param {number} addend The second number to add.                                                                // 11603\n     * @returns {number} Returns the sum.                                                                              // 11604\n     * @example                                                                                                        // 11605\n     *                                                                                                                 // 11606\n     * _.add(6, 4);                                                                                                    // 11607\n     * // => 10                                                                                                        // 11608\n     */                                                                                                                // 11609\n    function add(augend, addend) {                                                                                     // 11610\n      return (+augend || 0) + (+addend || 0);                                                                          // 11611\n    }                                                                                                                  // 11612\n                                                                                                                       // 11613\n    /**                                                                                                                // 11614\n     * Calculates `n` rounded up to `precision`.                                                                       // 11615\n     *                                                                                                                 // 11616\n     * @static                                                                                                         // 11617\n     * @memberOf _                                                                                                     // 11618\n     * @category Math                                                                                                  // 11619\n     * @param {number} n The number to round up.                                                                       // 11620\n     * @param {number} [precision=0] The precision to round up to.                                                     // 11621\n     * @returns {number} Returns the rounded up number.                                                                // 11622\n     * @example                                                                                                        // 11623\n     *                                                                                                                 // 11624\n     * _.ceil(4.006);                                                                                                  // 11625\n     * // => 5                                                                                                         // 11626\n     *                                                                                                                 // 11627\n     * _.ceil(6.004, 2);                                                                                               // 11628\n     * // => 6.01                                                                                                      // 11629\n     *                                                                                                                 // 11630\n     * _.ceil(6040, -2);                                                                                               // 11631\n     * // => 6100                                                                                                      // 11632\n     */                                                                                                                // 11633\n    var ceil = createRound('ceil');                                                                                    // 11634\n                                                                                                                       // 11635\n    /**                                                                                                                // 11636\n     * Calculates `n` rounded down to `precision`.                                                                     // 11637\n     *                                                                                                                 // 11638\n     * @static                                                                                                         // 11639\n     * @memberOf _                                                                                                     // 11640\n     * @category Math                                                                                                  // 11641\n     * @param {number} n The number to round down.                                                                     // 11642\n     * @param {number} [precision=0] The precision to round down to.                                                   // 11643\n     * @returns {number} Returns the rounded down number.                                                              // 11644\n     * @example                                                                                                        // 11645\n     *                                                                                                                 // 11646\n     * _.floor(4.006);                                                                                                 // 11647\n     * // => 4                                                                                                         // 11648\n     *                                                                                                                 // 11649\n     * _.floor(0.046, 2);                                                                                              // 11650\n     * // => 0.04                                                                                                      // 11651\n     *                                                                                                                 // 11652\n     * _.floor(4060, -2);                                                                                              // 11653\n     * // => 4000                                                                                                      // 11654\n     */                                                                                                                // 11655\n    var floor = createRound('floor');                                                                                  // 11656\n                                                                                                                       // 11657\n    /**                                                                                                                // 11658\n     * Gets the maximum value of `collection`. If `collection` is empty or falsey                                      // 11659\n     * `-Infinity` is returned. If an iteratee function is provided it's invoked                                       // 11660\n     * for each value in `collection` to generate the criterion by which the value                                     // 11661\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11662\n     * arguments: (value, index, collection).                                                                          // 11663\n     *                                                                                                                 // 11664\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 11665\n     * style callback returns the property value of the given element.                                                 // 11666\n     *                                                                                                                 // 11667\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11668\n     * style callback returns `true` for elements that have a matching property                                        // 11669\n     * value, else `false`.                                                                                            // 11670\n     *                                                                                                                 // 11671\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11672\n     * callback returns `true` for elements that have the properties of the given                                      // 11673\n     * object, else `false`.                                                                                           // 11674\n     *                                                                                                                 // 11675\n     * @static                                                                                                         // 11676\n     * @memberOf _                                                                                                     // 11677\n     * @category Math                                                                                                  // 11678\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11679\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11680\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11681\n     * @returns {*} Returns the maximum value.                                                                         // 11682\n     * @example                                                                                                        // 11683\n     *                                                                                                                 // 11684\n     * _.max([4, 2, 8, 6]);                                                                                            // 11685\n     * // => 8                                                                                                         // 11686\n     *                                                                                                                 // 11687\n     * _.max([]);                                                                                                      // 11688\n     * // => -Infinity                                                                                                 // 11689\n     *                                                                                                                 // 11690\n     * var users = [                                                                                                   // 11691\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11692\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11693\n     * ];                                                                                                              // 11694\n     *                                                                                                                 // 11695\n     * _.max(users, function(chr) {                                                                                    // 11696\n     *   return chr.age;                                                                                               // 11697\n     * });                                                                                                             // 11698\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11699\n     *                                                                                                                 // 11700\n     * // using the `_.property` callback shorthand                                                                    // 11701\n     * _.max(users, 'age');                                                                                            // 11702\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11703\n     */                                                                                                                // 11704\n    var max = createExtremum(gt, NEGATIVE_INFINITY);                                                                   // 11705\n                                                                                                                       // 11706\n    /**                                                                                                                // 11707\n     * Gets the minimum value of `collection`. If `collection` is empty or falsey                                      // 11708\n     * `Infinity` is returned. If an iteratee function is provided it's invoked                                        // 11709\n     * for each value in `collection` to generate the criterion by which the value                                     // 11710\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11711\n     * arguments: (value, index, collection).                                                                          // 11712\n     *                                                                                                                 // 11713\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 11714\n     * style callback returns the property value of the given element.                                                 // 11715\n     *                                                                                                                 // 11716\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11717\n     * style callback returns `true` for elements that have a matching property                                        // 11718\n     * value, else `false`.                                                                                            // 11719\n     *                                                                                                                 // 11720\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11721\n     * callback returns `true` for elements that have the properties of the given                                      // 11722\n     * object, else `false`.                                                                                           // 11723\n     *                                                                                                                 // 11724\n     * @static                                                                                                         // 11725\n     * @memberOf _                                                                                                     // 11726\n     * @category Math                                                                                                  // 11727\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11728\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11729\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11730\n     * @returns {*} Returns the minimum value.                                                                         // 11731\n     * @example                                                                                                        // 11732\n     *                                                                                                                 // 11733\n     * _.min([4, 2, 8, 6]);                                                                                            // 11734\n     * // => 2                                                                                                         // 11735\n     *                                                                                                                 // 11736\n     * _.min([]);                                                                                                      // 11737\n     * // => Infinity                                                                                                  // 11738\n     *                                                                                                                 // 11739\n     * var users = [                                                                                                   // 11740\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11741\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11742\n     * ];                                                                                                              // 11743\n     *                                                                                                                 // 11744\n     * _.min(users, function(chr) {                                                                                    // 11745\n     *   return chr.age;                                                                                               // 11746\n     * });                                                                                                             // 11747\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11748\n     *                                                                                                                 // 11749\n     * // using the `_.property` callback shorthand                                                                    // 11750\n     * _.min(users, 'age');                                                                                            // 11751\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11752\n     */                                                                                                                // 11753\n    var min = createExtremum(lt, POSITIVE_INFINITY);                                                                   // 11754\n                                                                                                                       // 11755\n    /**                                                                                                                // 11756\n     * Calculates `n` rounded to `precision`.                                                                          // 11757\n     *                                                                                                                 // 11758\n     * @static                                                                                                         // 11759\n     * @memberOf _                                                                                                     // 11760\n     * @category Math                                                                                                  // 11761\n     * @param {number} n The number to round.                                                                          // 11762\n     * @param {number} [precision=0] The precision to round to.                                                        // 11763\n     * @returns {number} Returns the rounded number.                                                                   // 11764\n     * @example                                                                                                        // 11765\n     *                                                                                                                 // 11766\n     * _.round(4.006);                                                                                                 // 11767\n     * // => 4                                                                                                         // 11768\n     *                                                                                                                 // 11769\n     * _.round(4.006, 2);                                                                                              // 11770\n     * // => 4.01                                                                                                      // 11771\n     *                                                                                                                 // 11772\n     * _.round(4060, -2);                                                                                              // 11773\n     * // => 4100                                                                                                      // 11774\n     */                                                                                                                // 11775\n    var round = createRound('round');                                                                                  // 11776\n                                                                                                                       // 11777\n    /**                                                                                                                // 11778\n     * Gets the sum of the values in `collection`.                                                                     // 11779\n     *                                                                                                                 // 11780\n     * @static                                                                                                         // 11781\n     * @memberOf _                                                                                                     // 11782\n     * @category Math                                                                                                  // 11783\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11784\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11785\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11786\n     * @returns {number} Returns the sum.                                                                              // 11787\n     * @example                                                                                                        // 11788\n     *                                                                                                                 // 11789\n     * _.sum([4, 6]);                                                                                                  // 11790\n     * // => 10                                                                                                        // 11791\n     *                                                                                                                 // 11792\n     * _.sum({ 'a': 4, 'b': 6 });                                                                                      // 11793\n     * // => 10                                                                                                        // 11794\n     *                                                                                                                 // 11795\n     * var objects = [                                                                                                 // 11796\n     *   { 'n': 4 },                                                                                                   // 11797\n     *   { 'n': 6 }                                                                                                    // 11798\n     * ];                                                                                                              // 11799\n     *                                                                                                                 // 11800\n     * _.sum(objects, function(object) {                                                                               // 11801\n     *   return object.n;                                                                                              // 11802\n     * });                                                                                                             // 11803\n     * // => 10                                                                                                        // 11804\n     *                                                                                                                 // 11805\n     * // using the `_.property` callback shorthand                                                                    // 11806\n     * _.sum(objects, 'n');                                                                                            // 11807\n     * // => 10                                                                                                        // 11808\n     */                                                                                                                // 11809\n    function sum(collection, iteratee, thisArg) {                                                                      // 11810\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 11811\n        iteratee = undefined;                                                                                          // 11812\n      }                                                                                                                // 11813\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 11814\n      return iteratee.length == 1                                                                                      // 11815\n        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)                                // 11816\n        : baseSum(collection, iteratee);                                                                               // 11817\n    }                                                                                                                  // 11818\n                                                                                                                       // 11819\n    /*------------------------------------------------------------------------*/                                       // 11820\n                                                                                                                       // 11821\n    // Ensure wrappers are instances of `baseLodash`.                                                                  // 11822\n    lodash.prototype = baseLodash.prototype;                                                                           // 11823\n                                                                                                                       // 11824\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 11825\n    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 11826\n                                                                                                                       // 11827\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 11828\n    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 11829\n                                                                                                                       // 11830\n    // Add functions to the `Map` cache.                                                                               // 11831\n    MapCache.prototype['delete'] = mapDelete;                                                                          // 11832\n    MapCache.prototype.get = mapGet;                                                                                   // 11833\n    MapCache.prototype.has = mapHas;                                                                                   // 11834\n    MapCache.prototype.set = mapSet;                                                                                   // 11835\n                                                                                                                       // 11836\n    // Add functions to the `Set` cache.                                                                               // 11837\n    SetCache.prototype.push = cachePush;                                                                               // 11838\n                                                                                                                       // 11839\n    // Assign cache to `_.memoize`.                                                                                    // 11840\n    memoize.Cache = MapCache;                                                                                          // 11841\n                                                                                                                       // 11842\n    // Add functions that return wrapped values when chaining.                                                         // 11843\n    lodash.after = after;                                                                                              // 11844\n    lodash.ary = ary;                                                                                                  // 11845\n    lodash.assign = assign;                                                                                            // 11846\n    lodash.at = at;                                                                                                    // 11847\n    lodash.before = before;                                                                                            // 11848\n    lodash.bind = bind;                                                                                                // 11849\n    lodash.bindAll = bindAll;                                                                                          // 11850\n    lodash.bindKey = bindKey;                                                                                          // 11851\n    lodash.callback = callback;                                                                                        // 11852\n    lodash.chain = chain;                                                                                              // 11853\n    lodash.chunk = chunk;                                                                                              // 11854\n    lodash.compact = compact;                                                                                          // 11855\n    lodash.constant = constant;                                                                                        // 11856\n    lodash.countBy = countBy;                                                                                          // 11857\n    lodash.create = create;                                                                                            // 11858\n    lodash.curry = curry;                                                                                              // 11859\n    lodash.curryRight = curryRight;                                                                                    // 11860\n    lodash.debounce = debounce;                                                                                        // 11861\n    lodash.defaults = defaults;                                                                                        // 11862\n    lodash.defaultsDeep = defaultsDeep;                                                                                // 11863\n    lodash.defer = defer;                                                                                              // 11864\n    lodash.delay = delay;                                                                                              // 11865\n    lodash.difference = difference;                                                                                    // 11866\n    lodash.drop = drop;                                                                                                // 11867\n    lodash.dropRight = dropRight;                                                                                      // 11868\n    lodash.dropRightWhile = dropRightWhile;                                                                            // 11869\n    lodash.dropWhile = dropWhile;                                                                                      // 11870\n    lodash.fill = fill;                                                                                                // 11871\n    lodash.filter = filter;                                                                                            // 11872\n    lodash.flatten = flatten;                                                                                          // 11873\n    lodash.flattenDeep = flattenDeep;                                                                                  // 11874\n    lodash.flow = flow;                                                                                                // 11875\n    lodash.flowRight = flowRight;                                                                                      // 11876\n    lodash.forEach = forEach;                                                                                          // 11877\n    lodash.forEachRight = forEachRight;                                                                                // 11878\n    lodash.forIn = forIn;                                                                                              // 11879\n    lodash.forInRight = forInRight;                                                                                    // 11880\n    lodash.forOwn = forOwn;                                                                                            // 11881\n    lodash.forOwnRight = forOwnRight;                                                                                  // 11882\n    lodash.functions = functions;                                                                                      // 11883\n    lodash.groupBy = groupBy;                                                                                          // 11884\n    lodash.indexBy = indexBy;                                                                                          // 11885\n    lodash.initial = initial;                                                                                          // 11886\n    lodash.intersection = intersection;                                                                                // 11887\n    lodash.invert = invert;                                                                                            // 11888\n    lodash.invoke = invoke;                                                                                            // 11889\n    lodash.keys = keys;                                                                                                // 11890\n    lodash.keysIn = keysIn;                                                                                            // 11891\n    lodash.map = map;                                                                                                  // 11892\n    lodash.mapKeys = mapKeys;                                                                                          // 11893\n    lodash.mapValues = mapValues;                                                                                      // 11894\n    lodash.matches = matches;                                                                                          // 11895\n    lodash.matchesProperty = matchesProperty;                                                                          // 11896\n    lodash.memoize = memoize;                                                                                          // 11897\n    lodash.merge = merge;                                                                                              // 11898\n    lodash.method = method;                                                                                            // 11899\n    lodash.methodOf = methodOf;                                                                                        // 11900\n    lodash.mixin = mixin;                                                                                              // 11901\n    lodash.modArgs = modArgs;                                                                                          // 11902\n    lodash.negate = negate;                                                                                            // 11903\n    lodash.omit = omit;                                                                                                // 11904\n    lodash.once = once;                                                                                                // 11905\n    lodash.pairs = pairs;                                                                                              // 11906\n    lodash.partial = partial;                                                                                          // 11907\n    lodash.partialRight = partialRight;                                                                                // 11908\n    lodash.partition = partition;                                                                                      // 11909\n    lodash.pick = pick;                                                                                                // 11910\n    lodash.pluck = pluck;                                                                                              // 11911\n    lodash.property = property;                                                                                        // 11912\n    lodash.propertyOf = propertyOf;                                                                                    // 11913\n    lodash.pull = pull;                                                                                                // 11914\n    lodash.pullAt = pullAt;                                                                                            // 11915\n    lodash.range = range;                                                                                              // 11916\n    lodash.rearg = rearg;                                                                                              // 11917\n    lodash.reject = reject;                                                                                            // 11918\n    lodash.remove = remove;                                                                                            // 11919\n    lodash.rest = rest;                                                                                                // 11920\n    lodash.restParam = restParam;                                                                                      // 11921\n    lodash.set = set;                                                                                                  // 11922\n    lodash.shuffle = shuffle;                                                                                          // 11923\n    lodash.slice = slice;                                                                                              // 11924\n    lodash.sortBy = sortBy;                                                                                            // 11925\n    lodash.sortByAll = sortByAll;                                                                                      // 11926\n    lodash.sortByOrder = sortByOrder;                                                                                  // 11927\n    lodash.spread = spread;                                                                                            // 11928\n    lodash.take = take;                                                                                                // 11929\n    lodash.takeRight = takeRight;                                                                                      // 11930\n    lodash.takeRightWhile = takeRightWhile;                                                                            // 11931\n    lodash.takeWhile = takeWhile;                                                                                      // 11932\n    lodash.tap = tap;                                                                                                  // 11933\n    lodash.throttle = throttle;                                                                                        // 11934\n    lodash.thru = thru;                                                                                                // 11935\n    lodash.times = times;                                                                                              // 11936\n    lodash.toArray = toArray;                                                                                          // 11937\n    lodash.toPlainObject = toPlainObject;                                                                              // 11938\n    lodash.transform = transform;                                                                                      // 11939\n    lodash.union = union;                                                                                              // 11940\n    lodash.uniq = uniq;                                                                                                // 11941\n    lodash.unzip = unzip;                                                                                              // 11942\n    lodash.unzipWith = unzipWith;                                                                                      // 11943\n    lodash.values = values;                                                                                            // 11944\n    lodash.valuesIn = valuesIn;                                                                                        // 11945\n    lodash.where = where;                                                                                              // 11946\n    lodash.without = without;                                                                                          // 11947\n    lodash.wrap = wrap;                                                                                                // 11948\n    lodash.xor = xor;                                                                                                  // 11949\n    lodash.zip = zip;                                                                                                  // 11950\n    lodash.zipObject = zipObject;                                                                                      // 11951\n    lodash.zipWith = zipWith;                                                                                          // 11952\n                                                                                                                       // 11953\n    // Add aliases.                                                                                                    // 11954\n    lodash.backflow = flowRight;                                                                                       // 11955\n    lodash.collect = map;                                                                                              // 11956\n    lodash.compose = flowRight;                                                                                        // 11957\n    lodash.each = forEach;                                                                                             // 11958\n    lodash.eachRight = forEachRight;                                                                                   // 11959\n    lodash.extend = assign;                                                                                            // 11960\n    lodash.iteratee = callback;                                                                                        // 11961\n    lodash.methods = functions;                                                                                        // 11962\n    lodash.object = zipObject;                                                                                         // 11963\n    lodash.select = filter;                                                                                            // 11964\n    lodash.tail = rest;                                                                                                // 11965\n    lodash.unique = uniq;                                                                                              // 11966\n                                                                                                                       // 11967\n    // Add functions to `lodash.prototype`.                                                                            // 11968\n    mixin(lodash, lodash);                                                                                             // 11969\n                                                                                                                       // 11970\n    /*------------------------------------------------------------------------*/                                       // 11971\n                                                                                                                       // 11972\n    // Add functions that return unwrapped values when chaining.                                                       // 11973\n    lodash.add = add;                                                                                                  // 11974\n    lodash.attempt = attempt;                                                                                          // 11975\n    lodash.camelCase = camelCase;                                                                                      // 11976\n    lodash.capitalize = capitalize;                                                                                    // 11977\n    lodash.ceil = ceil;                                                                                                // 11978\n    lodash.clone = clone;                                                                                              // 11979\n    lodash.cloneDeep = cloneDeep;                                                                                      // 11980\n    lodash.deburr = deburr;                                                                                            // 11981\n    lodash.endsWith = endsWith;                                                                                        // 11982\n    lodash.escape = escape;                                                                                            // 11983\n    lodash.escapeRegExp = escapeRegExp;                                                                                // 11984\n    lodash.every = every;                                                                                              // 11985\n    lodash.find = find;                                                                                                // 11986\n    lodash.findIndex = findIndex;                                                                                      // 11987\n    lodash.findKey = findKey;                                                                                          // 11988\n    lodash.findLast = findLast;                                                                                        // 11989\n    lodash.findLastIndex = findLastIndex;                                                                              // 11990\n    lodash.findLastKey = findLastKey;                                                                                  // 11991\n    lodash.findWhere = findWhere;                                                                                      // 11992\n    lodash.first = first;                                                                                              // 11993\n    lodash.floor = floor;                                                                                              // 11994\n    lodash.get = get;                                                                                                  // 11995\n    lodash.gt = gt;                                                                                                    // 11996\n    lodash.gte = gte;                                                                                                  // 11997\n    lodash.has = has;                                                                                                  // 11998\n    lodash.identity = identity;                                                                                        // 11999\n    lodash.includes = includes;                                                                                        // 12000\n    lodash.indexOf = indexOf;                                                                                          // 12001\n    lodash.inRange = inRange;                                                                                          // 12002\n    lodash.isArguments = isArguments;                                                                                  // 12003\n    lodash.isArray = isArray;                                                                                          // 12004\n    lodash.isBoolean = isBoolean;                                                                                      // 12005\n    lodash.isDate = isDate;                                                                                            // 12006\n    lodash.isElement = isElement;                                                                                      // 12007\n    lodash.isEmpty = isEmpty;                                                                                          // 12008\n    lodash.isEqual = isEqual;                                                                                          // 12009\n    lodash.isError = isError;                                                                                          // 12010\n    lodash.isFinite = isFinite;                                                                                        // 12011\n    lodash.isFunction = isFunction;                                                                                    // 12012\n    lodash.isMatch = isMatch;                                                                                          // 12013\n    lodash.isNaN = isNaN;                                                                                              // 12014\n    lodash.isNative = isNative;                                                                                        // 12015\n    lodash.isNull = isNull;                                                                                            // 12016\n    lodash.isNumber = isNumber;                                                                                        // 12017\n    lodash.isObject = isObject;                                                                                        // 12018\n    lodash.isPlainObject = isPlainObject;                                                                              // 12019\n    lodash.isRegExp = isRegExp;                                                                                        // 12020\n    lodash.isString = isString;                                                                                        // 12021\n    lodash.isTypedArray = isTypedArray;                                                                                // 12022\n    lodash.isUndefined = isUndefined;                                                                                  // 12023\n    lodash.kebabCase = kebabCase;                                                                                      // 12024\n    lodash.last = last;                                                                                                // 12025\n    lodash.lastIndexOf = lastIndexOf;                                                                                  // 12026\n    lodash.lt = lt;                                                                                                    // 12027\n    lodash.lte = lte;                                                                                                  // 12028\n    lodash.max = max;                                                                                                  // 12029\n    lodash.min = min;                                                                                                  // 12030\n    lodash.noConflict = noConflict;                                                                                    // 12031\n    lodash.noop = noop;                                                                                                // 12032\n    lodash.now = now;                                                                                                  // 12033\n    lodash.pad = pad;                                                                                                  // 12034\n    lodash.padLeft = padLeft;                                                                                          // 12035\n    lodash.padRight = padRight;                                                                                        // 12036\n    lodash.parseInt = parseInt;                                                                                        // 12037\n    lodash.random = random;                                                                                            // 12038\n    lodash.reduce = reduce;                                                                                            // 12039\n    lodash.reduceRight = reduceRight;                                                                                  // 12040\n    lodash.repeat = repeat;                                                                                            // 12041\n    lodash.result = result;                                                                                            // 12042\n    lodash.round = round;                                                                                              // 12043\n    lodash.runInContext = runInContext;                                                                                // 12044\n    lodash.size = size;                                                                                                // 12045\n    lodash.snakeCase = snakeCase;                                                                                      // 12046\n    lodash.some = some;                                                                                                // 12047\n    lodash.sortedIndex = sortedIndex;                                                                                  // 12048\n    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 12049\n    lodash.startCase = startCase;                                                                                      // 12050\n    lodash.startsWith = startsWith;                                                                                    // 12051\n    lodash.sum = sum;                                                                                                  // 12052\n    lodash.template = template;                                                                                        // 12053\n    lodash.trim = trim;                                                                                                // 12054\n    lodash.trimLeft = trimLeft;                                                                                        // 12055\n    lodash.trimRight = trimRight;                                                                                      // 12056\n    lodash.trunc = trunc;                                                                                              // 12057\n    lodash.unescape = unescape;                                                                                        // 12058\n    lodash.uniqueId = uniqueId;                                                                                        // 12059\n    lodash.words = words;                                                                                              // 12060\n                                                                                                                       // 12061\n    // Add aliases.                                                                                                    // 12062\n    lodash.all = every;                                                                                                // 12063\n    lodash.any = some;                                                                                                 // 12064\n    lodash.contains = includes;                                                                                        // 12065\n    lodash.eq = isEqual;                                                                                               // 12066\n    lodash.detect = find;                                                                                              // 12067\n    lodash.foldl = reduce;                                                                                             // 12068\n    lodash.foldr = reduceRight;                                                                                        // 12069\n    lodash.head = first;                                                                                               // 12070\n    lodash.include = includes;                                                                                         // 12071\n    lodash.inject = reduce;                                                                                            // 12072\n                                                                                                                       // 12073\n    mixin(lodash, (function() {                                                                                        // 12074\n      var source = {};                                                                                                 // 12075\n      baseForOwn(lodash, function(func, methodName) {                                                                  // 12076\n        if (!lodash.prototype[methodName]) {                                                                           // 12077\n          source[methodName] = func;                                                                                   // 12078\n        }                                                                                                              // 12079\n      });                                                                                                              // 12080\n      return source;                                                                                                   // 12081\n    }()), false);                                                                                                      // 12082\n                                                                                                                       // 12083\n    /*------------------------------------------------------------------------*/                                       // 12084\n                                                                                                                       // 12085\n    // Add functions capable of returning wrapped and unwrapped values when chaining.                                  // 12086\n    lodash.sample = sample;                                                                                            // 12087\n                                                                                                                       // 12088\n    lodash.prototype.sample = function(n) {                                                                            // 12089\n      if (!this.__chain__ && n == null) {                                                                              // 12090\n        return sample(this.value());                                                                                   // 12091\n      }                                                                                                                // 12092\n      return this.thru(function(value) {                                                                               // 12093\n        return sample(value, n);                                                                                       // 12094\n      });                                                                                                              // 12095\n    };                                                                                                                 // 12096\n                                                                                                                       // 12097\n    /*------------------------------------------------------------------------*/                                       // 12098\n                                                                                                                       // 12099\n    /**                                                                                                                // 12100\n     * The semantic version number.                                                                                    // 12101\n     *                                                                                                                 // 12102\n     * @static                                                                                                         // 12103\n     * @memberOf _                                                                                                     // 12104\n     * @type string                                                                                                    // 12105\n     */                                                                                                                // 12106\n    lodash.VERSION = VERSION;                                                                                          // 12107\n                                                                                                                       // 12108\n    // Assign default placeholders.                                                                                    // 12109\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 12110\n      lodash[methodName].placeholder = lodash;                                                                         // 12111\n    });                                                                                                                // 12112\n                                                                                                                       // 12113\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 12114\n    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 12115\n      LazyWrapper.prototype[methodName] = function(n) {                                                                // 12116\n        var filtered = this.__filtered__;                                                                              // 12117\n        if (filtered && !index) {                                                                                      // 12118\n          return new LazyWrapper(this);                                                                                // 12119\n        }                                                                                                              // 12120\n        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);                                                         // 12121\n                                                                                                                       // 12122\n        var result = this.clone();                                                                                     // 12123\n        if (filtered) {                                                                                                // 12124\n          result.__takeCount__ = nativeMin(result.__takeCount__, n);                                                   // 12125\n        } else {                                                                                                       // 12126\n          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });              // 12127\n        }                                                                                                              // 12128\n        return result;                                                                                                 // 12129\n      };                                                                                                               // 12130\n                                                                                                                       // 12131\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 12132\n        return this.reverse()[methodName](n).reverse();                                                                // 12133\n      };                                                                                                               // 12134\n    });                                                                                                                // 12135\n                                                                                                                       // 12136\n    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 12137\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 12138\n      var type = index + 1,                                                                                            // 12139\n          isFilter = type != LAZY_MAP_FLAG;                                                                            // 12140\n                                                                                                                       // 12141\n      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {                                                // 12142\n        var result = this.clone();                                                                                     // 12143\n        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });                    // 12144\n        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 12145\n        return result;                                                                                                 // 12146\n      };                                                                                                               // 12147\n    });                                                                                                                // 12148\n                                                                                                                       // 12149\n    // Add `LazyWrapper` methods for `_.first` and `_.last`.                                                           // 12150\n    arrayEach(['first', 'last'], function(methodName, index) {                                                         // 12151\n      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 12152\n                                                                                                                       // 12153\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 12154\n        return this[takeName](1).value()[0];                                                                           // 12155\n      };                                                                                                               // 12156\n    });                                                                                                                // 12157\n                                                                                                                       // 12158\n    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.                                                         // 12159\n    arrayEach(['initial', 'rest'], function(methodName, index) {                                                       // 12160\n      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 12161\n                                                                                                                       // 12162\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 12163\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 12164\n      };                                                                                                               // 12165\n    });                                                                                                                // 12166\n                                                                                                                       // 12167\n    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.                                                          // 12168\n    arrayEach(['pluck', 'where'], function(methodName, index) {                                                        // 12169\n      var operationName = index ? 'filter' : 'map',                                                                    // 12170\n          createCallback = index ? baseMatches : property;                                                             // 12171\n                                                                                                                       // 12172\n      LazyWrapper.prototype[methodName] = function(value) {                                                            // 12173\n        return this[operationName](createCallback(value));                                                             // 12174\n      };                                                                                                               // 12175\n    });                                                                                                                // 12176\n                                                                                                                       // 12177\n    LazyWrapper.prototype.compact = function() {                                                                       // 12178\n      return this.filter(identity);                                                                                    // 12179\n    };                                                                                                                 // 12180\n                                                                                                                       // 12181\n    LazyWrapper.prototype.reject = function(predicate, thisArg) {                                                      // 12182\n      predicate = getCallback(predicate, thisArg, 1);                                                                  // 12183\n      return this.filter(function(value) {                                                                             // 12184\n        return !predicate(value);                                                                                      // 12185\n      });                                                                                                              // 12186\n    };                                                                                                                 // 12187\n                                                                                                                       // 12188\n    LazyWrapper.prototype.slice = function(start, end) {                                                               // 12189\n      start = start == null ? 0 : (+start || 0);                                                                       // 12190\n                                                                                                                       // 12191\n      var result = this;                                                                                               // 12192\n      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 12193\n        return new LazyWrapper(result);                                                                                // 12194\n      }                                                                                                                // 12195\n      if (start < 0) {                                                                                                 // 12196\n        result = result.takeRight(-start);                                                                             // 12197\n      } else if (start) {                                                                                              // 12198\n        result = result.drop(start);                                                                                   // 12199\n      }                                                                                                                // 12200\n      if (end !== undefined) {                                                                                         // 12201\n        end = (+end || 0);                                                                                             // 12202\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 12203\n      }                                                                                                                // 12204\n      return result;                                                                                                   // 12205\n    };                                                                                                                 // 12206\n                                                                                                                       // 12207\n    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {                                              // 12208\n      return this.reverse().takeWhile(predicate, thisArg).reverse();                                                   // 12209\n    };                                                                                                                 // 12210\n                                                                                                                       // 12211\n    LazyWrapper.prototype.toArray = function() {                                                                       // 12212\n      return this.take(POSITIVE_INFINITY);                                                                             // 12213\n    };                                                                                                                 // 12214\n                                                                                                                       // 12215\n    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 12216\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12217\n      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),                                            // 12218\n          retUnwrapped = /^(?:first|last)$/.test(methodName),                                                          // 12219\n          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];           // 12220\n                                                                                                                       // 12221\n      if (!lodashFunc) {                                                                                               // 12222\n        return;                                                                                                        // 12223\n      }                                                                                                                // 12224\n      lodash.prototype[methodName] = function() {                                                                      // 12225\n        var args = retUnwrapped ? [1] : arguments,                                                                     // 12226\n            chainAll = this.__chain__,                                                                                 // 12227\n            value = this.__wrapped__,                                                                                  // 12228\n            isHybrid = !!this.__actions__.length,                                                                      // 12229\n            isLazy = value instanceof LazyWrapper,                                                                     // 12230\n            iteratee = args[0],                                                                                        // 12231\n            useLazy = isLazy || isArray(value);                                                                        // 12232\n                                                                                                                       // 12233\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 12234\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.                                       // 12235\n          isLazy = useLazy = false;                                                                                    // 12236\n        }                                                                                                              // 12237\n        var interceptor = function(value) {                                                                            // 12238\n          return (retUnwrapped && chainAll)                                                                            // 12239\n            ? lodashFunc(value, 1)[0]                                                                                  // 12240\n            : lodashFunc.apply(undefined, arrayPush([value], args));                                                   // 12241\n        };                                                                                                             // 12242\n                                                                                                                       // 12243\n        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },                                    // 12244\n            onlyLazy = isLazy && !isHybrid;                                                                            // 12245\n                                                                                                                       // 12246\n        if (retUnwrapped && !chainAll) {                                                                               // 12247\n          if (onlyLazy) {                                                                                              // 12248\n            value = value.clone();                                                                                     // 12249\n            value.__actions__.push(action);                                                                            // 12250\n            return func.call(value);                                                                                   // 12251\n          }                                                                                                            // 12252\n          return lodashFunc.call(undefined, this.value())[0];                                                          // 12253\n        }                                                                                                              // 12254\n        if (!retUnwrapped && useLazy) {                                                                                // 12255\n          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 12256\n          var result = func.apply(value, args);                                                                        // 12257\n          result.__actions__.push(action);                                                                             // 12258\n          return new LodashWrapper(result, chainAll);                                                                  // 12259\n        }                                                                                                              // 12260\n        return this.thru(interceptor);                                                                                 // 12261\n      };                                                                                                               // 12262\n    });                                                                                                                // 12263\n                                                                                                                       // 12264\n    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 12265\n    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {\n      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],                      // 12267\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 12268\n          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);                                              // 12269\n                                                                                                                       // 12270\n      lodash.prototype[methodName] = function() {                                                                      // 12271\n        var args = arguments;                                                                                          // 12272\n        if (retUnwrapped && !this.__chain__) {                                                                         // 12273\n          return func.apply(this.value(), args);                                                                       // 12274\n        }                                                                                                              // 12275\n        return this[chainName](function(value) {                                                                       // 12276\n          return func.apply(value, args);                                                                              // 12277\n        });                                                                                                            // 12278\n      };                                                                                                               // 12279\n    });                                                                                                                // 12280\n                                                                                                                       // 12281\n    // Map minified function names to their real names.                                                                // 12282\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12283\n      var lodashFunc = lodash[methodName];                                                                             // 12284\n      if (lodashFunc) {                                                                                                // 12285\n        var key = (lodashFunc.name + ''),                                                                              // 12286\n            names = realNames[key] || (realNames[key] = []);                                                           // 12287\n                                                                                                                       // 12288\n        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 12289\n      }                                                                                                                // 12290\n    });                                                                                                                // 12291\n                                                                                                                       // 12292\n    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 12293\n                                                                                                                       // 12294\n    // Add functions to the lazy wrapper.                                                                              // 12295\n    LazyWrapper.prototype.clone = lazyClone;                                                                           // 12296\n    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 12297\n    LazyWrapper.prototype.value = lazyValue;                                                                           // 12298\n                                                                                                                       // 12299\n    // Add chaining functions to the `lodash` wrapper.                                                                 // 12300\n    lodash.prototype.chain = wrapperChain;                                                                             // 12301\n    lodash.prototype.commit = wrapperCommit;                                                                           // 12302\n    lodash.prototype.concat = wrapperConcat;                                                                           // 12303\n    lodash.prototype.plant = wrapperPlant;                                                                             // 12304\n    lodash.prototype.reverse = wrapperReverse;                                                                         // 12305\n    lodash.prototype.toString = wrapperToString;                                                                       // 12306\n    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // 12307\n                                                                                                                       // 12308\n    // Add function aliases to the `lodash` wrapper.                                                                   // 12309\n    lodash.prototype.collect = lodash.prototype.map;                                                                   // 12310\n    lodash.prototype.head = lodash.prototype.first;                                                                    // 12311\n    lodash.prototype.select = lodash.prototype.filter;                                                                 // 12312\n    lodash.prototype.tail = lodash.prototype.rest;                                                                     // 12313\n                                                                                                                       // 12314\n    return lodash;                                                                                                     // 12315\n  }                                                                                                                    // 12316\n                                                                                                                       // 12317\n  /*--------------------------------------------------------------------------*/                                       // 12318\n                                                                                                                       // 12319\n  // Export lodash.                                                                                                    // 12320\n  var _ = runInContext();                                                                                              // 12321\n                                                                                                                       // 12322\n  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 12323\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 12324\n    // Expose lodash to the global object when an AMD loader is present to avoid                                       // 12325\n    // errors in cases where lodash is loaded by a script tag and not intended                                         // 12326\n    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for                                        // 12327\n    // more details.                                                                                                   // 12328\n    root._ = _;                                                                                                        // 12329\n                                                                                                                       // 12330\n    // Define as an anonymous module so, through path mapping, it can be                                               // 12331\n    // referenced as the \"underscore\" module.                                                                          // 12332\n    define(function() {                                                                                                // 12333\n      return _;                                                                                                        // 12334\n    });                                                                                                                // 12335\n  }                                                                                                                    // 12336\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 12337\n  else if (freeExports && freeModule) {                                                                                // 12338\n    // Export for Node.js or RingoJS.                                                                                  // 12339\n    if (moduleExports) {                                                                                               // 12340\n      (freeModule.exports = _)._ = _;                                                                                  // 12341\n    }                                                                                                                  // 12342\n    // Export for Rhino with CommonJS support.                                                                         // 12343\n    else {                                                                                                             // 12344\n      freeExports._ = _;                                                                                               // 12345\n    }                                                                                                                  // 12346\n  }                                                                                                                    // 12347\n  else {                                                                                                               // 12348\n    // Export for a browser or Rhino.                                                                                  // 12349\n    root._ = _;                                                                                                        // 12350\n  }                                                                                                                    // 12351\n}.call(this));                                                                                                         // 12352\n                                                                                                                       // 12353\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/erasaur:meteor-lodash/export.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlodash = this._;                                                                                                       // 1\n_ = lodash;                                                                                                            // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}