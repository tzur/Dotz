{"version":3,"sources":["meteor://ðŸ’»app/lib/both/modules/updateDotSlug.js"],"names":[],"mappings":";;;;;;;;;AACA,IAAI,WAAW,GAAG,UAAS,KAAK,EAAE;AAChC,MAAI,SAAS,GAAG,KAAK,CAClB,WAAW,EAAE,CACb,OAAO,CAAC,IAAI,EAAC,GAAG,CAAC,CACjB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrB,OAAO,CAAC,mBAAmB,EAAC,EAAE,CAAC,CAAC;AACnC,SAAO,SAAS,CAAC;CAClB,CAAC;AACF,IAAI,yBAAyB,GAAG,UAAC,KAAK,EAAG,IAAI,EAAM;AACjD,MAAI,UAAU,aAAC;AACf,QAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,EAAE,IAAI,EAAE,UAAS,KAAK,EAAE,MAAM,EAAE;AACpE,QAAI,KAAK,EAAE;AACT,UAAI,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;AAC1B,+BAAyB,CAAG,KAAK,EAAE,OAAO,CAAE,CAAC;KAC9C,MACI;AACH,gBAAU,GAAG,IAAI,CAAC;AAClB,UAAI,MAAM,CAAC,QAAQ,EAAC;AAClB,oBAAY,UAAO,CAAC,IAAI,CAAC,CAAC;OAC3B;KACF;GACF,CAAC,CAAC;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC;AACb,eAAa,YAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAC;AACrC,SAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACnB,SAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACrB,SAAK,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAC5B,QAAI,MAAM,CAAC,QAAQ,EAAC;AAClB,UAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;AAChD,kBAAY,GAAG,IAAI,MAAM,EAAE,CAAC;KAC7B;;AAED,QAAI,aAAa,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;AAC9C,QAAI,QAAQ,GAAI,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,aAAc,CAAC;AACvG,6BAAyB,CAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC7C,QAAI,MAAM,CAAC,QAAQ,EAAC;AAClB,aAAO,YAAY,CAAC,IAAI,EAAE,CAAC;KAC5B;GAGF;CACF,CAAC,CAAC,sE","file":"/lib/both/modules/updateDotSlug.js","sourcesContent":["\nlet _formatSlug = function(value) {\n  let formatted = value\n    .toLowerCase()\n    .replace(/ /g,'-')\n    .replace(/[-]+/g, '-')\n    .replace(/[^\\w\\x80-\\xFF-]+/g,'');\n  return formatted;\n};\nlet _slugUniquenessValidation = (dotId , slug)  => {\n  let uniqueSlug;\n  Meteor.call('makeUpdateDotSlug', dotId, slug, function(error, result) {\n    if (error) {\n      let newSlug = slug + \"-2\";\n      _slugUniquenessValidation ( dotId, newSlug );\n    }\n    else {\n      uniqueSlug = slug;\n      if (Meteor.isServer){\n        myFutureSlug.return(slug);\n      }\n    }\n  });\n};\n\nMeteor.methods({\n  updateDotSlug(doc, dotId, dotFirstSlug){\n    check(doc, Object);\n    check(dotId, String);\n    check(dotFirstSlug, String);\n    if (Meteor.isServer){\n      let Future = Meteor.npmRequire('fibers/future');\n      myFutureSlug = new Future();\n    }\n\n    let formattedSlug = _formatSlug(dotFirstSlug);\n    let fullSlug = (Meteor.user().profile.userSlug + '/' + doc.dotType.toLowerCase() + '/' + formattedSlug);\n     _slugUniquenessValidation (dotId, fullSlug);\n    if (Meteor.isServer){\n      return myFutureSlug.wait();\n    }\n\n\n  }\n});\n"]}