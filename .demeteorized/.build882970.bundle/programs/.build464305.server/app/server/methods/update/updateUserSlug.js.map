{"version":3,"sources":["meteor://ðŸ’»app/server/methods/update/updateUserSlug.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;;AAEhD,IAAI,WAAW,GAAG,UAAS,KAAK,EAAE;AAChC,MAAI,SAAS,GAAG,KAAK,CAClB,WAAW,EAAE,CACb,OAAO,CAAC,IAAI,EAAC,GAAG,CAAC,CACjB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrB,OAAO,CAAC,mBAAmB,EAAC,EAAE,CAAC,CAAC;AACnC,SAAO,SAAS,CAAC;CAClB,CAAC;;AAEF,IAAI,yBAAyB,GAAG,UAAC,MAAM,EAAG,IAAI,EAAM;AAClD,QAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,UAAS,KAAK,EAAE,MAAM,EAAE;;AAEvD,QAAI,KAAK,EAAE;AACT,UAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;AACjD,UAAI,OAAO,GAAG,IAAI,GAAG,MAAM,CAAC;AAC5B,+BAAyB,CAAG,MAAM,EAAE,OAAO,CAAE,CAAC;KAC/C,MACI;AACH,sBAAgB,UAAO,CAAC,IAAI,CAAC,CAAC;KAC/B;GACF,CAAC,CAAC;CACJ,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC;AACb,gBAAc,YAAC,IAAI,EAAC;AAClB,SAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpB,QAAI,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAC7B,oBAAgB,GAAG,IAAI,MAAM,EAAE,CAAC;AAChC,QAAI,aAAa,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;;AAEtC,6BAAyB,CAAE,MAAM,EAAE,aAAa,CAAC,CAAC;AAClD,WAAO,gBAAgB,CAAC,IAAI,EAAE,CAAC;GAChC;;AAED,aAAW,YAAC,IAAI,EAAC;AACf,SAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpB,QAAI,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAC7B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAE,EAAC,GAAG,EAAE,MAAM,EAAC,EAAE,EAAC,IAAI,EAAE,EAAC,kBAAkB,EAAE,IAAI,EAAC,EAAC,CAAE,CAAC;GAC1E;;;;AAID,gBAAc,YAAC,MAAM,EAAE,IAAI,EAAC;AAC1B,SAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtB,SAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpB,UAAM,CAAC,KAAK,CAAC,MAAM,CAAE,EAAC,GAAG,EAAE,MAAM,EAAC,EAAE,EAAC,IAAI,EAAE,EAAC,kBAAkB,EAAE,IAAI,EAAC,EAAC,CAAE,CAAC;GAC1E;CACF,CAAC,CAAC,sE","file":"/server/methods/update/updateUserSlug.js","sourcesContent":["let Future = Meteor.npmRequire('fibers/future');\n\nlet _formatSlug = function(value) {\n  let formatted = value\n    .toLowerCase()\n    .replace(/ /g,'-')\n    .replace(/[-]+/g, '-')\n    .replace(/[^\\w\\x80-\\xFF-]+/g,'');\n  return formatted;\n};\n\nlet _slugUniquenessValidation = (userId , slug)  => {\n  Meteor.call('setUserSlug', slug, function(error, result) {\n    //TBD:\n    if (error) {\n      let random = Math.floor((Math.random() * 9) + 1);\n      let newSlug = slug + random;\n      _slugUniquenessValidation ( userId, newSlug );\n    }\n    else {\n      myFutureUserSlug.return(slug);\n    }\n  });\n};\n\nMeteor.methods({\n  createUserSlug(slug){\n    check(slug, String);\n    let userId = Meteor.userId();\n    myFutureUserSlug = new Future();\n    let formattedSlug = _formatSlug(slug);\n    //let fullSlug = (Meteor.user().profile.userSlug + '/' + doc.dotType.toLowerCase() + '/' + formattedSlug);\n    _slugUniquenessValidation (userId, formattedSlug);\n    return myFutureUserSlug.wait();\n  },\n\n  setUserSlug(slug){\n    check(slug, String);\n    let userId = Meteor.userId();\n    Meteor.users.update( {_id: userId}, {$set: {\"profile.userSlug\": slug}} );\n  },\n\n  //TBD: special method for user-signUp process:\n  // Does not work with try/exception..\n  updateUserSlug(userId, slug){\n    check(userId, String);\n    check(slug, String);\n    Meteor.users.update( {_id: userId}, {$set: {\"profile.userSlug\": slug}} );\n  }\n});\n\n\n"]}