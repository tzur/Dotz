(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var lodash, _;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/erasaur_meteor-lodash/packages/erasaur_meteor-lodash.js  //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {                                                       // 1
                                                                     // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/erasaur:meteor-lodash/lodash/lodash.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license                                                                                                            // 2
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>                                                                  // 3
 * Build: `lodash modern -o ./lodash.js`                                                                               // 4
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 5
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7
 * Available under MIT license <https://lodash.com/license>                                                            // 8
 */                                                                                                                    // 9
;(function() {                                                                                                         // 10
                                                                                                                       // 11
  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12
  var undefined;                                                                                                       // 13
                                                                                                                       // 14
  /** Used as the semantic version number. */                                                                          // 15
  var VERSION = '3.10.1';                                                                                              // 16
                                                                                                                       // 17
  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18
  var BIND_FLAG = 1,                                                                                                   // 19
      BIND_KEY_FLAG = 2,                                                                                               // 20
      CURRY_BOUND_FLAG = 4,                                                                                            // 21
      CURRY_FLAG = 8,                                                                                                  // 22
      CURRY_RIGHT_FLAG = 16,                                                                                           // 23
      PARTIAL_FLAG = 32,                                                                                               // 24
      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25
      ARY_FLAG = 128,                                                                                                  // 26
      REARG_FLAG = 256;                                                                                                // 27
                                                                                                                       // 28
  /** Used as default options for `_.trunc`. */                                                                        // 29
  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 30
      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 31
                                                                                                                       // 32
  /** Used to detect when a function becomes hot. */                                                                   // 33
  var HOT_COUNT = 150,                                                                                                 // 34
      HOT_SPAN = 16;                                                                                                   // 35
                                                                                                                       // 36
  /** Used as the size to enable large array optimizations. */                                                         // 37
  var LARGE_ARRAY_SIZE = 200;                                                                                          // 38
                                                                                                                       // 39
  /** Used to indicate the type of lazy iteratees. */                                                                  // 40
  var LAZY_FILTER_FLAG = 1,                                                                                            // 41
      LAZY_MAP_FLAG = 2;                                                                                               // 42
                                                                                                                       // 43
  /** Used as the `TypeError` message for "Functions" methods. */                                                      // 44
  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 45
                                                                                                                       // 46
  /** Used as the internal argument placeholder. */                                                                    // 47
  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 48
                                                                                                                       // 49
  /** `Object#toString` result references. */                                                                          // 50
  var argsTag = '[object Arguments]',                                                                                  // 51
      arrayTag = '[object Array]',                                                                                     // 52
      boolTag = '[object Boolean]',                                                                                    // 53
      dateTag = '[object Date]',                                                                                       // 54
      errorTag = '[object Error]',                                                                                     // 55
      funcTag = '[object Function]',                                                                                   // 56
      mapTag = '[object Map]',                                                                                         // 57
      numberTag = '[object Number]',                                                                                   // 58
      objectTag = '[object Object]',                                                                                   // 59
      regexpTag = '[object RegExp]',                                                                                   // 60
      setTag = '[object Set]',                                                                                         // 61
      stringTag = '[object String]',                                                                                   // 62
      weakMapTag = '[object WeakMap]';                                                                                 // 63
                                                                                                                       // 64
  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 65
      float32Tag = '[object Float32Array]',                                                                            // 66
      float64Tag = '[object Float64Array]',                                                                            // 67
      int8Tag = '[object Int8Array]',                                                                                  // 68
      int16Tag = '[object Int16Array]',                                                                                // 69
      int32Tag = '[object Int32Array]',                                                                                // 70
      uint8Tag = '[object Uint8Array]',                                                                                // 71
      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 72
      uint16Tag = '[object Uint16Array]',                                                                              // 73
      uint32Tag = '[object Uint32Array]';                                                                              // 74
                                                                                                                       // 75
  /** Used to match empty string literals in compiled template source. */                                              // 76
  var reEmptyStringLeading = /\b__p \+= '';/g,                                                                         // 77
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,                                                                      // 78
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;                                                         // 79
                                                                                                                       // 80
  /** Used to match HTML entities and HTML characters. */                                                              // 81
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 82
      reUnescapedHtml = /[&<>"'`]/g,                                                                                   // 83
      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 84
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 85
                                                                                                                       // 86
  /** Used to match template delimiters. */                                                                            // 87
  var reEscape = /<%-([\s\S]+?)%>/g,                                                                                   // 88
      reEvaluate = /<%([\s\S]+?)%>/g,                                                                                  // 89
      reInterpolate = /<%=([\s\S]+?)%>/g;                                                                              // 90
                                                                                                                       // 91
  /** Used to match property names within property paths. */                                                           // 92
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,                                             // 93
      reIsPlainProp = /^\w*$/,                                                                                         // 94
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;                            // 95
                                                                                                                       // 96
  /**                                                                                                                  // 97
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)              // 98
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */                                                                                                                  // 100
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,                        // 101
      reHasRegExpChars = RegExp(reRegExpChars.source);                                                                 // 102
                                                                                                                       // 103
  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 104
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;                                                                   // 105
                                                                                                                       // 106
  /** Used to match backslashes in property paths. */                                                                  // 107
  var reEscapeChar = /\\(\\)?/g;                                                                                       // 108
                                                                                                                       // 109
  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;                                                                // 111
                                                                                                                       // 112
  /** Used to match `RegExp` flags from their coerced string values. */                                                // 113
  var reFlags = /\w*$/;                                                                                                // 114
                                                                                                                       // 115
  /** Used to detect hexadecimal string values. */                                                                     // 116
  var reHasHexPrefix = /^0[xX]/;                                                                                       // 117
                                                                                                                       // 118
  /** Used to detect host constructors (Safari > 5). */                                                                // 119
  var reIsHostCtor = /^\[object .+?Constructor\]$/;                                                                    // 120
                                                                                                                       // 121
  /** Used to detect unsigned integer values. */                                                                       // 122
  var reIsUint = /^\d+$/;                                                                                              // 123
                                                                                                                       // 124
  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 125
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;                                                            // 126
                                                                                                                       // 127
  /** Used to ensure capturing order of template delimiters. */                                                        // 128
  var reNoMatch = /($^)/;                                                                                              // 129
                                                                                                                       // 130
  /** Used to match unescaped characters in compiled string literals. */                                               // 131
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;                                                                    // 132
                                                                                                                       // 133
  /** Used to match words to create compound words. */                                                                 // 134
  var reWords = (function() {                                                                                          // 135
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',                                                                         // 136
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';                                                                        // 137
                                                                                                                       // 138
    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');        // 139
  }());                                                                                                                // 140
                                                                                                                       // 141
  /** Used to assign default `context` object properties. */                                                           // 142
  var contextProps = [                                                                                                 // 143
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',                                           // 144
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',                                             // 145
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',                                              // 146
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',                                                 // 147
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'                                                       // 148
  ];                                                                                                                   // 149
                                                                                                                       // 150
  /** Used to make template sourceURLs easier to identify. */                                                          // 151
  var templateCounter = -1;                                                                                            // 152
                                                                                                                       // 153
  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 154
  var typedArrayTags = {};                                                                                             // 155
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 156
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 157
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 158
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 159
  typedArrayTags[uint32Tag] = true;                                                                                    // 160
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 161
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 162
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 163
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 164
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 165
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 166
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 167
                                                                                                                       // 168
  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 169
  var cloneableTags = {};                                                                                              // 170
  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 171
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 172
  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 173
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 174
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 175
  cloneableTags[numberTag] = cloneableTags[objectTag] =                                                                // 176
  cloneableTags[regexpTag] = cloneableTags[stringTag] =                                                                // 177
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                           // 178
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                          // 179
  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 180
  cloneableTags[mapTag] = cloneableTags[setTag] =                                                                      // 181
  cloneableTags[weakMapTag] = false;                                                                                   // 182
                                                                                                                       // 183
  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 184
  var deburredLetters = {                                                                                              // 185
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',                                     // 186
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',                                     // 187
    '\xc7': 'C',  '\xe7': 'c',                                                                                         // 188
    '\xd0': 'D',  '\xf0': 'd',                                                                                         // 189
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',                                                               // 190
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',                                                               // 191
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',                                                               // 192
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',                                                               // 193
    '\xd1': 'N',  '\xf1': 'n',                                                                                         // 194
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',                                     // 195
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',                                     // 196
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',                                                               // 197
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',                                                               // 198
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',                                                                            // 199
    '\xc6': 'Ae', '\xe6': 'ae',                                                                                        // 200
    '\xde': 'Th', '\xfe': 'th',                                                                                        // 201
    '\xdf': 'ss'                                                                                                       // 202
  };                                                                                                                   // 203
                                                                                                                       // 204
  /** Used to map characters to HTML entities. */                                                                      // 205
  var htmlEscapes = {                                                                                                  // 206
    '&': '&amp;',                                                                                                      // 207
    '<': '&lt;',                                                                                                       // 208
    '>': '&gt;',                                                                                                       // 209
    '"': '&quot;',                                                                                                     // 210
    "'": '&#39;',                                                                                                      // 211
    '`': '&#96;'                                                                                                       // 212
  };                                                                                                                   // 213
                                                                                                                       // 214
  /** Used to map HTML entities to characters. */                                                                      // 215
  var htmlUnescapes = {                                                                                                // 216
    '&amp;': '&',                                                                                                      // 217
    '&lt;': '<',                                                                                                       // 218
    '&gt;': '>',                                                                                                       // 219
    '&quot;': '"',                                                                                                     // 220
    '&#39;': "'",                                                                                                      // 221
    '&#96;': '`'                                                                                                       // 222
  };                                                                                                                   // 223
                                                                                                                       // 224
  /** Used to determine if values are of the language type `Object`. */                                                // 225
  var objectTypes = {                                                                                                  // 226
    'function': true,                                                                                                  // 227
    'object': true                                                                                                     // 228
  };                                                                                                                   // 229
                                                                                                                       // 230
  /** Used to escape characters for inclusion in compiled regexes. */                                                  // 231
  var regexpEscapes = {                                                                                                // 232
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',                                                        // 233
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',                                                        // 234
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',                                            // 235
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',                                            // 236
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'                                             // 237
  };                                                                                                                   // 238
                                                                                                                       // 239
  /** Used to escape characters for inclusion in compiled string literals. */                                          // 240
  var stringEscapes = {                                                                                                // 241
    '\\': '\\',                                                                                                        // 242
    "'": "'",                                                                                                          // 243
    '\n': 'n',                                                                                                         // 244
    '\r': 'r',                                                                                                         // 245
    '\u2028': 'u2028',                                                                                                 // 246
    '\u2029': 'u2029'                                                                                                  // 247
  };                                                                                                                   // 248
                                                                                                                       // 249
  /** Detect free variable `exports`. */                                                                               // 250
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;                            // 251
                                                                                                                       // 252
  /** Detect free variable `module`. */                                                                                // 253
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;                                 // 254
                                                                                                                       // 255
  /** Detect free variable `global` from Node.js. */                                                                   // 256
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;        // 257
                                                                                                                       // 258
  /** Detect free variable `self`. */                                                                                  // 259
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;                                              // 260
                                                                                                                       // 261
  /** Detect free variable `window`. */                                                                                // 262
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;                                    // 263
                                                                                                                       // 264
  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 265
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;                                 // 266
                                                                                                                       // 267
  /**                                                                                                                  // 268
   * Used as a reference to the global object.                                                                         // 269
   *                                                                                                                   // 270
   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 271
   * restricted `window` object, otherwise the `window` object is used.                                                // 272
   */                                                                                                                  // 273
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;                 // 274
                                                                                                                       // 275
  /*--------------------------------------------------------------------------*/                                       // 276
                                                                                                                       // 277
  /**                                                                                                                  // 278
   * The base implementation of `compareAscending` which compares values and                                           // 279
   * sorts them in ascending order without guaranteeing a stable sort.                                                 // 280
   *                                                                                                                   // 281
   * @private                                                                                                          // 282
   * @param {*} value The value to compare.                                                                            // 283
   * @param {*} other The other value to compare.                                                                      // 284
   * @returns {number} Returns the sort order indicator for `value`.                                                   // 285
   */                                                                                                                  // 286
  function baseCompareAscending(value, other) {                                                                        // 287
    if (value !== other) {                                                                                             // 288
      var valIsNull = value === null,                                                                                  // 289
          valIsUndef = value === undefined,                                                                            // 290
          valIsReflexive = value === value;                                                                            // 291
                                                                                                                       // 292
      var othIsNull = other === null,                                                                                  // 293
          othIsUndef = other === undefined,                                                                            // 294
          othIsReflexive = other === other;                                                                            // 295
                                                                                                                       // 296
      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 297
          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 298
          (valIsUndef && othIsReflexive)) {                                                                            // 299
        return 1;                                                                                                      // 300
      }                                                                                                                // 301
      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 302
          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 303
          (othIsUndef && valIsReflexive)) {                                                                            // 304
        return -1;                                                                                                     // 305
      }                                                                                                                // 306
    }                                                                                                                  // 307
    return 0;                                                                                                          // 308
  }                                                                                                                    // 309
                                                                                                                       // 310
  /**                                                                                                                  // 311
   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 312
   * support for callback shorthands and `this` binding.                                                               // 313
   *                                                                                                                   // 314
   * @private                                                                                                          // 315
   * @param {Array} array The array to search.                                                                         // 316
   * @param {Function} predicate The function invoked per iteration.                                                   // 317
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 318
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 319
   */                                                                                                                  // 320
  function baseFindIndex(array, predicate, fromRight) {                                                                // 321
    var length = array.length,                                                                                         // 322
        index = fromRight ? length : -1;                                                                               // 323
                                                                                                                       // 324
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 325
      if (predicate(array[index], index, array)) {                                                                     // 326
        return index;                                                                                                  // 327
      }                                                                                                                // 328
    }                                                                                                                  // 329
    return -1;                                                                                                         // 330
  }                                                                                                                    // 331
                                                                                                                       // 332
  /**                                                                                                                  // 333
   * The base implementation of `_.indexOf` without support for binary searches.                                       // 334
   *                                                                                                                   // 335
   * @private                                                                                                          // 336
   * @param {Array} array The array to search.                                                                         // 337
   * @param {*} value The value to search for.                                                                         // 338
   * @param {number} fromIndex The index to search from.                                                               // 339
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 340
   */                                                                                                                  // 341
  function baseIndexOf(array, value, fromIndex) {                                                                      // 342
    if (value !== value) {                                                                                             // 343
      return indexOfNaN(array, fromIndex);                                                                             // 344
    }                                                                                                                  // 345
    var index = fromIndex - 1,                                                                                         // 346
        length = array.length;                                                                                         // 347
                                                                                                                       // 348
    while (++index < length) {                                                                                         // 349
      if (array[index] === value) {                                                                                    // 350
        return index;                                                                                                  // 351
      }                                                                                                                // 352
    }                                                                                                                  // 353
    return -1;                                                                                                         // 354
  }                                                                                                                    // 355
                                                                                                                       // 356
  /**                                                                                                                  // 357
   * The base implementation of `_.isFunction` without support for environments                                        // 358
   * with incorrect `typeof` results.                                                                                  // 359
   *                                                                                                                   // 360
   * @private                                                                                                          // 361
   * @param {*} value The value to check.                                                                              // 362
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                               // 363
   */                                                                                                                  // 364
  function baseIsFunction(value) {                                                                                     // 365
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.                                                         // 366
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.                                       // 367
    return typeof value == 'function' || false;                                                                        // 368
  }                                                                                                                    // 369
                                                                                                                       // 370
  /**                                                                                                                  // 371
   * Converts `value` to a string if it's not one. An empty string is returned                                         // 372
   * for `null` or `undefined` values.                                                                                 // 373
   *                                                                                                                   // 374
   * @private                                                                                                          // 375
   * @param {*} value The value to process.                                                                            // 376
   * @returns {string} Returns the string.                                                                             // 377
   */                                                                                                                  // 378
  function baseToString(value) {                                                                                       // 379
    return value == null ? '' : (value + '');                                                                          // 380
  }                                                                                                                    // 381
                                                                                                                       // 382
  /**                                                                                                                  // 383
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character                                         // 384
   * of `string` that is not found in `chars`.                                                                         // 385
   *                                                                                                                   // 386
   * @private                                                                                                          // 387
   * @param {string} string The string to inspect.                                                                     // 388
   * @param {string} chars The characters to find.                                                                     // 389
   * @returns {number} Returns the index of the first character not found in `chars`.                                  // 390
   */                                                                                                                  // 391
  function charsLeftIndex(string, chars) {                                                                             // 392
    var index = -1,                                                                                                    // 393
        length = string.length;                                                                                        // 394
                                                                                                                       // 395
    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}                                            // 396
    return index;                                                                                                      // 397
  }                                                                                                                    // 398
                                                                                                                       // 399
  /**                                                                                                                  // 400
   * Used by `_.trim` and `_.trimRight` to get the index of the last character                                         // 401
   * of `string` that is not found in `chars`.                                                                         // 402
   *                                                                                                                   // 403
   * @private                                                                                                          // 404
   * @param {string} string The string to inspect.                                                                     // 405
   * @param {string} chars The characters to find.                                                                     // 406
   * @returns {number} Returns the index of the last character not found in `chars`.                                   // 407
   */                                                                                                                  // 408
  function charsRightIndex(string, chars) {                                                                            // 409
    var index = string.length;                                                                                         // 410
                                                                                                                       // 411
    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}                                                     // 412
    return index;                                                                                                      // 413
  }                                                                                                                    // 414
                                                                                                                       // 415
  /**                                                                                                                  // 416
   * Used by `_.sortBy` to compare transformed elements of a collection and stable                                     // 417
   * sort them in ascending order.                                                                                     // 418
   *                                                                                                                   // 419
   * @private                                                                                                          // 420
   * @param {Object} object The object to compare.                                                                     // 421
   * @param {Object} other The other object to compare.                                                                // 422
   * @returns {number} Returns the sort order indicator for `object`.                                                  // 423
   */                                                                                                                  // 424
  function compareAscending(object, other) {                                                                           // 425
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);                      // 426
  }                                                                                                                    // 427
                                                                                                                       // 428
  /**                                                                                                                  // 429
   * Used by `_.sortByOrder` to compare multiple properties of a value to another                                      // 430
   * and stable sort them.                                                                                             // 431
   *                                                                                                                   // 432
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,                                 // 433
   * a value is sorted in ascending order if its corresponding order is "asc", and                                     // 434
   * descending if "desc".                                                                                             // 435
   *                                                                                                                   // 436
   * @private                                                                                                          // 437
   * @param {Object} object The object to compare.                                                                     // 438
   * @param {Object} other The other object to compare.                                                                // 439
   * @param {boolean[]} orders The order to sort by for each property.                                                 // 440
   * @returns {number} Returns the sort order indicator for `object`.                                                  // 441
   */                                                                                                                  // 442
  function compareMultiple(object, other, orders) {                                                                    // 443
    var index = -1,                                                                                                    // 444
        objCriteria = object.criteria,                                                                                 // 445
        othCriteria = other.criteria,                                                                                  // 446
        length = objCriteria.length,                                                                                   // 447
        ordersLength = orders.length;                                                                                  // 448
                                                                                                                       // 449
    while (++index < length) {                                                                                         // 450
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);                                       // 451
      if (result) {                                                                                                    // 452
        if (index >= ordersLength) {                                                                                   // 453
          return result;                                                                                               // 454
        }                                                                                                              // 455
        var order = orders[index];                                                                                     // 456
        return result * ((order === 'asc' || order === true) ? 1 : -1);                                                // 457
      }                                                                                                                // 458
    }                                                                                                                  // 459
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 460
    // that causes it, under certain circumstances, to provide the same value for                                      // 461
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 462
    // for more details.                                                                                               // 463
    //                                                                                                                 // 464
    // This also ensures a stable sort in V8 and other engines.                                                        // 465
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 466
    return object.index - other.index;                                                                                 // 467
  }                                                                                                                    // 468
                                                                                                                       // 469
  /**                                                                                                                  // 470
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 471
   *                                                                                                                   // 472
   * @private                                                                                                          // 473
   * @param {string} letter The matched letter to deburr.                                                              // 474
   * @returns {string} Returns the deburred letter.                                                                    // 475
   */                                                                                                                  // 476
  function deburrLetter(letter) {                                                                                      // 477
    return deburredLetters[letter];                                                                                    // 478
  }                                                                                                                    // 479
                                                                                                                       // 480
  /**                                                                                                                  // 481
   * Used by `_.escape` to convert characters to HTML entities.                                                        // 482
   *                                                                                                                   // 483
   * @private                                                                                                          // 484
   * @param {string} chr The matched character to escape.                                                              // 485
   * @returns {string} Returns the escaped character.                                                                  // 486
   */                                                                                                                  // 487
  function escapeHtmlChar(chr) {                                                                                       // 488
    return htmlEscapes[chr];                                                                                           // 489
  }                                                                                                                    // 490
                                                                                                                       // 491
  /**                                                                                                                  // 492
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.                                  // 493
   *                                                                                                                   // 494
   * @private                                                                                                          // 495
   * @param {string} chr The matched character to escape.                                                              // 496
   * @param {string} leadingChar The capture group for a leading character.                                            // 497
   * @param {string} whitespaceChar The capture group for a whitespace character.                                      // 498
   * @returns {string} Returns the escaped character.                                                                  // 499
   */                                                                                                                  // 500
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {                                                        // 501
    if (leadingChar) {                                                                                                 // 502
      chr = regexpEscapes[chr];                                                                                        // 503
    } else if (whitespaceChar) {                                                                                       // 504
      chr = stringEscapes[chr];                                                                                        // 505
    }                                                                                                                  // 506
    return '\\' + chr;                                                                                                 // 507
  }                                                                                                                    // 508
                                                                                                                       // 509
  /**                                                                                                                  // 510
   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 511
   *                                                                                                                   // 512
   * @private                                                                                                          // 513
   * @param {string} chr The matched character to escape.                                                              // 514
   * @returns {string} Returns the escaped character.                                                                  // 515
   */                                                                                                                  // 516
  function escapeStringChar(chr) {                                                                                     // 517
    return '\\' + stringEscapes[chr];                                                                                  // 518
  }                                                                                                                    // 519
                                                                                                                       // 520
  /**                                                                                                                  // 521
   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 522
   *                                                                                                                   // 523
   * @private                                                                                                          // 524
   * @param {Array} array The array to search.                                                                         // 525
   * @param {number} fromIndex The index to search from.                                                               // 526
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 527
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 528
   */                                                                                                                  // 529
  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 530
    var length = array.length,                                                                                         // 531
        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 532
                                                                                                                       // 533
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 534
      var other = array[index];                                                                                        // 535
      if (other !== other) {                                                                                           // 536
        return index;                                                                                                  // 537
      }                                                                                                                // 538
    }                                                                                                                  // 539
    return -1;                                                                                                         // 540
  }                                                                                                                    // 541
                                                                                                                       // 542
  /**                                                                                                                  // 543
   * Checks if `value` is object-like.                                                                                 // 544
   *                                                                                                                   // 545
   * @private                                                                                                          // 546
   * @param {*} value The value to check.                                                                              // 547
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                        // 548
   */                                                                                                                  // 549
  function isObjectLike(value) {                                                                                       // 550
    return !!value && typeof value == 'object';                                                                        // 551
  }                                                                                                                    // 552
                                                                                                                       // 553
  /**                                                                                                                  // 554
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a                                              // 555
   * character code is whitespace.                                                                                     // 556
   *                                                                                                                   // 557
   * @private                                                                                                          // 558
   * @param {number} charCode The character code to inspect.                                                           // 559
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.                                      // 560
   */                                                                                                                  // 561
  function isSpace(charCode) {                                                                                         // 562
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }                                                                                                                    // 565
                                                                                                                       // 566
  /**                                                                                                                  // 567
   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 568
   * and returns an array of their indexes.                                                                            // 569
   *                                                                                                                   // 570
   * @private                                                                                                          // 571
   * @param {Array} array The array to modify.                                                                         // 572
   * @param {*} placeholder The placeholder to replace.                                                                // 573
   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 574
   */                                                                                                                  // 575
  function replaceHolders(array, placeholder) {                                                                        // 576
    var index = -1,                                                                                                    // 577
        length = array.length,                                                                                         // 578
        resIndex = -1,                                                                                                 // 579
        result = [];                                                                                                   // 580
                                                                                                                       // 581
    while (++index < length) {                                                                                         // 582
      if (array[index] === placeholder) {                                                                              // 583
        array[index] = PLACEHOLDER;                                                                                    // 584
        result[++resIndex] = index;                                                                                    // 585
      }                                                                                                                // 586
    }                                                                                                                  // 587
    return result;                                                                                                     // 588
  }                                                                                                                    // 589
                                                                                                                       // 590
  /**                                                                                                                  // 591
   * An implementation of `_.uniq` optimized for sorted arrays without support                                         // 592
   * for callback shorthands and `this` binding.                                                                       // 593
   *                                                                                                                   // 594
   * @private                                                                                                          // 595
   * @param {Array} array The array to inspect.                                                                        // 596
   * @param {Function} [iteratee] The function invoked per iteration.                                                  // 597
   * @returns {Array} Returns the new duplicate free array.                                                            // 598
   */                                                                                                                  // 599
  function sortedUniq(array, iteratee) {                                                                               // 600
    var seen,                                                                                                          // 601
        index = -1,                                                                                                    // 602
        length = array.length,                                                                                         // 603
        resIndex = -1,                                                                                                 // 604
        result = [];                                                                                                   // 605
                                                                                                                       // 606
    while (++index < length) {                                                                                         // 607
      var value = array[index],                                                                                        // 608
          computed = iteratee ? iteratee(value, index, array) : value;                                                 // 609
                                                                                                                       // 610
      if (!index || seen !== computed) {                                                                               // 611
        seen = computed;                                                                                               // 612
        result[++resIndex] = value;                                                                                    // 613
      }                                                                                                                // 614
    }                                                                                                                  // 615
    return result;                                                                                                     // 616
  }                                                                                                                    // 617
                                                                                                                       // 618
  /**                                                                                                                  // 619
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace                                    // 620
   * character of `string`.                                                                                            // 621
   *                                                                                                                   // 622
   * @private                                                                                                          // 623
   * @param {string} string The string to inspect.                                                                     // 624
   * @returns {number} Returns the index of the first non-whitespace character.                                        // 625
   */                                                                                                                  // 626
  function trimmedLeftIndex(string) {                                                                                  // 627
    var index = -1,                                                                                                    // 628
        length = string.length;                                                                                        // 629
                                                                                                                       // 630
    while (++index < length && isSpace(string.charCodeAt(index))) {}                                                   // 631
    return index;                                                                                                      // 632
  }                                                                                                                    // 633
                                                                                                                       // 634
  /**                                                                                                                  // 635
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace                                    // 636
   * character of `string`.                                                                                            // 637
   *                                                                                                                   // 638
   * @private                                                                                                          // 639
   * @param {string} string The string to inspect.                                                                     // 640
   * @returns {number} Returns the index of the last non-whitespace character.                                         // 641
   */                                                                                                                  // 642
  function trimmedRightIndex(string) {                                                                                 // 643
    var index = string.length;                                                                                         // 644
                                                                                                                       // 645
    while (index-- && isSpace(string.charCodeAt(index))) {}                                                            // 646
    return index;                                                                                                      // 647
  }                                                                                                                    // 648
                                                                                                                       // 649
  /**                                                                                                                  // 650
   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 651
   *                                                                                                                   // 652
   * @private                                                                                                          // 653
   * @param {string} chr The matched character to unescape.                                                            // 654
   * @returns {string} Returns the unescaped character.                                                                // 655
   */                                                                                                                  // 656
  function unescapeHtmlChar(chr) {                                                                                     // 657
    return htmlUnescapes[chr];                                                                                         // 658
  }                                                                                                                    // 659
                                                                                                                       // 660
  /*--------------------------------------------------------------------------*/                                       // 661
                                                                                                                       // 662
  /**                                                                                                                  // 663
   * Create a new pristine `lodash` function using the given `context` object.                                         // 664
   *                                                                                                                   // 665
   * @static                                                                                                           // 666
   * @memberOf _                                                                                                       // 667
   * @category Utility                                                                                                 // 668
   * @param {Object} [context=root] The context object.                                                                // 669
   * @returns {Function} Returns a new `lodash` function.                                                              // 670
   * @example                                                                                                          // 671
   *                                                                                                                   // 672
   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 673
   *                                                                                                                   // 674
   * var lodash = _.runInContext();                                                                                    // 675
   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 676
   *                                                                                                                   // 677
   * _.isFunction(_.foo);                                                                                              // 678
   * // => true                                                                                                        // 679
   * _.isFunction(_.bar);                                                                                              // 680
   * // => false                                                                                                       // 681
   *                                                                                                                   // 682
   * lodash.isFunction(lodash.foo);                                                                                    // 683
   * // => false                                                                                                       // 684
   * lodash.isFunction(lodash.bar);                                                                                    // 685
   * // => true                                                                                                        // 686
   *                                                                                                                   // 687
   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 688
   * var mock = _.runInContext({                                                                                       // 689
   *   'Date': function() {                                                                                            // 690
   *     return { 'getTime': getTimeMock };                                                                            // 691
   *   }                                                                                                               // 692
   * });                                                                                                               // 693
   *                                                                                                                   // 694
   * // or creating a suped-up `defer` in Node.js                                                                      // 695
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 696
   */                                                                                                                  // 697
  function runInContext(context) {                                                                                     // 698
    // Avoid issues with some ES3 environments that attempt to use values, named                                       // 699
    // after built-in constructors like `Object`, for the creation of literals.                                        // 700
    // ES5 clears this up by stating that literals must use built-in constructors.                                     // 701
    // See https://es5.github.io/#x11.1.5 for more details.                                                            // 702
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;                         // 703
                                                                                                                       // 704
    /** Native constructor references. */                                                                              // 705
    var Array = context.Array,                                                                                         // 706
        Date = context.Date,                                                                                           // 707
        Error = context.Error,                                                                                         // 708
        Function = context.Function,                                                                                   // 709
        Math = context.Math,                                                                                           // 710
        Number = context.Number,                                                                                       // 711
        Object = context.Object,                                                                                       // 712
        RegExp = context.RegExp,                                                                                       // 713
        String = context.String,                                                                                       // 714
        TypeError = context.TypeError;                                                                                 // 715
                                                                                                                       // 716
    /** Used for native method references. */                                                                          // 717
    var arrayProto = Array.prototype,                                                                                  // 718
        objectProto = Object.prototype,                                                                                // 719
        stringProto = String.prototype;                                                                                // 720
                                                                                                                       // 721
    /** Used to resolve the decompiled source of functions. */                                                         // 722
    var fnToString = Function.prototype.toString;                                                                      // 723
                                                                                                                       // 724
    /** Used to check objects for own properties. */                                                                   // 725
    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 726
                                                                                                                       // 727
    /** Used to generate unique IDs. */                                                                                // 728
    var idCounter = 0;                                                                                                 // 729
                                                                                                                       // 730
    /**                                                                                                                // 731
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 732
     * of values.                                                                                                      // 733
     */                                                                                                                // 734
    var objToString = objectProto.toString;                                                                            // 735
                                                                                                                       // 736
    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 737
    var oldDash = root._;                                                                                              // 738
                                                                                                                       // 739
    /** Used to detect if a method is native. */                                                                       // 740
    var reIsNative = RegExp('^' +                                                                                      // 741
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')                                           // 742
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'                                // 743
    );                                                                                                                 // 744
                                                                                                                       // 745
    /** Native method references. */                                                                                   // 746
    var ArrayBuffer = context.ArrayBuffer,                                                                             // 747
        clearTimeout = context.clearTimeout,                                                                           // 748
        parseFloat = context.parseFloat,                                                                               // 749
        pow = Math.pow,                                                                                                // 750
        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 751
        Set = getNative(context, 'Set'),                                                                               // 752
        setTimeout = context.setTimeout,                                                                               // 753
        splice = arrayProto.splice,                                                                                    // 754
        Uint8Array = context.Uint8Array,                                                                               // 755
        WeakMap = getNative(context, 'WeakMap');                                                                       // 756
                                                                                                                       // 757
    /* Native method references for those with the same name as other `lodash` methods. */                             // 758
    var nativeCeil = Math.ceil,                                                                                        // 759
        nativeCreate = getNative(Object, 'create'),                                                                    // 760
        nativeFloor = Math.floor,                                                                                      // 761
        nativeIsArray = getNative(Array, 'isArray'),                                                                   // 762
        nativeIsFinite = context.isFinite,                                                                             // 763
        nativeKeys = getNative(Object, 'keys'),                                                                        // 764
        nativeMax = Math.max,                                                                                          // 765
        nativeMin = Math.min,                                                                                          // 766
        nativeNow = getNative(Date, 'now'),                                                                            // 767
        nativeParseInt = context.parseInt,                                                                             // 768
        nativeRandom = Math.random;                                                                                    // 769
                                                                                                                       // 770
    /** Used as references for `-Infinity` and `Infinity`. */                                                          // 771
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,                                                                  // 772
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;                                                                  // 773
                                                                                                                       // 774
    /** Used as references for the maximum length and index of an array. */                                            // 775
    var MAX_ARRAY_LENGTH = 4294967295,                                                                                 // 776
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                        // 777
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                // 778
                                                                                                                       // 779
    /**                                                                                                                // 780
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)           // 781
     * of an array-like value.                                                                                         // 782
     */                                                                                                                // 783
    var MAX_SAFE_INTEGER = 9007199254740991;                                                                           // 784
                                                                                                                       // 785
    /** Used to store function metadata. */                                                                            // 786
    var metaMap = WeakMap && new WeakMap;                                                                              // 787
                                                                                                                       // 788
    /** Used to lookup unminified function names. */                                                                   // 789
    var realNames = {};                                                                                                // 790
                                                                                                                       // 791
    /*------------------------------------------------------------------------*/                                       // 792
                                                                                                                       // 793
    /**                                                                                                                // 794
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.                                      // 795
     * Methods that operate on and return arrays, collections, and functions can                                       // 796
     * be chained together. Methods that retrieve a single value or may return a                                       // 797
     * primitive value will automatically end the chain returning the unwrapped                                        // 798
     * value. Explicit chaining may be enabled using `_.chain`. The execution of                                       // 799
     * chained methods is lazy, that is, execution is deferred until `_#value`                                         // 800
     * is implicitly or explicitly called.                                                                             // 801
     *                                                                                                                 // 802
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 803
     * fusion is an optimization strategy which merge iteratee calls; this can help                                    // 804
     * to avoid the creation of intermediate data structures and greatly reduce the                                    // 805
     * number of iteratee executions.                                                                                  // 806
     *                                                                                                                 // 807
     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 808
     * directly or indirectly included in the build.                                                                   // 809
     *                                                                                                                 // 810
     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 811
     *                                                                                                                 // 812
     * The wrapper `Array` methods are:                                                                                // 813
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,                                           // 814
     * `splice`, and `unshift`                                                                                         // 815
     *                                                                                                                 // 816
     * The wrapper `String` methods are:                                                                               // 817
     * `replace` and `split`                                                                                           // 818
     *                                                                                                                 // 819
     * The wrapper methods that support shortcut fusion are:                                                           // 820
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,                                        // 821
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,                                        // 822
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,                                         // 823
     * and `where`                                                                                                     // 824
     *                                                                                                                 // 825
     * The chainable wrapper methods are:                                                                              // 826
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,                                         // 827
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,                                        // 828
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,                                           // 829
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,                                          // 830
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,                                   // 831
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,                                      // 832
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,                                         // 833
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,                                           // 834
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,                                           // 835
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,                                        // 836
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,                                        // 837
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,                                    // 838
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,                                            // 839
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,                                       // 840
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,                                    // 841
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,                                        // 842
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`                                    // 843
     *                                                                                                                 // 844
     * The wrapper methods that are **not** chainable by default are:                                                  // 845
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,                                      // 846
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,                                   // 847
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,                                    // 848
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,                                          // 849
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,                                        // 850
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,                                            // 851
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,                                         // 852
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,                                     // 853
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,                                         // 854
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,                                     // 855
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,                                    // 856
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,                                             // 857
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,                                      // 858
     * `unescape`, `uniqueId`, `value`, and `words`                                                                    // 859
     *                                                                                                                 // 860
     * The wrapper method `sample` will return a wrapped value when `n` is provided,                                   // 861
     * otherwise an unwrapped value is returned.                                                                       // 862
     *                                                                                                                 // 863
     * @name _                                                                                                         // 864
     * @constructor                                                                                                    // 865
     * @category Chain                                                                                                 // 866
     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 867
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 868
     * @example                                                                                                        // 869
     *                                                                                                                 // 870
     * var wrapped = _([1, 2, 3]);                                                                                     // 871
     *                                                                                                                 // 872
     * // returns an unwrapped value                                                                                   // 873
     * wrapped.reduce(function(total, n) {                                                                             // 874
     *   return total + n;                                                                                             // 875
     * });                                                                                                             // 876
     * // => 6                                                                                                         // 877
     *                                                                                                                 // 878
     * // returns a wrapped value                                                                                      // 879
     * var squares = wrapped.map(function(n) {                                                                         // 880
     *   return n * n;                                                                                                 // 881
     * });                                                                                                             // 882
     *                                                                                                                 // 883
     * _.isArray(squares);                                                                                             // 884
     * // => false                                                                                                     // 885
     *                                                                                                                 // 886
     * _.isArray(squares.value());                                                                                     // 887
     * // => true                                                                                                      // 888
     */                                                                                                                // 889
    function lodash(value) {                                                                                           // 890
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 891
        if (value instanceof LodashWrapper) {                                                                          // 892
          return value;                                                                                                // 893
        }                                                                                                              // 894
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {                    // 895
          return wrapperClone(value);                                                                                  // 896
        }                                                                                                              // 897
      }                                                                                                                // 898
      return new LodashWrapper(value);                                                                                 // 899
    }                                                                                                                  // 900
                                                                                                                       // 901
    /**                                                                                                                // 902
     * The function whose prototype all chaining wrappers inherit from.                                                // 903
     *                                                                                                                 // 904
     * @private                                                                                                        // 905
     */                                                                                                                // 906
    function baseLodash() {                                                                                            // 907
      // No operation performed.                                                                                       // 908
    }                                                                                                                  // 909
                                                                                                                       // 910
    /**                                                                                                                // 911
     * The base constructor for creating `lodash` wrapper objects.                                                     // 912
     *                                                                                                                 // 913
     * @private                                                                                                        // 914
     * @param {*} value The value to wrap.                                                                             // 915
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 916
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.                                   // 917
     */                                                                                                                // 918
    function LodashWrapper(value, chainAll, actions) {                                                                 // 919
      this.__wrapped__ = value;                                                                                        // 920
      this.__actions__ = actions || [];                                                                                // 921
      this.__chain__ = !!chainAll;                                                                                     // 922
    }                                                                                                                  // 923
                                                                                                                       // 924
    /**                                                                                                                // 925
     * An object environment feature flags.                                                                            // 926
     *                                                                                                                 // 927
     * @static                                                                                                         // 928
     * @memberOf _                                                                                                     // 929
     * @type Object                                                                                                    // 930
     */                                                                                                                // 931
    var support = lodash.support = {};                                                                                 // 932
                                                                                                                       // 933
    /**                                                                                                                // 934
     * By default, the template delimiters used by lodash are like those in                                            // 935
     * embedded Ruby (ERB). Change the following template settings to use                                              // 936
     * alternative delimiters.                                                                                         // 937
     *                                                                                                                 // 938
     * @static                                                                                                         // 939
     * @memberOf _                                                                                                     // 940
     * @type Object                                                                                                    // 941
     */                                                                                                                // 942
    lodash.templateSettings = {                                                                                        // 943
                                                                                                                       // 944
      /**                                                                                                              // 945
       * Used to detect `data` property values to be HTML-escaped.                                                     // 946
       *                                                                                                               // 947
       * @memberOf _.templateSettings                                                                                  // 948
       * @type RegExp                                                                                                  // 949
       */                                                                                                              // 950
      'escape': reEscape,                                                                                              // 951
                                                                                                                       // 952
      /**                                                                                                              // 953
       * Used to detect code to be evaluated.                                                                          // 954
       *                                                                                                               // 955
       * @memberOf _.templateSettings                                                                                  // 956
       * @type RegExp                                                                                                  // 957
       */                                                                                                              // 958
      'evaluate': reEvaluate,                                                                                          // 959
                                                                                                                       // 960
      /**                                                                                                              // 961
       * Used to detect `data` property values to inject.                                                              // 962
       *                                                                                                               // 963
       * @memberOf _.templateSettings                                                                                  // 964
       * @type RegExp                                                                                                  // 965
       */                                                                                                              // 966
      'interpolate': reInterpolate,                                                                                    // 967
                                                                                                                       // 968
      /**                                                                                                              // 969
       * Used to reference the data object in the template text.                                                       // 970
       *                                                                                                               // 971
       * @memberOf _.templateSettings                                                                                  // 972
       * @type string                                                                                                  // 973
       */                                                                                                              // 974
      'variable': '',                                                                                                  // 975
                                                                                                                       // 976
      /**                                                                                                              // 977
       * Used to import variables into the compiled template.                                                          // 978
       *                                                                                                               // 979
       * @memberOf _.templateSettings                                                                                  // 980
       * @type Object                                                                                                  // 981
       */                                                                                                              // 982
      'imports': {                                                                                                     // 983
                                                                                                                       // 984
        /**                                                                                                            // 985
         * A reference to the `lodash` function.                                                                       // 986
         *                                                                                                             // 987
         * @memberOf _.templateSettings.imports                                                                        // 988
         * @type Function                                                                                              // 989
         */                                                                                                            // 990
        '_': lodash                                                                                                    // 991
      }                                                                                                                // 992
    };                                                                                                                 // 993
                                                                                                                       // 994
    /*------------------------------------------------------------------------*/                                       // 995
                                                                                                                       // 996
    /**                                                                                                                // 997
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 998
     *                                                                                                                 // 999
     * @private                                                                                                        // 1000
     * @param {*} value The value to wrap.                                                                             // 1001
     */                                                                                                                // 1002
    function LazyWrapper(value) {                                                                                      // 1003
      this.__wrapped__ = value;                                                                                        // 1004
      this.__actions__ = [];                                                                                           // 1005
      this.__dir__ = 1;                                                                                                // 1006
      this.__filtered__ = false;                                                                                       // 1007
      this.__iteratees__ = [];                                                                                         // 1008
      this.__takeCount__ = POSITIVE_INFINITY;                                                                          // 1009
      this.__views__ = [];                                                                                             // 1010
    }                                                                                                                  // 1011
                                                                                                                       // 1012
    /**                                                                                                                // 1013
     * Creates a clone of the lazy wrapper object.                                                                     // 1014
     *                                                                                                                 // 1015
     * @private                                                                                                        // 1016
     * @name clone                                                                                                     // 1017
     * @memberOf LazyWrapper                                                                                           // 1018
     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1019
     */                                                                                                                // 1020
    function lazyClone() {                                                                                             // 1021
      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1022
      result.__actions__ = arrayCopy(this.__actions__);                                                                // 1023
      result.__dir__ = this.__dir__;                                                                                   // 1024
      result.__filtered__ = this.__filtered__;                                                                         // 1025
      result.__iteratees__ = arrayCopy(this.__iteratees__);                                                            // 1026
      result.__takeCount__ = this.__takeCount__;                                                                       // 1027
      result.__views__ = arrayCopy(this.__views__);                                                                    // 1028
      return result;                                                                                                   // 1029
    }                                                                                                                  // 1030
                                                                                                                       // 1031
    /**                                                                                                                // 1032
     * Reverses the direction of lazy iteration.                                                                       // 1033
     *                                                                                                                 // 1034
     * @private                                                                                                        // 1035
     * @name reverse                                                                                                   // 1036
     * @memberOf LazyWrapper                                                                                           // 1037
     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1038
     */                                                                                                                // 1039
    function lazyReverse() {                                                                                           // 1040
      if (this.__filtered__) {                                                                                         // 1041
        var result = new LazyWrapper(this);                                                                            // 1042
        result.__dir__ = -1;                                                                                           // 1043
        result.__filtered__ = true;                                                                                    // 1044
      } else {                                                                                                         // 1045
        result = this.clone();                                                                                         // 1046
        result.__dir__ *= -1;                                                                                          // 1047
      }                                                                                                                // 1048
      return result;                                                                                                   // 1049
    }                                                                                                                  // 1050
                                                                                                                       // 1051
    /**                                                                                                                // 1052
     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1053
     *                                                                                                                 // 1054
     * @private                                                                                                        // 1055
     * @name value                                                                                                     // 1056
     * @memberOf LazyWrapper                                                                                           // 1057
     * @returns {*} Returns the unwrapped value.                                                                       // 1058
     */                                                                                                                // 1059
    function lazyValue() {                                                                                             // 1060
      var array = this.__wrapped__.value(),                                                                            // 1061
          dir = this.__dir__,                                                                                          // 1062
          isArr = isArray(array),                                                                                      // 1063
          isRight = dir < 0,                                                                                           // 1064
          arrLength = isArr ? array.length : 0,                                                                        // 1065
          view = getView(0, arrLength, this.__views__),                                                                // 1066
          start = view.start,                                                                                          // 1067
          end = view.end,                                                                                              // 1068
          length = end - start,                                                                                        // 1069
          index = isRight ? end : (start - 1),                                                                         // 1070
          iteratees = this.__iteratees__,                                                                              // 1071
          iterLength = iteratees.length,                                                                               // 1072
          resIndex = 0,                                                                                                // 1073
          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1074
                                                                                                                       // 1075
      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1076
        return baseWrapperValue(array, this.__actions__);                                                              // 1077
      }                                                                                                                // 1078
      var result = [];                                                                                                 // 1079
                                                                                                                       // 1080
      outer:                                                                                                           // 1081
      while (length-- && resIndex < takeCount) {                                                                       // 1082
        index += dir;                                                                                                  // 1083
                                                                                                                       // 1084
        var iterIndex = -1,                                                                                            // 1085
            value = array[index];                                                                                      // 1086
                                                                                                                       // 1087
        while (++iterIndex < iterLength) {                                                                             // 1088
          var data = iteratees[iterIndex],                                                                             // 1089
              iteratee = data.iteratee,                                                                                // 1090
              type = data.type,                                                                                        // 1091
              computed = iteratee(value);                                                                              // 1092
                                                                                                                       // 1093
          if (type == LAZY_MAP_FLAG) {                                                                                 // 1094
            value = computed;                                                                                          // 1095
          } else if (!computed) {                                                                                      // 1096
            if (type == LAZY_FILTER_FLAG) {                                                                            // 1097
              continue outer;                                                                                          // 1098
            } else {                                                                                                   // 1099
              break outer;                                                                                             // 1100
            }                                                                                                          // 1101
          }                                                                                                            // 1102
        }                                                                                                              // 1103
        result[resIndex++] = value;                                                                                    // 1104
      }                                                                                                                // 1105
      return result;                                                                                                   // 1106
    }                                                                                                                  // 1107
                                                                                                                       // 1108
    /*------------------------------------------------------------------------*/                                       // 1109
                                                                                                                       // 1110
    /**                                                                                                                // 1111
     * Creates a cache object to store key/value pairs.                                                                // 1112
     *                                                                                                                 // 1113
     * @private                                                                                                        // 1114
     * @static                                                                                                         // 1115
     * @name Cache                                                                                                     // 1116
     * @memberOf _.memoize                                                                                             // 1117
     */                                                                                                                // 1118
    function MapCache() {                                                                                              // 1119
      this.__data__ = {};                                                                                              // 1120
    }                                                                                                                  // 1121
                                                                                                                       // 1122
    /**                                                                                                                // 1123
     * Removes `key` and its value from the cache.                                                                     // 1124
     *                                                                                                                 // 1125
     * @private                                                                                                        // 1126
     * @name delete                                                                                                    // 1127
     * @memberOf _.memoize.Cache                                                                                       // 1128
     * @param {string} key The key of the value to remove.                                                             // 1129
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.                          // 1130
     */                                                                                                                // 1131
    function mapDelete(key) {                                                                                          // 1132
      return this.has(key) && delete this.__data__[key];                                                               // 1133
    }                                                                                                                  // 1134
                                                                                                                       // 1135
    /**                                                                                                                // 1136
     * Gets the cached value for `key`.                                                                                // 1137
     *                                                                                                                 // 1138
     * @private                                                                                                        // 1139
     * @name get                                                                                                       // 1140
     * @memberOf _.memoize.Cache                                                                                       // 1141
     * @param {string} key The key of the value to get.                                                                // 1142
     * @returns {*} Returns the cached value.                                                                          // 1143
     */                                                                                                                // 1144
    function mapGet(key) {                                                                                             // 1145
      return key == '__proto__' ? undefined : this.__data__[key];                                                      // 1146
    }                                                                                                                  // 1147
                                                                                                                       // 1148
    /**                                                                                                                // 1149
     * Checks if a cached value for `key` exists.                                                                      // 1150
     *                                                                                                                 // 1151
     * @private                                                                                                        // 1152
     * @name has                                                                                                       // 1153
     * @memberOf _.memoize.Cache                                                                                       // 1154
     * @param {string} key The key of the entry to check.                                                              // 1155
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1156
     */                                                                                                                // 1157
    function mapHas(key) {                                                                                             // 1158
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);                                            // 1159
    }                                                                                                                  // 1160
                                                                                                                       // 1161
    /**                                                                                                                // 1162
     * Sets `value` to `key` of the cache.                                                                             // 1163
     *                                                                                                                 // 1164
     * @private                                                                                                        // 1165
     * @name set                                                                                                       // 1166
     * @memberOf _.memoize.Cache                                                                                       // 1167
     * @param {string} key The key of the value to cache.                                                              // 1168
     * @param {*} value The value to cache.                                                                            // 1169
     * @returns {Object} Returns the cache object.                                                                     // 1170
     */                                                                                                                // 1171
    function mapSet(key, value) {                                                                                      // 1172
      if (key != '__proto__') {                                                                                        // 1173
        this.__data__[key] = value;                                                                                    // 1174
      }                                                                                                                // 1175
      return this;                                                                                                     // 1176
    }                                                                                                                  // 1177
                                                                                                                       // 1178
    /*------------------------------------------------------------------------*/                                       // 1179
                                                                                                                       // 1180
    /**                                                                                                                // 1181
     *                                                                                                                 // 1182
     * Creates a cache object to store unique values.                                                                  // 1183
     *                                                                                                                 // 1184
     * @private                                                                                                        // 1185
     * @param {Array} [values] The values to cache.                                                                    // 1186
     */                                                                                                                // 1187
    function SetCache(values) {                                                                                        // 1188
      var length = values ? values.length : 0;                                                                         // 1189
                                                                                                                       // 1190
      this.data = { 'hash': nativeCreate(null), 'set': new Set };                                                      // 1191
      while (length--) {                                                                                               // 1192
        this.push(values[length]);                                                                                     // 1193
      }                                                                                                                // 1194
    }                                                                                                                  // 1195
                                                                                                                       // 1196
    /**                                                                                                                // 1197
     * Checks if `value` is in `cache` mimicking the return signature of                                               // 1198
     * `_.indexOf` by returning `0` if the value is found, else `-1`.                                                  // 1199
     *                                                                                                                 // 1200
     * @private                                                                                                        // 1201
     * @param {Object} cache The cache to search.                                                                      // 1202
     * @param {*} value The value to search for.                                                                       // 1203
     * @returns {number} Returns `0` if `value` is found, else `-1`.                                                   // 1204
     */                                                                                                                // 1205
    function cacheIndexOf(cache, value) {                                                                              // 1206
      var data = cache.data,                                                                                           // 1207
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];             // 1208
                                                                                                                       // 1209
      return result ? 0 : -1;                                                                                          // 1210
    }                                                                                                                  // 1211
                                                                                                                       // 1212
    /**                                                                                                                // 1213
     * Adds `value` to the cache.                                                                                      // 1214
     *                                                                                                                 // 1215
     * @private                                                                                                        // 1216
     * @name push                                                                                                      // 1217
     * @memberOf SetCache                                                                                              // 1218
     * @param {*} value The value to cache.                                                                            // 1219
     */                                                                                                                // 1220
    function cachePush(value) {                                                                                        // 1221
      var data = this.data;                                                                                            // 1222
      if (typeof value == 'string' || isObject(value)) {                                                               // 1223
        data.set.add(value);                                                                                           // 1224
      } else {                                                                                                         // 1225
        data.hash[value] = true;                                                                                       // 1226
      }                                                                                                                // 1227
    }                                                                                                                  // 1228
                                                                                                                       // 1229
    /*------------------------------------------------------------------------*/                                       // 1230
                                                                                                                       // 1231
    /**                                                                                                                // 1232
     * Creates a new array joining `array` with `other`.                                                               // 1233
     *                                                                                                                 // 1234
     * @private                                                                                                        // 1235
     * @param {Array} array The array to join.                                                                         // 1236
     * @param {Array} other The other array to join.                                                                   // 1237
     * @returns {Array} Returns the new concatenated array.                                                            // 1238
     */                                                                                                                // 1239
    function arrayConcat(array, other) {                                                                               // 1240
      var index = -1,                                                                                                  // 1241
          length = array.length,                                                                                       // 1242
          othIndex = -1,                                                                                               // 1243
          othLength = other.length,                                                                                    // 1244
          result = Array(length + othLength);                                                                          // 1245
                                                                                                                       // 1246
      while (++index < length) {                                                                                       // 1247
        result[index] = array[index];                                                                                  // 1248
      }                                                                                                                // 1249
      while (++othIndex < othLength) {                                                                                 // 1250
        result[index++] = other[othIndex];                                                                             // 1251
      }                                                                                                                // 1252
      return result;                                                                                                   // 1253
    }                                                                                                                  // 1254
                                                                                                                       // 1255
    /**                                                                                                                // 1256
     * Copies the values of `source` to `array`.                                                                       // 1257
     *                                                                                                                 // 1258
     * @private                                                                                                        // 1259
     * @param {Array} source The array to copy values from.                                                            // 1260
     * @param {Array} [array=[]] The array to copy values to.                                                          // 1261
     * @returns {Array} Returns `array`.                                                                               // 1262
     */                                                                                                                // 1263
    function arrayCopy(source, array) {                                                                                // 1264
      var index = -1,                                                                                                  // 1265
          length = source.length;                                                                                      // 1266
                                                                                                                       // 1267
      array || (array = Array(length));                                                                                // 1268
      while (++index < length) {                                                                                       // 1269
        array[index] = source[index];                                                                                  // 1270
      }                                                                                                                // 1271
      return array;                                                                                                    // 1272
    }                                                                                                                  // 1273
                                                                                                                       // 1274
    /**                                                                                                                // 1275
     * A specialized version of `_.forEach` for arrays without support for callback                                    // 1276
     * shorthands and `this` binding.                                                                                  // 1277
     *                                                                                                                 // 1278
     * @private                                                                                                        // 1279
     * @param {Array} array The array to iterate over.                                                                 // 1280
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1281
     * @returns {Array} Returns `array`.                                                                               // 1282
     */                                                                                                                // 1283
    function arrayEach(array, iteratee) {                                                                              // 1284
      var index = -1,                                                                                                  // 1285
          length = array.length;                                                                                       // 1286
                                                                                                                       // 1287
      while (++index < length) {                                                                                       // 1288
        if (iteratee(array[index], index, array) === false) {                                                          // 1289
          break;                                                                                                       // 1290
        }                                                                                                              // 1291
      }                                                                                                                // 1292
      return array;                                                                                                    // 1293
    }                                                                                                                  // 1294
                                                                                                                       // 1295
    /**                                                                                                                // 1296
     * A specialized version of `_.forEachRight` for arrays without support for                                        // 1297
     * callback shorthands and `this` binding.                                                                         // 1298
     *                                                                                                                 // 1299
     * @private                                                                                                        // 1300
     * @param {Array} array The array to iterate over.                                                                 // 1301
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1302
     * @returns {Array} Returns `array`.                                                                               // 1303
     */                                                                                                                // 1304
    function arrayEachRight(array, iteratee) {                                                                         // 1305
      var length = array.length;                                                                                       // 1306
                                                                                                                       // 1307
      while (length--) {                                                                                               // 1308
        if (iteratee(array[length], length, array) === false) {                                                        // 1309
          break;                                                                                                       // 1310
        }                                                                                                              // 1311
      }                                                                                                                // 1312
      return array;                                                                                                    // 1313
    }                                                                                                                  // 1314
                                                                                                                       // 1315
    /**                                                                                                                // 1316
     * A specialized version of `_.every` for arrays without support for callback                                      // 1317
     * shorthands and `this` binding.                                                                                  // 1318
     *                                                                                                                 // 1319
     * @private                                                                                                        // 1320
     * @param {Array} array The array to iterate over.                                                                 // 1321
     * @param {Function} predicate The function invoked per iteration.                                                 // 1322
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1323
     *  else `false`.                                                                                                  // 1324
     */                                                                                                                // 1325
    function arrayEvery(array, predicate) {                                                                            // 1326
      var index = -1,                                                                                                  // 1327
          length = array.length;                                                                                       // 1328
                                                                                                                       // 1329
      while (++index < length) {                                                                                       // 1330
        if (!predicate(array[index], index, array)) {                                                                  // 1331
          return false;                                                                                                // 1332
        }                                                                                                              // 1333
      }                                                                                                                // 1334
      return true;                                                                                                     // 1335
    }                                                                                                                  // 1336
                                                                                                                       // 1337
    /**                                                                                                                // 1338
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`                                     // 1339
     * with one argument: (value).                                                                                     // 1340
     *                                                                                                                 // 1341
     * @private                                                                                                        // 1342
     * @param {Array} array The array to iterate over.                                                                 // 1343
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1344
     * @param {Function} comparator The function used to compare values.                                               // 1345
     * @param {*} exValue The initial extremum value.                                                                  // 1346
     * @returns {*} Returns the extremum value.                                                                        // 1347
     */                                                                                                                // 1348
    function arrayExtremum(array, iteratee, comparator, exValue) {                                                     // 1349
      var index = -1,                                                                                                  // 1350
          length = array.length,                                                                                       // 1351
          computed = exValue,                                                                                          // 1352
          result = computed;                                                                                           // 1353
                                                                                                                       // 1354
      while (++index < length) {                                                                                       // 1355
        var value = array[index],                                                                                      // 1356
            current = +iteratee(value);                                                                                // 1357
                                                                                                                       // 1358
        if (comparator(current, computed)) {                                                                           // 1359
          computed = current;                                                                                          // 1360
          result = value;                                                                                              // 1361
        }                                                                                                              // 1362
      }                                                                                                                // 1363
      return result;                                                                                                   // 1364
    }                                                                                                                  // 1365
                                                                                                                       // 1366
    /**                                                                                                                // 1367
     * A specialized version of `_.filter` for arrays without support for callback                                     // 1368
     * shorthands and `this` binding.                                                                                  // 1369
     *                                                                                                                 // 1370
     * @private                                                                                                        // 1371
     * @param {Array} array The array to iterate over.                                                                 // 1372
     * @param {Function} predicate The function invoked per iteration.                                                 // 1373
     * @returns {Array} Returns the new filtered array.                                                                // 1374
     */                                                                                                                // 1375
    function arrayFilter(array, predicate) {                                                                           // 1376
      var index = -1,                                                                                                  // 1377
          length = array.length,                                                                                       // 1378
          resIndex = -1,                                                                                               // 1379
          result = [];                                                                                                 // 1380
                                                                                                                       // 1381
      while (++index < length) {                                                                                       // 1382
        var value = array[index];                                                                                      // 1383
        if (predicate(value, index, array)) {                                                                          // 1384
          result[++resIndex] = value;                                                                                  // 1385
        }                                                                                                              // 1386
      }                                                                                                                // 1387
      return result;                                                                                                   // 1388
    }                                                                                                                  // 1389
                                                                                                                       // 1390
    /**                                                                                                                // 1391
     * A specialized version of `_.map` for arrays without support for callback                                        // 1392
     * shorthands and `this` binding.                                                                                  // 1393
     *                                                                                                                 // 1394
     * @private                                                                                                        // 1395
     * @param {Array} array The array to iterate over.                                                                 // 1396
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1397
     * @returns {Array} Returns the new mapped array.                                                                  // 1398
     */                                                                                                                // 1399
    function arrayMap(array, iteratee) {                                                                               // 1400
      var index = -1,                                                                                                  // 1401
          length = array.length,                                                                                       // 1402
          result = Array(length);                                                                                      // 1403
                                                                                                                       // 1404
      while (++index < length) {                                                                                       // 1405
        result[index] = iteratee(array[index], index, array);                                                          // 1406
      }                                                                                                                // 1407
      return result;                                                                                                   // 1408
    }                                                                                                                  // 1409
                                                                                                                       // 1410
    /**                                                                                                                // 1411
     * Appends the elements of `values` to `array`.                                                                    // 1412
     *                                                                                                                 // 1413
     * @private                                                                                                        // 1414
     * @param {Array} array The array to modify.                                                                       // 1415
     * @param {Array} values The values to append.                                                                     // 1416
     * @returns {Array} Returns `array`.                                                                               // 1417
     */                                                                                                                // 1418
    function arrayPush(array, values) {                                                                                // 1419
      var index = -1,                                                                                                  // 1420
          length = values.length,                                                                                      // 1421
          offset = array.length;                                                                                       // 1422
                                                                                                                       // 1423
      while (++index < length) {                                                                                       // 1424
        array[offset + index] = values[index];                                                                         // 1425
      }                                                                                                                // 1426
      return array;                                                                                                    // 1427
    }                                                                                                                  // 1428
                                                                                                                       // 1429
    /**                                                                                                                // 1430
     * A specialized version of `_.reduce` for arrays without support for callback                                     // 1431
     * shorthands and `this` binding.                                                                                  // 1432
     *                                                                                                                 // 1433
     * @private                                                                                                        // 1434
     * @param {Array} array The array to iterate over.                                                                 // 1435
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1436
     * @param {*} [accumulator] The initial value.                                                                     // 1437
     * @param {boolean} [initFromArray] Specify using the first element of `array`                                     // 1438
     *  as the initial value.                                                                                          // 1439
     * @returns {*} Returns the accumulated value.                                                                     // 1440
     */                                                                                                                // 1441
    function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                // 1442
      var index = -1,                                                                                                  // 1443
          length = array.length;                                                                                       // 1444
                                                                                                                       // 1445
      if (initFromArray && length) {                                                                                   // 1446
        accumulator = array[++index];                                                                                  // 1447
      }                                                                                                                // 1448
      while (++index < length) {                                                                                       // 1449
        accumulator = iteratee(accumulator, array[index], index, array);                                               // 1450
      }                                                                                                                // 1451
      return accumulator;                                                                                              // 1452
    }                                                                                                                  // 1453
                                                                                                                       // 1454
    /**                                                                                                                // 1455
     * A specialized version of `_.reduceRight` for arrays without support for                                         // 1456
     * callback shorthands and `this` binding.                                                                         // 1457
     *                                                                                                                 // 1458
     * @private                                                                                                        // 1459
     * @param {Array} array The array to iterate over.                                                                 // 1460
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1461
     * @param {*} [accumulator] The initial value.                                                                     // 1462
     * @param {boolean} [initFromArray] Specify using the last element of `array`                                      // 1463
     *  as the initial value.                                                                                          // 1464
     * @returns {*} Returns the accumulated value.                                                                     // 1465
     */                                                                                                                // 1466
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                           // 1467
      var length = array.length;                                                                                       // 1468
      if (initFromArray && length) {                                                                                   // 1469
        accumulator = array[--length];                                                                                 // 1470
      }                                                                                                                // 1471
      while (length--) {                                                                                               // 1472
        accumulator = iteratee(accumulator, array[length], length, array);                                             // 1473
      }                                                                                                                // 1474
      return accumulator;                                                                                              // 1475
    }                                                                                                                  // 1476
                                                                                                                       // 1477
    /**                                                                                                                // 1478
     * A specialized version of `_.some` for arrays without support for callback                                       // 1479
     * shorthands and `this` binding.                                                                                  // 1480
     *                                                                                                                 // 1481
     * @private                                                                                                        // 1482
     * @param {Array} array The array to iterate over.                                                                 // 1483
     * @param {Function} predicate The function invoked per iteration.                                                 // 1484
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 1485
     *  else `false`.                                                                                                  // 1486
     */                                                                                                                // 1487
    function arraySome(array, predicate) {                                                                             // 1488
      var index = -1,                                                                                                  // 1489
          length = array.length;                                                                                       // 1490
                                                                                                                       // 1491
      while (++index < length) {                                                                                       // 1492
        if (predicate(array[index], index, array)) {                                                                   // 1493
          return true;                                                                                                 // 1494
        }                                                                                                              // 1495
      }                                                                                                                // 1496
      return false;                                                                                                    // 1497
    }                                                                                                                  // 1498
                                                                                                                       // 1499
    /**                                                                                                                // 1500
     * A specialized version of `_.sum` for arrays without support for callback                                        // 1501
     * shorthands and `this` binding..                                                                                 // 1502
     *                                                                                                                 // 1503
     * @private                                                                                                        // 1504
     * @param {Array} array The array to iterate over.                                                                 // 1505
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1506
     * @returns {number} Returns the sum.                                                                              // 1507
     */                                                                                                                // 1508
    function arraySum(array, iteratee) {                                                                               // 1509
      var length = array.length,                                                                                       // 1510
          result = 0;                                                                                                  // 1511
                                                                                                                       // 1512
      while (length--) {                                                                                               // 1513
        result += +iteratee(array[length]) || 0;                                                                       // 1514
      }                                                                                                                // 1515
      return result;                                                                                                   // 1516
    }                                                                                                                  // 1517
                                                                                                                       // 1518
    /**                                                                                                                // 1519
     * Used by `_.defaults` to customize its `_.assign` use.                                                           // 1520
     *                                                                                                                 // 1521
     * @private                                                                                                        // 1522
     * @param {*} objectValue The destination object property value.                                                   // 1523
     * @param {*} sourceValue The source object property value.                                                        // 1524
     * @returns {*} Returns the value to assign to the destination object.                                             // 1525
     */                                                                                                                // 1526
    function assignDefaults(objectValue, sourceValue) {                                                                // 1527
      return objectValue === undefined ? sourceValue : objectValue;                                                    // 1528
    }                                                                                                                  // 1529
                                                                                                                       // 1530
    /**                                                                                                                // 1531
     * Used by `_.template` to customize its `_.assign` use.                                                           // 1532
     *                                                                                                                 // 1533
     * **Note:** This function is like `assignDefaults` except that it ignores                                         // 1534
     * inherited property values when checking if a property is `undefined`.                                           // 1535
     *                                                                                                                 // 1536
     * @private                                                                                                        // 1537
     * @param {*} objectValue The destination object property value.                                                   // 1538
     * @param {*} sourceValue The source object property value.                                                        // 1539
     * @param {string} key The key associated with the object and source values.                                       // 1540
     * @param {Object} object The destination object.                                                                  // 1541
     * @returns {*} Returns the value to assign to the destination object.                                             // 1542
     */                                                                                                                // 1543
    function assignOwnDefaults(objectValue, sourceValue, key, object) {                                                // 1544
      return (objectValue === undefined || !hasOwnProperty.call(object, key))                                          // 1545
        ? sourceValue                                                                                                  // 1546
        : objectValue;                                                                                                 // 1547
    }                                                                                                                  // 1548
                                                                                                                       // 1549
    /**                                                                                                                // 1550
     * A specialized version of `_.assign` for customizing assigned values without                                     // 1551
     * support for argument juggling, multiple sources, and `this` binding `customizer`                                // 1552
     * functions.                                                                                                      // 1553
     *                                                                                                                 // 1554
     * @private                                                                                                        // 1555
     * @param {Object} object The destination object.                                                                  // 1556
     * @param {Object} source The source object.                                                                       // 1557
     * @param {Function} customizer The function to customize assigned values.                                         // 1558
     * @returns {Object} Returns `object`.                                                                             // 1559
     */                                                                                                                // 1560
    function assignWith(object, source, customizer) {                                                                  // 1561
      var index = -1,                                                                                                  // 1562
          props = keys(source),                                                                                        // 1563
          length = props.length;                                                                                       // 1564
                                                                                                                       // 1565
      while (++index < length) {                                                                                       // 1566
        var key = props[index],                                                                                        // 1567
            value = object[key],                                                                                       // 1568
            result = customizer(value, source[key], key, object, source);                                              // 1569
                                                                                                                       // 1570
        if ((result === result ? (result !== value) : (value === value)) ||                                            // 1571
            (value === undefined && !(key in object))) {                                                               // 1572
          object[key] = result;                                                                                        // 1573
        }                                                                                                              // 1574
      }                                                                                                                // 1575
      return object;                                                                                                   // 1576
    }                                                                                                                  // 1577
                                                                                                                       // 1578
    /**                                                                                                                // 1579
     * The base implementation of `_.assign` without support for argument juggling,                                    // 1580
     * multiple sources, and `customizer` functions.                                                                   // 1581
     *                                                                                                                 // 1582
     * @private                                                                                                        // 1583
     * @param {Object} object The destination object.                                                                  // 1584
     * @param {Object} source The source object.                                                                       // 1585
     * @returns {Object} Returns `object`.                                                                             // 1586
     */                                                                                                                // 1587
    function baseAssign(object, source) {                                                                              // 1588
      return source == null                                                                                            // 1589
        ? object                                                                                                       // 1590
        : baseCopy(source, keys(source), object);                                                                      // 1591
    }                                                                                                                  // 1592
                                                                                                                       // 1593
    /**                                                                                                                // 1594
     * The base implementation of `_.at` without support for string collections                                        // 1595
     * and individual key arguments.                                                                                   // 1596
     *                                                                                                                 // 1597
     * @private                                                                                                        // 1598
     * @param {Array|Object} collection The collection to iterate over.                                                // 1599
     * @param {number[]|string[]} props The property names or indexes of elements to pick.                             // 1600
     * @returns {Array} Returns the new array of picked elements.                                                      // 1601
     */                                                                                                                // 1602
    function baseAt(collection, props) {                                                                               // 1603
      var index = -1,                                                                                                  // 1604
          isNil = collection == null,                                                                                  // 1605
          isArr = !isNil && isArrayLike(collection),                                                                   // 1606
          length = isArr ? collection.length : 0,                                                                      // 1607
          propsLength = props.length,                                                                                  // 1608
          result = Array(propsLength);                                                                                 // 1609
                                                                                                                       // 1610
      while(++index < propsLength) {                                                                                   // 1611
        var key = props[index];                                                                                        // 1612
        if (isArr) {                                                                                                   // 1613
          result[index] = isIndex(key, length) ? collection[key] : undefined;                                          // 1614
        } else {                                                                                                       // 1615
          result[index] = isNil ? undefined : collection[key];                                                         // 1616
        }                                                                                                              // 1617
      }                                                                                                                // 1618
      return result;                                                                                                   // 1619
    }                                                                                                                  // 1620
                                                                                                                       // 1621
    /**                                                                                                                // 1622
     * Copies properties of `source` to `object`.                                                                      // 1623
     *                                                                                                                 // 1624
     * @private                                                                                                        // 1625
     * @param {Object} source The object to copy properties from.                                                      // 1626
     * @param {Array} props The property names to copy.                                                                // 1627
     * @param {Object} [object={}] The object to copy properties to.                                                   // 1628
     * @returns {Object} Returns `object`.                                                                             // 1629
     */                                                                                                                // 1630
    function baseCopy(source, props, object) {                                                                         // 1631
      object || (object = {});                                                                                         // 1632
                                                                                                                       // 1633
      var index = -1,                                                                                                  // 1634
          length = props.length;                                                                                       // 1635
                                                                                                                       // 1636
      while (++index < length) {                                                                                       // 1637
        var key = props[index];                                                                                        // 1638
        object[key] = source[key];                                                                                     // 1639
      }                                                                                                                // 1640
      return object;                                                                                                   // 1641
    }                                                                                                                  // 1642
                                                                                                                       // 1643
    /**                                                                                                                // 1644
     * The base implementation of `_.callback` which supports specifying the                                           // 1645
     * number of arguments to provide to `func`.                                                                       // 1646
     *                                                                                                                 // 1647
     * @private                                                                                                        // 1648
     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 1649
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 1650
     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 1651
     * @returns {Function} Returns the callback.                                                                       // 1652
     */                                                                                                                // 1653
    function baseCallback(func, thisArg, argCount) {                                                                   // 1654
      var type = typeof func;                                                                                          // 1655
      if (type == 'function') {                                                                                        // 1656
        return thisArg === undefined                                                                                   // 1657
          ? func                                                                                                       // 1658
          : bindCallback(func, thisArg, argCount);                                                                     // 1659
      }                                                                                                                // 1660
      if (func == null) {                                                                                              // 1661
        return identity;                                                                                               // 1662
      }                                                                                                                // 1663
      if (type == 'object') {                                                                                          // 1664
        return baseMatches(func);                                                                                      // 1665
      }                                                                                                                // 1666
      return thisArg === undefined                                                                                     // 1667
        ? property(func)                                                                                               // 1668
        : baseMatchesProperty(func, thisArg);                                                                          // 1669
    }                                                                                                                  // 1670
                                                                                                                       // 1671
    /**                                                                                                                // 1672
     * The base implementation of `_.clone` without support for argument juggling                                      // 1673
     * and `this` binding `customizer` functions.                                                                      // 1674
     *                                                                                                                 // 1675
     * @private                                                                                                        // 1676
     * @param {*} value The value to clone.                                                                            // 1677
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 1678
     * @param {Function} [customizer] The function to customize cloning values.                                        // 1679
     * @param {string} [key] The key of `value`.                                                                       // 1680
     * @param {Object} [object] The object `value` belongs to.                                                         // 1681
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 1682
     * @param {Array} [stackB=[]] Associates clones with source counterparts.                                          // 1683
     * @returns {*} Returns the cloned value.                                                                          // 1684
     */                                                                                                                // 1685
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {                                       // 1686
      var result;                                                                                                      // 1687
      if (customizer) {                                                                                                // 1688
        result = object ? customizer(value, key, object) : customizer(value);                                          // 1689
      }                                                                                                                // 1690
      if (result !== undefined) {                                                                                      // 1691
        return result;                                                                                                 // 1692
      }                                                                                                                // 1693
      if (!isObject(value)) {                                                                                          // 1694
        return value;                                                                                                  // 1695
      }                                                                                                                // 1696
      var isArr = isArray(value);                                                                                      // 1697
      if (isArr) {                                                                                                     // 1698
        result = initCloneArray(value);                                                                                // 1699
        if (!isDeep) {                                                                                                 // 1700
          return arrayCopy(value, result);                                                                             // 1701
        }                                                                                                              // 1702
      } else {                                                                                                         // 1703
        var tag = objToString.call(value),                                                                             // 1704
            isFunc = tag == funcTag;                                                                                   // 1705
                                                                                                                       // 1706
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 1707
          result = initCloneObject(isFunc ? {} : value);                                                               // 1708
          if (!isDeep) {                                                                                               // 1709
            return baseAssign(result, value);                                                                          // 1710
          }                                                                                                            // 1711
        } else {                                                                                                       // 1712
          return cloneableTags[tag]                                                                                    // 1713
            ? initCloneByTag(value, tag, isDeep)                                                                       // 1714
            : (object ? value : {});                                                                                   // 1715
        }                                                                                                              // 1716
      }                                                                                                                // 1717
      // Check for circular references and return its corresponding clone.                                             // 1718
      stackA || (stackA = []);                                                                                         // 1719
      stackB || (stackB = []);                                                                                         // 1720
                                                                                                                       // 1721
      var length = stackA.length;                                                                                      // 1722
      while (length--) {                                                                                               // 1723
        if (stackA[length] == value) {                                                                                 // 1724
          return stackB[length];                                                                                       // 1725
        }                                                                                                              // 1726
      }                                                                                                                // 1727
      // Add the source value to the stack of traversed objects and associate it with its clone.                       // 1728
      stackA.push(value);                                                                                              // 1729
      stackB.push(result);                                                                                             // 1730
                                                                                                                       // 1731
      // Recursively populate clone (susceptible to call stack limits).                                                // 1732
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 1733
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);                             // 1734
      });                                                                                                              // 1735
      return result;                                                                                                   // 1736
    }                                                                                                                  // 1737
                                                                                                                       // 1738
    /**                                                                                                                // 1739
     * The base implementation of `_.create` without support for assigning                                             // 1740
     * properties to the created object.                                                                               // 1741
     *                                                                                                                 // 1742
     * @private                                                                                                        // 1743
     * @param {Object} prototype The object to inherit from.                                                           // 1744
     * @returns {Object} Returns the new object.                                                                       // 1745
     */                                                                                                                // 1746
    var baseCreate = (function() {                                                                                     // 1747
      function object() {}                                                                                             // 1748
      return function(prototype) {                                                                                     // 1749
        if (isObject(prototype)) {                                                                                     // 1750
          object.prototype = prototype;                                                                                // 1751
          var result = new object;                                                                                     // 1752
          object.prototype = undefined;                                                                                // 1753
        }                                                                                                              // 1754
        return result || {};                                                                                           // 1755
      };                                                                                                               // 1756
    }());                                                                                                              // 1757
                                                                                                                       // 1758
    /**                                                                                                                // 1759
     * The base implementation of `_.delay` and `_.defer` which accepts an index                                       // 1760
     * of where to slice the arguments to provide to `func`.                                                           // 1761
     *                                                                                                                 // 1762
     * @private                                                                                                        // 1763
     * @param {Function} func The function to delay.                                                                   // 1764
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 1765
     * @param {Object} args The arguments provide to `func`.                                                           // 1766
     * @returns {number} Returns the timer id.                                                                         // 1767
     */                                                                                                                // 1768
    function baseDelay(func, wait, args) {                                                                             // 1769
      if (typeof func != 'function') {                                                                                 // 1770
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 1771
      }                                                                                                                // 1772
      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 1773
    }                                                                                                                  // 1774
                                                                                                                       // 1775
    /**                                                                                                                // 1776
     * The base implementation of `_.difference` which accepts a single array                                          // 1777
     * of values to exclude.                                                                                           // 1778
     *                                                                                                                 // 1779
     * @private                                                                                                        // 1780
     * @param {Array} array The array to inspect.                                                                      // 1781
     * @param {Array} values The values to exclude.                                                                    // 1782
     * @returns {Array} Returns the new array of filtered values.                                                      // 1783
     */                                                                                                                // 1784
    function baseDifference(array, values) {                                                                           // 1785
      var length = array ? array.length : 0,                                                                           // 1786
          result = [];                                                                                                 // 1787
                                                                                                                       // 1788
      if (!length) {                                                                                                   // 1789
        return result;                                                                                                 // 1790
      }                                                                                                                // 1791
      var index = -1,                                                                                                  // 1792
          indexOf = getIndexOf(),                                                                                      // 1793
          isCommon = indexOf === baseIndexOf,                                                                          // 1794
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,                        // 1795
          valuesLength = values.length;                                                                                // 1796
                                                                                                                       // 1797
      if (cache) {                                                                                                     // 1798
        indexOf = cacheIndexOf;                                                                                        // 1799
        isCommon = false;                                                                                              // 1800
        values = cache;                                                                                                // 1801
      }                                                                                                                // 1802
      outer:                                                                                                           // 1803
      while (++index < length) {                                                                                       // 1804
        var value = array[index];                                                                                      // 1805
                                                                                                                       // 1806
        if (isCommon && value === value) {                                                                             // 1807
          var valuesIndex = valuesLength;                                                                              // 1808
          while (valuesIndex--) {                                                                                      // 1809
            if (values[valuesIndex] === value) {                                                                       // 1810
              continue outer;                                                                                          // 1811
            }                                                                                                          // 1812
          }                                                                                                            // 1813
          result.push(value);                                                                                          // 1814
        }                                                                                                              // 1815
        else if (indexOf(values, value, 0) < 0) {                                                                      // 1816
          result.push(value);                                                                                          // 1817
        }                                                                                                              // 1818
      }                                                                                                                // 1819
      return result;                                                                                                   // 1820
    }                                                                                                                  // 1821
                                                                                                                       // 1822
    /**                                                                                                                // 1823
     * The base implementation of `_.forEach` without support for callback                                             // 1824
     * shorthands and `this` binding.                                                                                  // 1825
     *                                                                                                                 // 1826
     * @private                                                                                                        // 1827
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1828
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1829
     * @returns {Array|Object|string} Returns `collection`.                                                            // 1830
     */                                                                                                                // 1831
    var baseEach = createBaseEach(baseForOwn);                                                                         // 1832
                                                                                                                       // 1833
    /**                                                                                                                // 1834
     * The base implementation of `_.forEachRight` without support for callback                                        // 1835
     * shorthands and `this` binding.                                                                                  // 1836
     *                                                                                                                 // 1837
     * @private                                                                                                        // 1838
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1839
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1840
     * @returns {Array|Object|string} Returns `collection`.                                                            // 1841
     */                                                                                                                // 1842
    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 1843
                                                                                                                       // 1844
    /**                                                                                                                // 1845
     * The base implementation of `_.every` without support for callback                                               // 1846
     * shorthands and `this` binding.                                                                                  // 1847
     *                                                                                                                 // 1848
     * @private                                                                                                        // 1849
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1850
     * @param {Function} predicate The function invoked per iteration.                                                 // 1851
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1852
     *  else `false`                                                                                                   // 1853
     */                                                                                                                // 1854
    function baseEvery(collection, predicate) {                                                                        // 1855
      var result = true;                                                                                               // 1856
      baseEach(collection, function(value, index, collection) {                                                        // 1857
        result = !!predicate(value, index, collection);                                                                // 1858
        return result;                                                                                                 // 1859
      });                                                                                                              // 1860
      return result;                                                                                                   // 1861
    }                                                                                                                  // 1862
                                                                                                                       // 1863
    /**                                                                                                                // 1864
     * Gets the extremum value of `collection` invoking `iteratee` for each value                                      // 1865
     * in `collection` to generate the criterion by which the value is ranked.                                         // 1866
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).                                 // 1867
     *                                                                                                                 // 1868
     * @private                                                                                                        // 1869
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1870
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1871
     * @param {Function} comparator The function used to compare values.                                               // 1872
     * @param {*} exValue The initial extremum value.                                                                  // 1873
     * @returns {*} Returns the extremum value.                                                                        // 1874
     */                                                                                                                // 1875
    function baseExtremum(collection, iteratee, comparator, exValue) {                                                 // 1876
      var computed = exValue,                                                                                          // 1877
          result = computed;                                                                                           // 1878
                                                                                                                       // 1879
      baseEach(collection, function(value, index, collection) {                                                        // 1880
        var current = +iteratee(value, index, collection);                                                             // 1881
        if (comparator(current, computed) || (current === exValue && current === result)) {                            // 1882
          computed = current;                                                                                          // 1883
          result = value;                                                                                              // 1884
        }                                                                                                              // 1885
      });                                                                                                              // 1886
      return result;                                                                                                   // 1887
    }                                                                                                                  // 1888
                                                                                                                       // 1889
    /**                                                                                                                // 1890
     * The base implementation of `_.fill` without an iteratee call guard.                                             // 1891
     *                                                                                                                 // 1892
     * @private                                                                                                        // 1893
     * @param {Array} array The array to fill.                                                                         // 1894
     * @param {*} value The value to fill `array` with.                                                                // 1895
     * @param {number} [start=0] The start position.                                                                   // 1896
     * @param {number} [end=array.length] The end position.                                                            // 1897
     * @returns {Array} Returns `array`.                                                                               // 1898
     */                                                                                                                // 1899
    function baseFill(array, value, start, end) {                                                                      // 1900
      var length = array.length;                                                                                       // 1901
                                                                                                                       // 1902
      start = start == null ? 0 : (+start || 0);                                                                       // 1903
      if (start < 0) {                                                                                                 // 1904
        start = -start > length ? 0 : (length + start);                                                                // 1905
      }                                                                                                                // 1906
      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 1907
      if (end < 0) {                                                                                                   // 1908
        end += length;                                                                                                 // 1909
      }                                                                                                                // 1910
      length = start > end ? 0 : (end >>> 0);                                                                          // 1911
      start >>>= 0;                                                                                                    // 1912
                                                                                                                       // 1913
      while (start < length) {                                                                                         // 1914
        array[start++] = value;                                                                                        // 1915
      }                                                                                                                // 1916
      return array;                                                                                                    // 1917
    }                                                                                                                  // 1918
                                                                                                                       // 1919
    /**                                                                                                                // 1920
     * The base implementation of `_.filter` without support for callback                                              // 1921
     * shorthands and `this` binding.                                                                                  // 1922
     *                                                                                                                 // 1923
     * @private                                                                                                        // 1924
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1925
     * @param {Function} predicate The function invoked per iteration.                                                 // 1926
     * @returns {Array} Returns the new filtered array.                                                                // 1927
     */                                                                                                                // 1928
    function baseFilter(collection, predicate) {                                                                       // 1929
      var result = [];                                                                                                 // 1930
      baseEach(collection, function(value, index, collection) {                                                        // 1931
        if (predicate(value, index, collection)) {                                                                     // 1932
          result.push(value);                                                                                          // 1933
        }                                                                                                              // 1934
      });                                                                                                              // 1935
      return result;                                                                                                   // 1936
    }                                                                                                                  // 1937
                                                                                                                       // 1938
    /**                                                                                                                // 1939
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,                            // 1940
     * without support for callback shorthands and `this` binding, which iterates                                      // 1941
     * over `collection` using the provided `eachFunc`.                                                                // 1942
     *                                                                                                                 // 1943
     * @private                                                                                                        // 1944
     * @param {Array|Object|string} collection The collection to search.                                               // 1945
     * @param {Function} predicate The function invoked per iteration.                                                 // 1946
     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 1947
     * @param {boolean} [retKey] Specify returning the key of the found element                                        // 1948
     *  instead of the element itself.                                                                                 // 1949
     * @returns {*} Returns the found element or its key, else `undefined`.                                            // 1950
     */                                                                                                                // 1951
    function baseFind(collection, predicate, eachFunc, retKey) {                                                       // 1952
      var result;                                                                                                      // 1953
      eachFunc(collection, function(value, key, collection) {                                                          // 1954
        if (predicate(value, key, collection)) {                                                                       // 1955
          result = retKey ? key : value;                                                                               // 1956
          return false;                                                                                                // 1957
        }                                                                                                              // 1958
      });                                                                                                              // 1959
      return result;                                                                                                   // 1960
    }                                                                                                                  // 1961
                                                                                                                       // 1962
    /**                                                                                                                // 1963
     * The base implementation of `_.flatten` with added support for restricting                                       // 1964
     * flattening and specifying the start index.                                                                      // 1965
     *                                                                                                                 // 1966
     * @private                                                                                                        // 1967
     * @param {Array} array The array to flatten.                                                                      // 1968
     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 1969
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 1970
     * @param {Array} [result=[]] The initial result value.                                                            // 1971
     * @returns {Array} Returns the new flattened array.                                                               // 1972
     */                                                                                                                // 1973
    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 1974
      result || (result = []);                                                                                         // 1975
                                                                                                                       // 1976
      var index = -1,                                                                                                  // 1977
          length = array.length;                                                                                       // 1978
                                                                                                                       // 1979
      while (++index < length) {                                                                                       // 1980
        var value = array[index];                                                                                      // 1981
        if (isObjectLike(value) && isArrayLike(value) &&                                                               // 1982
            (isStrict || isArray(value) || isArguments(value))) {                                                      // 1983
          if (isDeep) {                                                                                                // 1984
            // Recursively flatten arrays (susceptible to call stack limits).                                          // 1985
            baseFlatten(value, isDeep, isStrict, result);                                                              // 1986
          } else {                                                                                                     // 1987
            arrayPush(result, value);                                                                                  // 1988
          }                                                                                                            // 1989
        } else if (!isStrict) {                                                                                        // 1990
          result[result.length] = value;                                                                               // 1991
        }                                                                                                              // 1992
      }                                                                                                                // 1993
      return result;                                                                                                   // 1994
    }                                                                                                                  // 1995
                                                                                                                       // 1996
    /**                                                                                                                // 1997
     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 1998
     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 1999
     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2000
     * returning `false`.                                                                                              // 2001
     *                                                                                                                 // 2002
     * @private                                                                                                        // 2003
     * @param {Object} object The object to iterate over.                                                              // 2004
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2005
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2006
     * @returns {Object} Returns `object`.                                                                             // 2007
     */                                                                                                                // 2008
    var baseFor = createBaseFor();                                                                                     // 2009
                                                                                                                       // 2010
    /**                                                                                                                // 2011
     * This function is like `baseFor` except that it iterates over properties                                         // 2012
     * in the opposite order.                                                                                          // 2013
     *                                                                                                                 // 2014
     * @private                                                                                                        // 2015
     * @param {Object} object The object to iterate over.                                                              // 2016
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2017
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2018
     * @returns {Object} Returns `object`.                                                                             // 2019
     */                                                                                                                // 2020
    var baseForRight = createBaseFor(true);                                                                            // 2021
                                                                                                                       // 2022
    /**                                                                                                                // 2023
     * The base implementation of `_.forIn` without support for callback                                               // 2024
     * shorthands and `this` binding.                                                                                  // 2025
     *                                                                                                                 // 2026
     * @private                                                                                                        // 2027
     * @param {Object} object The object to iterate over.                                                              // 2028
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2029
     * @returns {Object} Returns `object`.                                                                             // 2030
     */                                                                                                                // 2031
    function baseForIn(object, iteratee) {                                                                             // 2032
      return baseFor(object, iteratee, keysIn);                                                                        // 2033
    }                                                                                                                  // 2034
                                                                                                                       // 2035
    /**                                                                                                                // 2036
     * The base implementation of `_.forOwn` without support for callback                                              // 2037
     * shorthands and `this` binding.                                                                                  // 2038
     *                                                                                                                 // 2039
     * @private                                                                                                        // 2040
     * @param {Object} object The object to iterate over.                                                              // 2041
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2042
     * @returns {Object} Returns `object`.                                                                             // 2043
     */                                                                                                                // 2044
    function baseForOwn(object, iteratee) {                                                                            // 2045
      return baseFor(object, iteratee, keys);                                                                          // 2046
    }                                                                                                                  // 2047
                                                                                                                       // 2048
    /**                                                                                                                // 2049
     * The base implementation of `_.forOwnRight` without support for callback                                         // 2050
     * shorthands and `this` binding.                                                                                  // 2051
     *                                                                                                                 // 2052
     * @private                                                                                                        // 2053
     * @param {Object} object The object to iterate over.                                                              // 2054
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2055
     * @returns {Object} Returns `object`.                                                                             // 2056
     */                                                                                                                // 2057
    function baseForOwnRight(object, iteratee) {                                                                       // 2058
      return baseForRight(object, iteratee, keys);                                                                     // 2059
    }                                                                                                                  // 2060
                                                                                                                       // 2061
    /**                                                                                                                // 2062
     * The base implementation of `_.functions` which creates an array of                                              // 2063
     * `object` function property names filtered from those provided.                                                  // 2064
     *                                                                                                                 // 2065
     * @private                                                                                                        // 2066
     * @param {Object} object The object to inspect.                                                                   // 2067
     * @param {Array} props The property names to filter.                                                              // 2068
     * @returns {Array} Returns the new array of filtered property names.                                              // 2069
     */                                                                                                                // 2070
    function baseFunctions(object, props) {                                                                            // 2071
      var index = -1,                                                                                                  // 2072
          length = props.length,                                                                                       // 2073
          resIndex = -1,                                                                                               // 2074
          result = [];                                                                                                 // 2075
                                                                                                                       // 2076
      while (++index < length) {                                                                                       // 2077
        var key = props[index];                                                                                        // 2078
        if (isFunction(object[key])) {                                                                                 // 2079
          result[++resIndex] = key;                                                                                    // 2080
        }                                                                                                              // 2081
      }                                                                                                                // 2082
      return result;                                                                                                   // 2083
    }                                                                                                                  // 2084
                                                                                                                       // 2085
    /**                                                                                                                // 2086
     * The base implementation of `get` without support for string paths                                               // 2087
     * and default values.                                                                                             // 2088
     *                                                                                                                 // 2089
     * @private                                                                                                        // 2090
     * @param {Object} object The object to query.                                                                     // 2091
     * @param {Array} path The path of the property to get.                                                            // 2092
     * @param {string} [pathKey] The key representation of path.                                                       // 2093
     * @returns {*} Returns the resolved value.                                                                        // 2094
     */                                                                                                                // 2095
    function baseGet(object, path, pathKey) {                                                                          // 2096
      if (object == null) {                                                                                            // 2097
        return;                                                                                                        // 2098
      }                                                                                                                // 2099
      if (pathKey !== undefined && pathKey in toObject(object)) {                                                      // 2100
        path = [pathKey];                                                                                              // 2101
      }                                                                                                                // 2102
      var index = 0,                                                                                                   // 2103
          length = path.length;                                                                                        // 2104
                                                                                                                       // 2105
      while (object != null && index < length) {                                                                       // 2106
        object = object[path[index++]];                                                                                // 2107
      }                                                                                                                // 2108
      return (index && index == length) ? object : undefined;                                                          // 2109
    }                                                                                                                  // 2110
                                                                                                                       // 2111
    /**                                                                                                                // 2112
     * The base implementation of `_.isEqual` without support for `this` binding                                       // 2113
     * `customizer` functions.                                                                                         // 2114
     *                                                                                                                 // 2115
     * @private                                                                                                        // 2116
     * @param {*} value The value to compare.                                                                          // 2117
     * @param {*} other The other value to compare.                                                                    // 2118
     * @param {Function} [customizer] The function to customize comparing values.                                      // 2119
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2120
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 2121
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 2122
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2123
     */                                                                                                                // 2124
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {                                          // 2125
      if (value === other) {                                                                                           // 2126
        return true;                                                                                                   // 2127
      }                                                                                                                // 2128
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2129
        return value !== value && other !== other;                                                                     // 2130
      }                                                                                                                // 2131
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);                          // 2132
    }                                                                                                                  // 2133
                                                                                                                       // 2134
    /**                                                                                                                // 2135
     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2136
     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2137
     * references to be compared.                                                                                      // 2138
     *                                                                                                                 // 2139
     * @private                                                                                                        // 2140
     * @param {Object} object The object to compare.                                                                   // 2141
     * @param {Object} other The other object to compare.                                                              // 2142
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2143
     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2144
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2145
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.                                                    // 2146
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.                                                    // 2147
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2148
     */                                                                                                                // 2149
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                          // 2150
      var objIsArr = isArray(object),                                                                                  // 2151
          othIsArr = isArray(other),                                                                                   // 2152
          objTag = arrayTag,                                                                                           // 2153
          othTag = arrayTag;                                                                                           // 2154
                                                                                                                       // 2155
      if (!objIsArr) {                                                                                                 // 2156
        objTag = objToString.call(object);                                                                             // 2157
        if (objTag == argsTag) {                                                                                       // 2158
          objTag = objectTag;                                                                                          // 2159
        } else if (objTag != objectTag) {                                                                              // 2160
          objIsArr = isTypedArray(object);                                                                             // 2161
        }                                                                                                              // 2162
      }                                                                                                                // 2163
      if (!othIsArr) {                                                                                                 // 2164
        othTag = objToString.call(other);                                                                              // 2165
        if (othTag == argsTag) {                                                                                       // 2166
          othTag = objectTag;                                                                                          // 2167
        } else if (othTag != objectTag) {                                                                              // 2168
          othIsArr = isTypedArray(other);                                                                              // 2169
        }                                                                                                              // 2170
      }                                                                                                                // 2171
      var objIsObj = objTag == objectTag,                                                                              // 2172
          othIsObj = othTag == objectTag,                                                                              // 2173
          isSameTag = objTag == othTag;                                                                                // 2174
                                                                                                                       // 2175
      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2176
        return equalByTag(object, other, objTag);                                                                      // 2177
      }                                                                                                                // 2178
      if (!isLoose) {                                                                                                  // 2179
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2180
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2181
                                                                                                                       // 2182
        if (objIsWrapped || othIsWrapped) {                                                                            // 2183
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }                                                                                                              // 2185
      }                                                                                                                // 2186
      if (!isSameTag) {                                                                                                // 2187
        return false;                                                                                                  // 2188
      }                                                                                                                // 2189
      // Assume cyclic values are equal.                                                                               // 2190
      // For more information on detecting circular references see https://es5.github.io/#JO.                          // 2191
      stackA || (stackA = []);                                                                                         // 2192
      stackB || (stackB = []);                                                                                         // 2193
                                                                                                                       // 2194
      var length = stackA.length;                                                                                      // 2195
      while (length--) {                                                                                               // 2196
        if (stackA[length] == object) {                                                                                // 2197
          return stackB[length] == other;                                                                              // 2198
        }                                                                                                              // 2199
      }                                                                                                                // 2200
      // Add `object` and `other` to the stack of traversed objects.                                                   // 2201
      stackA.push(object);                                                                                             // 2202
      stackB.push(other);                                                                                              // 2203
                                                                                                                       // 2204
      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
                                                                                                                       // 2206
      stackA.pop();                                                                                                    // 2207
      stackB.pop();                                                                                                    // 2208
                                                                                                                       // 2209
      return result;                                                                                                   // 2210
    }                                                                                                                  // 2211
                                                                                                                       // 2212
    /**                                                                                                                // 2213
     * The base implementation of `_.isMatch` without support for callback                                             // 2214
     * shorthands and `this` binding.                                                                                  // 2215
     *                                                                                                                 // 2216
     * @private                                                                                                        // 2217
     * @param {Object} object The object to inspect.                                                                   // 2218
     * @param {Array} matchData The propery names, values, and compare flags to match.                                 // 2219
     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2220
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2221
     */                                                                                                                // 2222
    function baseIsMatch(object, matchData, customizer) {                                                              // 2223
      var index = matchData.length,                                                                                    // 2224
          length = index,                                                                                              // 2225
          noCustomizer = !customizer;                                                                                  // 2226
                                                                                                                       // 2227
      if (object == null) {                                                                                            // 2228
        return !length;                                                                                                // 2229
      }                                                                                                                // 2230
      object = toObject(object);                                                                                       // 2231
      while (index--) {                                                                                                // 2232
        var data = matchData[index];                                                                                   // 2233
        if ((noCustomizer && data[2])                                                                                  // 2234
              ? data[1] !== object[data[0]]                                                                            // 2235
              : !(data[0] in object)                                                                                   // 2236
            ) {                                                                                                        // 2237
          return false;                                                                                                // 2238
        }                                                                                                              // 2239
      }                                                                                                                // 2240
      while (++index < length) {                                                                                       // 2241
        data = matchData[index];                                                                                       // 2242
        var key = data[0],                                                                                             // 2243
            objValue = object[key],                                                                                    // 2244
            srcValue = data[1];                                                                                        // 2245
                                                                                                                       // 2246
        if (noCustomizer && data[2]) {                                                                                 // 2247
          if (objValue === undefined && !(key in object)) {                                                            // 2248
            return false;                                                                                              // 2249
          }                                                                                                            // 2250
        } else {                                                                                                       // 2251
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;                                   // 2252
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {                  // 2253
            return false;                                                                                              // 2254
          }                                                                                                            // 2255
        }                                                                                                              // 2256
      }                                                                                                                // 2257
      return true;                                                                                                     // 2258
    }                                                                                                                  // 2259
                                                                                                                       // 2260
    /**                                                                                                                // 2261
     * The base implementation of `_.map` without support for callback shorthands                                      // 2262
     * and `this` binding.                                                                                             // 2263
     *                                                                                                                 // 2264
     * @private                                                                                                        // 2265
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2266
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2267
     * @returns {Array} Returns the new mapped array.                                                                  // 2268
     */                                                                                                                // 2269
    function baseMap(collection, iteratee) {                                                                           // 2270
      var index = -1,                                                                                                  // 2271
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2272
                                                                                                                       // 2273
      baseEach(collection, function(value, key, collection) {                                                          // 2274
        result[++index] = iteratee(value, key, collection);                                                            // 2275
      });                                                                                                              // 2276
      return result;                                                                                                   // 2277
    }                                                                                                                  // 2278
                                                                                                                       // 2279
    /**                                                                                                                // 2280
     * The base implementation of `_.matches` which does not clone `source`.                                           // 2281
     *                                                                                                                 // 2282
     * @private                                                                                                        // 2283
     * @param {Object} source The object of property values to match.                                                  // 2284
     * @returns {Function} Returns the new function.                                                                   // 2285
     */                                                                                                                // 2286
    function baseMatches(source) {                                                                                     // 2287
      var matchData = getMatchData(source);                                                                            // 2288
      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2289
        var key = matchData[0][0],                                                                                     // 2290
            value = matchData[0][1];                                                                                   // 2291
                                                                                                                       // 2292
        return function(object) {                                                                                      // 2293
          if (object == null) {                                                                                        // 2294
            return false;                                                                                              // 2295
          }                                                                                                            // 2296
          return object[key] === value && (value !== undefined || (key in toObject(object)));                          // 2297
        };                                                                                                             // 2298
      }                                                                                                                // 2299
      return function(object) {                                                                                        // 2300
        return baseIsMatch(object, matchData);                                                                         // 2301
      };                                                                                                               // 2302
    }                                                                                                                  // 2303
                                                                                                                       // 2304
    /**                                                                                                                // 2305
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.                                 // 2306
     *                                                                                                                 // 2307
     * @private                                                                                                        // 2308
     * @param {string} path The path of the property to get.                                                           // 2309
     * @param {*} srcValue The value to compare.                                                                       // 2310
     * @returns {Function} Returns the new function.                                                                   // 2311
     */                                                                                                                // 2312
    function baseMatchesProperty(path, srcValue) {                                                                     // 2313
      var isArr = isArray(path),                                                                                       // 2314
          isCommon = isKey(path) && isStrictComparable(srcValue),                                                      // 2315
          pathKey = (path + '');                                                                                       // 2316
                                                                                                                       // 2317
      path = toPath(path);                                                                                             // 2318
      return function(object) {                                                                                        // 2319
        if (object == null) {                                                                                          // 2320
          return false;                                                                                                // 2321
        }                                                                                                              // 2322
        var key = pathKey;                                                                                             // 2323
        object = toObject(object);                                                                                     // 2324
        if ((isArr || !isCommon) && !(key in object)) {                                                                // 2325
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 2326
          if (object == null) {                                                                                        // 2327
            return false;                                                                                              // 2328
          }                                                                                                            // 2329
          key = last(path);                                                                                            // 2330
          object = toObject(object);                                                                                   // 2331
        }                                                                                                              // 2332
        return object[key] === srcValue                                                                                // 2333
          ? (srcValue !== undefined || (key in object))                                                                // 2334
          : baseIsEqual(srcValue, object[key], undefined, true);                                                       // 2335
      };                                                                                                               // 2336
    }                                                                                                                  // 2337
                                                                                                                       // 2338
    /**                                                                                                                // 2339
     * The base implementation of `_.merge` without support for argument juggling,                                     // 2340
     * multiple sources, and `this` binding `customizer` functions.                                                    // 2341
     *                                                                                                                 // 2342
     * @private                                                                                                        // 2343
     * @param {Object} object The destination object.                                                                  // 2344
     * @param {Object} source The source object.                                                                       // 2345
     * @param {Function} [customizer] The function to customize merged values.                                         // 2346
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2347
     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2348
     * @returns {Object} Returns `object`.                                                                             // 2349
     */                                                                                                                // 2350
    function baseMerge(object, source, customizer, stackA, stackB) {                                                   // 2351
      if (!isObject(object)) {                                                                                         // 2352
        return object;                                                                                                 // 2353
      }                                                                                                                // 2354
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),                                 // 2355
          props = isSrcArr ? undefined : keys(source);                                                                 // 2356
                                                                                                                       // 2357
      arrayEach(props || source, function(srcValue, key) {                                                             // 2358
        if (props) {                                                                                                   // 2359
          key = srcValue;                                                                                              // 2360
          srcValue = source[key];                                                                                      // 2361
        }                                                                                                              // 2362
        if (isObjectLike(srcValue)) {                                                                                  // 2363
          stackA || (stackA = []);                                                                                     // 2364
          stackB || (stackB = []);                                                                                     // 2365
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);                                   // 2366
        }                                                                                                              // 2367
        else {                                                                                                         // 2368
          var value = object[key],                                                                                     // 2369
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                      // 2370
              isCommon = result === undefined;                                                                         // 2371
                                                                                                                       // 2372
          if (isCommon) {                                                                                              // 2373
            result = srcValue;                                                                                         // 2374
          }                                                                                                            // 2375
          if ((result !== undefined || (isSrcArr && !(key in object))) &&                                              // 2376
              (isCommon || (result === result ? (result !== value) : (value === value)))) {                            // 2377
            object[key] = result;                                                                                      // 2378
          }                                                                                                            // 2379
        }                                                                                                              // 2380
      });                                                                                                              // 2381
      return object;                                                                                                   // 2382
    }                                                                                                                  // 2383
                                                                                                                       // 2384
    /**                                                                                                                // 2385
     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2386
     * deep merges and tracks traversed objects enabling objects with circular                                         // 2387
     * references to be merged.                                                                                        // 2388
     *                                                                                                                 // 2389
     * @private                                                                                                        // 2390
     * @param {Object} object The destination object.                                                                  // 2391
     * @param {Object} source The source object.                                                                       // 2392
     * @param {string} key The key of the value to merge.                                                              // 2393
     * @param {Function} mergeFunc The function to merge values.                                                       // 2394
     * @param {Function} [customizer] The function to customize merged values.                                         // 2395
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2396
     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2397
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2398
     */                                                                                                                // 2399
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {                               // 2400
      var length = stackA.length,                                                                                      // 2401
          srcValue = source[key];                                                                                      // 2402
                                                                                                                       // 2403
      while (length--) {                                                                                               // 2404
        if (stackA[length] == srcValue) {                                                                              // 2405
          object[key] = stackB[length];                                                                                // 2406
          return;                                                                                                      // 2407
        }                                                                                                              // 2408
      }                                                                                                                // 2409
      var value = object[key],                                                                                         // 2410
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                          // 2411
          isCommon = result === undefined;                                                                             // 2412
                                                                                                                       // 2413
      if (isCommon) {                                                                                                  // 2414
        result = srcValue;                                                                                             // 2415
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {                                  // 2416
          result = isArray(value)                                                                                      // 2417
            ? value                                                                                                    // 2418
            : (isArrayLike(value) ? arrayCopy(value) : []);                                                            // 2419
        }                                                                                                              // 2420
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 2421
          result = isArguments(value)                                                                                  // 2422
            ? toPlainObject(value)                                                                                     // 2423
            : (isPlainObject(value) ? value : {});                                                                     // 2424
        }                                                                                                              // 2425
        else {                                                                                                         // 2426
          isCommon = false;                                                                                            // 2427
        }                                                                                                              // 2428
      }                                                                                                                // 2429
      // Add the source value to the stack of traversed objects and associate                                          // 2430
      // it with its merged value.                                                                                     // 2431
      stackA.push(srcValue);                                                                                           // 2432
      stackB.push(result);                                                                                             // 2433
                                                                                                                       // 2434
      if (isCommon) {                                                                                                  // 2435
        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 2436
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);                                         // 2437
      } else if (result === result ? (result !== value) : (value === value)) {                                         // 2438
        object[key] = result;                                                                                          // 2439
      }                                                                                                                // 2440
    }                                                                                                                  // 2441
                                                                                                                       // 2442
    /**                                                                                                                // 2443
     * The base implementation of `_.property` without support for deep paths.                                         // 2444
     *                                                                                                                 // 2445
     * @private                                                                                                        // 2446
     * @param {string} key The key of the property to get.                                                             // 2447
     * @returns {Function} Returns the new function.                                                                   // 2448
     */                                                                                                                // 2449
    function baseProperty(key) {                                                                                       // 2450
      return function(object) {                                                                                        // 2451
        return object == null ? undefined : object[key];                                                               // 2452
      };                                                                                                               // 2453
    }                                                                                                                  // 2454
                                                                                                                       // 2455
    /**                                                                                                                // 2456
     * A specialized version of `baseProperty` which supports deep paths.                                              // 2457
     *                                                                                                                 // 2458
     * @private                                                                                                        // 2459
     * @param {Array|string} path The path of the property to get.                                                     // 2460
     * @returns {Function} Returns the new function.                                                                   // 2461
     */                                                                                                                // 2462
    function basePropertyDeep(path) {                                                                                  // 2463
      var pathKey = (path + '');                                                                                       // 2464
      path = toPath(path);                                                                                             // 2465
      return function(object) {                                                                                        // 2466
        return baseGet(object, path, pathKey);                                                                         // 2467
      };                                                                                                               // 2468
    }                                                                                                                  // 2469
                                                                                                                       // 2470
    /**                                                                                                                // 2471
     * The base implementation of `_.pullAt` without support for individual                                            // 2472
     * index arguments and capturing the removed elements.                                                             // 2473
     *                                                                                                                 // 2474
     * @private                                                                                                        // 2475
     * @param {Array} array The array to modify.                                                                       // 2476
     * @param {number[]} indexes The indexes of elements to remove.                                                    // 2477
     * @returns {Array} Returns `array`.                                                                               // 2478
     */                                                                                                                // 2479
    function basePullAt(array, indexes) {                                                                              // 2480
      var length = array ? indexes.length : 0;                                                                         // 2481
      while (length--) {                                                                                               // 2482
        var index = indexes[length];                                                                                   // 2483
        if (index != previous && isIndex(index)) {                                                                     // 2484
          var previous = index;                                                                                        // 2485
          splice.call(array, index, 1);                                                                                // 2486
        }                                                                                                              // 2487
      }                                                                                                                // 2488
      return array;                                                                                                    // 2489
    }                                                                                                                  // 2490
                                                                                                                       // 2491
    /**                                                                                                                // 2492
     * The base implementation of `_.random` without support for argument juggling                                     // 2493
     * and returning floating-point numbers.                                                                           // 2494
     *                                                                                                                 // 2495
     * @private                                                                                                        // 2496
     * @param {number} min The minimum possible value.                                                                 // 2497
     * @param {number} max The maximum possible value.                                                                 // 2498
     * @returns {number} Returns the random number.                                                                    // 2499
     */                                                                                                                // 2500
    function baseRandom(min, max) {                                                                                    // 2501
      return min + nativeFloor(nativeRandom() * (max - min + 1));                                                      // 2502
    }                                                                                                                  // 2503
                                                                                                                       // 2504
    /**                                                                                                                // 2505
     * The base implementation of `_.reduce` and `_.reduceRight` without support                                       // 2506
     * for callback shorthands and `this` binding, which iterates over `collection`                                    // 2507
     * using the provided `eachFunc`.                                                                                  // 2508
     *                                                                                                                 // 2509
     * @private                                                                                                        // 2510
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2511
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2512
     * @param {*} accumulator The initial value.                                                                       // 2513
     * @param {boolean} initFromCollection Specify using the first or last element                                     // 2514
     *  of `collection` as the initial value.                                                                          // 2515
     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2516
     * @returns {*} Returns the accumulated value.                                                                     // 2517
     */                                                                                                                // 2518
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                             // 2519
      eachFunc(collection, function(value, index, collection) {                                                        // 2520
        accumulator = initFromCollection                                                                               // 2521
          ? (initFromCollection = false, value)                                                                        // 2522
          : iteratee(accumulator, value, index, collection);                                                           // 2523
      });                                                                                                              // 2524
      return accumulator;                                                                                              // 2525
    }                                                                                                                  // 2526
                                                                                                                       // 2527
    /**                                                                                                                // 2528
     * The base implementation of `setData` without support for hot loop detection.                                    // 2529
     *                                                                                                                 // 2530
     * @private                                                                                                        // 2531
     * @param {Function} func The function to associate metadata with.                                                 // 2532
     * @param {*} data The metadata.                                                                                   // 2533
     * @returns {Function} Returns `func`.                                                                             // 2534
     */                                                                                                                // 2535
    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 2536
      metaMap.set(func, data);                                                                                         // 2537
      return func;                                                                                                     // 2538
    };                                                                                                                 // 2539
                                                                                                                       // 2540
    /**                                                                                                                // 2541
     * The base implementation of `_.slice` without an iteratee call guard.                                            // 2542
     *                                                                                                                 // 2543
     * @private                                                                                                        // 2544
     * @param {Array} array The array to slice.                                                                        // 2545
     * @param {number} [start=0] The start position.                                                                   // 2546
     * @param {number} [end=array.length] The end position.                                                            // 2547
     * @returns {Array} Returns the slice of `array`.                                                                  // 2548
     */                                                                                                                // 2549
    function baseSlice(array, start, end) {                                                                            // 2550
      var index = -1,                                                                                                  // 2551
          length = array.length;                                                                                       // 2552
                                                                                                                       // 2553
      start = start == null ? 0 : (+start || 0);                                                                       // 2554
      if (start < 0) {                                                                                                 // 2555
        start = -start > length ? 0 : (length + start);                                                                // 2556
      }                                                                                                                // 2557
      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2558
      if (end < 0) {                                                                                                   // 2559
        end += length;                                                                                                 // 2560
      }                                                                                                                // 2561
      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 2562
      start >>>= 0;                                                                                                    // 2563
                                                                                                                       // 2564
      var result = Array(length);                                                                                      // 2565
      while (++index < length) {                                                                                       // 2566
        result[index] = array[index + start];                                                                          // 2567
      }                                                                                                                // 2568
      return result;                                                                                                   // 2569
    }                                                                                                                  // 2570
                                                                                                                       // 2571
    /**                                                                                                                // 2572
     * The base implementation of `_.some` without support for callback shorthands                                     // 2573
     * and `this` binding.                                                                                             // 2574
     *                                                                                                                 // 2575
     * @private                                                                                                        // 2576
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2577
     * @param {Function} predicate The function invoked per iteration.                                                 // 2578
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 2579
     *  else `false`.                                                                                                  // 2580
     */                                                                                                                // 2581
    function baseSome(collection, predicate) {                                                                         // 2582
      var result;                                                                                                      // 2583
                                                                                                                       // 2584
      baseEach(collection, function(value, index, collection) {                                                        // 2585
        result = predicate(value, index, collection);                                                                  // 2586
        return !result;                                                                                                // 2587
      });                                                                                                              // 2588
      return !!result;                                                                                                 // 2589
    }                                                                                                                  // 2590
                                                                                                                       // 2591
    /**                                                                                                                // 2592
     * The base implementation of `_.sortBy` which uses `comparer` to define                                           // 2593
     * the sort order of `array` and replaces criteria objects with their                                              // 2594
     * corresponding values.                                                                                           // 2595
     *                                                                                                                 // 2596
     * @private                                                                                                        // 2597
     * @param {Array} array The array to sort.                                                                         // 2598
     * @param {Function} comparer The function to define sort order.                                                   // 2599
     * @returns {Array} Returns `array`.                                                                               // 2600
     */                                                                                                                // 2601
    function baseSortBy(array, comparer) {                                                                             // 2602
      var length = array.length;                                                                                       // 2603
                                                                                                                       // 2604
      array.sort(comparer);                                                                                            // 2605
      while (length--) {                                                                                               // 2606
        array[length] = array[length].value;                                                                           // 2607
      }                                                                                                                // 2608
      return array;                                                                                                    // 2609
    }                                                                                                                  // 2610
                                                                                                                       // 2611
    /**                                                                                                                // 2612
     * The base implementation of `_.sortByOrder` without param guards.                                                // 2613
     *                                                                                                                 // 2614
     * @private                                                                                                        // 2615
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2616
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 2617
     * @param {boolean[]} orders The sort orders of `iteratees`.                                                       // 2618
     * @returns {Array} Returns the new sorted array.                                                                  // 2619
     */                                                                                                                // 2620
    function baseSortByOrder(collection, iteratees, orders) {                                                          // 2621
      var callback = getCallback(),                                                                                    // 2622
          index = -1;                                                                                                  // 2623
                                                                                                                       // 2624
      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });                              // 2625
                                                                                                                       // 2626
      var result = baseMap(collection, function(value) {                                                               // 2627
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });                            // 2628
        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 2629
      });                                                                                                              // 2630
                                                                                                                       // 2631
      return baseSortBy(result, function(object, other) {                                                              // 2632
        return compareMultiple(object, other, orders);                                                                 // 2633
      });                                                                                                              // 2634
    }                                                                                                                  // 2635
                                                                                                                       // 2636
    /**                                                                                                                // 2637
     * The base implementation of `_.sum` without support for callback shorthands                                      // 2638
     * and `this` binding.                                                                                             // 2639
     *                                                                                                                 // 2640
     * @private                                                                                                        // 2641
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2642
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2643
     * @returns {number} Returns the sum.                                                                              // 2644
     */                                                                                                                // 2645
    function baseSum(collection, iteratee) {                                                                           // 2646
      var result = 0;                                                                                                  // 2647
      baseEach(collection, function(value, index, collection) {                                                        // 2648
        result += +iteratee(value, index, collection) || 0;                                                            // 2649
      });                                                                                                              // 2650
      return result;                                                                                                   // 2651
    }                                                                                                                  // 2652
                                                                                                                       // 2653
    /**                                                                                                                // 2654
     * The base implementation of `_.uniq` without support for callback shorthands                                     // 2655
     * and `this` binding.                                                                                             // 2656
     *                                                                                                                 // 2657
     * @private                                                                                                        // 2658
     * @param {Array} array The array to inspect.                                                                      // 2659
     * @param {Function} [iteratee] The function invoked per iteration.                                                // 2660
     * @returns {Array} Returns the new duplicate free array.                                                          // 2661
     */                                                                                                                // 2662
    function baseUniq(array, iteratee) {                                                                               // 2663
      var index = -1,                                                                                                  // 2664
          indexOf = getIndexOf(),                                                                                      // 2665
          length = array.length,                                                                                       // 2666
          isCommon = indexOf === baseIndexOf,                                                                          // 2667
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,                                                            // 2668
          seen = isLarge ? createCache() : null,                                                                       // 2669
          result = [];                                                                                                 // 2670
                                                                                                                       // 2671
      if (seen) {                                                                                                      // 2672
        indexOf = cacheIndexOf;                                                                                        // 2673
        isCommon = false;                                                                                              // 2674
      } else {                                                                                                         // 2675
        isLarge = false;                                                                                               // 2676
        seen = iteratee ? [] : result;                                                                                 // 2677
      }                                                                                                                // 2678
      outer:                                                                                                           // 2679
      while (++index < length) {                                                                                       // 2680
        var value = array[index],                                                                                      // 2681
            computed = iteratee ? iteratee(value, index, array) : value;                                               // 2682
                                                                                                                       // 2683
        if (isCommon && value === value) {                                                                             // 2684
          var seenIndex = seen.length;                                                                                 // 2685
          while (seenIndex--) {                                                                                        // 2686
            if (seen[seenIndex] === computed) {                                                                        // 2687
              continue outer;                                                                                          // 2688
            }                                                                                                          // 2689
          }                                                                                                            // 2690
          if (iteratee) {                                                                                              // 2691
            seen.push(computed);                                                                                       // 2692
          }                                                                                                            // 2693
          result.push(value);                                                                                          // 2694
        }                                                                                                              // 2695
        else if (indexOf(seen, computed, 0) < 0) {                                                                     // 2696
          if (iteratee || isLarge) {                                                                                   // 2697
            seen.push(computed);                                                                                       // 2698
          }                                                                                                            // 2699
          result.push(value);                                                                                          // 2700
        }                                                                                                              // 2701
      }                                                                                                                // 2702
      return result;                                                                                                   // 2703
    }                                                                                                                  // 2704
                                                                                                                       // 2705
    /**                                                                                                                // 2706
     * The base implementation of `_.values` and `_.valuesIn` which creates an                                         // 2707
     * array of `object` property values corresponding to the property names                                           // 2708
     * of `props`.                                                                                                     // 2709
     *                                                                                                                 // 2710
     * @private                                                                                                        // 2711
     * @param {Object} object The object to query.                                                                     // 2712
     * @param {Array} props The property names to get values for.                                                      // 2713
     * @returns {Object} Returns the array of property values.                                                         // 2714
     */                                                                                                                // 2715
    function baseValues(object, props) {                                                                               // 2716
      var index = -1,                                                                                                  // 2717
          length = props.length,                                                                                       // 2718
          result = Array(length);                                                                                      // 2719
                                                                                                                       // 2720
      while (++index < length) {                                                                                       // 2721
        result[index] = object[props[index]];                                                                          // 2722
      }                                                                                                                // 2723
      return result;                                                                                                   // 2724
    }                                                                                                                  // 2725
                                                                                                                       // 2726
    /**                                                                                                                // 2727
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,                               // 2728
     * and `_.takeWhile` without support for callback shorthands and `this` binding.                                   // 2729
     *                                                                                                                 // 2730
     * @private                                                                                                        // 2731
     * @param {Array} array The array to query.                                                                        // 2732
     * @param {Function} predicate The function invoked per iteration.                                                 // 2733
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 2734
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 2735
     * @returns {Array} Returns the slice of `array`.                                                                  // 2736
     */                                                                                                                // 2737
    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 2738
      var length = array.length,                                                                                       // 2739
          index = fromRight ? length : -1;                                                                             // 2740
                                                                                                                       // 2741
      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}                     // 2742
      return isDrop                                                                                                    // 2743
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 2744
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 2745
    }                                                                                                                  // 2746
                                                                                                                       // 2747
    /**                                                                                                                // 2748
     * The base implementation of `wrapperValue` which returns the result of                                           // 2749
     * performing a sequence of actions on the unwrapped `value`, where each                                           // 2750
     * successive action is supplied the return value of the previous.                                                 // 2751
     *                                                                                                                 // 2752
     * @private                                                                                                        // 2753
     * @param {*} value The unwrapped value.                                                                           // 2754
     * @param {Array} actions Actions to peform to resolve the unwrapped value.                                        // 2755
     * @returns {*} Returns the resolved value.                                                                        // 2756
     */                                                                                                                // 2757
    function baseWrapperValue(value, actions) {                                                                        // 2758
      var result = value;                                                                                              // 2759
      if (result instanceof LazyWrapper) {                                                                             // 2760
        result = result.value();                                                                                       // 2761
      }                                                                                                                // 2762
      var index = -1,                                                                                                  // 2763
          length = actions.length;                                                                                     // 2764
                                                                                                                       // 2765
      while (++index < length) {                                                                                       // 2766
        var action = actions[index];                                                                                   // 2767
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));                                  // 2768
      }                                                                                                                // 2769
      return result;                                                                                                   // 2770
    }                                                                                                                  // 2771
                                                                                                                       // 2772
    /**                                                                                                                // 2773
     * Performs a binary search of `array` to determine the index at which `value`                                     // 2774
     * should be inserted into `array` in order to maintain its sort order.                                            // 2775
     *                                                                                                                 // 2776
     * @private                                                                                                        // 2777
     * @param {Array} array The sorted array to inspect.                                                               // 2778
     * @param {*} value The value to evaluate.                                                                         // 2779
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2780
     * @returns {number} Returns the index at which `value` should be inserted                                         // 2781
     *  into `array`.                                                                                                  // 2782
     */                                                                                                                // 2783
    function binaryIndex(array, value, retHighest) {                                                                   // 2784
      var low = 0,                                                                                                     // 2785
          high = array ? array.length : low;                                                                           // 2786
                                                                                                                       // 2787
      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 2788
        while (low < high) {                                                                                           // 2789
          var mid = (low + high) >>> 1,                                                                                // 2790
              computed = array[mid];                                                                                   // 2791
                                                                                                                       // 2792
          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 2793
            low = mid + 1;                                                                                             // 2794
          } else {                                                                                                     // 2795
            high = mid;                                                                                                // 2796
          }                                                                                                            // 2797
        }                                                                                                              // 2798
        return high;                                                                                                   // 2799
      }                                                                                                                // 2800
      return binaryIndexBy(array, value, identity, retHighest);                                                        // 2801
    }                                                                                                                  // 2802
                                                                                                                       // 2803
    /**                                                                                                                // 2804
     * This function is like `binaryIndex` except that it invokes `iteratee` for                                       // 2805
     * `value` and each element of `array` to compute their sort ranking. The                                          // 2806
     * iteratee is invoked with one argument; (value).                                                                 // 2807
     *                                                                                                                 // 2808
     * @private                                                                                                        // 2809
     * @param {Array} array The sorted array to inspect.                                                               // 2810
     * @param {*} value The value to evaluate.                                                                         // 2811
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2812
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2813
     * @returns {number} Returns the index at which `value` should be inserted                                         // 2814
     *  into `array`.                                                                                                  // 2815
     */                                                                                                                // 2816
    function binaryIndexBy(array, value, iteratee, retHighest) {                                                       // 2817
      value = iteratee(value);                                                                                         // 2818
                                                                                                                       // 2819
      var low = 0,                                                                                                     // 2820
          high = array ? array.length : 0,                                                                             // 2821
          valIsNaN = value !== value,                                                                                  // 2822
          valIsNull = value === null,                                                                                  // 2823
          valIsUndef = value === undefined;                                                                            // 2824
                                                                                                                       // 2825
      while (low < high) {                                                                                             // 2826
        var mid = nativeFloor((low + high) / 2),                                                                       // 2827
            computed = iteratee(array[mid]),                                                                           // 2828
            isDef = computed !== undefined,                                                                            // 2829
            isReflexive = computed === computed;                                                                       // 2830
                                                                                                                       // 2831
        if (valIsNaN) {                                                                                                // 2832
          var setLow = isReflexive || retHighest;                                                                      // 2833
        } else if (valIsNull) {                                                                                        // 2834
          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 2835
        } else if (valIsUndef) {                                                                                       // 2836
          setLow = isReflexive && (retHighest || isDef);                                                               // 2837
        } else if (computed == null) {                                                                                 // 2838
          setLow = false;                                                                                              // 2839
        } else {                                                                                                       // 2840
          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 2841
        }                                                                                                              // 2842
        if (setLow) {                                                                                                  // 2843
          low = mid + 1;                                                                                               // 2844
        } else {                                                                                                       // 2845
          high = mid;                                                                                                  // 2846
        }                                                                                                              // 2847
      }                                                                                                                // 2848
      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 2849
    }                                                                                                                  // 2850
                                                                                                                       // 2851
    /**                                                                                                                // 2852
     * A specialized version of `baseCallback` which only supports `this` binding                                      // 2853
     * and specifying the number of arguments to provide to `func`.                                                    // 2854
     *                                                                                                                 // 2855
     * @private                                                                                                        // 2856
     * @param {Function} func The function to bind.                                                                    // 2857
     * @param {*} thisArg The `this` binding of `func`.                                                                // 2858
     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 2859
     * @returns {Function} Returns the callback.                                                                       // 2860
     */                                                                                                                // 2861
    function bindCallback(func, thisArg, argCount) {                                                                   // 2862
      if (typeof func != 'function') {                                                                                 // 2863
        return identity;                                                                                               // 2864
      }                                                                                                                // 2865
      if (thisArg === undefined) {                                                                                     // 2866
        return func;                                                                                                   // 2867
      }                                                                                                                // 2868
      switch (argCount) {                                                                                              // 2869
        case 1: return function(value) {                                                                               // 2870
          return func.call(thisArg, value);                                                                            // 2871
        };                                                                                                             // 2872
        case 3: return function(value, index, collection) {                                                            // 2873
          return func.call(thisArg, value, index, collection);                                                         // 2874
        };                                                                                                             // 2875
        case 4: return function(accumulator, value, index, collection) {                                               // 2876
          return func.call(thisArg, accumulator, value, index, collection);                                            // 2877
        };                                                                                                             // 2878
        case 5: return function(value, other, key, object, source) {                                                   // 2879
          return func.call(thisArg, value, other, key, object, source);                                                // 2880
        };                                                                                                             // 2881
      }                                                                                                                // 2882
      return function() {                                                                                              // 2883
        return func.apply(thisArg, arguments);                                                                         // 2884
      };                                                                                                               // 2885
    }                                                                                                                  // 2886
                                                                                                                       // 2887
    /**                                                                                                                // 2888
     * Creates a clone of the given array buffer.                                                                      // 2889
     *                                                                                                                 // 2890
     * @private                                                                                                        // 2891
     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 2892
     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 2893
     */                                                                                                                // 2894
    function bufferClone(buffer) {                                                                                     // 2895
      var result = new ArrayBuffer(buffer.byteLength),                                                                 // 2896
          view = new Uint8Array(result);                                                                               // 2897
                                                                                                                       // 2898
      view.set(new Uint8Array(buffer));                                                                                // 2899
      return result;                                                                                                   // 2900
    }                                                                                                                  // 2901
                                                                                                                       // 2902
    /**                                                                                                                // 2903
     * Creates an array that is the composition of partially applied arguments,                                        // 2904
     * placeholders, and provided arguments into a single array of arguments.                                          // 2905
     *                                                                                                                 // 2906
     * @private                                                                                                        // 2907
     * @param {Array|Object} args The provided arguments.                                                              // 2908
     * @param {Array} partials The arguments to prepend to those provided.                                             // 2909
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 2910
     * @returns {Array} Returns the new array of composed arguments.                                                   // 2911
     */                                                                                                                // 2912
    function composeArgs(args, partials, holders) {                                                                    // 2913
      var holdersLength = holders.length,                                                                              // 2914
          argsIndex = -1,                                                                                              // 2915
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 2916
          leftIndex = -1,                                                                                              // 2917
          leftLength = partials.length,                                                                                // 2918
          result = Array(leftLength + argsLength);                                                                     // 2919
                                                                                                                       // 2920
      while (++leftIndex < leftLength) {                                                                               // 2921
        result[leftIndex] = partials[leftIndex];                                                                       // 2922
      }                                                                                                                // 2923
      while (++argsIndex < holdersLength) {                                                                            // 2924
        result[holders[argsIndex]] = args[argsIndex];                                                                  // 2925
      }                                                                                                                // 2926
      while (argsLength--) {                                                                                           // 2927
        result[leftIndex++] = args[argsIndex++];                                                                       // 2928
      }                                                                                                                // 2929
      return result;                                                                                                   // 2930
    }                                                                                                                  // 2931
                                                                                                                       // 2932
    /**                                                                                                                // 2933
     * This function is like `composeArgs` except that the arguments composition                                       // 2934
     * is tailored for `_.partialRight`.                                                                               // 2935
     *                                                                                                                 // 2936
     * @private                                                                                                        // 2937
     * @param {Array|Object} args The provided arguments.                                                              // 2938
     * @param {Array} partials The arguments to append to those provided.                                              // 2939
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 2940
     * @returns {Array} Returns the new array of composed arguments.                                                   // 2941
     */                                                                                                                // 2942
    function composeArgsRight(args, partials, holders) {                                                               // 2943
      var holdersIndex = -1,                                                                                           // 2944
          holdersLength = holders.length,                                                                              // 2945
          argsIndex = -1,                                                                                              // 2946
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 2947
          rightIndex = -1,                                                                                             // 2948
          rightLength = partials.length,                                                                               // 2949
          result = Array(argsLength + rightLength);                                                                    // 2950
                                                                                                                       // 2951
      while (++argsIndex < argsLength) {                                                                               // 2952
        result[argsIndex] = args[argsIndex];                                                                           // 2953
      }                                                                                                                // 2954
      var offset = argsIndex;                                                                                          // 2955
      while (++rightIndex < rightLength) {                                                                             // 2956
        result[offset + rightIndex] = partials[rightIndex];                                                            // 2957
      }                                                                                                                // 2958
      while (++holdersIndex < holdersLength) {                                                                         // 2959
        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 2960
      }                                                                                                                // 2961
      return result;                                                                                                   // 2962
    }                                                                                                                  // 2963
                                                                                                                       // 2964
    /**                                                                                                                // 2965
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.                                     // 2966
     *                                                                                                                 // 2967
     * @private                                                                                                        // 2968
     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 2969
     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 2970
     * @returns {Function} Returns the new aggregator function.                                                        // 2971
     */                                                                                                                // 2972
    function createAggregator(setter, initializer) {                                                                   // 2973
      return function(collection, iteratee, thisArg) {                                                                 // 2974
        var result = initializer ? initializer() : {};                                                                 // 2975
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 2976
                                                                                                                       // 2977
        if (isArray(collection)) {                                                                                     // 2978
          var index = -1,                                                                                              // 2979
              length = collection.length;                                                                              // 2980
                                                                                                                       // 2981
          while (++index < length) {                                                                                   // 2982
            var value = collection[index];                                                                             // 2983
            setter(result, value, iteratee(value, index, collection), collection);                                     // 2984
          }                                                                                                            // 2985
        } else {                                                                                                       // 2986
          baseEach(collection, function(value, key, collection) {                                                      // 2987
            setter(result, value, iteratee(value, key, collection), collection);                                       // 2988
          });                                                                                                          // 2989
        }                                                                                                              // 2990
        return result;                                                                                                 // 2991
      };                                                                                                               // 2992
    }                                                                                                                  // 2993
                                                                                                                       // 2994
    /**                                                                                                                // 2995
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.                                                      // 2996
     *                                                                                                                 // 2997
     * @private                                                                                                        // 2998
     * @param {Function} assigner The function to assign values.                                                       // 2999
     * @returns {Function} Returns the new assigner function.                                                          // 3000
     */                                                                                                                // 3001
    function createAssigner(assigner) {                                                                                // 3002
      return restParam(function(object, sources) {                                                                     // 3003
        var index = -1,                                                                                                // 3004
            length = object == null ? 0 : sources.length,                                                              // 3005
            customizer = length > 2 ? sources[length - 2] : undefined,                                                 // 3006
            guard = length > 2 ? sources[2] : undefined,                                                               // 3007
            thisArg = length > 1 ? sources[length - 1] : undefined;                                                    // 3008
                                                                                                                       // 3009
        if (typeof customizer == 'function') {                                                                         // 3010
          customizer = bindCallback(customizer, thisArg, 5);                                                           // 3011
          length -= 2;                                                                                                 // 3012
        } else {                                                                                                       // 3013
          customizer = typeof thisArg == 'function' ? thisArg : undefined;                                             // 3014
          length -= (customizer ? 1 : 0);                                                                              // 3015
        }                                                                                                              // 3016
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3017
          customizer = length < 3 ? undefined : customizer;                                                            // 3018
          length = 1;                                                                                                  // 3019
        }                                                                                                              // 3020
        while (++index < length) {                                                                                     // 3021
          var source = sources[index];                                                                                 // 3022
          if (source) {                                                                                                // 3023
            assigner(object, source, customizer);                                                                      // 3024
          }                                                                                                            // 3025
        }                                                                                                              // 3026
        return object;                                                                                                 // 3027
      });                                                                                                              // 3028
    }                                                                                                                  // 3029
                                                                                                                       // 3030
    /**                                                                                                                // 3031
     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3032
     *                                                                                                                 // 3033
     * @private                                                                                                        // 3034
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3035
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3036
     * @returns {Function} Returns the new base function.                                                              // 3037
     */                                                                                                                // 3038
    function createBaseEach(eachFunc, fromRight) {                                                                     // 3039
      return function(collection, iteratee) {                                                                          // 3040
        var length = collection ? getLength(collection) : 0;                                                           // 3041
        if (!isLength(length)) {                                                                                       // 3042
          return eachFunc(collection, iteratee);                                                                       // 3043
        }                                                                                                              // 3044
        var index = fromRight ? length : -1,                                                                           // 3045
            iterable = toObject(collection);                                                                           // 3046
                                                                                                                       // 3047
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3048
          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3049
            break;                                                                                                     // 3050
          }                                                                                                            // 3051
        }                                                                                                              // 3052
        return collection;                                                                                             // 3053
      };                                                                                                               // 3054
    }                                                                                                                  // 3055
                                                                                                                       // 3056
    /**                                                                                                                // 3057
     * Creates a base function for `_.forIn` or `_.forInRight`.                                                        // 3058
     *                                                                                                                 // 3059
     * @private                                                                                                        // 3060
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3061
     * @returns {Function} Returns the new base function.                                                              // 3062
     */                                                                                                                // 3063
    function createBaseFor(fromRight) {                                                                                // 3064
      return function(object, iteratee, keysFunc) {                                                                    // 3065
        var iterable = toObject(object),                                                                               // 3066
            props = keysFunc(object),                                                                                  // 3067
            length = props.length,                                                                                     // 3068
            index = fromRight ? length : -1;                                                                           // 3069
                                                                                                                       // 3070
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3071
          var key = props[index];                                                                                      // 3072
          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3073
            break;                                                                                                     // 3074
          }                                                                                                            // 3075
        }                                                                                                              // 3076
        return object;                                                                                                 // 3077
      };                                                                                                               // 3078
    }                                                                                                                  // 3079
                                                                                                                       // 3080
    /**                                                                                                                // 3081
     * Creates a function that wraps `func` and invokes it with the `this`                                             // 3082
     * binding of `thisArg`.                                                                                           // 3083
     *                                                                                                                 // 3084
     * @private                                                                                                        // 3085
     * @param {Function} func The function to bind.                                                                    // 3086
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3087
     * @returns {Function} Returns the new bound function.                                                             // 3088
     */                                                                                                                // 3089
    function createBindWrapper(func, thisArg) {                                                                        // 3090
      var Ctor = createCtorWrapper(func);                                                                              // 3091
                                                                                                                       // 3092
      function wrapper() {                                                                                             // 3093
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3094
        return fn.apply(thisArg, arguments);                                                                           // 3095
      }                                                                                                                // 3096
      return wrapper;                                                                                                  // 3097
    }                                                                                                                  // 3098
                                                                                                                       // 3099
    /**                                                                                                                // 3100
     * Creates a `Set` cache object to optimize linear searches of large arrays.                                       // 3101
     *                                                                                                                 // 3102
     * @private                                                                                                        // 3103
     * @param {Array} [values] The values to cache.                                                                    // 3104
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.                         // 3105
     */                                                                                                                // 3106
    function createCache(values) {                                                                                     // 3107
      return (nativeCreate && Set) ? new SetCache(values) : null;                                                      // 3108
    }                                                                                                                  // 3109
                                                                                                                       // 3110
    /**                                                                                                                // 3111
     * Creates a function that produces compound words out of the words in a                                           // 3112
     * given string.                                                                                                   // 3113
     *                                                                                                                 // 3114
     * @private                                                                                                        // 3115
     * @param {Function} callback The function to combine each word.                                                   // 3116
     * @returns {Function} Returns the new compounder function.                                                        // 3117
     */                                                                                                                // 3118
    function createCompounder(callback) {                                                                              // 3119
      return function(string) {                                                                                        // 3120
        var index = -1,                                                                                                // 3121
            array = words(deburr(string)),                                                                             // 3122
            length = array.length,                                                                                     // 3123
            result = '';                                                                                               // 3124
                                                                                                                       // 3125
        while (++index < length) {                                                                                     // 3126
          result = callback(result, array[index], index);                                                              // 3127
        }                                                                                                              // 3128
        return result;                                                                                                 // 3129
      };                                                                                                               // 3130
    }                                                                                                                  // 3131
                                                                                                                       // 3132
    /**                                                                                                                // 3133
     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3134
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3135
     *                                                                                                                 // 3136
     * @private                                                                                                        // 3137
     * @param {Function} Ctor The constructor to wrap.                                                                 // 3138
     * @returns {Function} Returns the new wrapped function.                                                           // 3139
     */                                                                                                                // 3140
    function createCtorWrapper(Ctor) {                                                                                 // 3141
      return function() {                                                                                              // 3142
        // Use a `switch` statement to work with class constructors.                                                   // 3143
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.                                                                                           // 3145
        var args = arguments;                                                                                          // 3146
        switch (args.length) {                                                                                         // 3147
          case 0: return new Ctor;                                                                                     // 3148
          case 1: return new Ctor(args[0]);                                                                            // 3149
          case 2: return new Ctor(args[0], args[1]);                                                                   // 3150
          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 3151
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 3152
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 3153
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 3154
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 3155
        }                                                                                                              // 3156
        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 3157
            result = Ctor.apply(thisBinding, args);                                                                    // 3158
                                                                                                                       // 3159
        // Mimic the constructor's `return` behavior.                                                                  // 3160
        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 3161
        return isObject(result) ? result : thisBinding;                                                                // 3162
      };                                                                                                               // 3163
    }                                                                                                                  // 3164
                                                                                                                       // 3165
    /**                                                                                                                // 3166
     * Creates a `_.curry` or `_.curryRight` function.                                                                 // 3167
     *                                                                                                                 // 3168
     * @private                                                                                                        // 3169
     * @param {boolean} flag The curry bit flag.                                                                       // 3170
     * @returns {Function} Returns the new curry function.                                                             // 3171
     */                                                                                                                // 3172
    function createCurry(flag) {                                                                                       // 3173
      function curryFunc(func, arity, guard) {                                                                         // 3174
        if (guard && isIterateeCall(func, arity, guard)) {                                                             // 3175
          arity = undefined;                                                                                           // 3176
        }                                                                                                              // 3177
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);          // 3178
        result.placeholder = curryFunc.placeholder;                                                                    // 3179
        return result;                                                                                                 // 3180
      }                                                                                                                // 3181
      return curryFunc;                                                                                                // 3182
    }                                                                                                                  // 3183
                                                                                                                       // 3184
    /**                                                                                                                // 3185
     * Creates a `_.defaults` or `_.defaultsDeep` function.                                                            // 3186
     *                                                                                                                 // 3187
     * @private                                                                                                        // 3188
     * @param {Function} assigner The function to assign values.                                                       // 3189
     * @param {Function} customizer The function to customize assigned values.                                         // 3190
     * @returns {Function} Returns the new defaults function.                                                          // 3191
     */                                                                                                                // 3192
    function createDefaults(assigner, customizer) {                                                                    // 3193
      return restParam(function(args) {                                                                                // 3194
        var object = args[0];                                                                                          // 3195
        if (object == null) {                                                                                          // 3196
          return object;                                                                                               // 3197
        }                                                                                                              // 3198
        args.push(customizer);                                                                                         // 3199
        return assigner.apply(undefined, args);                                                                        // 3200
      });                                                                                                              // 3201
    }                                                                                                                  // 3202
                                                                                                                       // 3203
    /**                                                                                                                // 3204
     * Creates a `_.max` or `_.min` function.                                                                          // 3205
     *                                                                                                                 // 3206
     * @private                                                                                                        // 3207
     * @param {Function} comparator The function used to compare values.                                               // 3208
     * @param {*} exValue The initial extremum value.                                                                  // 3209
     * @returns {Function} Returns the new extremum function.                                                          // 3210
     */                                                                                                                // 3211
    function createExtremum(comparator, exValue) {                                                                     // 3212
      return function(collection, iteratee, thisArg) {                                                                 // 3213
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                // 3214
          iteratee = undefined;                                                                                        // 3215
        }                                                                                                              // 3216
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3217
        if (iteratee.length == 1) {                                                                                    // 3218
          collection = isArray(collection) ? collection : toIterable(collection);                                      // 3219
          var result = arrayExtremum(collection, iteratee, comparator, exValue);                                       // 3220
          if (!(collection.length && result === exValue)) {                                                            // 3221
            return result;                                                                                             // 3222
          }                                                                                                            // 3223
        }                                                                                                              // 3224
        return baseExtremum(collection, iteratee, comparator, exValue);                                                // 3225
      };                                                                                                               // 3226
    }                                                                                                                  // 3227
                                                                                                                       // 3228
    /**                                                                                                                // 3229
     * Creates a `_.find` or `_.findLast` function.                                                                    // 3230
     *                                                                                                                 // 3231
     * @private                                                                                                        // 3232
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3233
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3234
     * @returns {Function} Returns the new find function.                                                              // 3235
     */                                                                                                                // 3236
    function createFind(eachFunc, fromRight) {                                                                         // 3237
      return function(collection, predicate, thisArg) {                                                                // 3238
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3239
        if (isArray(collection)) {                                                                                     // 3240
          var index = baseFindIndex(collection, predicate, fromRight);                                                 // 3241
          return index > -1 ? collection[index] : undefined;                                                           // 3242
        }                                                                                                              // 3243
        return baseFind(collection, predicate, eachFunc);                                                              // 3244
      };                                                                                                               // 3245
    }                                                                                                                  // 3246
                                                                                                                       // 3247
    /**                                                                                                                // 3248
     * Creates a `_.findIndex` or `_.findLastIndex` function.                                                          // 3249
     *                                                                                                                 // 3250
     * @private                                                                                                        // 3251
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3252
     * @returns {Function} Returns the new find function.                                                              // 3253
     */                                                                                                                // 3254
    function createFindIndex(fromRight) {                                                                              // 3255
      return function(array, predicate, thisArg) {                                                                     // 3256
        if (!(array && array.length)) {                                                                                // 3257
          return -1;                                                                                                   // 3258
        }                                                                                                              // 3259
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3260
        return baseFindIndex(array, predicate, fromRight);                                                             // 3261
      };                                                                                                               // 3262
    }                                                                                                                  // 3263
                                                                                                                       // 3264
    /**                                                                                                                // 3265
     * Creates a `_.findKey` or `_.findLastKey` function.                                                              // 3266
     *                                                                                                                 // 3267
     * @private                                                                                                        // 3268
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3269
     * @returns {Function} Returns the new find function.                                                              // 3270
     */                                                                                                                // 3271
    function createFindKey(objectFunc) {                                                                               // 3272
      return function(object, predicate, thisArg) {                                                                    // 3273
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3274
        return baseFind(object, predicate, objectFunc, true);                                                          // 3275
      };                                                                                                               // 3276
    }                                                                                                                  // 3277
                                                                                                                       // 3278
    /**                                                                                                                // 3279
     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 3280
     *                                                                                                                 // 3281
     * @private                                                                                                        // 3282
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3283
     * @returns {Function} Returns the new flow function.                                                              // 3284
     */                                                                                                                // 3285
    function createFlow(fromRight) {                                                                                   // 3286
      return function() {                                                                                              // 3287
        var wrapper,                                                                                                   // 3288
            length = arguments.length,                                                                                 // 3289
            index = fromRight ? length : -1,                                                                           // 3290
            leftIndex = 0,                                                                                             // 3291
            funcs = Array(length);                                                                                     // 3292
                                                                                                                       // 3293
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3294
          var func = funcs[leftIndex++] = arguments[index];                                                            // 3295
          if (typeof func != 'function') {                                                                             // 3296
            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 3297
          }                                                                                                            // 3298
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {                            // 3299
            wrapper = new LodashWrapper([], true);                                                                     // 3300
          }                                                                                                            // 3301
        }                                                                                                              // 3302
        index = wrapper ? -1 : length;                                                                                 // 3303
        while (++index < length) {                                                                                     // 3304
          func = funcs[index];                                                                                         // 3305
                                                                                                                       // 3306
          var funcName = getFuncName(func),                                                                            // 3307
              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 3308
                                                                                                                       // 3309
          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 3311
          } else {                                                                                                     // 3312
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 3313
          }                                                                                                            // 3314
        }                                                                                                              // 3315
        return function() {                                                                                            // 3316
          var args = arguments,                                                                                        // 3317
              value = args[0];                                                                                         // 3318
                                                                                                                       // 3319
          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 3320
            return wrapper.plant(value).value();                                                                       // 3321
          }                                                                                                            // 3322
          var index = 0,                                                                                               // 3323
              result = length ? funcs[index].apply(this, args) : value;                                                // 3324
                                                                                                                       // 3325
          while (++index < length) {                                                                                   // 3326
            result = funcs[index].call(this, result);                                                                  // 3327
          }                                                                                                            // 3328
          return result;                                                                                               // 3329
        };                                                                                                             // 3330
      };                                                                                                               // 3331
    }                                                                                                                  // 3332
                                                                                                                       // 3333
    /**                                                                                                                // 3334
     * Creates a function for `_.forEach` or `_.forEachRight`.                                                         // 3335
     *                                                                                                                 // 3336
     * @private                                                                                                        // 3337
     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3338
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3339
     * @returns {Function} Returns the new each function.                                                              // 3340
     */                                                                                                                // 3341
    function createForEach(arrayFunc, eachFunc) {                                                                      // 3342
      return function(collection, iteratee, thisArg) {                                                                 // 3343
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3344
          ? arrayFunc(collection, iteratee)                                                                            // 3345
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));                                                  // 3346
      };                                                                                                               // 3347
    }                                                                                                                  // 3348
                                                                                                                       // 3349
    /**                                                                                                                // 3350
     * Creates a function for `_.forIn` or `_.forInRight`.                                                             // 3351
     *                                                                                                                 // 3352
     * @private                                                                                                        // 3353
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3354
     * @returns {Function} Returns the new each function.                                                              // 3355
     */                                                                                                                // 3356
    function createForIn(objectFunc) {                                                                                 // 3357
      return function(object, iteratee, thisArg) {                                                                     // 3358
        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3359
          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3360
        }                                                                                                              // 3361
        return objectFunc(object, iteratee, keysIn);                                                                   // 3362
      };                                                                                                               // 3363
    }                                                                                                                  // 3364
                                                                                                                       // 3365
    /**                                                                                                                // 3366
     * Creates a function for `_.forOwn` or `_.forOwnRight`.                                                           // 3367
     *                                                                                                                 // 3368
     * @private                                                                                                        // 3369
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3370
     * @returns {Function} Returns the new each function.                                                              // 3371
     */                                                                                                                // 3372
    function createForOwn(objectFunc) {                                                                                // 3373
      return function(object, iteratee, thisArg) {                                                                     // 3374
        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3375
          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3376
        }                                                                                                              // 3377
        return objectFunc(object, iteratee);                                                                           // 3378
      };                                                                                                               // 3379
    }                                                                                                                  // 3380
                                                                                                                       // 3381
    /**                                                                                                                // 3382
     * Creates a function for `_.mapKeys` or `_.mapValues`.                                                            // 3383
     *                                                                                                                 // 3384
     * @private                                                                                                        // 3385
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.                                            // 3386
     * @returns {Function} Returns the new map function.                                                               // 3387
     */                                                                                                                // 3388
    function createObjectMapper(isMapKeys) {                                                                           // 3389
      return function(object, iteratee, thisArg) {                                                                     // 3390
        var result = {};                                                                                               // 3391
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3392
                                                                                                                       // 3393
        baseForOwn(object, function(value, key, object) {                                                              // 3394
          var mapped = iteratee(value, key, object);                                                                   // 3395
          key = isMapKeys ? mapped : key;                                                                              // 3396
          value = isMapKeys ? value : mapped;                                                                          // 3397
          result[key] = value;                                                                                         // 3398
        });                                                                                                            // 3399
        return result;                                                                                                 // 3400
      };                                                                                                               // 3401
    }                                                                                                                  // 3402
                                                                                                                       // 3403
    /**                                                                                                                // 3404
     * Creates a function for `_.padLeft` or `_.padRight`.                                                             // 3405
     *                                                                                                                 // 3406
     * @private                                                                                                        // 3407
     * @param {boolean} [fromRight] Specify padding from the right.                                                    // 3408
     * @returns {Function} Returns the new pad function.                                                               // 3409
     */                                                                                                                // 3410
    function createPadDir(fromRight) {                                                                                 // 3411
      return function(string, length, chars) {                                                                         // 3412
        string = baseToString(string);                                                                                 // 3413
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);           // 3414
      };                                                                                                               // 3415
    }                                                                                                                  // 3416
                                                                                                                       // 3417
    /**                                                                                                                // 3418
     * Creates a `_.partial` or `_.partialRight` function.                                                             // 3419
     *                                                                                                                 // 3420
     * @private                                                                                                        // 3421
     * @param {boolean} flag The partial bit flag.                                                                     // 3422
     * @returns {Function} Returns the new partial function.                                                           // 3423
     */                                                                                                                // 3424
    function createPartial(flag) {                                                                                     // 3425
      var partialFunc = restParam(function(func, partials) {                                                           // 3426
        var holders = replaceHolders(partials, partialFunc.placeholder);                                               // 3427
        return createWrapper(func, flag, undefined, partials, holders);                                                // 3428
      });                                                                                                              // 3429
      return partialFunc;                                                                                              // 3430
    }                                                                                                                  // 3431
                                                                                                                       // 3432
    /**                                                                                                                // 3433
     * Creates a function for `_.reduce` or `_.reduceRight`.                                                           // 3434
     *                                                                                                                 // 3435
     * @private                                                                                                        // 3436
     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3437
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3438
     * @returns {Function} Returns the new each function.                                                              // 3439
     */                                                                                                                // 3440
    function createReduce(arrayFunc, eachFunc) {                                                                       // 3441
      return function(collection, iteratee, accumulator, thisArg) {                                                    // 3442
        var initFromArray = arguments.length < 3;                                                                      // 3443
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3444
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)                                                // 3445
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);           // 3446
      };                                                                                                               // 3447
    }                                                                                                                  // 3448
                                                                                                                       // 3449
    /**                                                                                                                // 3450
     * Creates a function that wraps `func` and invokes it with optional `this`                                        // 3451
     * binding of, partial application, and currying.                                                                  // 3452
     *                                                                                                                 // 3453
     * @private                                                                                                        // 3454
     * @param {Function|string} func The function or method name to reference.                                         // 3455
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3456
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3457
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 3458
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3459
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 3460
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 3461
     * @param {Array} [argPos] The argument positions of the new function.                                             // 3462
     * @param {number} [ary] The arity cap of `func`.                                                                  // 3463
     * @param {number} [arity] The arity of `func`.                                                                    // 3464
     * @returns {Function} Returns the new wrapped function.                                                           // 3465
     */                                                                                                                // 3466
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,                                                                                  // 3468
          isBind = bitmask & BIND_FLAG,                                                                                // 3469
          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 3470
          isCurry = bitmask & CURRY_FLAG,                                                                              // 3471
          isCurryBound = bitmask & CURRY_BOUND_FLAG,                                                                   // 3472
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 3473
          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 3474
                                                                                                                       // 3475
      function wrapper() {                                                                                             // 3476
        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3477
        // converting it to an array before providing it to other functions.                                           // 3478
        var length = arguments.length,                                                                                 // 3479
            index = length,                                                                                            // 3480
            args = Array(length);                                                                                      // 3481
                                                                                                                       // 3482
        while (index--) {                                                                                              // 3483
          args[index] = arguments[index];                                                                              // 3484
        }                                                                                                              // 3485
        if (partials) {                                                                                                // 3486
          args = composeArgs(args, partials, holders);                                                                 // 3487
        }                                                                                                              // 3488
        if (partialsRight) {                                                                                           // 3489
          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 3490
        }                                                                                                              // 3491
        if (isCurry || isCurryRight) {                                                                                 // 3492
          var placeholder = wrapper.placeholder,                                                                       // 3493
              argsHolders = replaceHolders(args, placeholder);                                                         // 3494
                                                                                                                       // 3495
          length -= argsHolders.length;                                                                                // 3496
          if (length < arity) {                                                                                        // 3497
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,                                                    // 3498
                newArity = nativeMax(arity - length, 0),                                                               // 3499
                newsHolders = isCurry ? argsHolders : undefined,                                                       // 3500
                newHoldersRight = isCurry ? undefined : argsHolders,                                                   // 3501
                newPartials = isCurry ? args : undefined,                                                              // 3502
                newPartialsRight = isCurry ? undefined : args;                                                         // 3503
                                                                                                                       // 3504
            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                  // 3505
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                 // 3506
                                                                                                                       // 3507
            if (!isCurryBound) {                                                                                       // 3508
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                 // 3509
            }                                                                                                          // 3510
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);                                                // 3512
                                                                                                                       // 3513
            if (isLaziable(func)) {                                                                                    // 3514
              setData(result, newData);                                                                                // 3515
            }                                                                                                          // 3516
            result.placeholder = placeholder;                                                                          // 3517
            return result;                                                                                             // 3518
          }                                                                                                            // 3519
        }                                                                                                              // 3520
        var thisBinding = isBind ? thisArg : this,                                                                     // 3521
            fn = isBindKey ? thisBinding[func] : func;                                                                 // 3522
                                                                                                                       // 3523
        if (argPos) {                                                                                                  // 3524
          args = reorder(args, argPos);                                                                                // 3525
        }                                                                                                              // 3526
        if (isAry && ary < args.length) {                                                                              // 3527
          args.length = ary;                                                                                           // 3528
        }                                                                                                              // 3529
        if (this && this !== root && this instanceof wrapper) {                                                        // 3530
          fn = Ctor || createCtorWrapper(func);                                                                        // 3531
        }                                                                                                              // 3532
        return fn.apply(thisBinding, args);                                                                            // 3533
      }                                                                                                                // 3534
      return wrapper;                                                                                                  // 3535
    }                                                                                                                  // 3536
                                                                                                                       // 3537
    /**                                                                                                                // 3538
     * Creates the padding required for `string` based on the given `length`.                                          // 3539
     * The `chars` string is truncated if the number of characters exceeds `length`.                                   // 3540
     *                                                                                                                 // 3541
     * @private                                                                                                        // 3542
     * @param {string} string The string to create padding for.                                                        // 3543
     * @param {number} [length=0] The padding length.                                                                  // 3544
     * @param {string} [chars=' '] The string used as padding.                                                         // 3545
     * @returns {string} Returns the pad for `string`.                                                                 // 3546
     */                                                                                                                // 3547
    function createPadding(string, length, chars) {                                                                    // 3548
      var strLength = string.length;                                                                                   // 3549
      length = +length;                                                                                                // 3550
                                                                                                                       // 3551
      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 3552
        return '';                                                                                                     // 3553
      }                                                                                                                // 3554
      var padLength = length - strLength;                                                                              // 3555
      chars = chars == null ? ' ' : (chars + '');                                                                      // 3556
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);                                  // 3557
    }                                                                                                                  // 3558
                                                                                                                       // 3559
    /**                                                                                                                // 3560
     * Creates a function that wraps `func` and invokes it with the optional `this`                                    // 3561
     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 3562
     * the wrapper.                                                                                                    // 3563
     *                                                                                                                 // 3564
     * @private                                                                                                        // 3565
     * @param {Function} func The function to partially apply arguments to.                                            // 3566
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3567
     * @param {*} thisArg The `this` binding of `func`.                                                                // 3568
     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 3569
     * @returns {Function} Returns the new bound function.                                                             // 3570
     */                                                                                                                // 3571
    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 3572
      var isBind = bitmask & BIND_FLAG,                                                                                // 3573
          Ctor = createCtorWrapper(func);                                                                              // 3574
                                                                                                                       // 3575
      function wrapper() {                                                                                             // 3576
        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3577
        // converting it to an array before providing it `func`.                                                       // 3578
        var argsIndex = -1,                                                                                            // 3579
            argsLength = arguments.length,                                                                             // 3580
            leftIndex = -1,                                                                                            // 3581
            leftLength = partials.length,                                                                              // 3582
            args = Array(leftLength + argsLength);                                                                     // 3583
                                                                                                                       // 3584
        while (++leftIndex < leftLength) {                                                                             // 3585
          args[leftIndex] = partials[leftIndex];                                                                       // 3586
        }                                                                                                              // 3587
        while (argsLength--) {                                                                                         // 3588
          args[leftIndex++] = arguments[++argsIndex];                                                                  // 3589
        }                                                                                                              // 3590
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3591
        return fn.apply(isBind ? thisArg : this, args);                                                                // 3592
      }                                                                                                                // 3593
      return wrapper;                                                                                                  // 3594
    }                                                                                                                  // 3595
                                                                                                                       // 3596
    /**                                                                                                                // 3597
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.                                                           // 3598
     *                                                                                                                 // 3599
     * @private                                                                                                        // 3600
     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 3601
     * @returns {Function} Returns the new round function.                                                             // 3602
     */                                                                                                                // 3603
    function createRound(methodName) {                                                                                 // 3604
      var func = Math[methodName];                                                                                     // 3605
      return function(number, precision) {                                                                             // 3606
        precision = precision === undefined ? 0 : (+precision || 0);                                                   // 3607
        if (precision) {                                                                                               // 3608
          precision = pow(10, precision);                                                                              // 3609
          return func(number * precision) / precision;                                                                 // 3610
        }                                                                                                              // 3611
        return func(number);                                                                                           // 3612
      };                                                                                                               // 3613
    }                                                                                                                  // 3614
                                                                                                                       // 3615
    /**                                                                                                                // 3616
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.                                                      // 3617
     *                                                                                                                 // 3618
     * @private                                                                                                        // 3619
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3620
     * @returns {Function} Returns the new index function.                                                             // 3621
     */                                                                                                                // 3622
    function createSortedIndex(retHighest) {                                                                           // 3623
      return function(array, value, iteratee, thisArg) {                                                               // 3624
        var callback = getCallback(iteratee);                                                                          // 3625
        return (iteratee == null && callback === baseCallback)                                                         // 3626
          ? binaryIndex(array, value, retHighest)                                                                      // 3627
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);                                   // 3628
      };                                                                                                               // 3629
    }                                                                                                                  // 3630
                                                                                                                       // 3631
    /**                                                                                                                // 3632
     * Creates a function that either curries or invokes `func` with optional                                          // 3633
     * `this` binding and partially applied arguments.                                                                 // 3634
     *                                                                                                                 // 3635
     * @private                                                                                                        // 3636
     * @param {Function|string} func The function or method name to reference.                                         // 3637
     * @param {number} bitmask The bitmask of flags.                                                                   // 3638
     *  The bitmask may be composed of the following flags:                                                            // 3639
     *     1 - `_.bind`                                                                                                // 3640
     *     2 - `_.bindKey`                                                                                             // 3641
     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 3642
     *     8 - `_.curry`                                                                                               // 3643
     *    16 - `_.curryRight`                                                                                          // 3644
     *    32 - `_.partial`                                                                                             // 3645
     *    64 - `_.partialRight`                                                                                        // 3646
     *   128 - `_.rearg`                                                                                               // 3647
     *   256 - `_.ary`                                                                                                 // 3648
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3649
     * @param {Array} [partials] The arguments to be partially applied.                                                // 3650
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3651
     * @param {Array} [argPos] The argument positions of the new function.                                             // 3652
     * @param {number} [ary] The arity cap of `func`.                                                                  // 3653
     * @param {number} [arity] The arity of `func`.                                                                    // 3654
     * @returns {Function} Returns the new wrapped function.                                                           // 3655
     */                                                                                                                // 3656
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 3657
      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 3658
      if (!isBindKey && typeof func != 'function') {                                                                   // 3659
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 3660
      }                                                                                                                // 3661
      var length = partials ? partials.length : 0;                                                                     // 3662
      if (!length) {                                                                                                   // 3663
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 3664
        partials = holders = undefined;                                                                                // 3665
      }                                                                                                                // 3666
      length -= (holders ? holders.length : 0);                                                                        // 3667
      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 3668
        var partialsRight = partials,                                                                                  // 3669
            holdersRight = holders;                                                                                    // 3670
                                                                                                                       // 3671
        partials = holders = undefined;                                                                                // 3672
      }                                                                                                                // 3673
      var data = isBindKey ? undefined : getData(func),                                                                // 3674
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 3675
                                                                                                                       // 3676
      if (data) {                                                                                                      // 3677
        mergeData(newData, data);                                                                                      // 3678
        bitmask = newData[1];                                                                                          // 3679
        arity = newData[9];                                                                                            // 3680
      }                                                                                                                // 3681
      newData[9] = arity == null                                                                                       // 3682
        ? (isBindKey ? 0 : func.length)                                                                                // 3683
        : (nativeMax(arity - length, 0) || 0);                                                                         // 3684
                                                                                                                       // 3685
      if (bitmask == BIND_FLAG) {                                                                                      // 3686
        var result = createBindWrapper(newData[0], newData[2]);                                                        // 3687
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {           // 3688
        result = createPartialWrapper.apply(undefined, newData);                                                       // 3689
      } else {                                                                                                         // 3690
        result = createHybridWrapper.apply(undefined, newData);                                                        // 3691
      }                                                                                                                // 3692
      var setter = data ? baseSetData : setData;                                                                       // 3693
      return setter(result, newData);                                                                                  // 3694
    }                                                                                                                  // 3695
                                                                                                                       // 3696
    /**                                                                                                                // 3697
     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 3698
     * partial deep comparisons.                                                                                       // 3699
     *                                                                                                                 // 3700
     * @private                                                                                                        // 3701
     * @param {Array} array The array to compare.                                                                      // 3702
     * @param {Array} other The other array to compare.                                                                // 3703
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3704
     * @param {Function} [customizer] The function to customize comparing arrays.                                      // 3705
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3706
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3707
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3708
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 3709
     */                                                                                                                // 3710
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {                               // 3711
      var index = -1,                                                                                                  // 3712
          arrLength = array.length,                                                                                    // 3713
          othLength = other.length;                                                                                    // 3714
                                                                                                                       // 3715
      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {                                             // 3716
        return false;                                                                                                  // 3717
      }                                                                                                                // 3718
      // Ignore non-index properties.                                                                                  // 3719
      while (++index < arrLength) {                                                                                    // 3720
        var arrValue = array[index],                                                                                   // 3721
            othValue = other[index],                                                                                   // 3722
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
                                                                                                                       // 3724
        if (result !== undefined) {                                                                                    // 3725
          if (result) {                                                                                                // 3726
            continue;                                                                                                  // 3727
          }                                                                                                            // 3728
          return false;                                                                                                // 3729
        }                                                                                                              // 3730
        // Recursively compare arrays (susceptible to call stack limits).                                              // 3731
        if (isLoose) {                                                                                                 // 3732
          if (!arraySome(other, function(othValue) {                                                                   // 3733
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);    // 3734
              })) {                                                                                                    // 3735
            return false;                                                                                              // 3736
          }                                                                                                            // 3737
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {   // 3738
          return false;                                                                                                // 3739
        }                                                                                                              // 3740
      }                                                                                                                // 3741
      return true;                                                                                                     // 3742
    }                                                                                                                  // 3743
                                                                                                                       // 3744
    /**                                                                                                                // 3745
     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 3746
     * the same `toStringTag`.                                                                                         // 3747
     *                                                                                                                 // 3748
     * **Note:** This function only supports comparing values with tags of                                             // 3749
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 3750
     *                                                                                                                 // 3751
     * @private                                                                                                        // 3752
     * @param {Object} object The object to compare.                                                                   // 3753
     * @param {Object} other The other object to compare.                                                              // 3754
     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 3755
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3756
     */                                                                                                                // 3757
    function equalByTag(object, other, tag) {                                                                          // 3758
      switch (tag) {                                                                                                   // 3759
        case boolTag:                                                                                                  // 3760
        case dateTag:                                                                                                  // 3761
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 3762
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 3763
          return +object == +other;                                                                                    // 3764
                                                                                                                       // 3765
        case errorTag:                                                                                                 // 3766
          return object.name == other.name && object.message == other.message;                                         // 3767
                                                                                                                       // 3768
        case numberTag:                                                                                                // 3769
          // Treat `NaN` vs. `NaN` as equal.                                                                           // 3770
          return (object != +object)                                                                                   // 3771
            ? other != +other                                                                                          // 3772
            : object == +other;                                                                                        // 3773
                                                                                                                       // 3774
        case regexpTag:                                                                                                // 3775
        case stringTag:                                                                                                // 3776
          // Coerce regexes to strings and treat strings primitives and string                                         // 3777
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 3778
          return object == (other + '');                                                                               // 3779
      }                                                                                                                // 3780
      return false;                                                                                                    // 3781
    }                                                                                                                  // 3782
                                                                                                                       // 3783
    /**                                                                                                                // 3784
     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 3785
     * partial deep comparisons.                                                                                       // 3786
     *                                                                                                                 // 3787
     * @private                                                                                                        // 3788
     * @param {Object} object The object to compare.                                                                   // 3789
     * @param {Object} other The other object to compare.                                                              // 3790
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3791
     * @param {Function} [customizer] The function to customize comparing values.                                      // 3792
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3793
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3794
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3795
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3796
     */                                                                                                                // 3797
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                             // 3798
      var objProps = keys(object),                                                                                     // 3799
          objLength = objProps.length,                                                                                 // 3800
          othProps = keys(other),                                                                                      // 3801
          othLength = othProps.length;                                                                                 // 3802
                                                                                                                       // 3803
      if (objLength != othLength && !isLoose) {                                                                        // 3804
        return false;                                                                                                  // 3805
      }                                                                                                                // 3806
      var index = objLength;                                                                                           // 3807
      while (index--) {                                                                                                // 3808
        var key = objProps[index];                                                                                     // 3809
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {                                             // 3810
          return false;                                                                                                // 3811
        }                                                                                                              // 3812
      }                                                                                                                // 3813
      var skipCtor = isLoose;                                                                                          // 3814
      while (++index < objLength) {                                                                                    // 3815
        key = objProps[index];                                                                                         // 3816
        var objValue = object[key],                                                                                    // 3817
            othValue = other[key],                                                                                     // 3818
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;
                                                                                                                       // 3820
        // Recursively compare objects (susceptible to call stack limits).                                             // 3821
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {   // 3822
          return false;                                                                                                // 3823
        }                                                                                                              // 3824
        skipCtor || (skipCtor = key == 'constructor');                                                                 // 3825
      }                                                                                                                // 3826
      if (!skipCtor) {                                                                                                 // 3827
        var objCtor = object.constructor,                                                                              // 3828
            othCtor = other.constructor;                                                                               // 3829
                                                                                                                       // 3830
        // Non `Object` object instances with different constructors are not equal.                                    // 3831
        if (objCtor != othCtor &&                                                                                      // 3832
            ('constructor' in object && 'constructor' in other) &&                                                     // 3833
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 3834
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 3835
          return false;                                                                                                // 3836
        }                                                                                                              // 3837
      }                                                                                                                // 3838
      return true;                                                                                                     // 3839
    }                                                                                                                  // 3840
                                                                                                                       // 3841
    /**                                                                                                                // 3842
     * Gets the appropriate "callback" function. If the `_.callback` method is                                         // 3843
     * customized this function returns the custom method, otherwise it returns                                        // 3844
     * the `baseCallback` function. If arguments are provided the chosen function                                      // 3845
     * is invoked with them and its result is returned.                                                                // 3846
     *                                                                                                                 // 3847
     * @private                                                                                                        // 3848
     * @returns {Function} Returns the chosen function or its result.                                                  // 3849
     */                                                                                                                // 3850
    function getCallback(func, thisArg, argCount) {                                                                    // 3851
      var result = lodash.callback || callback;                                                                        // 3852
      result = result === callback ? baseCallback : result;                                                            // 3853
      return argCount ? result(func, thisArg, argCount) : result;                                                      // 3854
    }                                                                                                                  // 3855
                                                                                                                       // 3856
    /**                                                                                                                // 3857
     * Gets metadata for `func`.                                                                                       // 3858
     *                                                                                                                 // 3859
     * @private                                                                                                        // 3860
     * @param {Function} func The function to query.                                                                   // 3861
     * @returns {*} Returns the metadata for `func`.                                                                   // 3862
     */                                                                                                                // 3863
    var getData = !metaMap ? noop : function(func) {                                                                   // 3864
      return metaMap.get(func);                                                                                        // 3865
    };                                                                                                                 // 3866
                                                                                                                       // 3867
    /**                                                                                                                // 3868
     * Gets the name of `func`.                                                                                        // 3869
     *                                                                                                                 // 3870
     * @private                                                                                                        // 3871
     * @param {Function} func The function to query.                                                                   // 3872
     * @returns {string} Returns the function name.                                                                    // 3873
     */                                                                                                                // 3874
    function getFuncName(func) {                                                                                       // 3875
      var result = (func.name + ''),                                                                                   // 3876
          array = realNames[result],                                                                                   // 3877
          length = array ? array.length : 0;                                                                           // 3878
                                                                                                                       // 3879
      while (length--) {                                                                                               // 3880
        var data = array[length],                                                                                      // 3881
            otherFunc = data.func;                                                                                     // 3882
        if (otherFunc == null || otherFunc == func) {                                                                  // 3883
          return data.name;                                                                                            // 3884
        }                                                                                                              // 3885
      }                                                                                                                // 3886
      return result;                                                                                                   // 3887
    }                                                                                                                  // 3888
                                                                                                                       // 3889
    /**                                                                                                                // 3890
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is                                           // 3891
     * customized this function returns the custom method, otherwise it returns                                        // 3892
     * the `baseIndexOf` function. If arguments are provided the chosen function                                       // 3893
     * is invoked with them and its result is returned.                                                                // 3894
     *                                                                                                                 // 3895
     * @private                                                                                                        // 3896
     * @returns {Function|number} Returns the chosen function or its result.                                           // 3897
     */                                                                                                                // 3898
    function getIndexOf(collection, target, fromIndex) {                                                               // 3899
      var result = lodash.indexOf || indexOf;                                                                          // 3900
      result = result === indexOf ? baseIndexOf : result;                                                              // 3901
      return collection ? result(collection, target, fromIndex) : result;                                              // 3902
    }                                                                                                                  // 3903
                                                                                                                       // 3904
    /**                                                                                                                // 3905
     * Gets the "length" property value of `object`.                                                                   // 3906
     *                                                                                                                 // 3907
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 3908
     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 3909
     *                                                                                                                 // 3910
     * @private                                                                                                        // 3911
     * @param {Object} object The object to query.                                                                     // 3912
     * @returns {*} Returns the "length" value.                                                                        // 3913
     */                                                                                                                // 3914
    var getLength = baseProperty('length');                                                                            // 3915
                                                                                                                       // 3916
    /**                                                                                                                // 3917
     * Gets the propery names, values, and compare flags of `object`.                                                  // 3918
     *                                                                                                                 // 3919
     * @private                                                                                                        // 3920
     * @param {Object} object The object to query.                                                                     // 3921
     * @returns {Array} Returns the match data of `object`.                                                            // 3922
     */                                                                                                                // 3923
    function getMatchData(object) {                                                                                    // 3924
      var result = pairs(object),                                                                                      // 3925
          length = result.length;                                                                                      // 3926
                                                                                                                       // 3927
      while (length--) {                                                                                               // 3928
        result[length][2] = isStrictComparable(result[length][1]);                                                     // 3929
      }                                                                                                                // 3930
      return result;                                                                                                   // 3931
    }                                                                                                                  // 3932
                                                                                                                       // 3933
    /**                                                                                                                // 3934
     * Gets the native function at `key` of `object`.                                                                  // 3935
     *                                                                                                                 // 3936
     * @private                                                                                                        // 3937
     * @param {Object} object The object to query.                                                                     // 3938
     * @param {string} key The key of the method to get.                                                               // 3939
     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 3940
     */                                                                                                                // 3941
    function getNative(object, key) {                                                                                  // 3942
      var value = object == null ? undefined : object[key];                                                            // 3943
      return isNative(value) ? value : undefined;                                                                      // 3944
    }                                                                                                                  // 3945
                                                                                                                       // 3946
    /**                                                                                                                // 3947
     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 3948
     *                                                                                                                 // 3949
     * @private                                                                                                        // 3950
     * @param {number} start The start of the view.                                                                    // 3951
     * @param {number} end The end of the view.                                                                        // 3952
     * @param {Array} transforms The transformations to apply to the view.                                             // 3953
     * @returns {Object} Returns an object containing the `start` and `end`                                            // 3954
     *  positions of the view.                                                                                         // 3955
     */                                                                                                                // 3956
    function getView(start, end, transforms) {                                                                         // 3957
      var index = -1,                                                                                                  // 3958
          length = transforms.length;                                                                                  // 3959
                                                                                                                       // 3960
      while (++index < length) {                                                                                       // 3961
        var data = transforms[index],                                                                                  // 3962
            size = data.size;                                                                                          // 3963
                                                                                                                       // 3964
        switch (data.type) {                                                                                           // 3965
          case 'drop':      start += size; break;                                                                      // 3966
          case 'dropRight': end -= size; break;                                                                        // 3967
          case 'take':      end = nativeMin(end, start + size); break;                                                 // 3968
          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 3969
        }                                                                                                              // 3970
      }                                                                                                                // 3971
      return { 'start': start, 'end': end };                                                                           // 3972
    }                                                                                                                  // 3973
                                                                                                                       // 3974
    /**                                                                                                                // 3975
     * Initializes an array clone.                                                                                     // 3976
     *                                                                                                                 // 3977
     * @private                                                                                                        // 3978
     * @param {Array} array The array to clone.                                                                        // 3979
     * @returns {Array} Returns the initialized clone.                                                                 // 3980
     */                                                                                                                // 3981
    function initCloneArray(array) {                                                                                   // 3982
      var length = array.length,                                                                                       // 3983
          result = new array.constructor(length);                                                                      // 3984
                                                                                                                       // 3985
      // Add array properties assigned by `RegExp#exec`.                                                               // 3986
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 3987
        result.index = array.index;                                                                                    // 3988
        result.input = array.input;                                                                                    // 3989
      }                                                                                                                // 3990
      return result;                                                                                                   // 3991
    }                                                                                                                  // 3992
                                                                                                                       // 3993
    /**                                                                                                                // 3994
     * Initializes an object clone.                                                                                    // 3995
     *                                                                                                                 // 3996
     * @private                                                                                                        // 3997
     * @param {Object} object The object to clone.                                                                     // 3998
     * @returns {Object} Returns the initialized clone.                                                                // 3999
     */                                                                                                                // 4000
    function initCloneObject(object) {                                                                                 // 4001
      var Ctor = object.constructor;                                                                                   // 4002
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {                                                      // 4003
        Ctor = Object;                                                                                                 // 4004
      }                                                                                                                // 4005
      return new Ctor;                                                                                                 // 4006
    }                                                                                                                  // 4007
                                                                                                                       // 4008
    /**                                                                                                                // 4009
     * Initializes an object clone based on its `toStringTag`.                                                         // 4010
     *                                                                                                                 // 4011
     * **Note:** This function only supports cloning values with tags of                                               // 4012
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4013
     *                                                                                                                 // 4014
     * @private                                                                                                        // 4015
     * @param {Object} object The object to clone.                                                                     // 4016
     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4017
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4018
     * @returns {Object} Returns the initialized clone.                                                                // 4019
     */                                                                                                                // 4020
    function initCloneByTag(object, tag, isDeep) {                                                                     // 4021
      var Ctor = object.constructor;                                                                                   // 4022
      switch (tag) {                                                                                                   // 4023
        case arrayBufferTag:                                                                                           // 4024
          return bufferClone(object);                                                                                  // 4025
                                                                                                                       // 4026
        case boolTag:                                                                                                  // 4027
        case dateTag:                                                                                                  // 4028
          return new Ctor(+object);                                                                                    // 4029
                                                                                                                       // 4030
        case float32Tag: case float64Tag:                                                                              // 4031
        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4032
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4033
          var buffer = object.buffer;                                                                                  // 4034
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);                    // 4035
                                                                                                                       // 4036
        case numberTag:                                                                                                // 4037
        case stringTag:                                                                                                // 4038
          return new Ctor(object);                                                                                     // 4039
                                                                                                                       // 4040
        case regexpTag:                                                                                                // 4041
          var result = new Ctor(object.source, reFlags.exec(object));                                                  // 4042
          result.lastIndex = object.lastIndex;                                                                         // 4043
      }                                                                                                                // 4044
      return result;                                                                                                   // 4045
    }                                                                                                                  // 4046
                                                                                                                       // 4047
    /**                                                                                                                // 4048
     * Invokes the method at `path` on `object`.                                                                       // 4049
     *                                                                                                                 // 4050
     * @private                                                                                                        // 4051
     * @param {Object} object The object to query.                                                                     // 4052
     * @param {Array|string} path The path of the method to invoke.                                                    // 4053
     * @param {Array} args The arguments to invoke the method with.                                                    // 4054
     * @returns {*} Returns the result of the invoked method.                                                          // 4055
     */                                                                                                                // 4056
    function invokePath(object, path, args) {                                                                          // 4057
      if (object != null && !isKey(path, object)) {                                                                    // 4058
        path = toPath(path);                                                                                           // 4059
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 4060
        path = last(path);                                                                                             // 4061
      }                                                                                                                // 4062
      var func = object == null ? object : object[path];                                                               // 4063
      return func == null ? undefined : func.apply(object, args);                                                      // 4064
    }                                                                                                                  // 4065
                                                                                                                       // 4066
    /**                                                                                                                // 4067
     * Checks if `value` is array-like.                                                                                // 4068
     *                                                                                                                 // 4069
     * @private                                                                                                        // 4070
     * @param {*} value The value to check.                                                                            // 4071
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 4072
     */                                                                                                                // 4073
    function isArrayLike(value) {                                                                                      // 4074
      return value != null && isLength(getLength(value));                                                              // 4075
    }                                                                                                                  // 4076
                                                                                                                       // 4077
    /**                                                                                                                // 4078
     * Checks if `value` is a valid array-like index.                                                                  // 4079
     *                                                                                                                 // 4080
     * @private                                                                                                        // 4081
     * @param {*} value The value to check.                                                                            // 4082
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                    // 4083
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                    // 4084
     */                                                                                                                // 4085
    function isIndex(value, length) {                                                                                  // 4086
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                        // 4087
      length = length == null ? MAX_SAFE_INTEGER : length;                                                             // 4088
      return value > -1 && value % 1 == 0 && value < length;                                                           // 4089
    }                                                                                                                  // 4090
                                                                                                                       // 4091
    /**                                                                                                                // 4092
     * Checks if the provided arguments are from an iteratee call.                                                     // 4093
     *                                                                                                                 // 4094
     * @private                                                                                                        // 4095
     * @param {*} value The potential iteratee value argument.                                                         // 4096
     * @param {*} index The potential iteratee index or key argument.                                                  // 4097
     * @param {*} object The potential iteratee object argument.                                                       // 4098
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4099
     */                                                                                                                // 4100
    function isIterateeCall(value, index, object) {                                                                    // 4101
      if (!isObject(object)) {                                                                                         // 4102
        return false;                                                                                                  // 4103
      }                                                                                                                // 4104
      var type = typeof index;                                                                                         // 4105
      if (type == 'number'                                                                                             // 4106
          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4107
          : (type == 'string' && index in object)) {                                                                   // 4108
        var other = object[index];                                                                                     // 4109
        return value === value ? (value === other) : (other !== other);                                                // 4110
      }                                                                                                                // 4111
      return false;                                                                                                    // 4112
    }                                                                                                                  // 4113
                                                                                                                       // 4114
    /**                                                                                                                // 4115
     * Checks if `value` is a property name and not a property path.                                                   // 4116
     *                                                                                                                 // 4117
     * @private                                                                                                        // 4118
     * @param {*} value The value to check.                                                                            // 4119
     * @param {Object} [object] The object to query keys on.                                                           // 4120
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4121
     */                                                                                                                // 4122
    function isKey(value, object) {                                                                                    // 4123
      var type = typeof value;                                                                                         // 4124
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {                                       // 4125
        return true;                                                                                                   // 4126
      }                                                                                                                // 4127
      if (isArray(value)) {                                                                                            // 4128
        return false;                                                                                                  // 4129
      }                                                                                                                // 4130
      var result = !reIsDeepProp.test(value);                                                                          // 4131
      return result || (object != null && value in toObject(object));                                                  // 4132
    }                                                                                                                  // 4133
                                                                                                                       // 4134
    /**                                                                                                                // 4135
     * Checks if `func` has a lazy counterpart.                                                                        // 4136
     *                                                                                                                 // 4137
     * @private                                                                                                        // 4138
     * @param {Function} func The function to check.                                                                   // 4139
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4140
     */                                                                                                                // 4141
    function isLaziable(func) {                                                                                        // 4142
      var funcName = getFuncName(func),                                                                                // 4143
          other = lodash[funcName];                                                                                    // 4144
                                                                                                                       // 4145
      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4146
        return false;                                                                                                  // 4147
      }                                                                                                                // 4148
      if (func === other) {                                                                                            // 4149
        return true;                                                                                                   // 4150
      }                                                                                                                // 4151
      var data = getData(other);                                                                                       // 4152
      return !!data && func === data[0];                                                                               // 4153
    }                                                                                                                  // 4154
                                                                                                                       // 4155
    /**                                                                                                                // 4156
     * Checks if `value` is a valid array-like length.                                                                 // 4157
     *                                                                                                                 // 4158
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).     // 4159
     *                                                                                                                 // 4160
     * @private                                                                                                        // 4161
     * @param {*} value The value to check.                                                                            // 4162
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 4163
     */                                                                                                                // 4164
    function isLength(value) {                                                                                         // 4165
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 4166
    }                                                                                                                  // 4167
                                                                                                                       // 4168
    /**                                                                                                                // 4169
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 4170
     *                                                                                                                 // 4171
     * @private                                                                                                        // 4172
     * @param {*} value The value to check.                                                                            // 4173
     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 4174
     *  equality comparisons, else `false`.                                                                            // 4175
     */                                                                                                                // 4176
    function isStrictComparable(value) {                                                                               // 4177
      return value === value && !isObject(value);                                                                      // 4178
    }                                                                                                                  // 4179
                                                                                                                       // 4180
    /**                                                                                                                // 4181
     * Merges the function metadata of `source` into `data`.                                                           // 4182
     *                                                                                                                 // 4183
     * Merging metadata reduces the number of wrappers required to invoke a function.                                  // 4184
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 4185
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 4186
     * augment function arguments, making the order in which they are executed important,                              // 4187
     * preventing the merging of metadata. However, we make an exception for a safe                                    // 4188
     * common case where curried functions have `_.ary` and or `_.rearg` applied.                                      // 4189
     *                                                                                                                 // 4190
     * @private                                                                                                        // 4191
     * @param {Array} data The destination metadata.                                                                   // 4192
     * @param {Array} source The source metadata.                                                                      // 4193
     * @returns {Array} Returns `data`.                                                                                // 4194
     */                                                                                                                // 4195
    function mergeData(data, source) {                                                                                 // 4196
      var bitmask = data[1],                                                                                           // 4197
          srcBitmask = source[1],                                                                                      // 4198
          newBitmask = bitmask | srcBitmask,                                                                           // 4199
          isCommon = newBitmask < ARY_FLAG;                                                                            // 4200
                                                                                                                       // 4201
      var isCombo =                                                                                                    // 4202
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||                                                           // 4203
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||                            // 4204
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);                                              // 4205
                                                                                                                       // 4206
      // Exit early if metadata can't be merged.                                                                       // 4207
      if (!(isCommon || isCombo)) {                                                                                    // 4208
        return data;                                                                                                   // 4209
      }                                                                                                                // 4210
      // Use source `thisArg` if available.                                                                            // 4211
      if (srcBitmask & BIND_FLAG) {                                                                                    // 4212
        data[2] = source[2];                                                                                           // 4213
        // Set when currying a bound function.                                                                         // 4214
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 4215
      }                                                                                                                // 4216
      // Compose partial arguments.                                                                                    // 4217
      var value = source[3];                                                                                           // 4218
      if (value) {                                                                                                     // 4219
        var partials = data[3];                                                                                        // 4220
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);                               // 4221
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);                              // 4222
      }                                                                                                                // 4223
      // Compose partial right arguments.                                                                              // 4224
      value = source[5];                                                                                               // 4225
      if (value) {                                                                                                     // 4226
        partials = data[5];                                                                                            // 4227
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);                          // 4228
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);                              // 4229
      }                                                                                                                // 4230
      // Use source `argPos` if available.                                                                             // 4231
      value = source[7];                                                                                               // 4232
      if (value) {                                                                                                     // 4233
        data[7] = arrayCopy(value);                                                                                    // 4234
      }                                                                                                                // 4235
      // Use source `ary` if it's smaller.                                                                             // 4236
      if (srcBitmask & ARY_FLAG) {                                                                                     // 4237
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 4238
      }                                                                                                                // 4239
      // Use source `arity` if one is not provided.                                                                    // 4240
      if (data[9] == null) {                                                                                           // 4241
        data[9] = source[9];                                                                                           // 4242
      }                                                                                                                // 4243
      // Use source `func` and merge bitmasks.                                                                         // 4244
      data[0] = source[0];                                                                                             // 4245
      data[1] = newBitmask;                                                                                            // 4246
                                                                                                                       // 4247
      return data;                                                                                                     // 4248
    }                                                                                                                  // 4249
                                                                                                                       // 4250
    /**                                                                                                                // 4251
     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 4252
     *                                                                                                                 // 4253
     * @private                                                                                                        // 4254
     * @param {*} objectValue The destination object property value.                                                   // 4255
     * @param {*} sourceValue The source object property value.                                                        // 4256
     * @returns {*} Returns the value to assign to the destination object.                                             // 4257
     */                                                                                                                // 4258
    function mergeDefaults(objectValue, sourceValue) {                                                                 // 4259
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);                 // 4260
    }                                                                                                                  // 4261
                                                                                                                       // 4262
    /**                                                                                                                // 4263
     * A specialized version of `_.pick` which picks `object` properties specified                                     // 4264
     * by `props`.                                                                                                     // 4265
     *                                                                                                                 // 4266
     * @private                                                                                                        // 4267
     * @param {Object} object The source object.                                                                       // 4268
     * @param {string[]} props The property names to pick.                                                             // 4269
     * @returns {Object} Returns the new object.                                                                       // 4270
     */                                                                                                                // 4271
    function pickByArray(object, props) {                                                                              // 4272
      object = toObject(object);                                                                                       // 4273
                                                                                                                       // 4274
      var index = -1,                                                                                                  // 4275
          length = props.length,                                                                                       // 4276
          result = {};                                                                                                 // 4277
                                                                                                                       // 4278
      while (++index < length) {                                                                                       // 4279
        var key = props[index];                                                                                        // 4280
        if (key in object) {                                                                                           // 4281
          result[key] = object[key];                                                                                   // 4282
        }                                                                                                              // 4283
      }                                                                                                                // 4284
      return result;                                                                                                   // 4285
    }                                                                                                                  // 4286
                                                                                                                       // 4287
    /**                                                                                                                // 4288
     * A specialized version of `_.pick` which picks `object` properties `predicate`                                   // 4289
     * returns truthy for.                                                                                             // 4290
     *                                                                                                                 // 4291
     * @private                                                                                                        // 4292
     * @param {Object} object The source object.                                                                       // 4293
     * @param {Function} predicate The function invoked per iteration.                                                 // 4294
     * @returns {Object} Returns the new object.                                                                       // 4295
     */                                                                                                                // 4296
    function pickByCallback(object, predicate) {                                                                       // 4297
      var result = {};                                                                                                 // 4298
      baseForIn(object, function(value, key, object) {                                                                 // 4299
        if (predicate(value, key, object)) {                                                                           // 4300
          result[key] = value;                                                                                         // 4301
        }                                                                                                              // 4302
      });                                                                                                              // 4303
      return result;                                                                                                   // 4304
    }                                                                                                                  // 4305
                                                                                                                       // 4306
    /**                                                                                                                // 4307
     * Reorder `array` according to the specified indexes where the element at                                         // 4308
     * the first index is assigned as the first element, the element at                                                // 4309
     * the second index is assigned as the second element, and so on.                                                  // 4310
     *                                                                                                                 // 4311
     * @private                                                                                                        // 4312
     * @param {Array} array The array to reorder.                                                                      // 4313
     * @param {Array} indexes The arranged array indexes.                                                              // 4314
     * @returns {Array} Returns `array`.                                                                               // 4315
     */                                                                                                                // 4316
    function reorder(array, indexes) {                                                                                 // 4317
      var arrLength = array.length,                                                                                    // 4318
          length = nativeMin(indexes.length, arrLength),                                                               // 4319
          oldArray = arrayCopy(array);                                                                                 // 4320
                                                                                                                       // 4321
      while (length--) {                                                                                               // 4322
        var index = indexes[length];                                                                                   // 4323
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 4324
      }                                                                                                                // 4325
      return array;                                                                                                    // 4326
    }                                                                                                                  // 4327
                                                                                                                       // 4328
    /**                                                                                                                // 4329
     * Sets metadata for `func`.                                                                                       // 4330
     *                                                                                                                 // 4331
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 4332
     * period of time, it will trip its breaker and transition to an identity function                                 // 4333
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.                                                                                               // 4335
     *                                                                                                                 // 4336
     * @private                                                                                                        // 4337
     * @param {Function} func The function to associate metadata with.                                                 // 4338
     * @param {*} data The metadata.                                                                                   // 4339
     * @returns {Function} Returns `func`.                                                                             // 4340
     */                                                                                                                // 4341
    var setData = (function() {                                                                                        // 4342
      var count = 0,                                                                                                   // 4343
          lastCalled = 0;                                                                                              // 4344
                                                                                                                       // 4345
      return function(key, value) {                                                                                    // 4346
        var stamp = now(),                                                                                             // 4347
            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 4348
                                                                                                                       // 4349
        lastCalled = stamp;                                                                                            // 4350
        if (remaining > 0) {                                                                                           // 4351
          if (++count >= HOT_COUNT) {                                                                                  // 4352
            return key;                                                                                                // 4353
          }                                                                                                            // 4354
        } else {                                                                                                       // 4355
          count = 0;                                                                                                   // 4356
        }                                                                                                              // 4357
        return baseSetData(key, value);                                                                                // 4358
      };                                                                                                               // 4359
    }());                                                                                                              // 4360
                                                                                                                       // 4361
    /**                                                                                                                // 4362
     * A fallback implementation of `Object.keys` which creates an array of the                                        // 4363
     * own enumerable property names of `object`.                                                                      // 4364
     *                                                                                                                 // 4365
     * @private                                                                                                        // 4366
     * @param {Object} object The object to query.                                                                     // 4367
     * @returns {Array} Returns the array of property names.                                                           // 4368
     */                                                                                                                // 4369
    function shimKeys(object) {                                                                                        // 4370
      var props = keysIn(object),                                                                                      // 4371
          propsLength = props.length,                                                                                  // 4372
          length = propsLength && object.length;                                                                       // 4373
                                                                                                                       // 4374
      var allowIndexes = !!length && isLength(length) &&                                                               // 4375
        (isArray(object) || isArguments(object));                                                                      // 4376
                                                                                                                       // 4377
      var index = -1,                                                                                                  // 4378
          result = [];                                                                                                 // 4379
                                                                                                                       // 4380
      while (++index < propsLength) {                                                                                  // 4381
        var key = props[index];                                                                                        // 4382
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                              // 4383
          result.push(key);                                                                                            // 4384
        }                                                                                                              // 4385
      }                                                                                                                // 4386
      return result;                                                                                                   // 4387
    }                                                                                                                  // 4388
                                                                                                                       // 4389
    /**                                                                                                                // 4390
     * Converts `value` to an array-like object if it's not one.                                                       // 4391
     *                                                                                                                 // 4392
     * @private                                                                                                        // 4393
     * @param {*} value The value to process.                                                                          // 4394
     * @returns {Array|Object} Returns the array-like object.                                                          // 4395
     */                                                                                                                // 4396
    function toIterable(value) {                                                                                       // 4397
      if (value == null) {                                                                                             // 4398
        return [];                                                                                                     // 4399
      }                                                                                                                // 4400
      if (!isArrayLike(value)) {                                                                                       // 4401
        return values(value);                                                                                          // 4402
      }                                                                                                                // 4403
      return isObject(value) ? value : Object(value);                                                                  // 4404
    }                                                                                                                  // 4405
                                                                                                                       // 4406
    /**                                                                                                                // 4407
     * Converts `value` to an object if it's not one.                                                                  // 4408
     *                                                                                                                 // 4409
     * @private                                                                                                        // 4410
     * @param {*} value The value to process.                                                                          // 4411
     * @returns {Object} Returns the object.                                                                           // 4412
     */                                                                                                                // 4413
    function toObject(value) {                                                                                         // 4414
      return isObject(value) ? value : Object(value);                                                                  // 4415
    }                                                                                                                  // 4416
                                                                                                                       // 4417
    /**                                                                                                                // 4418
     * Converts `value` to property path array if it's not one.                                                        // 4419
     *                                                                                                                 // 4420
     * @private                                                                                                        // 4421
     * @param {*} value The value to process.                                                                          // 4422
     * @returns {Array} Returns the property path array.                                                               // 4423
     */                                                                                                                // 4424
    function toPath(value) {                                                                                           // 4425
      if (isArray(value)) {                                                                                            // 4426
        return value;                                                                                                  // 4427
      }                                                                                                                // 4428
      var result = [];                                                                                                 // 4429
      baseToString(value).replace(rePropName, function(match, number, quote, string) {                                 // 4430
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 4431
      });                                                                                                              // 4432
      return result;                                                                                                   // 4433
    }                                                                                                                  // 4434
                                                                                                                       // 4435
    /**                                                                                                                // 4436
     * Creates a clone of `wrapper`.                                                                                   // 4437
     *                                                                                                                 // 4438
     * @private                                                                                                        // 4439
     * @param {Object} wrapper The wrapper to clone.                                                                   // 4440
     * @returns {Object} Returns the cloned wrapper.                                                                   // 4441
     */                                                                                                                // 4442
    function wrapperClone(wrapper) {                                                                                   // 4443
      return wrapper instanceof LazyWrapper                                                                            // 4444
        ? wrapper.clone()                                                                                              // 4445
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));                   // 4446
    }                                                                                                                  // 4447
                                                                                                                       // 4448
    /*------------------------------------------------------------------------*/                                       // 4449
                                                                                                                       // 4450
    /**                                                                                                                // 4451
     * Creates an array of elements split into groups the length of `size`.                                            // 4452
     * If `collection` can't be split evenly, the final chunk will be the remaining                                    // 4453
     * elements.                                                                                                       // 4454
     *                                                                                                                 // 4455
     * @static                                                                                                         // 4456
     * @memberOf _                                                                                                     // 4457
     * @category Array                                                                                                 // 4458
     * @param {Array} array The array to process.                                                                      // 4459
     * @param {number} [size=1] The length of each chunk.                                                              // 4460
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4461
     * @returns {Array} Returns the new array containing chunks.                                                       // 4462
     * @example                                                                                                        // 4463
     *                                                                                                                 // 4464
     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 4465
     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 4466
     *                                                                                                                 // 4467
     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 4468
     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 4469
     */                                                                                                                // 4470
    function chunk(array, size, guard) {                                                                               // 4471
      if (guard ? isIterateeCall(array, size, guard) : size == null) {                                                 // 4472
        size = 1;                                                                                                      // 4473
      } else {                                                                                                         // 4474
        size = nativeMax(nativeFloor(size) || 1, 1);                                                                   // 4475
      }                                                                                                                // 4476
      var index = 0,                                                                                                   // 4477
          length = array ? array.length : 0,                                                                           // 4478
          resIndex = -1,                                                                                               // 4479
          result = Array(nativeCeil(length / size));                                                                   // 4480
                                                                                                                       // 4481
      while (index < length) {                                                                                         // 4482
        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 4483
      }                                                                                                                // 4484
      return result;                                                                                                   // 4485
    }                                                                                                                  // 4486
                                                                                                                       // 4487
    /**                                                                                                                // 4488
     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 4489
     * `0`, `""`, `undefined`, and `NaN` are falsey.                                                                   // 4490
     *                                                                                                                 // 4491
     * @static                                                                                                         // 4492
     * @memberOf _                                                                                                     // 4493
     * @category Array                                                                                                 // 4494
     * @param {Array} array The array to compact.                                                                      // 4495
     * @returns {Array} Returns the new array of filtered values.                                                      // 4496
     * @example                                                                                                        // 4497
     *                                                                                                                 // 4498
     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 4499
     * // => [1, 2, 3]                                                                                                 // 4500
     */                                                                                                                // 4501
    function compact(array) {                                                                                          // 4502
      var index = -1,                                                                                                  // 4503
          length = array ? array.length : 0,                                                                           // 4504
          resIndex = -1,                                                                                               // 4505
          result = [];                                                                                                 // 4506
                                                                                                                       // 4507
      while (++index < length) {                                                                                       // 4508
        var value = array[index];                                                                                      // 4509
        if (value) {                                                                                                   // 4510
          result[++resIndex] = value;                                                                                  // 4511
        }                                                                                                              // 4512
      }                                                                                                                // 4513
      return result;                                                                                                   // 4514
    }                                                                                                                  // 4515
                                                                                                                       // 4516
    /**                                                                                                                // 4517
     * Creates an array of unique `array` values not included in the other                                             // 4518
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 4519
     * for equality comparisons.                                                                                       // 4520
     *                                                                                                                 // 4521
     * @static                                                                                                         // 4522
     * @memberOf _                                                                                                     // 4523
     * @category Array                                                                                                 // 4524
     * @param {Array} array The array to inspect.                                                                      // 4525
     * @param {...Array} [values] The arrays of values to exclude.                                                     // 4526
     * @returns {Array} Returns the new array of filtered values.                                                      // 4527
     * @example                                                                                                        // 4528
     *                                                                                                                 // 4529
     * _.difference([1, 2, 3], [4, 2]);                                                                                // 4530
     * // => [1, 3]                                                                                                    // 4531
     */                                                                                                                // 4532
    var difference = restParam(function(array, values) {                                                               // 4533
      return (isObjectLike(array) && isArrayLike(array))                                                               // 4534
        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 4535
        : [];                                                                                                          // 4536
    });                                                                                                                // 4537
                                                                                                                       // 4538
    /**                                                                                                                // 4539
     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 4540
     *                                                                                                                 // 4541
     * @static                                                                                                         // 4542
     * @memberOf _                                                                                                     // 4543
     * @category Array                                                                                                 // 4544
     * @param {Array} array The array to query.                                                                        // 4545
     * @param {number} [n=1] The number of elements to drop.                                                           // 4546
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4547
     * @returns {Array} Returns the slice of `array`.                                                                  // 4548
     * @example                                                                                                        // 4549
     *                                                                                                                 // 4550
     * _.drop([1, 2, 3]);                                                                                              // 4551
     * // => [2, 3]                                                                                                    // 4552
     *                                                                                                                 // 4553
     * _.drop([1, 2, 3], 2);                                                                                           // 4554
     * // => [3]                                                                                                       // 4555
     *                                                                                                                 // 4556
     * _.drop([1, 2, 3], 5);                                                                                           // 4557
     * // => []                                                                                                        // 4558
     *                                                                                                                 // 4559
     * _.drop([1, 2, 3], 0);                                                                                           // 4560
     * // => [1, 2, 3]                                                                                                 // 4561
     */                                                                                                                // 4562
    function drop(array, n, guard) {                                                                                   // 4563
      var length = array ? array.length : 0;                                                                           // 4564
      if (!length) {                                                                                                   // 4565
        return [];                                                                                                     // 4566
      }                                                                                                                // 4567
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4568
        n = 1;                                                                                                         // 4569
      }                                                                                                                // 4570
      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 4571
    }                                                                                                                  // 4572
                                                                                                                       // 4573
    /**                                                                                                                // 4574
     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 4575
     *                                                                                                                 // 4576
     * @static                                                                                                         // 4577
     * @memberOf _                                                                                                     // 4578
     * @category Array                                                                                                 // 4579
     * @param {Array} array The array to query.                                                                        // 4580
     * @param {number} [n=1] The number of elements to drop.                                                           // 4581
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4582
     * @returns {Array} Returns the slice of `array`.                                                                  // 4583
     * @example                                                                                                        // 4584
     *                                                                                                                 // 4585
     * _.dropRight([1, 2, 3]);                                                                                         // 4586
     * // => [1, 2]                                                                                                    // 4587
     *                                                                                                                 // 4588
     * _.dropRight([1, 2, 3], 2);                                                                                      // 4589
     * // => [1]                                                                                                       // 4590
     *                                                                                                                 // 4591
     * _.dropRight([1, 2, 3], 5);                                                                                      // 4592
     * // => []                                                                                                        // 4593
     *                                                                                                                 // 4594
     * _.dropRight([1, 2, 3], 0);                                                                                      // 4595
     * // => [1, 2, 3]                                                                                                 // 4596
     */                                                                                                                // 4597
    function dropRight(array, n, guard) {                                                                              // 4598
      var length = array ? array.length : 0;                                                                           // 4599
      if (!length) {                                                                                                   // 4600
        return [];                                                                                                     // 4601
      }                                                                                                                // 4602
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4603
        n = 1;                                                                                                         // 4604
      }                                                                                                                // 4605
      n = length - (+n || 0);                                                                                          // 4606
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 4607
    }                                                                                                                  // 4608
                                                                                                                       // 4609
    /**                                                                                                                // 4610
     * Creates a slice of `array` excluding elements dropped from the end.                                             // 4611
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4612
     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4613
     *                                                                                                                 // 4614
     * If a property name is provided for `predicate` the created `_.property`                                         // 4615
     * style callback returns the property value of the given element.                                                 // 4616
     *                                                                                                                 // 4617
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4618
     * style callback returns `true` for elements that have a matching property                                        // 4619
     * value, else `false`.                                                                                            // 4620
     *                                                                                                                 // 4621
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4622
     * callback returns `true` for elements that match the properties of the given                                     // 4623
     * object, else `false`.                                                                                           // 4624
     *                                                                                                                 // 4625
     * @static                                                                                                         // 4626
     * @memberOf _                                                                                                     // 4627
     * @category Array                                                                                                 // 4628
     * @param {Array} array The array to query.                                                                        // 4629
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4630
     *  per iteration.                                                                                                 // 4631
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4632
     * @returns {Array} Returns the slice of `array`.                                                                  // 4633
     * @example                                                                                                        // 4634
     *                                                                                                                 // 4635
     * _.dropRightWhile([1, 2, 3], function(n) {                                                                       // 4636
     *   return n > 1;                                                                                                 // 4637
     * });                                                                                                             // 4638
     * // => [1]                                                                                                       // 4639
     *                                                                                                                 // 4640
     * var users = [                                                                                                   // 4641
     *   { 'user': 'barney',  'active': true },                                                                        // 4642
     *   { 'user': 'fred',    'active': false },                                                                       // 4643
     *   { 'user': 'pebbles', 'active': false }                                                                        // 4644
     * ];                                                                                                              // 4645
     *                                                                                                                 // 4646
     * // using the `_.matches` callback shorthand                                                                     // 4647
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 4648
     * // => ['barney', 'fred']                                                                                        // 4649
     *                                                                                                                 // 4650
     * // using the `_.matchesProperty` callback shorthand                                                             // 4651
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');                                                      // 4652
     * // => ['barney']                                                                                                // 4653
     *                                                                                                                 // 4654
     * // using the `_.property` callback shorthand                                                                    // 4655
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');                                                             // 4656
     * // => ['barney', 'fred', 'pebbles']                                                                             // 4657
     */                                                                                                                // 4658
    function dropRightWhile(array, predicate, thisArg) {                                                               // 4659
      return (array && array.length)                                                                                   // 4660
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)                                             // 4661
        : [];                                                                                                          // 4662
    }                                                                                                                  // 4663
                                                                                                                       // 4664
    /**                                                                                                                // 4665
     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 4666
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4667
     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4668
     *                                                                                                                 // 4669
     * If a property name is provided for `predicate` the created `_.property`                                         // 4670
     * style callback returns the property value of the given element.                                                 // 4671
     *                                                                                                                 // 4672
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4673
     * style callback returns `true` for elements that have a matching property                                        // 4674
     * value, else `false`.                                                                                            // 4675
     *                                                                                                                 // 4676
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4677
     * callback returns `true` for elements that have the properties of the given                                      // 4678
     * object, else `false`.                                                                                           // 4679
     *                                                                                                                 // 4680
     * @static                                                                                                         // 4681
     * @memberOf _                                                                                                     // 4682
     * @category Array                                                                                                 // 4683
     * @param {Array} array The array to query.                                                                        // 4684
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4685
     *  per iteration.                                                                                                 // 4686
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4687
     * @returns {Array} Returns the slice of `array`.                                                                  // 4688
     * @example                                                                                                        // 4689
     *                                                                                                                 // 4690
     * _.dropWhile([1, 2, 3], function(n) {                                                                            // 4691
     *   return n < 3;                                                                                                 // 4692
     * });                                                                                                             // 4693
     * // => [3]                                                                                                       // 4694
     *                                                                                                                 // 4695
     * var users = [                                                                                                   // 4696
     *   { 'user': 'barney',  'active': false },                                                                       // 4697
     *   { 'user': 'fred',    'active': false },                                                                       // 4698
     *   { 'user': 'pebbles', 'active': true }                                                                         // 4699
     * ];                                                                                                              // 4700
     *                                                                                                                 // 4701
     * // using the `_.matches` callback shorthand                                                                     // 4702
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 4703
     * // => ['fred', 'pebbles']                                                                                       // 4704
     *                                                                                                                 // 4705
     * // using the `_.matchesProperty` callback shorthand                                                             // 4706
     * _.pluck(_.dropWhile(users, 'active', false), 'user');                                                           // 4707
     * // => ['pebbles']                                                                                               // 4708
     *                                                                                                                 // 4709
     * // using the `_.property` callback shorthand                                                                    // 4710
     * _.pluck(_.dropWhile(users, 'active'), 'user');                                                                  // 4711
     * // => ['barney', 'fred', 'pebbles']                                                                             // 4712
     */                                                                                                                // 4713
    function dropWhile(array, predicate, thisArg) {                                                                    // 4714
      return (array && array.length)                                                                                   // 4715
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)                                                   // 4716
        : [];                                                                                                          // 4717
    }                                                                                                                  // 4718
                                                                                                                       // 4719
    /**                                                                                                                // 4720
     * Fills elements of `array` with `value` from `start` up to, but not                                              // 4721
     * including, `end`.                                                                                               // 4722
     *                                                                                                                 // 4723
     * **Note:** This method mutates `array`.                                                                          // 4724
     *                                                                                                                 // 4725
     * @static                                                                                                         // 4726
     * @memberOf _                                                                                                     // 4727
     * @category Array                                                                                                 // 4728
     * @param {Array} array The array to fill.                                                                         // 4729
     * @param {*} value The value to fill `array` with.                                                                // 4730
     * @param {number} [start=0] The start position.                                                                   // 4731
     * @param {number} [end=array.length] The end position.                                                            // 4732
     * @returns {Array} Returns `array`.                                                                               // 4733
     * @example                                                                                                        // 4734
     *                                                                                                                 // 4735
     * var array = [1, 2, 3];                                                                                          // 4736
     *                                                                                                                 // 4737
     * _.fill(array, 'a');                                                                                             // 4738
     * console.log(array);                                                                                             // 4739
     * // => ['a', 'a', 'a']                                                                                           // 4740
     *                                                                                                                 // 4741
     * _.fill(Array(3), 2);                                                                                            // 4742
     * // => [2, 2, 2]                                                                                                 // 4743
     *                                                                                                                 // 4744
     * _.fill([4, 6, 8], '*', 1, 2);                                                                                   // 4745
     * // => [4, '*', 8]                                                                                               // 4746
     */                                                                                                                // 4747
    function fill(array, value, start, end) {                                                                          // 4748
      var length = array ? array.length : 0;                                                                           // 4749
      if (!length) {                                                                                                   // 4750
        return [];                                                                                                     // 4751
      }                                                                                                                // 4752
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 4753
        start = 0;                                                                                                     // 4754
        end = length;                                                                                                  // 4755
      }                                                                                                                // 4756
      return baseFill(array, value, start, end);                                                                       // 4757
    }                                                                                                                  // 4758
                                                                                                                       // 4759
    /**                                                                                                                // 4760
     * This method is like `_.find` except that it returns the index of the first                                      // 4761
     * element `predicate` returns truthy for instead of the element itself.                                           // 4762
     *                                                                                                                 // 4763
     * If a property name is provided for `predicate` the created `_.property`                                         // 4764
     * style callback returns the property value of the given element.                                                 // 4765
     *                                                                                                                 // 4766
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4767
     * style callback returns `true` for elements that have a matching property                                        // 4768
     * value, else `false`.                                                                                            // 4769
     *                                                                                                                 // 4770
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4771
     * callback returns `true` for elements that have the properties of the given                                      // 4772
     * object, else `false`.                                                                                           // 4773
     *                                                                                                                 // 4774
     * @static                                                                                                         // 4775
     * @memberOf _                                                                                                     // 4776
     * @category Array                                                                                                 // 4777
     * @param {Array} array The array to search.                                                                       // 4778
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4779
     *  per iteration.                                                                                                 // 4780
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4781
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4782
     * @example                                                                                                        // 4783
     *                                                                                                                 // 4784
     * var users = [                                                                                                   // 4785
     *   { 'user': 'barney',  'active': false },                                                                       // 4786
     *   { 'user': 'fred',    'active': false },                                                                       // 4787
     *   { 'user': 'pebbles', 'active': true }                                                                         // 4788
     * ];                                                                                                              // 4789
     *                                                                                                                 // 4790
     * _.findIndex(users, function(chr) {                                                                              // 4791
     *   return chr.user == 'barney';                                                                                  // 4792
     * });                                                                                                             // 4793
     * // => 0                                                                                                         // 4794
     *                                                                                                                 // 4795
     * // using the `_.matches` callback shorthand                                                                     // 4796
     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 4797
     * // => 1                                                                                                         // 4798
     *                                                                                                                 // 4799
     * // using the `_.matchesProperty` callback shorthand                                                             // 4800
     * _.findIndex(users, 'active', false);                                                                            // 4801
     * // => 0                                                                                                         // 4802
     *                                                                                                                 // 4803
     * // using the `_.property` callback shorthand                                                                    // 4804
     * _.findIndex(users, 'active');                                                                                   // 4805
     * // => 2                                                                                                         // 4806
     */                                                                                                                // 4807
    var findIndex = createFindIndex();                                                                                 // 4808
                                                                                                                       // 4809
    /**                                                                                                                // 4810
     * This method is like `_.findIndex` except that it iterates over elements                                         // 4811
     * of `collection` from right to left.                                                                             // 4812
     *                                                                                                                 // 4813
     * If a property name is provided for `predicate` the created `_.property`                                         // 4814
     * style callback returns the property value of the given element.                                                 // 4815
     *                                                                                                                 // 4816
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4817
     * style callback returns `true` for elements that have a matching property                                        // 4818
     * value, else `false`.                                                                                            // 4819
     *                                                                                                                 // 4820
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4821
     * callback returns `true` for elements that have the properties of the given                                      // 4822
     * object, else `false`.                                                                                           // 4823
     *                                                                                                                 // 4824
     * @static                                                                                                         // 4825
     * @memberOf _                                                                                                     // 4826
     * @category Array                                                                                                 // 4827
     * @param {Array} array The array to search.                                                                       // 4828
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4829
     *  per iteration.                                                                                                 // 4830
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4831
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4832
     * @example                                                                                                        // 4833
     *                                                                                                                 // 4834
     * var users = [                                                                                                   // 4835
     *   { 'user': 'barney',  'active': true },                                                                        // 4836
     *   { 'user': 'fred',    'active': false },                                                                       // 4837
     *   { 'user': 'pebbles', 'active': false }                                                                        // 4838
     * ];                                                                                                              // 4839
     *                                                                                                                 // 4840
     * _.findLastIndex(users, function(chr) {                                                                          // 4841
     *   return chr.user == 'pebbles';                                                                                 // 4842
     * });                                                                                                             // 4843
     * // => 2                                                                                                         // 4844
     *                                                                                                                 // 4845
     * // using the `_.matches` callback shorthand                                                                     // 4846
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 4847
     * // => 0                                                                                                         // 4848
     *                                                                                                                 // 4849
     * // using the `_.matchesProperty` callback shorthand                                                             // 4850
     * _.findLastIndex(users, 'active', false);                                                                        // 4851
     * // => 2                                                                                                         // 4852
     *                                                                                                                 // 4853
     * // using the `_.property` callback shorthand                                                                    // 4854
     * _.findLastIndex(users, 'active');                                                                               // 4855
     * // => 0                                                                                                         // 4856
     */                                                                                                                // 4857
    var findLastIndex = createFindIndex(true);                                                                         // 4858
                                                                                                                       // 4859
    /**                                                                                                                // 4860
     * Gets the first element of `array`.                                                                              // 4861
     *                                                                                                                 // 4862
     * @static                                                                                                         // 4863
     * @memberOf _                                                                                                     // 4864
     * @alias head                                                                                                     // 4865
     * @category Array                                                                                                 // 4866
     * @param {Array} array The array to query.                                                                        // 4867
     * @returns {*} Returns the first element of `array`.                                                              // 4868
     * @example                                                                                                        // 4869
     *                                                                                                                 // 4870
     * _.first([1, 2, 3]);                                                                                             // 4871
     * // => 1                                                                                                         // 4872
     *                                                                                                                 // 4873
     * _.first([]);                                                                                                    // 4874
     * // => undefined                                                                                                 // 4875
     */                                                                                                                // 4876
    function first(array) {                                                                                            // 4877
      return array ? array[0] : undefined;                                                                             // 4878
    }                                                                                                                  // 4879
                                                                                                                       // 4880
    /**                                                                                                                // 4881
     * Flattens a nested array. If `isDeep` is `true` the array is recursively                                         // 4882
     * flattened, otherwise it's only flattened a single level.                                                        // 4883
     *                                                                                                                 // 4884
     * @static                                                                                                         // 4885
     * @memberOf _                                                                                                     // 4886
     * @category Array                                                                                                 // 4887
     * @param {Array} array The array to flatten.                                                                      // 4888
     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 4889
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4890
     * @returns {Array} Returns the new flattened array.                                                               // 4891
     * @example                                                                                                        // 4892
     *                                                                                                                 // 4893
     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 4894
     * // => [1, 2, 3, [4]]                                                                                            // 4895
     *                                                                                                                 // 4896
     * // using `isDeep`                                                                                               // 4897
     * _.flatten([1, [2, 3, [4]]], true);                                                                              // 4898
     * // => [1, 2, 3, 4]                                                                                              // 4899
     */                                                                                                                // 4900
    function flatten(array, isDeep, guard) {                                                                           // 4901
      var length = array ? array.length : 0;                                                                           // 4902
      if (guard && isIterateeCall(array, isDeep, guard)) {                                                             // 4903
        isDeep = false;                                                                                                // 4904
      }                                                                                                                // 4905
      return length ? baseFlatten(array, isDeep) : [];                                                                 // 4906
    }                                                                                                                  // 4907
                                                                                                                       // 4908
    /**                                                                                                                // 4909
     * Recursively flattens a nested array.                                                                            // 4910
     *                                                                                                                 // 4911
     * @static                                                                                                         // 4912
     * @memberOf _                                                                                                     // 4913
     * @category Array                                                                                                 // 4914
     * @param {Array} array The array to recursively flatten.                                                          // 4915
     * @returns {Array} Returns the new flattened array.                                                               // 4916
     * @example                                                                                                        // 4917
     *                                                                                                                 // 4918
     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 4919
     * // => [1, 2, 3, 4]                                                                                              // 4920
     */                                                                                                                // 4921
    function flattenDeep(array) {                                                                                      // 4922
      var length = array ? array.length : 0;                                                                           // 4923
      return length ? baseFlatten(array, true) : [];                                                                   // 4924
    }                                                                                                                  // 4925
                                                                                                                       // 4926
    /**                                                                                                                // 4927
     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 4928
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 4929
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 4930
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 4931
     * performs a faster binary search.                                                                                // 4932
     *                                                                                                                 // 4933
     * @static                                                                                                         // 4934
     * @memberOf _                                                                                                     // 4935
     * @category Array                                                                                                 // 4936
     * @param {Array} array The array to search.                                                                       // 4937
     * @param {*} value The value to search for.                                                                       // 4938
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`                                        // 4939
     *  to perform a binary search on a sorted array.                                                                  // 4940
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 4941
     * @example                                                                                                        // 4942
     *                                                                                                                 // 4943
     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 4944
     * // => 1                                                                                                         // 4945
     *                                                                                                                 // 4946
     * // using `fromIndex`                                                                                            // 4947
     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 4948
     * // => 3                                                                                                         // 4949
     *                                                                                                                 // 4950
     * // performing a binary search                                                                                   // 4951
     * _.indexOf([1, 1, 2, 2], 2, true);                                                                               // 4952
     * // => 2                                                                                                         // 4953
     */                                                                                                                // 4954
    function indexOf(array, value, fromIndex) {                                                                        // 4955
      var length = array ? array.length : 0;                                                                           // 4956
      if (!length) {                                                                                                   // 4957
        return -1;                                                                                                     // 4958
      }                                                                                                                // 4959
      if (typeof fromIndex == 'number') {                                                                              // 4960
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;                                      // 4961
      } else if (fromIndex) {                                                                                          // 4962
        var index = binaryIndex(array, value);                                                                         // 4963
        if (index < length &&                                                                                          // 4964
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {                          // 4965
          return index;                                                                                                // 4966
        }                                                                                                              // 4967
        return -1;                                                                                                     // 4968
      }                                                                                                                // 4969
      return baseIndexOf(array, value, fromIndex || 0);                                                                // 4970
    }                                                                                                                  // 4971
                                                                                                                       // 4972
    /**                                                                                                                // 4973
     * Gets all but the last element of `array`.                                                                       // 4974
     *                                                                                                                 // 4975
     * @static                                                                                                         // 4976
     * @memberOf _                                                                                                     // 4977
     * @category Array                                                                                                 // 4978
     * @param {Array} array The array to query.                                                                        // 4979
     * @returns {Array} Returns the slice of `array`.                                                                  // 4980
     * @example                                                                                                        // 4981
     *                                                                                                                 // 4982
     * _.initial([1, 2, 3]);                                                                                           // 4983
     * // => [1, 2]                                                                                                    // 4984
     */                                                                                                                // 4985
    function initial(array) {                                                                                          // 4986
      return dropRight(array, 1);                                                                                      // 4987
    }                                                                                                                  // 4988
                                                                                                                       // 4989
    /**                                                                                                                // 4990
     * Creates an array of unique values that are included in all of the provided                                      // 4991
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 4992
     * for equality comparisons.                                                                                       // 4993
     *                                                                                                                 // 4994
     * @static                                                                                                         // 4995
     * @memberOf _                                                                                                     // 4996
     * @category Array                                                                                                 // 4997
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 4998
     * @returns {Array} Returns the new array of shared values.                                                        // 4999
     * @example                                                                                                        // 5000
     * _.intersection([1, 2], [4, 2], [2, 1]);                                                                         // 5001
     * // => [2]                                                                                                       // 5002
     */                                                                                                                // 5003
    var intersection = restParam(function(arrays) {                                                                    // 5004
      var othLength = arrays.length,                                                                                   // 5005
          othIndex = othLength,                                                                                        // 5006
          caches = Array(length),                                                                                      // 5007
          indexOf = getIndexOf(),                                                                                      // 5008
          isCommon = indexOf === baseIndexOf,                                                                          // 5009
          result = [];                                                                                                 // 5010
                                                                                                                       // 5011
      while (othIndex--) {                                                                                             // 5012
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];                             // 5013
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;                  // 5014
      }                                                                                                                // 5015
      var array = arrays[0],                                                                                           // 5016
          index = -1,                                                                                                  // 5017
          length = array ? array.length : 0,                                                                           // 5018
          seen = caches[0];                                                                                            // 5019
                                                                                                                       // 5020
      outer:                                                                                                           // 5021
      while (++index < length) {                                                                                       // 5022
        value = array[index];                                                                                          // 5023
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {                                      // 5024
          var othIndex = othLength;                                                                                    // 5025
          while (--othIndex) {                                                                                         // 5026
            var cache = caches[othIndex];                                                                              // 5027
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {                      // 5028
              continue outer;                                                                                          // 5029
            }                                                                                                          // 5030
          }                                                                                                            // 5031
          if (seen) {                                                                                                  // 5032
            seen.push(value);                                                                                          // 5033
          }                                                                                                            // 5034
          result.push(value);                                                                                          // 5035
        }                                                                                                              // 5036
      }                                                                                                                // 5037
      return result;                                                                                                   // 5038
    });                                                                                                                // 5039
                                                                                                                       // 5040
    /**                                                                                                                // 5041
     * Gets the last element of `array`.                                                                               // 5042
     *                                                                                                                 // 5043
     * @static                                                                                                         // 5044
     * @memberOf _                                                                                                     // 5045
     * @category Array                                                                                                 // 5046
     * @param {Array} array The array to query.                                                                        // 5047
     * @returns {*} Returns the last element of `array`.                                                               // 5048
     * @example                                                                                                        // 5049
     *                                                                                                                 // 5050
     * _.last([1, 2, 3]);                                                                                              // 5051
     * // => 3                                                                                                         // 5052
     */                                                                                                                // 5053
    function last(array) {                                                                                             // 5054
      var length = array ? array.length : 0;                                                                           // 5055
      return length ? array[length - 1] : undefined;                                                                   // 5056
    }                                                                                                                  // 5057
                                                                                                                       // 5058
    /**                                                                                                                // 5059
     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5060
     * `array` from right to left.                                                                                     // 5061
     *                                                                                                                 // 5062
     * @static                                                                                                         // 5063
     * @memberOf _                                                                                                     // 5064
     * @category Array                                                                                                 // 5065
     * @param {Array} array The array to search.                                                                       // 5066
     * @param {*} value The value to search for.                                                                       // 5067
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from                                     // 5068
     *  or `true` to perform a binary search on a sorted array.                                                        // 5069
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5070
     * @example                                                                                                        // 5071
     *                                                                                                                 // 5072
     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5073
     * // => 3                                                                                                         // 5074
     *                                                                                                                 // 5075
     * // using `fromIndex`                                                                                            // 5076
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5077
     * // => 1                                                                                                         // 5078
     *                                                                                                                 // 5079
     * // performing a binary search                                                                                   // 5080
     * _.lastIndexOf([1, 1, 2, 2], 2, true);                                                                           // 5081
     * // => 3                                                                                                         // 5082
     */                                                                                                                // 5083
    function lastIndexOf(array, value, fromIndex) {                                                                    // 5084
      var length = array ? array.length : 0;                                                                           // 5085
      if (!length) {                                                                                                   // 5086
        return -1;                                                                                                     // 5087
      }                                                                                                                // 5088
      var index = length;                                                                                              // 5089
      if (typeof fromIndex == 'number') {                                                                              // 5090
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;        // 5091
      } else if (fromIndex) {                                                                                          // 5092
        index = binaryIndex(array, value, true) - 1;                                                                   // 5093
        var other = array[index];                                                                                      // 5094
        if (value === value ? (value === other) : (other !== other)) {                                                 // 5095
          return index;                                                                                                // 5096
        }                                                                                                              // 5097
        return -1;                                                                                                     // 5098
      }                                                                                                                // 5099
      if (value !== value) {                                                                                           // 5100
        return indexOfNaN(array, index, true);                                                                         // 5101
      }                                                                                                                // 5102
      while (index--) {                                                                                                // 5103
        if (array[index] === value) {                                                                                  // 5104
          return index;                                                                                                // 5105
        }                                                                                                              // 5106
      }                                                                                                                // 5107
      return -1;                                                                                                       // 5108
    }                                                                                                                  // 5109
                                                                                                                       // 5110
    /**                                                                                                                // 5111
     * Removes all provided values from `array` using                                                                  // 5112
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5113
     * for equality comparisons.                                                                                       // 5114
     *                                                                                                                 // 5115
     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5116
     *                                                                                                                 // 5117
     * @static                                                                                                         // 5118
     * @memberOf _                                                                                                     // 5119
     * @category Array                                                                                                 // 5120
     * @param {Array} array The array to modify.                                                                       // 5121
     * @param {...*} [values] The values to remove.                                                                    // 5122
     * @returns {Array} Returns `array`.                                                                               // 5123
     * @example                                                                                                        // 5124
     *                                                                                                                 // 5125
     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 5126
     *                                                                                                                 // 5127
     * _.pull(array, 2, 3);                                                                                            // 5128
     * console.log(array);                                                                                             // 5129
     * // => [1, 1]                                                                                                    // 5130
     */                                                                                                                // 5131
    function pull() {                                                                                                  // 5132
      var args = arguments,                                                                                            // 5133
          array = args[0];                                                                                             // 5134
                                                                                                                       // 5135
      if (!(array && array.length)) {                                                                                  // 5136
        return array;                                                                                                  // 5137
      }                                                                                                                // 5138
      var index = 0,                                                                                                   // 5139
          indexOf = getIndexOf(),                                                                                      // 5140
          length = args.length;                                                                                        // 5141
                                                                                                                       // 5142
      while (++index < length) {                                                                                       // 5143
        var fromIndex = 0,                                                                                             // 5144
            value = args[index];                                                                                       // 5145
                                                                                                                       // 5146
        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {                                                  // 5147
          splice.call(array, fromIndex, 1);                                                                            // 5148
        }                                                                                                              // 5149
      }                                                                                                                // 5150
      return array;                                                                                                    // 5151
    }                                                                                                                  // 5152
                                                                                                                       // 5153
    /**                                                                                                                // 5154
     * Removes elements from `array` corresponding to the given indexes and returns                                    // 5155
     * an array of the removed elements. Indexes may be specified as an array of                                       // 5156
     * indexes or as individual arguments.                                                                             // 5157
     *                                                                                                                 // 5158
     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 5159
     *                                                                                                                 // 5160
     * @static                                                                                                         // 5161
     * @memberOf _                                                                                                     // 5162
     * @category Array                                                                                                 // 5163
     * @param {Array} array The array to modify.                                                                       // 5164
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 5165
     *  specified as individual indexes or arrays of indexes.                                                          // 5166
     * @returns {Array} Returns the new array of removed elements.                                                     // 5167
     * @example                                                                                                        // 5168
     *                                                                                                                 // 5169
     * var array = [5, 10, 15, 20];                                                                                    // 5170
     * var evens = _.pullAt(array, 1, 3);                                                                              // 5171
     *                                                                                                                 // 5172
     * console.log(array);                                                                                             // 5173
     * // => [5, 15]                                                                                                   // 5174
     *                                                                                                                 // 5175
     * console.log(evens);                                                                                             // 5176
     * // => [10, 20]                                                                                                  // 5177
     */                                                                                                                // 5178
    var pullAt = restParam(function(array, indexes) {                                                                  // 5179
      indexes = baseFlatten(indexes);                                                                                  // 5180
                                                                                                                       // 5181
      var result = baseAt(array, indexes);                                                                             // 5182
      basePullAt(array, indexes.sort(baseCompareAscending));                                                           // 5183
      return result;                                                                                                   // 5184
    });                                                                                                                // 5185
                                                                                                                       // 5186
    /**                                                                                                                // 5187
     * Removes all elements from `array` that `predicate` returns truthy for                                           // 5188
     * and returns an array of the removed elements. The predicate is bound to                                         // 5189
     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5190
     *                                                                                                                 // 5191
     * If a property name is provided for `predicate` the created `_.property`                                         // 5192
     * style callback returns the property value of the given element.                                                 // 5193
     *                                                                                                                 // 5194
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5195
     * style callback returns `true` for elements that have a matching property                                        // 5196
     * value, else `false`.                                                                                            // 5197
     *                                                                                                                 // 5198
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5199
     * callback returns `true` for elements that have the properties of the given                                      // 5200
     * object, else `false`.                                                                                           // 5201
     *                                                                                                                 // 5202
     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 5203
     *                                                                                                                 // 5204
     * @static                                                                                                         // 5205
     * @memberOf _                                                                                                     // 5206
     * @category Array                                                                                                 // 5207
     * @param {Array} array The array to modify.                                                                       // 5208
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5209
     *  per iteration.                                                                                                 // 5210
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5211
     * @returns {Array} Returns the new array of removed elements.                                                     // 5212
     * @example                                                                                                        // 5213
     *                                                                                                                 // 5214
     * var array = [1, 2, 3, 4];                                                                                       // 5215
     * var evens = _.remove(array, function(n) {                                                                       // 5216
     *   return n % 2 == 0;                                                                                            // 5217
     * });                                                                                                             // 5218
     *                                                                                                                 // 5219
     * console.log(array);                                                                                             // 5220
     * // => [1, 3]                                                                                                    // 5221
     *                                                                                                                 // 5222
     * console.log(evens);                                                                                             // 5223
     * // => [2, 4]                                                                                                    // 5224
     */                                                                                                                // 5225
    function remove(array, predicate, thisArg) {                                                                       // 5226
      var result = [];                                                                                                 // 5227
      if (!(array && array.length)) {                                                                                  // 5228
        return result;                                                                                                 // 5229
      }                                                                                                                // 5230
      var index = -1,                                                                                                  // 5231
          indexes = [],                                                                                                // 5232
          length = array.length;                                                                                       // 5233
                                                                                                                       // 5234
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 5235
      while (++index < length) {                                                                                       // 5236
        var value = array[index];                                                                                      // 5237
        if (predicate(value, index, array)) {                                                                          // 5238
          result.push(value);                                                                                          // 5239
          indexes.push(index);                                                                                         // 5240
        }                                                                                                              // 5241
      }                                                                                                                // 5242
      basePullAt(array, indexes);                                                                                      // 5243
      return result;                                                                                                   // 5244
    }                                                                                                                  // 5245
                                                                                                                       // 5246
    /**                                                                                                                // 5247
     * Gets all but the first element of `array`.                                                                      // 5248
     *                                                                                                                 // 5249
     * @static                                                                                                         // 5250
     * @memberOf _                                                                                                     // 5251
     * @alias tail                                                                                                     // 5252
     * @category Array                                                                                                 // 5253
     * @param {Array} array The array to query.                                                                        // 5254
     * @returns {Array} Returns the slice of `array`.                                                                  // 5255
     * @example                                                                                                        // 5256
     *                                                                                                                 // 5257
     * _.rest([1, 2, 3]);                                                                                              // 5258
     * // => [2, 3]                                                                                                    // 5259
     */                                                                                                                // 5260
    function rest(array) {                                                                                             // 5261
      return drop(array, 1);                                                                                           // 5262
    }                                                                                                                  // 5263
                                                                                                                       // 5264
    /**                                                                                                                // 5265
     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 5266
     *                                                                                                                 // 5267
     * **Note:** This method is used instead of `Array#slice` to support node                                          // 5268
     * lists in IE < 9 and to ensure dense arrays are returned.                                                        // 5269
     *                                                                                                                 // 5270
     * @static                                                                                                         // 5271
     * @memberOf _                                                                                                     // 5272
     * @category Array                                                                                                 // 5273
     * @param {Array} array The array to slice.                                                                        // 5274
     * @param {number} [start=0] The start position.                                                                   // 5275
     * @param {number} [end=array.length] The end position.                                                            // 5276
     * @returns {Array} Returns the slice of `array`.                                                                  // 5277
     */                                                                                                                // 5278
    function slice(array, start, end) {                                                                                // 5279
      var length = array ? array.length : 0;                                                                           // 5280
      if (!length) {                                                                                                   // 5281
        return [];                                                                                                     // 5282
      }                                                                                                                // 5283
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 5284
        start = 0;                                                                                                     // 5285
        end = length;                                                                                                  // 5286
      }                                                                                                                // 5287
      return baseSlice(array, start, end);                                                                             // 5288
    }                                                                                                                  // 5289
                                                                                                                       // 5290
    /**                                                                                                                // 5291
     * Uses a binary search to determine the lowest index at which `value` should                                      // 5292
     * be inserted into `array` in order to maintain its sort order. If an iteratee                                    // 5293
     * function is provided it's invoked for `value` and each element of `array`                                       // 5294
     * to compute their sort ranking. The iteratee is bound to `thisArg` and                                           // 5295
     * invoked with one argument; (value).                                                                             // 5296
     *                                                                                                                 // 5297
     * If a property name is provided for `iteratee` the created `_.property`                                          // 5298
     * style callback returns the property value of the given element.                                                 // 5299
     *                                                                                                                 // 5300
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5301
     * style callback returns `true` for elements that have a matching property                                        // 5302
     * value, else `false`.                                                                                            // 5303
     *                                                                                                                 // 5304
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5305
     * callback returns `true` for elements that have the properties of the given                                      // 5306
     * object, else `false`.                                                                                           // 5307
     *                                                                                                                 // 5308
     * @static                                                                                                         // 5309
     * @memberOf _                                                                                                     // 5310
     * @category Array                                                                                                 // 5311
     * @param {Array} array The sorted array to inspect.                                                               // 5312
     * @param {*} value The value to evaluate.                                                                         // 5313
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5314
     *  per iteration.                                                                                                 // 5315
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5316
     * @returns {number} Returns the index at which `value` should be inserted                                         // 5317
     *  into `array`.                                                                                                  // 5318
     * @example                                                                                                        // 5319
     *                                                                                                                 // 5320
     * _.sortedIndex([30, 50], 40);                                                                                    // 5321
     * // => 1                                                                                                         // 5322
     *                                                                                                                 // 5323
     * _.sortedIndex([4, 4, 5, 5], 5);                                                                                 // 5324
     * // => 2                                                                                                         // 5325
     *                                                                                                                 // 5326
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };                                              // 5327
     *                                                                                                                 // 5328
     * // using an iteratee function                                                                                   // 5329
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {                                                    // 5330
     *   return this.data[word];                                                                                       // 5331
     * }, dict);                                                                                                       // 5332
     * // => 1                                                                                                         // 5333
     *                                                                                                                 // 5334
     * // using the `_.property` callback shorthand                                                                    // 5335
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');                                                    // 5336
     * // => 1                                                                                                         // 5337
     */                                                                                                                // 5338
    var sortedIndex = createSortedIndex();                                                                             // 5339
                                                                                                                       // 5340
    /**                                                                                                                // 5341
     * This method is like `_.sortedIndex` except that it returns the highest                                          // 5342
     * index at which `value` should be inserted into `array` in order to                                              // 5343
     * maintain its sort order.                                                                                        // 5344
     *                                                                                                                 // 5345
     * @static                                                                                                         // 5346
     * @memberOf _                                                                                                     // 5347
     * @category Array                                                                                                 // 5348
     * @param {Array} array The sorted array to inspect.                                                               // 5349
     * @param {*} value The value to evaluate.                                                                         // 5350
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5351
     *  per iteration.                                                                                                 // 5352
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5353
     * @returns {number} Returns the index at which `value` should be inserted                                         // 5354
     *  into `array`.                                                                                                  // 5355
     * @example                                                                                                        // 5356
     *                                                                                                                 // 5357
     * _.sortedLastIndex([4, 4, 5, 5], 5);                                                                             // 5358
     * // => 4                                                                                                         // 5359
     */                                                                                                                // 5360
    var sortedLastIndex = createSortedIndex(true);                                                                     // 5361
                                                                                                                       // 5362
    /**                                                                                                                // 5363
     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 5364
     *                                                                                                                 // 5365
     * @static                                                                                                         // 5366
     * @memberOf _                                                                                                     // 5367
     * @category Array                                                                                                 // 5368
     * @param {Array} array The array to query.                                                                        // 5369
     * @param {number} [n=1] The number of elements to take.                                                           // 5370
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5371
     * @returns {Array} Returns the slice of `array`.                                                                  // 5372
     * @example                                                                                                        // 5373
     *                                                                                                                 // 5374
     * _.take([1, 2, 3]);                                                                                              // 5375
     * // => [1]                                                                                                       // 5376
     *                                                                                                                 // 5377
     * _.take([1, 2, 3], 2);                                                                                           // 5378
     * // => [1, 2]                                                                                                    // 5379
     *                                                                                                                 // 5380
     * _.take([1, 2, 3], 5);                                                                                           // 5381
     * // => [1, 2, 3]                                                                                                 // 5382
     *                                                                                                                 // 5383
     * _.take([1, 2, 3], 0);                                                                                           // 5384
     * // => []                                                                                                        // 5385
     */                                                                                                                // 5386
    function take(array, n, guard) {                                                                                   // 5387
      var length = array ? array.length : 0;                                                                           // 5388
      if (!length) {                                                                                                   // 5389
        return [];                                                                                                     // 5390
      }                                                                                                                // 5391
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5392
        n = 1;                                                                                                         // 5393
      }                                                                                                                // 5394
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5395
    }                                                                                                                  // 5396
                                                                                                                       // 5397
    /**                                                                                                                // 5398
     * Creates a slice of `array` with `n` elements taken from the end.                                                // 5399
     *                                                                                                                 // 5400
     * @static                                                                                                         // 5401
     * @memberOf _                                                                                                     // 5402
     * @category Array                                                                                                 // 5403
     * @param {Array} array The array to query.                                                                        // 5404
     * @param {number} [n=1] The number of elements to take.                                                           // 5405
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5406
     * @returns {Array} Returns the slice of `array`.                                                                  // 5407
     * @example                                                                                                        // 5408
     *                                                                                                                 // 5409
     * _.takeRight([1, 2, 3]);                                                                                         // 5410
     * // => [3]                                                                                                       // 5411
     *                                                                                                                 // 5412
     * _.takeRight([1, 2, 3], 2);                                                                                      // 5413
     * // => [2, 3]                                                                                                    // 5414
     *                                                                                                                 // 5415
     * _.takeRight([1, 2, 3], 5);                                                                                      // 5416
     * // => [1, 2, 3]                                                                                                 // 5417
     *                                                                                                                 // 5418
     * _.takeRight([1, 2, 3], 0);                                                                                      // 5419
     * // => []                                                                                                        // 5420
     */                                                                                                                // 5421
    function takeRight(array, n, guard) {                                                                              // 5422
      var length = array ? array.length : 0;                                                                           // 5423
      if (!length) {                                                                                                   // 5424
        return [];                                                                                                     // 5425
      }                                                                                                                // 5426
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5427
        n = 1;                                                                                                         // 5428
      }                                                                                                                // 5429
      n = length - (+n || 0);                                                                                          // 5430
      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 5431
    }                                                                                                                  // 5432
                                                                                                                       // 5433
    /**                                                                                                                // 5434
     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 5435
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`                                     // 5436
     * and invoked with three arguments: (value, index, array).                                                        // 5437
     *                                                                                                                 // 5438
     * If a property name is provided for `predicate` the created `_.property`                                         // 5439
     * style callback returns the property value of the given element.                                                 // 5440
     *                                                                                                                 // 5441
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5442
     * style callback returns `true` for elements that have a matching property                                        // 5443
     * value, else `false`.                                                                                            // 5444
     *                                                                                                                 // 5445
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5446
     * callback returns `true` for elements that have the properties of the given                                      // 5447
     * object, else `false`.                                                                                           // 5448
     *                                                                                                                 // 5449
     * @static                                                                                                         // 5450
     * @memberOf _                                                                                                     // 5451
     * @category Array                                                                                                 // 5452
     * @param {Array} array The array to query.                                                                        // 5453
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5454
     *  per iteration.                                                                                                 // 5455
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5456
     * @returns {Array} Returns the slice of `array`.                                                                  // 5457
     * @example                                                                                                        // 5458
     *                                                                                                                 // 5459
     * _.takeRightWhile([1, 2, 3], function(n) {                                                                       // 5460
     *   return n > 1;                                                                                                 // 5461
     * });                                                                                                             // 5462
     * // => [2, 3]                                                                                                    // 5463
     *                                                                                                                 // 5464
     * var users = [                                                                                                   // 5465
     *   { 'user': 'barney',  'active': true },                                                                        // 5466
     *   { 'user': 'fred',    'active': false },                                                                       // 5467
     *   { 'user': 'pebbles', 'active': false }                                                                        // 5468
     * ];                                                                                                              // 5469
     *                                                                                                                 // 5470
     * // using the `_.matches` callback shorthand                                                                     // 5471
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 5472
     * // => ['pebbles']                                                                                               // 5473
     *                                                                                                                 // 5474
     * // using the `_.matchesProperty` callback shorthand                                                             // 5475
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');                                                      // 5476
     * // => ['fred', 'pebbles']                                                                                       // 5477
     *                                                                                                                 // 5478
     * // using the `_.property` callback shorthand                                                                    // 5479
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');                                                             // 5480
     * // => []                                                                                                        // 5481
     */                                                                                                                // 5482
    function takeRightWhile(array, predicate, thisArg) {                                                               // 5483
      return (array && array.length)                                                                                   // 5484
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)                                            // 5485
        : [];                                                                                                          // 5486
    }                                                                                                                  // 5487
                                                                                                                       // 5488
    /**                                                                                                                // 5489
     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 5490
     * are taken until `predicate` returns falsey. The predicate is bound to                                           // 5491
     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5492
     *                                                                                                                 // 5493
     * If a property name is provided for `predicate` the created `_.property`                                         // 5494
     * style callback returns the property value of the given element.                                                 // 5495
     *                                                                                                                 // 5496
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5497
     * style callback returns `true` for elements that have a matching property                                        // 5498
     * value, else `false`.                                                                                            // 5499
     *                                                                                                                 // 5500
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5501
     * callback returns `true` for elements that have the properties of the given                                      // 5502
     * object, else `false`.                                                                                           // 5503
     *                                                                                                                 // 5504
     * @static                                                                                                         // 5505
     * @memberOf _                                                                                                     // 5506
     * @category Array                                                                                                 // 5507
     * @param {Array} array The array to query.                                                                        // 5508
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5509
     *  per iteration.                                                                                                 // 5510
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5511
     * @returns {Array} Returns the slice of `array`.                                                                  // 5512
     * @example                                                                                                        // 5513
     *                                                                                                                 // 5514
     * _.takeWhile([1, 2, 3], function(n) {                                                                            // 5515
     *   return n < 3;                                                                                                 // 5516
     * });                                                                                                             // 5517
     * // => [1, 2]                                                                                                    // 5518
     *                                                                                                                 // 5519
     * var users = [                                                                                                   // 5520
     *   { 'user': 'barney',  'active': false },                                                                       // 5521
     *   { 'user': 'fred',    'active': false},                                                                        // 5522
     *   { 'user': 'pebbles', 'active': true }                                                                         // 5523
     * ];                                                                                                              // 5524
     *                                                                                                                 // 5525
     * // using the `_.matches` callback shorthand                                                                     // 5526
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 5527
     * // => ['barney']                                                                                                // 5528
     *                                                                                                                 // 5529
     * // using the `_.matchesProperty` callback shorthand                                                             // 5530
     * _.pluck(_.takeWhile(users, 'active', false), 'user');                                                           // 5531
     * // => ['barney', 'fred']                                                                                        // 5532
     *                                                                                                                 // 5533
     * // using the `_.property` callback shorthand                                                                    // 5534
     * _.pluck(_.takeWhile(users, 'active'), 'user');                                                                  // 5535
     * // => []                                                                                                        // 5536
     */                                                                                                                // 5537
    function takeWhile(array, predicate, thisArg) {                                                                    // 5538
      return (array && array.length)                                                                                   // 5539
        ? baseWhile(array, getCallback(predicate, thisArg, 3))                                                         // 5540
        : [];                                                                                                          // 5541
    }                                                                                                                  // 5542
                                                                                                                       // 5543
    /**                                                                                                                // 5544
     * Creates an array of unique values, in order, from all of the provided arrays                                    // 5545
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5546
     * for equality comparisons.                                                                                       // 5547
     *                                                                                                                 // 5548
     * @static                                                                                                         // 5549
     * @memberOf _                                                                                                     // 5550
     * @category Array                                                                                                 // 5551
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5552
     * @returns {Array} Returns the new array of combined values.                                                      // 5553
     * @example                                                                                                        // 5554
     *                                                                                                                 // 5555
     * _.union([1, 2], [4, 2], [2, 1]);                                                                                // 5556
     * // => [1, 2, 4]                                                                                                 // 5557
     */                                                                                                                // 5558
    var union = restParam(function(arrays) {                                                                           // 5559
      return baseUniq(baseFlatten(arrays, false, true));                                                               // 5560
    });                                                                                                                // 5561
                                                                                                                       // 5562
    /**                                                                                                                // 5563
     * Creates a duplicate-free version of an array, using                                                             // 5564
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5565
     * for equality comparisons, in which only the first occurence of each element                                     // 5566
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm                                     // 5567
     * for sorted arrays. If an iteratee function is provided it's invoked for                                         // 5568
     * each element in the array to generate the criterion by which uniqueness                                         // 5569
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three                                        // 5570
     * arguments: (value, index, array).                                                                               // 5571
     *                                                                                                                 // 5572
     * If a property name is provided for `iteratee` the created `_.property`                                          // 5573
     * style callback returns the property value of the given element.                                                 // 5574
     *                                                                                                                 // 5575
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5576
     * style callback returns `true` for elements that have a matching property                                        // 5577
     * value, else `false`.                                                                                            // 5578
     *                                                                                                                 // 5579
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5580
     * callback returns `true` for elements that have the properties of the given                                      // 5581
     * object, else `false`.                                                                                           // 5582
     *                                                                                                                 // 5583
     * @static                                                                                                         // 5584
     * @memberOf _                                                                                                     // 5585
     * @alias unique                                                                                                   // 5586
     * @category Array                                                                                                 // 5587
     * @param {Array} array The array to inspect.                                                                      // 5588
     * @param {boolean} [isSorted] Specify the array is sorted.                                                        // 5589
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 5590
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5591
     * @returns {Array} Returns the new duplicate-value-free array.                                                    // 5592
     * @example                                                                                                        // 5593
     *                                                                                                                 // 5594
     * _.uniq([2, 1, 2]);                                                                                              // 5595
     * // => [2, 1]                                                                                                    // 5596
     *                                                                                                                 // 5597
     * // using `isSorted`                                                                                             // 5598
     * _.uniq([1, 1, 2], true);                                                                                        // 5599
     * // => [1, 2]                                                                                                    // 5600
     *                                                                                                                 // 5601
     * // using an iteratee function                                                                                   // 5602
     * _.uniq([1, 2.5, 1.5, 2], function(n) {                                                                          // 5603
     *   return this.floor(n);                                                                                         // 5604
     * }, Math);                                                                                                       // 5605
     * // => [1, 2.5]                                                                                                  // 5606
     *                                                                                                                 // 5607
     * // using the `_.property` callback shorthand                                                                    // 5608
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                              // 5609
     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 5610
     */                                                                                                                // 5611
    function uniq(array, isSorted, iteratee, thisArg) {                                                                // 5612
      var length = array ? array.length : 0;                                                                           // 5613
      if (!length) {                                                                                                   // 5614
        return [];                                                                                                     // 5615
      }                                                                                                                // 5616
      if (isSorted != null && typeof isSorted != 'boolean') {                                                          // 5617
        thisArg = iteratee;                                                                                            // 5618
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;                                    // 5619
        isSorted = false;                                                                                              // 5620
      }                                                                                                                // 5621
      var callback = getCallback();                                                                                    // 5622
      if (!(iteratee == null && callback === baseCallback)) {                                                          // 5623
        iteratee = callback(iteratee, thisArg, 3);                                                                     // 5624
      }                                                                                                                // 5625
      return (isSorted && getIndexOf() === baseIndexOf)                                                                // 5626
        ? sortedUniq(array, iteratee)                                                                                  // 5627
        : baseUniq(array, iteratee);                                                                                   // 5628
    }                                                                                                                  // 5629
                                                                                                                       // 5630
    /**                                                                                                                // 5631
     * This method is like `_.zip` except that it accepts an array of grouped                                          // 5632
     * elements and creates an array regrouping the elements to their pre-zip                                          // 5633
     * configuration.                                                                                                  // 5634
     *                                                                                                                 // 5635
     * @static                                                                                                         // 5636
     * @memberOf _                                                                                                     // 5637
     * @category Array                                                                                                 // 5638
     * @param {Array} array The array of grouped elements to process.                                                  // 5639
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5640
     * @example                                                                                                        // 5641
     *                                                                                                                 // 5642
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 5643
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5644
     *                                                                                                                 // 5645
     * _.unzip(zipped);                                                                                                // 5646
     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 5647
     */                                                                                                                // 5648
    function unzip(array) {                                                                                            // 5649
      if (!(array && array.length)) {                                                                                  // 5650
        return [];                                                                                                     // 5651
      }                                                                                                                // 5652
      var index = -1,                                                                                                  // 5653
          length = 0;                                                                                                  // 5654
                                                                                                                       // 5655
      array = arrayFilter(array, function(group) {                                                                     // 5656
        if (isArrayLike(group)) {                                                                                      // 5657
          length = nativeMax(group.length, length);                                                                    // 5658
          return true;                                                                                                 // 5659
        }                                                                                                              // 5660
      });                                                                                                              // 5661
      var result = Array(length);                                                                                      // 5662
      while (++index < length) {                                                                                       // 5663
        result[index] = arrayMap(array, baseProperty(index));                                                          // 5664
      }                                                                                                                // 5665
      return result;                                                                                                   // 5666
    }                                                                                                                  // 5667
                                                                                                                       // 5668
    /**                                                                                                                // 5669
     * This method is like `_.unzip` except that it accepts an iteratee to specify                                     // 5670
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`                                   // 5671
     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5672
     *                                                                                                                 // 5673
     * @static                                                                                                         // 5674
     * @memberOf _                                                                                                     // 5675
     * @category Array                                                                                                 // 5676
     * @param {Array} array The array of grouped elements to process.                                                  // 5677
     * @param {Function} [iteratee] The function to combine regrouped values.                                          // 5678
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5679
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5680
     * @example                                                                                                        // 5681
     *                                                                                                                 // 5682
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 5683
     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 5684
     *                                                                                                                 // 5685
     * _.unzipWith(zipped, _.add);                                                                                     // 5686
     * // => [3, 30, 300]                                                                                              // 5687
     */                                                                                                                // 5688
    function unzipWith(array, iteratee, thisArg) {                                                                     // 5689
      var length = array ? array.length : 0;                                                                           // 5690
      if (!length) {                                                                                                   // 5691
        return [];                                                                                                     // 5692
      }                                                                                                                // 5693
      var result = unzip(array);                                                                                       // 5694
      if (iteratee == null) {                                                                                          // 5695
        return result;                                                                                                 // 5696
      }                                                                                                                // 5697
      iteratee = bindCallback(iteratee, thisArg, 4);                                                                   // 5698
      return arrayMap(result, function(group) {                                                                        // 5699
        return arrayReduce(group, iteratee, undefined, true);                                                          // 5700
      });                                                                                                              // 5701
    }                                                                                                                  // 5702
                                                                                                                       // 5703
    /**                                                                                                                // 5704
     * Creates an array excluding all provided values using                                                            // 5705
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5706
     * for equality comparisons.                                                                                       // 5707
     *                                                                                                                 // 5708
     * @static                                                                                                         // 5709
     * @memberOf _                                                                                                     // 5710
     * @category Array                                                                                                 // 5711
     * @param {Array} array The array to filter.                                                                       // 5712
     * @param {...*} [values] The values to exclude.                                                                   // 5713
     * @returns {Array} Returns the new array of filtered values.                                                      // 5714
     * @example                                                                                                        // 5715
     *                                                                                                                 // 5716
     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 5717
     * // => [3]                                                                                                       // 5718
     */                                                                                                                // 5719
    var without = restParam(function(array, values) {                                                                  // 5720
      return isArrayLike(array)                                                                                        // 5721
        ? baseDifference(array, values)                                                                                // 5722
        : [];                                                                                                          // 5723
    });                                                                                                                // 5724
                                                                                                                       // 5725
    /**                                                                                                                // 5726
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.                                                                                         // 5728
     *                                                                                                                 // 5729
     * @static                                                                                                         // 5730
     * @memberOf _                                                                                                     // 5731
     * @category Array                                                                                                 // 5732
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5733
     * @returns {Array} Returns the new array of values.                                                               // 5734
     * @example                                                                                                        // 5735
     *                                                                                                                 // 5736
     * _.xor([1, 2], [4, 2]);                                                                                          // 5737
     * // => [1, 4]                                                                                                    // 5738
     */                                                                                                                // 5739
    function xor() {                                                                                                   // 5740
      var index = -1,                                                                                                  // 5741
          length = arguments.length;                                                                                   // 5742
                                                                                                                       // 5743
      while (++index < length) {                                                                                       // 5744
        var array = arguments[index];                                                                                  // 5745
        if (isArrayLike(array)) {                                                                                      // 5746
          var result = result                                                                                          // 5747
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))                                  // 5748
            : array;                                                                                                   // 5749
        }                                                                                                              // 5750
      }                                                                                                                // 5751
      return result ? baseUniq(result) : [];                                                                           // 5752
    }                                                                                                                  // 5753
                                                                                                                       // 5754
    /**                                                                                                                // 5755
     * Creates an array of grouped elements, the first of which contains the first                                     // 5756
     * elements of the given arrays, the second of which contains the second elements                                  // 5757
     * of the given arrays, and so on.                                                                                 // 5758
     *                                                                                                                 // 5759
     * @static                                                                                                         // 5760
     * @memberOf _                                                                                                     // 5761
     * @category Array                                                                                                 // 5762
     * @param {...Array} [arrays] The arrays to process.                                                               // 5763
     * @returns {Array} Returns the new array of grouped elements.                                                     // 5764
     * @example                                                                                                        // 5765
     *                                                                                                                 // 5766
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 5767
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5768
     */                                                                                                                // 5769
    var zip = restParam(unzip);                                                                                        // 5770
                                                                                                                       // 5771
    /**                                                                                                                // 5772
     * The inverse of `_.pairs`; this method returns an object composed from arrays                                    // 5773
     * of property names and values. Provide either a single two dimensional array,                                    // 5774
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names                                    // 5775
     * and one of corresponding values.                                                                                // 5776
     *                                                                                                                 // 5777
     * @static                                                                                                         // 5778
     * @memberOf _                                                                                                     // 5779
     * @alias object                                                                                                   // 5780
     * @category Array                                                                                                 // 5781
     * @param {Array} props The property names.                                                                        // 5782
     * @param {Array} [values=[]] The property values.                                                                 // 5783
     * @returns {Object} Returns the new object.                                                                       // 5784
     * @example                                                                                                        // 5785
     *                                                                                                                 // 5786
     * _.zipObject([['fred', 30], ['barney', 40]]);                                                                    // 5787
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5788
     *                                                                                                                 // 5789
     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 5790
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5791
     */                                                                                                                // 5792
    function zipObject(props, values) {                                                                                // 5793
      var index = -1,                                                                                                  // 5794
          length = props ? props.length : 0,                                                                           // 5795
          result = {};                                                                                                 // 5796
                                                                                                                       // 5797
      if (length && !values && !isArray(props[0])) {                                                                   // 5798
        values = [];                                                                                                   // 5799
      }                                                                                                                // 5800
      while (++index < length) {                                                                                       // 5801
        var key = props[index];                                                                                        // 5802
        if (values) {                                                                                                  // 5803
          result[key] = values[index];                                                                                 // 5804
        } else if (key) {                                                                                              // 5805
          result[key[0]] = key[1];                                                                                     // 5806
        }                                                                                                              // 5807
      }                                                                                                                // 5808
      return result;                                                                                                   // 5809
    }                                                                                                                  // 5810
                                                                                                                       // 5811
    /**                                                                                                                // 5812
     * This method is like `_.zip` except that it accepts an iteratee to specify                                       // 5813
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`                                     // 5814
     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5815
     *                                                                                                                 // 5816
     * @static                                                                                                         // 5817
     * @memberOf _                                                                                                     // 5818
     * @category Array                                                                                                 // 5819
     * @param {...Array} [arrays] The arrays to process.                                                               // 5820
     * @param {Function} [iteratee] The function to combine grouped values.                                            // 5821
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5822
     * @returns {Array} Returns the new array of grouped elements.                                                     // 5823
     * @example                                                                                                        // 5824
     *                                                                                                                 // 5825
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);                                                                 // 5826
     * // => [111, 222]                                                                                                // 5827
     */                                                                                                                // 5828
    var zipWith = restParam(function(arrays) {                                                                         // 5829
      var length = arrays.length,                                                                                      // 5830
          iteratee = length > 2 ? arrays[length - 2] : undefined,                                                      // 5831
          thisArg = length > 1 ? arrays[length - 1] : undefined;                                                       // 5832
                                                                                                                       // 5833
      if (length > 2 && typeof iteratee == 'function') {                                                               // 5834
        length -= 2;                                                                                                   // 5835
      } else {                                                                                                         // 5836
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;                     // 5837
        thisArg = undefined;                                                                                           // 5838
      }                                                                                                                // 5839
      arrays.length = length;                                                                                          // 5840
      return unzipWith(arrays, iteratee, thisArg);                                                                     // 5841
    });                                                                                                                // 5842
                                                                                                                       // 5843
    /*------------------------------------------------------------------------*/                                       // 5844
                                                                                                                       // 5845
    /**                                                                                                                // 5846
     * Creates a `lodash` object that wraps `value` with explicit method                                               // 5847
     * chaining enabled.                                                                                               // 5848
     *                                                                                                                 // 5849
     * @static                                                                                                         // 5850
     * @memberOf _                                                                                                     // 5851
     * @category Chain                                                                                                 // 5852
     * @param {*} value The value to wrap.                                                                             // 5853
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5854
     * @example                                                                                                        // 5855
     *                                                                                                                 // 5856
     * var users = [                                                                                                   // 5857
     *   { 'user': 'barney',  'age': 36 },                                                                             // 5858
     *   { 'user': 'fred',    'age': 40 },                                                                             // 5859
     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 5860
     * ];                                                                                                              // 5861
     *                                                                                                                 // 5862
     * var youngest = _.chain(users)                                                                                   // 5863
     *   .sortBy('age')                                                                                                // 5864
     *   .map(function(chr) {                                                                                          // 5865
     *     return chr.user + ' is ' + chr.age;                                                                         // 5866
     *   })                                                                                                            // 5867
     *   .first()                                                                                                      // 5868
     *   .value();                                                                                                     // 5869
     * // => 'pebbles is 1'                                                                                            // 5870
     */                                                                                                                // 5871
    function chain(value) {                                                                                            // 5872
      var result = lodash(value);                                                                                      // 5873
      result.__chain__ = true;                                                                                         // 5874
      return result;                                                                                                   // 5875
    }                                                                                                                  // 5876
                                                                                                                       // 5877
    /**                                                                                                                // 5878
     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 5879
     * bound to `thisArg` and invoked with one argument; (value). The purpose of                                       // 5880
     * this method is to "tap into" a method chain in order to perform operations                                      // 5881
     * on intermediate results within the chain.                                                                       // 5882
     *                                                                                                                 // 5883
     * @static                                                                                                         // 5884
     * @memberOf _                                                                                                     // 5885
     * @category Chain                                                                                                 // 5886
     * @param {*} value The value to provide to `interceptor`.                                                         // 5887
     * @param {Function} interceptor The function to invoke.                                                           // 5888
     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 5889
     * @returns {*} Returns `value`.                                                                                   // 5890
     * @example                                                                                                        // 5891
     *                                                                                                                 // 5892
     * _([1, 2, 3])                                                                                                    // 5893
     *  .tap(function(array) {                                                                                         // 5894
     *    array.pop();                                                                                                 // 5895
     *  })                                                                                                             // 5896
     *  .reverse()                                                                                                     // 5897
     *  .value();                                                                                                      // 5898
     * // => [2, 1]                                                                                                    // 5899
     */                                                                                                                // 5900
    function tap(value, interceptor, thisArg) {                                                                        // 5901
      interceptor.call(thisArg, value);                                                                                // 5902
      return value;                                                                                                    // 5903
    }                                                                                                                  // 5904
                                                                                                                       // 5905
    /**                                                                                                                // 5906
     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 5907
     *                                                                                                                 // 5908
     * @static                                                                                                         // 5909
     * @memberOf _                                                                                                     // 5910
     * @category Chain                                                                                                 // 5911
     * @param {*} value The value to provide to `interceptor`.                                                         // 5912
     * @param {Function} interceptor The function to invoke.                                                           // 5913
     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 5914
     * @returns {*} Returns the result of `interceptor`.                                                               // 5915
     * @example                                                                                                        // 5916
     *                                                                                                                 // 5917
     * _('  abc  ')                                                                                                    // 5918
     *  .chain()                                                                                                       // 5919
     *  .trim()                                                                                                        // 5920
     *  .thru(function(value) {                                                                                        // 5921
     *    return [value];                                                                                              // 5922
     *  })                                                                                                             // 5923
     *  .value();                                                                                                      // 5924
     * // => ['abc']                                                                                                   // 5925
     */                                                                                                                // 5926
    function thru(value, interceptor, thisArg) {                                                                       // 5927
      return interceptor.call(thisArg, value);                                                                         // 5928
    }                                                                                                                  // 5929
                                                                                                                       // 5930
    /**                                                                                                                // 5931
     * Enables explicit method chaining on the wrapper object.                                                         // 5932
     *                                                                                                                 // 5933
     * @name chain                                                                                                     // 5934
     * @memberOf _                                                                                                     // 5935
     * @category Chain                                                                                                 // 5936
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5937
     * @example                                                                                                        // 5938
     *                                                                                                                 // 5939
     * var users = [                                                                                                   // 5940
     *   { 'user': 'barney', 'age': 36 },                                                                              // 5941
     *   { 'user': 'fred',   'age': 40 }                                                                               // 5942
     * ];                                                                                                              // 5943
     *                                                                                                                 // 5944
     * // without explicit chaining                                                                                    // 5945
     * _(users).first();                                                                                               // 5946
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 5947
     *                                                                                                                 // 5948
     * // with explicit chaining                                                                                       // 5949
     * _(users).chain()                                                                                                // 5950
     *   .first()                                                                                                      // 5951
     *   .pick('user')                                                                                                 // 5952
     *   .value();                                                                                                     // 5953
     * // => { 'user': 'barney' }                                                                                      // 5954
     */                                                                                                                // 5955
    function wrapperChain() {                                                                                          // 5956
      return chain(this);                                                                                              // 5957
    }                                                                                                                  // 5958
                                                                                                                       // 5959
    /**                                                                                                                // 5960
     * Executes the chained sequence and returns the wrapped result.                                                   // 5961
     *                                                                                                                 // 5962
     * @name commit                                                                                                    // 5963
     * @memberOf _                                                                                                     // 5964
     * @category Chain                                                                                                 // 5965
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 5966
     * @example                                                                                                        // 5967
     *                                                                                                                 // 5968
     * var array = [1, 2];                                                                                             // 5969
     * var wrapped = _(array).push(3);                                                                                 // 5970
     *                                                                                                                 // 5971
     * console.log(array);                                                                                             // 5972
     * // => [1, 2]                                                                                                    // 5973
     *                                                                                                                 // 5974
     * wrapped = wrapped.commit();                                                                                     // 5975
     * console.log(array);                                                                                             // 5976
     * // => [1, 2, 3]                                                                                                 // 5977
     *                                                                                                                 // 5978
     * wrapped.last();                                                                                                 // 5979
     * // => 3                                                                                                         // 5980
     *                                                                                                                 // 5981
     * console.log(array);                                                                                             // 5982
     * // => [1, 2, 3]                                                                                                 // 5983
     */                                                                                                                // 5984
    function wrapperCommit() {                                                                                         // 5985
      return new LodashWrapper(this.value(), this.__chain__);                                                          // 5986
    }                                                                                                                  // 5987
                                                                                                                       // 5988
    /**                                                                                                                // 5989
     * Creates a new array joining a wrapped array with any additional arrays                                          // 5990
     * and/or values.                                                                                                  // 5991
     *                                                                                                                 // 5992
     * @name concat                                                                                                    // 5993
     * @memberOf _                                                                                                     // 5994
     * @category Chain                                                                                                 // 5995
     * @param {...*} [values] The values to concatenate.                                                               // 5996
     * @returns {Array} Returns the new concatenated array.                                                            // 5997
     * @example                                                                                                        // 5998
     *                                                                                                                 // 5999
     * var array = [1];                                                                                                // 6000
     * var wrapped = _(array).concat(2, [3], [[4]]);                                                                   // 6001
     *                                                                                                                 // 6002
     * console.log(wrapped.value());                                                                                   // 6003
     * // => [1, 2, 3, [4]]                                                                                            // 6004
     *                                                                                                                 // 6005
     * console.log(array);                                                                                             // 6006
     * // => [1]                                                                                                       // 6007
     */                                                                                                                // 6008
    var wrapperConcat = restParam(function(values) {                                                                   // 6009
      values = baseFlatten(values);                                                                                    // 6010
      return this.thru(function(array) {                                                                               // 6011
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);                                        // 6012
      });                                                                                                              // 6013
    });                                                                                                                // 6014
                                                                                                                       // 6015
    /**                                                                                                                // 6016
     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 6017
     *                                                                                                                 // 6018
     * @name plant                                                                                                     // 6019
     * @memberOf _                                                                                                     // 6020
     * @category Chain                                                                                                 // 6021
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6022
     * @example                                                                                                        // 6023
     *                                                                                                                 // 6024
     * var array = [1, 2];                                                                                             // 6025
     * var wrapped = _(array).map(function(value) {                                                                    // 6026
     *   return Math.pow(value, 2);                                                                                    // 6027
     * });                                                                                                             // 6028
     *                                                                                                                 // 6029
     * var other = [3, 4];                                                                                             // 6030
     * var otherWrapped = wrapped.plant(other);                                                                        // 6031
     *                                                                                                                 // 6032
     * otherWrapped.value();                                                                                           // 6033
     * // => [9, 16]                                                                                                   // 6034
     *                                                                                                                 // 6035
     * wrapped.value();                                                                                                // 6036
     * // => [1, 4]                                                                                                    // 6037
     */                                                                                                                // 6038
    function wrapperPlant(value) {                                                                                     // 6039
      var result,                                                                                                      // 6040
          parent = this;                                                                                               // 6041
                                                                                                                       // 6042
      while (parent instanceof baseLodash) {                                                                           // 6043
        var clone = wrapperClone(parent);                                                                              // 6044
        if (result) {                                                                                                  // 6045
          previous.__wrapped__ = clone;                                                                                // 6046
        } else {                                                                                                       // 6047
          result = clone;                                                                                              // 6048
        }                                                                                                              // 6049
        var previous = clone;                                                                                          // 6050
        parent = parent.__wrapped__;                                                                                   // 6051
      }                                                                                                                // 6052
      previous.__wrapped__ = value;                                                                                    // 6053
      return result;                                                                                                   // 6054
    }                                                                                                                  // 6055
                                                                                                                       // 6056
    /**                                                                                                                // 6057
     * Reverses the wrapped array so the first element becomes the last, the                                           // 6058
     * second element becomes the second to last, and so on.                                                           // 6059
     *                                                                                                                 // 6060
     * **Note:** This method mutates the wrapped array.                                                                // 6061
     *                                                                                                                 // 6062
     * @name reverse                                                                                                   // 6063
     * @memberOf _                                                                                                     // 6064
     * @category Chain                                                                                                 // 6065
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.                                           // 6066
     * @example                                                                                                        // 6067
     *                                                                                                                 // 6068
     * var array = [1, 2, 3];                                                                                          // 6069
     *                                                                                                                 // 6070
     * _(array).reverse().value()                                                                                      // 6071
     * // => [3, 2, 1]                                                                                                 // 6072
     *                                                                                                                 // 6073
     * console.log(array);                                                                                             // 6074
     * // => [3, 2, 1]                                                                                                 // 6075
     */                                                                                                                // 6076
    function wrapperReverse() {                                                                                        // 6077
      var value = this.__wrapped__;                                                                                    // 6078
                                                                                                                       // 6079
      var interceptor = function(value) {                                                                              // 6080
        return value.reverse();                                                                                        // 6081
      };                                                                                                               // 6082
      if (value instanceof LazyWrapper) {                                                                              // 6083
        var wrapped = value;                                                                                           // 6084
        if (this.__actions__.length) {                                                                                 // 6085
          wrapped = new LazyWrapper(this);                                                                             // 6086
        }                                                                                                              // 6087
        wrapped = wrapped.reverse();                                                                                   // 6088
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                       // 6089
        return new LodashWrapper(wrapped, this.__chain__);                                                             // 6090
      }                                                                                                                // 6091
      return this.thru(interceptor);                                                                                   // 6092
    }                                                                                                                  // 6093
                                                                                                                       // 6094
    /**                                                                                                                // 6095
     * Produces the result of coercing the unwrapped value to a string.                                                // 6096
     *                                                                                                                 // 6097
     * @name toString                                                                                                  // 6098
     * @memberOf _                                                                                                     // 6099
     * @category Chain                                                                                                 // 6100
     * @returns {string} Returns the coerced string value.                                                             // 6101
     * @example                                                                                                        // 6102
     *                                                                                                                 // 6103
     * _([1, 2, 3]).toString();                                                                                        // 6104
     * // => '1,2,3'                                                                                                   // 6105
     */                                                                                                                // 6106
    function wrapperToString() {                                                                                       // 6107
      return (this.value() + '');                                                                                      // 6108
    }                                                                                                                  // 6109
                                                                                                                       // 6110
    /**                                                                                                                // 6111
     * Executes the chained sequence to extract the unwrapped value.                                                   // 6112
     *                                                                                                                 // 6113
     * @name value                                                                                                     // 6114
     * @memberOf _                                                                                                     // 6115
     * @alias run, toJSON, valueOf                                                                                     // 6116
     * @category Chain                                                                                                 // 6117
     * @returns {*} Returns the resolved unwrapped value.                                                              // 6118
     * @example                                                                                                        // 6119
     *                                                                                                                 // 6120
     * _([1, 2, 3]).value();                                                                                           // 6121
     * // => [1, 2, 3]                                                                                                 // 6122
     */                                                                                                                // 6123
    function wrapperValue() {                                                                                          // 6124
      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 6125
    }                                                                                                                  // 6126
                                                                                                                       // 6127
    /*------------------------------------------------------------------------*/                                       // 6128
                                                                                                                       // 6129
    /**                                                                                                                // 6130
     * Creates an array of elements corresponding to the given keys, or indexes,                                       // 6131
     * of `collection`. Keys may be specified as individual arguments or as arrays                                     // 6132
     * of keys.                                                                                                        // 6133
     *                                                                                                                 // 6134
     * @static                                                                                                         // 6135
     * @memberOf _                                                                                                     // 6136
     * @category Collection                                                                                            // 6137
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6138
     * @param {...(number|number[]|string|string[])} [props] The property names                                        // 6139
     *  or indexes of elements to pick, specified individually or in arrays.                                           // 6140
     * @returns {Array} Returns the new array of picked elements.                                                      // 6141
     * @example                                                                                                        // 6142
     *                                                                                                                 // 6143
     * _.at(['a', 'b', 'c'], [0, 2]);                                                                                  // 6144
     * // => ['a', 'c']                                                                                                // 6145
     *                                                                                                                 // 6146
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);                                                                      // 6147
     * // => ['barney', 'pebbles']                                                                                     // 6148
     */                                                                                                                // 6149
    var at = restParam(function(collection, props) {                                                                   // 6150
      return baseAt(collection, baseFlatten(props));                                                                   // 6151
    });                                                                                                                // 6152
                                                                                                                       // 6153
    /**                                                                                                                // 6154
     * Creates an object composed of keys generated from the results of running                                        // 6155
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6156
     * of each key is the number of times the key was returned by `iteratee`.                                          // 6157
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6158
     * (value, index|key, collection).                                                                                 // 6159
     *                                                                                                                 // 6160
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6161
     * style callback returns the property value of the given element.                                                 // 6162
     *                                                                                                                 // 6163
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6164
     * style callback returns `true` for elements that have a matching property                                        // 6165
     * value, else `false`.                                                                                            // 6166
     *                                                                                                                 // 6167
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6168
     * callback returns `true` for elements that have the properties of the given                                      // 6169
     * object, else `false`.                                                                                           // 6170
     *                                                                                                                 // 6171
     * @static                                                                                                         // 6172
     * @memberOf _                                                                                                     // 6173
     * @category Collection                                                                                            // 6174
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6175
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6176
     *  per iteration.                                                                                                 // 6177
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6178
     * @returns {Object} Returns the composed aggregate object.                                                        // 6179
     * @example                                                                                                        // 6180
     *                                                                                                                 // 6181
     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6182
     *   return Math.floor(n);                                                                                         // 6183
     * });                                                                                                             // 6184
     * // => { '4': 1, '6': 2 }                                                                                        // 6185
     *                                                                                                                 // 6186
     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6187
     *   return this.floor(n);                                                                                         // 6188
     * }, Math);                                                                                                       // 6189
     * // => { '4': 1, '6': 2 }                                                                                        // 6190
     *                                                                                                                 // 6191
     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 6192
     * // => { '3': 2, '5': 1 }                                                                                        // 6193
     */                                                                                                                // 6194
    var countBy = createAggregator(function(result, value, key) {                                                      // 6195
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 6196
    });                                                                                                                // 6197
                                                                                                                       // 6198
    /**                                                                                                                // 6199
     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 6200
     * The predicate is bound to `thisArg` and invoked with three arguments:                                           // 6201
     * (value, index|key, collection).                                                                                 // 6202
     *                                                                                                                 // 6203
     * If a property name is provided for `predicate` the created `_.property`                                         // 6204
     * style callback returns the property value of the given element.                                                 // 6205
     *                                                                                                                 // 6206
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6207
     * style callback returns `true` for elements that have a matching property                                        // 6208
     * value, else `false`.                                                                                            // 6209
     *                                                                                                                 // 6210
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6211
     * callback returns `true` for elements that have the properties of the given                                      // 6212
     * object, else `false`.                                                                                           // 6213
     *                                                                                                                 // 6214
     * @static                                                                                                         // 6215
     * @memberOf _                                                                                                     // 6216
     * @alias all                                                                                                      // 6217
     * @category Collection                                                                                            // 6218
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6219
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6220
     *  per iteration.                                                                                                 // 6221
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6222
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 6223
     *  else `false`.                                                                                                  // 6224
     * @example                                                                                                        // 6225
     *                                                                                                                 // 6226
     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 6227
     * // => false                                                                                                     // 6228
     *                                                                                                                 // 6229
     * var users = [                                                                                                   // 6230
     *   { 'user': 'barney', 'active': false },                                                                        // 6231
     *   { 'user': 'fred',   'active': false }                                                                         // 6232
     * ];                                                                                                              // 6233
     *                                                                                                                 // 6234
     * // using the `_.matches` callback shorthand                                                                     // 6235
     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 6236
     * // => false                                                                                                     // 6237
     *                                                                                                                 // 6238
     * // using the `_.matchesProperty` callback shorthand                                                             // 6239
     * _.every(users, 'active', false);                                                                                // 6240
     * // => true                                                                                                      // 6241
     *                                                                                                                 // 6242
     * // using the `_.property` callback shorthand                                                                    // 6243
     * _.every(users, 'active');                                                                                       // 6244
     * // => false                                                                                                     // 6245
     */                                                                                                                // 6246
    function every(collection, predicate, thisArg) {                                                                   // 6247
      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 6248
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 6249
        predicate = undefined;                                                                                         // 6250
      }                                                                                                                // 6251
      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 6252
        predicate = getCallback(predicate, thisArg, 3);                                                                // 6253
      }                                                                                                                // 6254
      return func(collection, predicate);                                                                              // 6255
    }                                                                                                                  // 6256
                                                                                                                       // 6257
    /**                                                                                                                // 6258
     * Iterates over elements of `collection`, returning an array of all elements                                      // 6259
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6260
     * invoked with three arguments: (value, index|key, collection).                                                   // 6261
     *                                                                                                                 // 6262
     * If a property name is provided for `predicate` the created `_.property`                                         // 6263
     * style callback returns the property value of the given element.                                                 // 6264
     *                                                                                                                 // 6265
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6266
     * style callback returns `true` for elements that have a matching property                                        // 6267
     * value, else `false`.                                                                                            // 6268
     *                                                                                                                 // 6269
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6270
     * callback returns `true` for elements that have the properties of the given                                      // 6271
     * object, else `false`.                                                                                           // 6272
     *                                                                                                                 // 6273
     * @static                                                                                                         // 6274
     * @memberOf _                                                                                                     // 6275
     * @alias select                                                                                                   // 6276
     * @category Collection                                                                                            // 6277
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6278
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6279
     *  per iteration.                                                                                                 // 6280
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6281
     * @returns {Array} Returns the new filtered array.                                                                // 6282
     * @example                                                                                                        // 6283
     *                                                                                                                 // 6284
     * _.filter([4, 5, 6], function(n) {                                                                               // 6285
     *   return n % 2 == 0;                                                                                            // 6286
     * });                                                                                                             // 6287
     * // => [4, 6]                                                                                                    // 6288
     *                                                                                                                 // 6289
     * var users = [                                                                                                   // 6290
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6291
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6292
     * ];                                                                                                              // 6293
     *                                                                                                                 // 6294
     * // using the `_.matches` callback shorthand                                                                     // 6295
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');                                                // 6296
     * // => ['barney']                                                                                                // 6297
     *                                                                                                                 // 6298
     * // using the `_.matchesProperty` callback shorthand                                                             // 6299
     * _.pluck(_.filter(users, 'active', false), 'user');                                                              // 6300
     * // => ['fred']                                                                                                  // 6301
     *                                                                                                                 // 6302
     * // using the `_.property` callback shorthand                                                                    // 6303
     * _.pluck(_.filter(users, 'active'), 'user');                                                                     // 6304
     * // => ['barney']                                                                                                // 6305
     */                                                                                                                // 6306
    function filter(collection, predicate, thisArg) {                                                                  // 6307
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6308
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6309
      return func(collection, predicate);                                                                              // 6310
    }                                                                                                                  // 6311
                                                                                                                       // 6312
    /**                                                                                                                // 6313
     * Iterates over elements of `collection`, returning the first element                                             // 6314
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6315
     * invoked with three arguments: (value, index|key, collection).                                                   // 6316
     *                                                                                                                 // 6317
     * If a property name is provided for `predicate` the created `_.property`                                         // 6318
     * style callback returns the property value of the given element.                                                 // 6319
     *                                                                                                                 // 6320
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6321
     * style callback returns `true` for elements that have a matching property                                        // 6322
     * value, else `false`.                                                                                            // 6323
     *                                                                                                                 // 6324
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6325
     * callback returns `true` for elements that have the properties of the given                                      // 6326
     * object, else `false`.                                                                                           // 6327
     *                                                                                                                 // 6328
     * @static                                                                                                         // 6329
     * @memberOf _                                                                                                     // 6330
     * @alias detect                                                                                                   // 6331
     * @category Collection                                                                                            // 6332
     * @param {Array|Object|string} collection The collection to search.                                               // 6333
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6334
     *  per iteration.                                                                                                 // 6335
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6336
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6337
     * @example                                                                                                        // 6338
     *                                                                                                                 // 6339
     * var users = [                                                                                                   // 6340
     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 6341
     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 6342
     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 6343
     * ];                                                                                                              // 6344
     *                                                                                                                 // 6345
     * _.result(_.find(users, function(chr) {                                                                          // 6346
     *   return chr.age < 40;                                                                                          // 6347
     * }), 'user');                                                                                                    // 6348
     * // => 'barney'                                                                                                  // 6349
     *                                                                                                                 // 6350
     * // using the `_.matches` callback shorthand                                                                     // 6351
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');                                                  // 6352
     * // => 'pebbles'                                                                                                 // 6353
     *                                                                                                                 // 6354
     * // using the `_.matchesProperty` callback shorthand                                                             // 6355
     * _.result(_.find(users, 'active', false), 'user');                                                               // 6356
     * // => 'fred'                                                                                                    // 6357
     *                                                                                                                 // 6358
     * // using the `_.property` callback shorthand                                                                    // 6359
     * _.result(_.find(users, 'active'), 'user');                                                                      // 6360
     * // => 'barney'                                                                                                  // 6361
     */                                                                                                                // 6362
    var find = createFind(baseEach);                                                                                   // 6363
                                                                                                                       // 6364
    /**                                                                                                                // 6365
     * This method is like `_.find` except that it iterates over elements of                                           // 6366
     * `collection` from right to left.                                                                                // 6367
     *                                                                                                                 // 6368
     * @static                                                                                                         // 6369
     * @memberOf _                                                                                                     // 6370
     * @category Collection                                                                                            // 6371
     * @param {Array|Object|string} collection The collection to search.                                               // 6372
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6373
     *  per iteration.                                                                                                 // 6374
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6375
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6376
     * @example                                                                                                        // 6377
     *                                                                                                                 // 6378
     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 6379
     *   return n % 2 == 1;                                                                                            // 6380
     * });                                                                                                             // 6381
     * // => 3                                                                                                         // 6382
     */                                                                                                                // 6383
    var findLast = createFind(baseEachRight, true);                                                                    // 6384
                                                                                                                       // 6385
    /**                                                                                                                // 6386
     * Performs a deep comparison between each element in `collection` and the                                         // 6387
     * source object, returning the first element that has equivalent property                                         // 6388
     * values.                                                                                                         // 6389
     *                                                                                                                 // 6390
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 6391
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 6392
     * their own, not inherited, enumerable properties. For comparing a single                                         // 6393
     * own or inherited property value see `_.matchesProperty`.                                                        // 6394
     *                                                                                                                 // 6395
     * @static                                                                                                         // 6396
     * @memberOf _                                                                                                     // 6397
     * @category Collection                                                                                            // 6398
     * @param {Array|Object|string} collection The collection to search.                                               // 6399
     * @param {Object} source The object of property values to match.                                                  // 6400
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6401
     * @example                                                                                                        // 6402
     *                                                                                                                 // 6403
     * var users = [                                                                                                   // 6404
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6405
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6406
     * ];                                                                                                              // 6407
     *                                                                                                                 // 6408
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');                                            // 6409
     * // => 'barney'                                                                                                  // 6410
     *                                                                                                                 // 6411
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');                                           // 6412
     * // => 'fred'                                                                                                    // 6413
     */                                                                                                                // 6414
    function findWhere(collection, source) {                                                                           // 6415
      return find(collection, baseMatches(source));                                                                    // 6416
    }                                                                                                                  // 6417
                                                                                                                       // 6418
    /**                                                                                                                // 6419
     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 6420
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6421
     * (value, index|key, collection). Iteratee functions may exit iteration early                                     // 6422
     * by explicitly returning `false`.                                                                                // 6423
     *                                                                                                                 // 6424
     * **Note:** As with other "Collections" methods, objects with a "length" property                                 // 6425
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`                                        // 6426
     * may be used for object iteration.                                                                               // 6427
     *                                                                                                                 // 6428
     * @static                                                                                                         // 6429
     * @memberOf _                                                                                                     // 6430
     * @alias each                                                                                                     // 6431
     * @category Collection                                                                                            // 6432
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6433
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6434
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6435
     * @returns {Array|Object|string} Returns `collection`.                                                            // 6436
     * @example                                                                                                        // 6437
     *                                                                                                                 // 6438
     * _([1, 2]).forEach(function(n) {                                                                                 // 6439
     *   console.log(n);                                                                                               // 6440
     * }).value();                                                                                                     // 6441
     * // => logs each value from left to right and returns the array                                                  // 6442
     *                                                                                                                 // 6443
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {                                                                // 6444
     *   console.log(n, key);                                                                                          // 6445
     * });                                                                                                             // 6446
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)                       // 6447
     */                                                                                                                // 6448
    var forEach = createForEach(arrayEach, baseEach);                                                                  // 6449
                                                                                                                       // 6450
    /**                                                                                                                // 6451
     * This method is like `_.forEach` except that it iterates over elements of                                        // 6452
     * `collection` from right to left.                                                                                // 6453
     *                                                                                                                 // 6454
     * @static                                                                                                         // 6455
     * @memberOf _                                                                                                     // 6456
     * @alias eachRight                                                                                                // 6457
     * @category Collection                                                                                            // 6458
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6459
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6460
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6461
     * @returns {Array|Object|string} Returns `collection`.                                                            // 6462
     * @example                                                                                                        // 6463
     *                                                                                                                 // 6464
     * _([1, 2]).forEachRight(function(n) {                                                                            // 6465
     *   console.log(n);                                                                                               // 6466
     * }).value();                                                                                                     // 6467
     * // => logs each value from right to left and returns the array                                                  // 6468
     */                                                                                                                // 6469
    var forEachRight = createForEach(arrayEachRight, baseEachRight);                                                   // 6470
                                                                                                                       // 6471
    /**                                                                                                                // 6472
     * Creates an object composed of keys generated from the results of running                                        // 6473
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6474
     * of each key is an array of the elements responsible for generating the key.                                     // 6475
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6476
     * (value, index|key, collection).                                                                                 // 6477
     *                                                                                                                 // 6478
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6479
     * style callback returns the property value of the given element.                                                 // 6480
     *                                                                                                                 // 6481
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6482
     * style callback returns `true` for elements that have a matching property                                        // 6483
     * value, else `false`.                                                                                            // 6484
     *                                                                                                                 // 6485
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6486
     * callback returns `true` for elements that have the properties of the given                                      // 6487
     * object, else `false`.                                                                                           // 6488
     *                                                                                                                 // 6489
     * @static                                                                                                         // 6490
     * @memberOf _                                                                                                     // 6491
     * @category Collection                                                                                            // 6492
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6493
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6494
     *  per iteration.                                                                                                 // 6495
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6496
     * @returns {Object} Returns the composed aggregate object.                                                        // 6497
     * @example                                                                                                        // 6498
     *                                                                                                                 // 6499
     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6500
     *   return Math.floor(n);                                                                                         // 6501
     * });                                                                                                             // 6502
     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6503
     *                                                                                                                 // 6504
     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6505
     *   return this.floor(n);                                                                                         // 6506
     * }, Math);                                                                                                       // 6507
     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6508
     *                                                                                                                 // 6509
     * // using the `_.property` callback shorthand                                                                    // 6510
     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 6511
     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 6512
     */                                                                                                                // 6513
    var groupBy = createAggregator(function(result, value, key) {                                                      // 6514
      if (hasOwnProperty.call(result, key)) {                                                                          // 6515
        result[key].push(value);                                                                                       // 6516
      } else {                                                                                                         // 6517
        result[key] = [value];                                                                                         // 6518
      }                                                                                                                // 6519
    });                                                                                                                // 6520
                                                                                                                       // 6521
    /**                                                                                                                // 6522
     * Checks if `target` is in `collection` using                                                                     // 6523
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6524
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 6525
     * from the end of `collection`.                                                                                   // 6526
     *                                                                                                                 // 6527
     * @static                                                                                                         // 6528
     * @memberOf _                                                                                                     // 6529
     * @alias contains, include                                                                                        // 6530
     * @category Collection                                                                                            // 6531
     * @param {Array|Object|string} collection The collection to search.                                               // 6532
     * @param {*} target The value to search for.                                                                      // 6533
     * @param {number} [fromIndex=0] The index to search from.                                                         // 6534
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 6535
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.                                 // 6536
     * @example                                                                                                        // 6537
     *                                                                                                                 // 6538
     * _.includes([1, 2, 3], 1);                                                                                       // 6539
     * // => true                                                                                                      // 6540
     *                                                                                                                 // 6541
     * _.includes([1, 2, 3], 1, 2);                                                                                    // 6542
     * // => false                                                                                                     // 6543
     *                                                                                                                 // 6544
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 6545
     * // => true                                                                                                      // 6546
     *                                                                                                                 // 6547
     * _.includes('pebbles', 'eb');                                                                                    // 6548
     * // => true                                                                                                      // 6549
     */                                                                                                                // 6550
    function includes(collection, target, fromIndex, guard) {                                                          // 6551
      var length = collection ? getLength(collection) : 0;                                                             // 6552
      if (!isLength(length)) {                                                                                         // 6553
        collection = values(collection);                                                                               // 6554
        length = collection.length;                                                                                    // 6555
      }                                                                                                                // 6556
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {                       // 6557
        fromIndex = 0;                                                                                                 // 6558
      } else {                                                                                                         // 6559
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);                               // 6560
      }                                                                                                                // 6561
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))                           // 6562
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)                                          // 6563
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);                                                // 6564
    }                                                                                                                  // 6565
                                                                                                                       // 6566
    /**                                                                                                                // 6567
     * Creates an object composed of keys generated from the results of running                                        // 6568
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6569
     * of each key is the last element responsible for generating the key. The                                         // 6570
     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 6571
     * (value, index|key, collection).                                                                                 // 6572
     *                                                                                                                 // 6573
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6574
     * style callback returns the property value of the given element.                                                 // 6575
     *                                                                                                                 // 6576
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6577
     * style callback returns `true` for elements that have a matching property                                        // 6578
     * value, else `false`.                                                                                            // 6579
     *                                                                                                                 // 6580
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6581
     * callback returns `true` for elements that have the properties of the given                                      // 6582
     * object, else `false`.                                                                                           // 6583
     *                                                                                                                 // 6584
     * @static                                                                                                         // 6585
     * @memberOf _                                                                                                     // 6586
     * @category Collection                                                                                            // 6587
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6588
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6589
     *  per iteration.                                                                                                 // 6590
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6591
     * @returns {Object} Returns the composed aggregate object.                                                        // 6592
     * @example                                                                                                        // 6593
     *                                                                                                                 // 6594
     * var keyData = [                                                                                                 // 6595
     *   { 'dir': 'left', 'code': 97 },                                                                                // 6596
     *   { 'dir': 'right', 'code': 100 }                                                                               // 6597
     * ];                                                                                                              // 6598
     *                                                                                                                 // 6599
     * _.indexBy(keyData, 'dir');                                                                                      // 6600
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 6601
     *                                                                                                                 // 6602
     * _.indexBy(keyData, function(object) {                                                                           // 6603
     *   return String.fromCharCode(object.code);                                                                      // 6604
     * });                                                                                                             // 6605
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6606
     *                                                                                                                 // 6607
     * _.indexBy(keyData, function(object) {                                                                           // 6608
     *   return this.fromCharCode(object.code);                                                                        // 6609
     * }, String);                                                                                                     // 6610
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6611
     */                                                                                                                // 6612
    var indexBy = createAggregator(function(result, value, key) {                                                      // 6613
      result[key] = value;                                                                                             // 6614
    });                                                                                                                // 6615
                                                                                                                       // 6616
    /**                                                                                                                // 6617
     * Invokes the method at `path` of each element in `collection`, returning                                         // 6618
     * an array of the results of each invoked method. Any additional arguments                                        // 6619
     * are provided to each invoked method. If `methodName` is a function it's                                         // 6620
     * invoked for, and `this` bound to, each element in `collection`.                                                 // 6621
     *                                                                                                                 // 6622
     * @static                                                                                                         // 6623
     * @memberOf _                                                                                                     // 6624
     * @category Collection                                                                                            // 6625
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6626
     * @param {Array|Function|string} path The path of the method to invoke or                                         // 6627
     *  the function invoked per iteration.                                                                            // 6628
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 6629
     * @returns {Array} Returns the array of results.                                                                  // 6630
     * @example                                                                                                        // 6631
     *                                                                                                                 // 6632
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');                                                                       // 6633
     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 6634
     *                                                                                                                 // 6635
     * _.invoke([123, 456], String.prototype.split, '');                                                               // 6636
     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 6637
     */                                                                                                                // 6638
    var invoke = restParam(function(collection, path, args) {                                                          // 6639
      var index = -1,                                                                                                  // 6640
          isFunc = typeof path == 'function',                                                                          // 6641
          isProp = isKey(path),                                                                                        // 6642
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 6643
                                                                                                                       // 6644
      baseEach(collection, function(value) {                                                                           // 6645
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 6646
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);                              // 6647
      });                                                                                                              // 6648
      return result;                                                                                                   // 6649
    });                                                                                                                // 6650
                                                                                                                       // 6651
    /**                                                                                                                // 6652
     * Creates an array of values by running each element in `collection` through                                      // 6653
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three                                         // 6654
     * arguments: (value, index|key, collection).                                                                      // 6655
     *                                                                                                                 // 6656
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6657
     * style callback returns the property value of the given element.                                                 // 6658
     *                                                                                                                 // 6659
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6660
     * style callback returns `true` for elements that have a matching property                                        // 6661
     * value, else `false`.                                                                                            // 6662
     *                                                                                                                 // 6663
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6664
     * callback returns `true` for elements that have the properties of the given                                      // 6665
     * object, else `false`.                                                                                           // 6666
     *                                                                                                                 // 6667
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6668
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 6669
     *                                                                                                                 // 6670
     * The guarded methods are:                                                                                        // 6671
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,                                           // 6672
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,                                        // 6673
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,                                         // 6674
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,                                          // 6675
     * `sum`, `uniq`, and `words`                                                                                      // 6676
     *                                                                                                                 // 6677
     * @static                                                                                                         // 6678
     * @memberOf _                                                                                                     // 6679
     * @alias collect                                                                                                  // 6680
     * @category Collection                                                                                            // 6681
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6682
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6683
     *  per iteration.                                                                                                 // 6684
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6685
     * @returns {Array} Returns the new mapped array.                                                                  // 6686
     * @example                                                                                                        // 6687
     *                                                                                                                 // 6688
     * function timesThree(n) {                                                                                        // 6689
     *   return n * 3;                                                                                                 // 6690
     * }                                                                                                               // 6691
     *                                                                                                                 // 6692
     * _.map([1, 2], timesThree);                                                                                      // 6693
     * // => [3, 6]                                                                                                    // 6694
     *                                                                                                                 // 6695
     * _.map({ 'a': 1, 'b': 2 }, timesThree);                                                                          // 6696
     * // => [3, 6] (iteration order is not guaranteed)                                                                // 6697
     *                                                                                                                 // 6698
     * var users = [                                                                                                   // 6699
     *   { 'user': 'barney' },                                                                                         // 6700
     *   { 'user': 'fred' }                                                                                            // 6701
     * ];                                                                                                              // 6702
     *                                                                                                                 // 6703
     * // using the `_.property` callback shorthand                                                                    // 6704
     * _.map(users, 'user');                                                                                           // 6705
     * // => ['barney', 'fred']                                                                                        // 6706
     */                                                                                                                // 6707
    function map(collection, iteratee, thisArg) {                                                                      // 6708
      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 6709
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 6710
      return func(collection, iteratee);                                                                               // 6711
    }                                                                                                                  // 6712
                                                                                                                       // 6713
    /**                                                                                                                // 6714
     * Creates an array of elements split into two groups, the first of which                                          // 6715
     * contains elements `predicate` returns truthy for, while the second of which                                     // 6716
     * contains elements `predicate` returns falsey for. The predicate is bound                                        // 6717
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).                                  // 6718
     *                                                                                                                 // 6719
     * If a property name is provided for `predicate` the created `_.property`                                         // 6720
     * style callback returns the property value of the given element.                                                 // 6721
     *                                                                                                                 // 6722
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6723
     * style callback returns `true` for elements that have a matching property                                        // 6724
     * value, else `false`.                                                                                            // 6725
     *                                                                                                                 // 6726
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6727
     * callback returns `true` for elements that have the properties of the given                                      // 6728
     * object, else `false`.                                                                                           // 6729
     *                                                                                                                 // 6730
     * @static                                                                                                         // 6731
     * @memberOf _                                                                                                     // 6732
     * @category Collection                                                                                            // 6733
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6734
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6735
     *  per iteration.                                                                                                 // 6736
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6737
     * @returns {Array} Returns the array of grouped elements.                                                         // 6738
     * @example                                                                                                        // 6739
     *                                                                                                                 // 6740
     * _.partition([1, 2, 3], function(n) {                                                                            // 6741
     *   return n % 2;                                                                                                 // 6742
     * });                                                                                                             // 6743
     * // => [[1, 3], [2]]                                                                                             // 6744
     *                                                                                                                 // 6745
     * _.partition([1.2, 2.3, 3.4], function(n) {                                                                      // 6746
     *   return this.floor(n) % 2;                                                                                     // 6747
     * }, Math);                                                                                                       // 6748
     * // => [[1.2, 3.4], [2.3]]                                                                                       // 6749
     *                                                                                                                 // 6750
     * var users = [                                                                                                   // 6751
     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 6752
     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 6753
     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 6754
     * ];                                                                                                              // 6755
     *                                                                                                                 // 6756
     * var mapper = function(array) {                                                                                  // 6757
     *   return _.pluck(array, 'user');                                                                                // 6758
     * };                                                                                                              // 6759
     *                                                                                                                 // 6760
     * // using the `_.matches` callback shorthand                                                                     // 6761
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);                                               // 6762
     * // => [['pebbles'], ['barney', 'fred']]                                                                         // 6763
     *                                                                                                                 // 6764
     * // using the `_.matchesProperty` callback shorthand                                                             // 6765
     * _.map(_.partition(users, 'active', false), mapper);                                                             // 6766
     * // => [['barney', 'pebbles'], ['fred']]                                                                         // 6767
     *                                                                                                                 // 6768
     * // using the `_.property` callback shorthand                                                                    // 6769
     * _.map(_.partition(users, 'active'), mapper);                                                                    // 6770
     * // => [['fred'], ['barney', 'pebbles']]                                                                         // 6771
     */                                                                                                                // 6772
    var partition = createAggregator(function(result, value, key) {                                                    // 6773
      result[key ? 0 : 1].push(value);                                                                                 // 6774
    }, function() { return [[], []]; });                                                                               // 6775
                                                                                                                       // 6776
    /**                                                                                                                // 6777
     * Gets the property value of `path` from all elements in `collection`.                                            // 6778
     *                                                                                                                 // 6779
     * @static                                                                                                         // 6780
     * @memberOf _                                                                                                     // 6781
     * @category Collection                                                                                            // 6782
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6783
     * @param {Array|string} path The path of the property to pluck.                                                   // 6784
     * @returns {Array} Returns the property values.                                                                   // 6785
     * @example                                                                                                        // 6786
     *                                                                                                                 // 6787
     * var users = [                                                                                                   // 6788
     *   { 'user': 'barney', 'age': 36 },                                                                              // 6789
     *   { 'user': 'fred',   'age': 40 }                                                                               // 6790
     * ];                                                                                                              // 6791
     *                                                                                                                 // 6792
     * _.pluck(users, 'user');                                                                                         // 6793
     * // => ['barney', 'fred']                                                                                        // 6794
     *                                                                                                                 // 6795
     * var userIndex = _.indexBy(users, 'user');                                                                       // 6796
     * _.pluck(userIndex, 'age');                                                                                      // 6797
     * // => [36, 40] (iteration order is not guaranteed)                                                              // 6798
     */                                                                                                                // 6799
    function pluck(collection, path) {                                                                                 // 6800
      return map(collection, property(path));                                                                          // 6801
    }                                                                                                                  // 6802
                                                                                                                       // 6803
    /**                                                                                                                // 6804
     * Reduces `collection` to a value which is the accumulated result of running                                      // 6805
     * each element in `collection` through `iteratee`, where each successive                                          // 6806
     * invocation is supplied the return value of the previous. If `accumulator`                                       // 6807
     * is not provided the first element of `collection` is used as the initial                                        // 6808
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:                                    // 6809
     * (accumulator, value, index|key, collection).                                                                    // 6810
     *                                                                                                                 // 6811
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6812
     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 6813
     *                                                                                                                 // 6814
     * The guarded methods are:                                                                                        // 6815
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,                                         // 6816
     * and `sortByOrder`                                                                                               // 6817
     *                                                                                                                 // 6818
     * @static                                                                                                         // 6819
     * @memberOf _                                                                                                     // 6820
     * @alias foldl, inject                                                                                            // 6821
     * @category Collection                                                                                            // 6822
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6823
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6824
     * @param {*} [accumulator] The initial value.                                                                     // 6825
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6826
     * @returns {*} Returns the accumulated value.                                                                     // 6827
     * @example                                                                                                        // 6828
     *                                                                                                                 // 6829
     * _.reduce([1, 2], function(total, n) {                                                                           // 6830
     *   return total + n;                                                                                             // 6831
     * });                                                                                                             // 6832
     * // => 3                                                                                                         // 6833
     *                                                                                                                 // 6834
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                         // 6835
     *   result[key] = n * 3;                                                                                          // 6836
     *   return result;                                                                                                // 6837
     * }, {});                                                                                                         // 6838
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)                                                    // 6839
     */                                                                                                                // 6840
    var reduce = createReduce(arrayReduce, baseEach);                                                                  // 6841
                                                                                                                       // 6842
    /**                                                                                                                // 6843
     * This method is like `_.reduce` except that it iterates over elements of                                         // 6844
     * `collection` from right to left.                                                                                // 6845
     *                                                                                                                 // 6846
     * @static                                                                                                         // 6847
     * @memberOf _                                                                                                     // 6848
     * @alias foldr                                                                                                    // 6849
     * @category Collection                                                                                            // 6850
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6851
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6852
     * @param {*} [accumulator] The initial value.                                                                     // 6853
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6854
     * @returns {*} Returns the accumulated value.                                                                     // 6855
     * @example                                                                                                        // 6856
     *                                                                                                                 // 6857
     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 6858
     *                                                                                                                 // 6859
     * _.reduceRight(array, function(flattened, other) {                                                               // 6860
     *   return flattened.concat(other);                                                                               // 6861
     * }, []);                                                                                                         // 6862
     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 6863
     */                                                                                                                // 6864
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);                                                   // 6865
                                                                                                                       // 6866
    /**                                                                                                                // 6867
     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 6868
     * that `predicate` does **not** return truthy for.                                                                // 6869
     *                                                                                                                 // 6870
     * @static                                                                                                         // 6871
     * @memberOf _                                                                                                     // 6872
     * @category Collection                                                                                            // 6873
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6874
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6875
     *  per iteration.                                                                                                 // 6876
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6877
     * @returns {Array} Returns the new filtered array.                                                                // 6878
     * @example                                                                                                        // 6879
     *                                                                                                                 // 6880
     * _.reject([1, 2, 3, 4], function(n) {                                                                            // 6881
     *   return n % 2 == 0;                                                                                            // 6882
     * });                                                                                                             // 6883
     * // => [1, 3]                                                                                                    // 6884
     *                                                                                                                 // 6885
     * var users = [                                                                                                   // 6886
     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 6887
     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 6888
     * ];                                                                                                              // 6889
     *                                                                                                                 // 6890
     * // using the `_.matches` callback shorthand                                                                     // 6891
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');                                                // 6892
     * // => ['barney']                                                                                                // 6893
     *                                                                                                                 // 6894
     * // using the `_.matchesProperty` callback shorthand                                                             // 6895
     * _.pluck(_.reject(users, 'active', false), 'user');                                                              // 6896
     * // => ['fred']                                                                                                  // 6897
     *                                                                                                                 // 6898
     * // using the `_.property` callback shorthand                                                                    // 6899
     * _.pluck(_.reject(users, 'active'), 'user');                                                                     // 6900
     * // => ['barney']                                                                                                // 6901
     */                                                                                                                // 6902
    function reject(collection, predicate, thisArg) {                                                                  // 6903
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6904
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6905
      return func(collection, function(value, index, collection) {                                                     // 6906
        return !predicate(value, index, collection);                                                                   // 6907
      });                                                                                                              // 6908
    }                                                                                                                  // 6909
                                                                                                                       // 6910
    /**                                                                                                                // 6911
     * Gets a random element or `n` random elements from a collection.                                                 // 6912
     *                                                                                                                 // 6913
     * @static                                                                                                         // 6914
     * @memberOf _                                                                                                     // 6915
     * @category Collection                                                                                            // 6916
     * @param {Array|Object|string} collection The collection to sample.                                               // 6917
     * @param {number} [n] The number of elements to sample.                                                           // 6918
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 6919
     * @returns {*} Returns the random sample(s).                                                                      // 6920
     * @example                                                                                                        // 6921
     *                                                                                                                 // 6922
     * _.sample([1, 2, 3, 4]);                                                                                         // 6923
     * // => 2                                                                                                         // 6924
     *                                                                                                                 // 6925
     * _.sample([1, 2, 3, 4], 2);                                                                                      // 6926
     * // => [3, 1]                                                                                                    // 6927
     */                                                                                                                // 6928
    function sample(collection, n, guard) {                                                                            // 6929
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {                                                  // 6930
        collection = toIterable(collection);                                                                           // 6931
        var length = collection.length;                                                                                // 6932
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;                                         // 6933
      }                                                                                                                // 6934
      var index = -1,                                                                                                  // 6935
          result = toArray(collection),                                                                                // 6936
          length = result.length,                                                                                      // 6937
          lastIndex = length - 1;                                                                                      // 6938
                                                                                                                       // 6939
      n = nativeMin(n < 0 ? 0 : (+n || 0), length);                                                                    // 6940
      while (++index < n) {                                                                                            // 6941
        var rand = baseRandom(index, lastIndex),                                                                       // 6942
            value = result[rand];                                                                                      // 6943
                                                                                                                       // 6944
        result[rand] = result[index];                                                                                  // 6945
        result[index] = value;                                                                                         // 6946
      }                                                                                                                // 6947
      result.length = n;                                                                                               // 6948
      return result;                                                                                                   // 6949
    }                                                                                                                  // 6950
                                                                                                                       // 6951
    /**                                                                                                                // 6952
     * Creates an array of shuffled values, using a version of the                                                     // 6953
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 6954
     *                                                                                                                 // 6955
     * @static                                                                                                         // 6956
     * @memberOf _                                                                                                     // 6957
     * @category Collection                                                                                            // 6958
     * @param {Array|Object|string} collection The collection to shuffle.                                              // 6959
     * @returns {Array} Returns the new shuffled array.                                                                // 6960
     * @example                                                                                                        // 6961
     *                                                                                                                 // 6962
     * _.shuffle([1, 2, 3, 4]);                                                                                        // 6963
     * // => [4, 1, 3, 2]                                                                                              // 6964
     */                                                                                                                // 6965
    function shuffle(collection) {                                                                                     // 6966
      return sample(collection, POSITIVE_INFINITY);                                                                    // 6967
    }                                                                                                                  // 6968
                                                                                                                       // 6969
    /**                                                                                                                // 6970
     * Gets the size of `collection` by returning its length for array-like                                            // 6971
     * values or the number of own enumerable properties for objects.                                                  // 6972
     *                                                                                                                 // 6973
     * @static                                                                                                         // 6974
     * @memberOf _                                                                                                     // 6975
     * @category Collection                                                                                            // 6976
     * @param {Array|Object|string} collection The collection to inspect.                                              // 6977
     * @returns {number} Returns the size of `collection`.                                                             // 6978
     * @example                                                                                                        // 6979
     *                                                                                                                 // 6980
     * _.size([1, 2, 3]);                                                                                              // 6981
     * // => 3                                                                                                         // 6982
     *                                                                                                                 // 6983
     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 6984
     * // => 2                                                                                                         // 6985
     *                                                                                                                 // 6986
     * _.size('pebbles');                                                                                              // 6987
     * // => 7                                                                                                         // 6988
     */                                                                                                                // 6989
    function size(collection) {                                                                                        // 6990
      var length = collection ? getLength(collection) : 0;                                                             // 6991
      return isLength(length) ? length : keys(collection).length;                                                      // 6992
    }                                                                                                                  // 6993
                                                                                                                       // 6994
    /**                                                                                                                // 6995
     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 6996
     * The function returns as soon as it finds a passing value and does not iterate                                   // 6997
     * over the entire collection. The predicate is bound to `thisArg` and invoked                                     // 6998
     * with three arguments: (value, index|key, collection).                                                           // 6999
     *                                                                                                                 // 7000
     * If a property name is provided for `predicate` the created `_.property`                                         // 7001
     * style callback returns the property value of the given element.                                                 // 7002
     *                                                                                                                 // 7003
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7004
     * style callback returns `true` for elements that have a matching property                                        // 7005
     * value, else `false`.                                                                                            // 7006
     *                                                                                                                 // 7007
     * If an object is provided for `predicate` the created `_.matches` style                                          // 7008
     * callback returns `true` for elements that have the properties of the given                                      // 7009
     * object, else `false`.                                                                                           // 7010
     *                                                                                                                 // 7011
     * @static                                                                                                         // 7012
     * @memberOf _                                                                                                     // 7013
     * @alias any                                                                                                      // 7014
     * @category Collection                                                                                            // 7015
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7016
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7017
     *  per iteration.                                                                                                 // 7018
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7019
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 7020
     *  else `false`.                                                                                                  // 7021
     * @example                                                                                                        // 7022
     *                                                                                                                 // 7023
     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7024
     * // => true                                                                                                      // 7025
     *                                                                                                                 // 7026
     * var users = [                                                                                                   // 7027
     *   { 'user': 'barney', 'active': true },                                                                         // 7028
     *   { 'user': 'fred',   'active': false }                                                                         // 7029
     * ];                                                                                                              // 7030
     *                                                                                                                 // 7031
     * // using the `_.matches` callback shorthand                                                                     // 7032
     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 7033
     * // => false                                                                                                     // 7034
     *                                                                                                                 // 7035
     * // using the `_.matchesProperty` callback shorthand                                                             // 7036
     * _.some(users, 'active', false);                                                                                 // 7037
     * // => true                                                                                                      // 7038
     *                                                                                                                 // 7039
     * // using the `_.property` callback shorthand                                                                    // 7040
     * _.some(users, 'active');                                                                                        // 7041
     * // => true                                                                                                      // 7042
     */                                                                                                                // 7043
    function some(collection, predicate, thisArg) {                                                                    // 7044
      var func = isArray(collection) ? arraySome : baseSome;                                                           // 7045
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 7046
        predicate = undefined;                                                                                         // 7047
      }                                                                                                                // 7048
      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 7049
        predicate = getCallback(predicate, thisArg, 3);                                                                // 7050
      }                                                                                                                // 7051
      return func(collection, predicate);                                                                              // 7052
    }                                                                                                                  // 7053
                                                                                                                       // 7054
    /**                                                                                                                // 7055
     * Creates an array of elements, sorted in ascending order by the results of                                       // 7056
     * running each element in a collection through `iteratee`. This method performs                                   // 7057
     * a stable sort, that is, it preserves the original sort order of equal elements.                                 // 7058
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 7059
     * (value, index|key, collection).                                                                                 // 7060
     *                                                                                                                 // 7061
     * If a property name is provided for `iteratee` the created `_.property`                                          // 7062
     * style callback returns the property value of the given element.                                                 // 7063
     *                                                                                                                 // 7064
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7065
     * style callback returns `true` for elements that have a matching property                                        // 7066
     * value, else `false`.                                                                                            // 7067
     *                                                                                                                 // 7068
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 7069
     * callback returns `true` for elements that have the properties of the given                                      // 7070
     * object, else `false`.                                                                                           // 7071
     *                                                                                                                 // 7072
     * @static                                                                                                         // 7073
     * @memberOf _                                                                                                     // 7074
     * @category Collection                                                                                            // 7075
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7076
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 7077
     *  per iteration.                                                                                                 // 7078
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7079
     * @returns {Array} Returns the new sorted array.                                                                  // 7080
     * @example                                                                                                        // 7081
     *                                                                                                                 // 7082
     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7083
     *   return Math.sin(n);                                                                                           // 7084
     * });                                                                                                             // 7085
     * // => [3, 1, 2]                                                                                                 // 7086
     *                                                                                                                 // 7087
     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7088
     *   return this.sin(n);                                                                                           // 7089
     * }, Math);                                                                                                       // 7090
     * // => [3, 1, 2]                                                                                                 // 7091
     *                                                                                                                 // 7092
     * var users = [                                                                                                   // 7093
     *   { 'user': 'fred' },                                                                                           // 7094
     *   { 'user': 'pebbles' },                                                                                        // 7095
     *   { 'user': 'barney' }                                                                                          // 7096
     * ];                                                                                                              // 7097
     *                                                                                                                 // 7098
     * // using the `_.property` callback shorthand                                                                    // 7099
     * _.pluck(_.sortBy(users, 'user'), 'user');                                                                       // 7100
     * // => ['barney', 'fred', 'pebbles']                                                                             // 7101
     */                                                                                                                // 7102
    function sortBy(collection, iteratee, thisArg) {                                                                   // 7103
      if (collection == null) {                                                                                        // 7104
        return [];                                                                                                     // 7105
      }                                                                                                                // 7106
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 7107
        iteratee = undefined;                                                                                          // 7108
      }                                                                                                                // 7109
      var index = -1;                                                                                                  // 7110
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 7111
                                                                                                                       // 7112
      var result = baseMap(collection, function(value, key, collection) {                                              // 7113
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };                     // 7114
      });                                                                                                              // 7115
      return baseSortBy(result, compareAscending);                                                                     // 7116
    }                                                                                                                  // 7117
                                                                                                                       // 7118
    /**                                                                                                                // 7119
     * This method is like `_.sortBy` except that it can sort by multiple iteratees                                    // 7120
     * or property names.                                                                                              // 7121
     *                                                                                                                 // 7122
     * If a property name is provided for an iteratee the created `_.property`                                         // 7123
     * style callback returns the property value of the given element.                                                 // 7124
     *                                                                                                                 // 7125
     * If an object is provided for an iteratee the created `_.matches` style                                          // 7126
     * callback returns `true` for elements that have the properties of the given                                      // 7127
     * object, else `false`.                                                                                           // 7128
     *                                                                                                                 // 7129
     * @static                                                                                                         // 7130
     * @memberOf _                                                                                                     // 7131
     * @category Collection                                                                                            // 7132
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7133
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees                                     // 7134
     *  The iteratees to sort by, specified as individual values or arrays of values.                                  // 7135
     * @returns {Array} Returns the new sorted array.                                                                  // 7136
     * @example                                                                                                        // 7137
     *                                                                                                                 // 7138
     * var users = [                                                                                                   // 7139
     *   { 'user': 'fred',   'age': 48 },                                                                              // 7140
     *   { 'user': 'barney', 'age': 36 },                                                                              // 7141
     *   { 'user': 'fred',   'age': 42 },                                                                              // 7142
     *   { 'user': 'barney', 'age': 34 }                                                                               // 7143
     * ];                                                                                                              // 7144
     *                                                                                                                 // 7145
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);                                                           // 7146
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                              // 7147
     *                                                                                                                 // 7148
     * _.map(_.sortByAll(users, 'user', function(chr) {                                                                // 7149
     *   return Math.floor(chr.age / 10);                                                                              // 7150
     * }), _.values);                                                                                                  // 7151
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7152
     */                                                                                                                // 7153
    var sortByAll = restParam(function(collection, iteratees) {                                                        // 7154
      if (collection == null) {                                                                                        // 7155
        return [];                                                                                                     // 7156
      }                                                                                                                // 7157
      var guard = iteratees[2];                                                                                        // 7158
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {                                                // 7159
        iteratees.length = 1;                                                                                          // 7160
      }                                                                                                                // 7161
      return baseSortByOrder(collection, baseFlatten(iteratees), []);                                                  // 7162
    });                                                                                                                // 7163
                                                                                                                       // 7164
    /**                                                                                                                // 7165
     * This method is like `_.sortByAll` except that it allows specifying the                                          // 7166
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all                                        // 7167
     * values are sorted in ascending order. Otherwise, a value is sorted in                                           // 7168
     * ascending order if its corresponding order is "asc", and descending if "desc".                                  // 7169
     *                                                                                                                 // 7170
     * If a property name is provided for an iteratee the created `_.property`                                         // 7171
     * style callback returns the property value of the given element.                                                 // 7172
     *                                                                                                                 // 7173
     * If an object is provided for an iteratee the created `_.matches` style                                          // 7174
     * callback returns `true` for elements that have the properties of the given                                      // 7175
     * object, else `false`.                                                                                           // 7176
     *                                                                                                                 // 7177
     * @static                                                                                                         // 7178
     * @memberOf _                                                                                                     // 7179
     * @category Collection                                                                                            // 7180
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7181
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 7182
     * @param {boolean[]} [orders] The sort orders of `iteratees`.                                                     // 7183
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 7184
     * @returns {Array} Returns the new sorted array.                                                                  // 7185
     * @example                                                                                                        // 7186
     *                                                                                                                 // 7187
     * var users = [                                                                                                   // 7188
     *   { 'user': 'fred',   'age': 48 },                                                                              // 7189
     *   { 'user': 'barney', 'age': 34 },                                                                              // 7190
     *   { 'user': 'fred',   'age': 42 },                                                                              // 7191
     *   { 'user': 'barney', 'age': 36 }                                                                               // 7192
     * ];                                                                                                              // 7193
     *                                                                                                                 // 7194
     * // sort by `user` in ascending order and by `age` in descending order                                           // 7195
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);                                        // 7196
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7197
     */                                                                                                                // 7198
    function sortByOrder(collection, iteratees, orders, guard) {                                                       // 7199
      if (collection == null) {                                                                                        // 7200
        return [];                                                                                                     // 7201
      }                                                                                                                // 7202
      if (guard && isIterateeCall(iteratees, orders, guard)) {                                                         // 7203
        orders = undefined;                                                                                            // 7204
      }                                                                                                                // 7205
      if (!isArray(iteratees)) {                                                                                       // 7206
        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7207
      }                                                                                                                // 7208
      if (!isArray(orders)) {                                                                                          // 7209
        orders = orders == null ? [] : [orders];                                                                       // 7210
      }                                                                                                                // 7211
      return baseSortByOrder(collection, iteratees, orders);                                                           // 7212
    }                                                                                                                  // 7213
                                                                                                                       // 7214
    /**                                                                                                                // 7215
     * Performs a deep comparison between each element in `collection` and the                                         // 7216
     * source object, returning an array of all elements that have equivalent                                          // 7217
     * property values.                                                                                                // 7218
     *                                                                                                                 // 7219
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 7220
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 7221
     * their own, not inherited, enumerable properties. For comparing a single                                         // 7222
     * own or inherited property value see `_.matchesProperty`.                                                        // 7223
     *                                                                                                                 // 7224
     * @static                                                                                                         // 7225
     * @memberOf _                                                                                                     // 7226
     * @category Collection                                                                                            // 7227
     * @param {Array|Object|string} collection The collection to search.                                               // 7228
     * @param {Object} source The object of property values to match.                                                  // 7229
     * @returns {Array} Returns the new filtered array.                                                                // 7230
     * @example                                                                                                        // 7231
     *                                                                                                                 // 7232
     * var users = [                                                                                                   // 7233
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },                                          // 7234
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }                                // 7235
     * ];                                                                                                              // 7236
     *                                                                                                                 // 7237
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');                                                // 7238
     * // => ['barney']                                                                                                // 7239
     *                                                                                                                 // 7240
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');                                                          // 7241
     * // => ['fred']                                                                                                  // 7242
     */                                                                                                                // 7243
    function where(collection, source) {                                                                               // 7244
      return filter(collection, baseMatches(source));                                                                  // 7245
    }                                                                                                                  // 7246
                                                                                                                       // 7247
    /*------------------------------------------------------------------------*/                                       // 7248
                                                                                                                       // 7249
    /**                                                                                                                // 7250
     * Gets the number of milliseconds that have elapsed since the Unix epoch                                          // 7251
     * (1 January 1970 00:00:00 UTC).                                                                                  // 7252
     *                                                                                                                 // 7253
     * @static                                                                                                         // 7254
     * @memberOf _                                                                                                     // 7255
     * @category Date                                                                                                  // 7256
     * @example                                                                                                        // 7257
     *                                                                                                                 // 7258
     * _.defer(function(stamp) {                                                                                       // 7259
     *   console.log(_.now() - stamp);                                                                                 // 7260
     * }, _.now());                                                                                                    // 7261
     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 7262
     */                                                                                                                // 7263
    var now = nativeNow || function() {                                                                                // 7264
      return new Date().getTime();                                                                                     // 7265
    };                                                                                                                 // 7266
                                                                                                                       // 7267
    /*------------------------------------------------------------------------*/                                       // 7268
                                                                                                                       // 7269
    /**                                                                                                                // 7270
     * The opposite of `_.before`; this method creates a function that invokes                                         // 7271
     * `func` once it's called `n` or more times.                                                                      // 7272
     *                                                                                                                 // 7273
     * @static                                                                                                         // 7274
     * @memberOf _                                                                                                     // 7275
     * @category Function                                                                                              // 7276
     * @param {number} n The number of calls before `func` is invoked.                                                 // 7277
     * @param {Function} func The function to restrict.                                                                // 7278
     * @returns {Function} Returns the new restricted function.                                                        // 7279
     * @example                                                                                                        // 7280
     *                                                                                                                 // 7281
     * var saves = ['profile', 'settings'];                                                                            // 7282
     *                                                                                                                 // 7283
     * var done = _.after(saves.length, function() {                                                                   // 7284
     *   console.log('done saving!');                                                                                  // 7285
     * });                                                                                                             // 7286
     *                                                                                                                 // 7287
     * _.forEach(saves, function(type) {                                                                               // 7288
     *   asyncSave({ 'type': type, 'complete': done });                                                                // 7289
     * });                                                                                                             // 7290
     * // => logs 'done saving!' after the two async saves have completed                                              // 7291
     */                                                                                                                // 7292
    function after(n, func) {                                                                                          // 7293
      if (typeof func != 'function') {                                                                                 // 7294
        if (typeof n == 'function') {                                                                                  // 7295
          var temp = n;                                                                                                // 7296
          n = func;                                                                                                    // 7297
          func = temp;                                                                                                 // 7298
        } else {                                                                                                       // 7299
          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7300
        }                                                                                                              // 7301
      }                                                                                                                // 7302
      n = nativeIsFinite(n = +n) ? n : 0;                                                                              // 7303
      return function() {                                                                                              // 7304
        if (--n < 1) {                                                                                                 // 7305
          return func.apply(this, arguments);                                                                          // 7306
        }                                                                                                              // 7307
      };                                                                                                               // 7308
    }                                                                                                                  // 7309
                                                                                                                       // 7310
    /**                                                                                                                // 7311
     * Creates a function that accepts up to `n` arguments ignoring any                                                // 7312
     * additional arguments.                                                                                           // 7313
     *                                                                                                                 // 7314
     * @static                                                                                                         // 7315
     * @memberOf _                                                                                                     // 7316
     * @category Function                                                                                              // 7317
     * @param {Function} func The function to cap arguments for.                                                       // 7318
     * @param {number} [n=func.length] The arity cap.                                                                  // 7319
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7320
     * @returns {Function} Returns the new function.                                                                   // 7321
     * @example                                                                                                        // 7322
     *                                                                                                                 // 7323
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 7324
     * // => [6, 8, 10]                                                                                                // 7325
     */                                                                                                                // 7326
    function ary(func, n, guard) {                                                                                     // 7327
      if (guard && isIterateeCall(func, n, guard)) {                                                                   // 7328
        n = undefined;                                                                                                 // 7329
      }                                                                                                                // 7330
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);                                                   // 7331
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 7332
    }                                                                                                                  // 7333
                                                                                                                       // 7334
    /**                                                                                                                // 7335
     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 7336
     * of the created function, while it's called less than `n` times. Subsequent                                      // 7337
     * calls to the created function return the result of the last `func` invocation.                                  // 7338
     *                                                                                                                 // 7339
     * @static                                                                                                         // 7340
     * @memberOf _                                                                                                     // 7341
     * @category Function                                                                                              // 7342
     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 7343
     * @param {Function} func The function to restrict.                                                                // 7344
     * @returns {Function} Returns the new restricted function.                                                        // 7345
     * @example                                                                                                        // 7346
     *                                                                                                                 // 7347
     * jQuery('#add').on('click', _.before(5, addContactToList));                                                      // 7348
     * // => allows adding up to 4 contacts to the list                                                                // 7349
     */                                                                                                                // 7350
    function before(n, func) {                                                                                         // 7351
      var result;                                                                                                      // 7352
      if (typeof func != 'function') {                                                                                 // 7353
        if (typeof n == 'function') {                                                                                  // 7354
          var temp = n;                                                                                                // 7355
          n = func;                                                                                                    // 7356
          func = temp;                                                                                                 // 7357
        } else {                                                                                                       // 7358
          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7359
        }                                                                                                              // 7360
      }                                                                                                                // 7361
      return function() {                                                                                              // 7362
        if (--n > 0) {                                                                                                 // 7363
          result = func.apply(this, arguments);                                                                        // 7364
        }                                                                                                              // 7365
        if (n <= 1) {                                                                                                  // 7366
          func = undefined;                                                                                            // 7367
        }                                                                                                              // 7368
        return result;                                                                                                 // 7369
      };                                                                                                               // 7370
    }                                                                                                                  // 7371
                                                                                                                       // 7372
    /**                                                                                                                // 7373
     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 7374
     * and prepends any additional `_.bind` arguments to those provided to the                                         // 7375
     * bound function.                                                                                                 // 7376
     *                                                                                                                 // 7377
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 7378
     * may be used as a placeholder for partially applied arguments.                                                   // 7379
     *                                                                                                                 // 7380
     * **Note:** Unlike native `Function#bind` this method does not set the "length"                                   // 7381
     * property of bound functions.                                                                                    // 7382
     *                                                                                                                 // 7383
     * @static                                                                                                         // 7384
     * @memberOf _                                                                                                     // 7385
     * @category Function                                                                                              // 7386
     * @param {Function} func The function to bind.                                                                    // 7387
     * @param {*} thisArg The `this` binding of `func`.                                                                // 7388
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7389
     * @returns {Function} Returns the new bound function.                                                             // 7390
     * @example                                                                                                        // 7391
     *                                                                                                                 // 7392
     * var greet = function(greeting, punctuation) {                                                                   // 7393
     *   return greeting + ' ' + this.user + punctuation;                                                              // 7394
     * };                                                                                                              // 7395
     *                                                                                                                 // 7396
     * var object = { 'user': 'fred' };                                                                                // 7397
     *                                                                                                                 // 7398
     * var bound = _.bind(greet, object, 'hi');                                                                        // 7399
     * bound('!');                                                                                                     // 7400
     * // => 'hi fred!'                                                                                                // 7401
     *                                                                                                                 // 7402
     * // using placeholders                                                                                           // 7403
     * var bound = _.bind(greet, object, _, '!');                                                                      // 7404
     * bound('hi');                                                                                                    // 7405
     * // => 'hi fred!'                                                                                                // 7406
     */                                                                                                                // 7407
    var bind = restParam(function(func, thisArg, partials) {                                                           // 7408
      var bitmask = BIND_FLAG;                                                                                         // 7409
      if (partials.length) {                                                                                           // 7410
        var holders = replaceHolders(partials, bind.placeholder);                                                      // 7411
        bitmask |= PARTIAL_FLAG;                                                                                       // 7412
      }                                                                                                                // 7413
      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 7414
    });                                                                                                                // 7415
                                                                                                                       // 7416
    /**                                                                                                                // 7417
     * Binds methods of an object to the object itself, overwriting the existing                                       // 7418
     * method. Method names may be specified as individual arguments or as arrays                                      // 7419
     * of method names. If no method names are provided all enumerable function                                        // 7420
     * properties, own and inherited, of `object` are bound.                                                           // 7421
     *                                                                                                                 // 7422
     * **Note:** This method does not set the "length" property of bound functions.                                    // 7423
     *                                                                                                                 // 7424
     * @static                                                                                                         // 7425
     * @memberOf _                                                                                                     // 7426
     * @category Function                                                                                              // 7427
     * @param {Object} object The object to bind and assign the bound methods to.                                      // 7428
     * @param {...(string|string[])} [methodNames] The object method names to bind,                                    // 7429
     *  specified as individual method names or arrays of method names.                                                // 7430
     * @returns {Object} Returns `object`.                                                                             // 7431
     * @example                                                                                                        // 7432
     *                                                                                                                 // 7433
     * var view = {                                                                                                    // 7434
     *   'label': 'docs',                                                                                              // 7435
     *   'onClick': function() {                                                                                       // 7436
     *     console.log('clicked ' + this.label);                                                                       // 7437
     *   }                                                                                                             // 7438
     * };                                                                                                              // 7439
     *                                                                                                                 // 7440
     * _.bindAll(view);                                                                                                // 7441
     * jQuery('#docs').on('click', view.onClick);                                                                      // 7442
     * // => logs 'clicked docs' when the element is clicked                                                           // 7443
     */                                                                                                                // 7444
    var bindAll = restParam(function(object, methodNames) {                                                            // 7445
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);                                 // 7446
                                                                                                                       // 7447
      var index = -1,                                                                                                  // 7448
          length = methodNames.length;                                                                                 // 7449
                                                                                                                       // 7450
      while (++index < length) {                                                                                       // 7451
        var key = methodNames[index];                                                                                  // 7452
        object[key] = createWrapper(object[key], BIND_FLAG, object);                                                   // 7453
      }                                                                                                                // 7454
      return object;                                                                                                   // 7455
    });                                                                                                                // 7456
                                                                                                                       // 7457
    /**                                                                                                                // 7458
     * Creates a function that invokes the method at `object[key]` and prepends                                        // 7459
     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 7460
     *                                                                                                                 // 7461
     * This method differs from `_.bind` by allowing bound functions to reference                                      // 7462
     * methods that may be redefined or don't yet exist.                                                               // 7463
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 7464
     * for more details.                                                                                               // 7465
     *                                                                                                                 // 7466
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 7467
     * builds, may be used as a placeholder for partially applied arguments.                                           // 7468
     *                                                                                                                 // 7469
     * @static                                                                                                         // 7470
     * @memberOf _                                                                                                     // 7471
     * @category Function                                                                                              // 7472
     * @param {Object} object The object the method belongs to.                                                        // 7473
     * @param {string} key The key of the method.                                                                      // 7474
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7475
     * @returns {Function} Returns the new bound function.                                                             // 7476
     * @example                                                                                                        // 7477
     *                                                                                                                 // 7478
     * var object = {                                                                                                  // 7479
     *   'user': 'fred',                                                                                               // 7480
     *   'greet': function(greeting, punctuation) {                                                                    // 7481
     *     return greeting + ' ' + this.user + punctuation;                                                            // 7482
     *   }                                                                                                             // 7483
     * };                                                                                                              // 7484
     *                                                                                                                 // 7485
     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 7486
     * bound('!');                                                                                                     // 7487
     * // => 'hi fred!'                                                                                                // 7488
     *                                                                                                                 // 7489
     * object.greet = function(greeting, punctuation) {                                                                // 7490
     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 7491
     * };                                                                                                              // 7492
     *                                                                                                                 // 7493
     * bound('!');                                                                                                     // 7494
     * // => 'hiya fred!'                                                                                              // 7495
     *                                                                                                                 // 7496
     * // using placeholders                                                                                           // 7497
     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 7498
     * bound('hi');                                                                                                    // 7499
     * // => 'hiya fred!'                                                                                              // 7500
     */                                                                                                                // 7501
    var bindKey = restParam(function(object, key, partials) {                                                          // 7502
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 7503
      if (partials.length) {                                                                                           // 7504
        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 7505
        bitmask |= PARTIAL_FLAG;                                                                                       // 7506
      }                                                                                                                // 7507
      return createWrapper(key, bitmask, object, partials, holders);                                                   // 7508
    });                                                                                                                // 7509
                                                                                                                       // 7510
    /**                                                                                                                // 7511
     * Creates a function that accepts one or more arguments of `func` that when                                       // 7512
     * called either invokes `func` returning its result, if all `func` arguments                                      // 7513
     * have been provided, or returns a function that accepts one or more of the                                       // 7514
     * remaining `func` arguments, and so on. The arity of `func` may be specified                                     // 7515
     * if `func.length` is not sufficient.                                                                             // 7516
     *                                                                                                                 // 7517
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 7518
     * may be used as a placeholder for provided arguments.                                                            // 7519
     *                                                                                                                 // 7520
     * **Note:** This method does not set the "length" property of curried functions.                                  // 7521
     *                                                                                                                 // 7522
     * @static                                                                                                         // 7523
     * @memberOf _                                                                                                     // 7524
     * @category Function                                                                                              // 7525
     * @param {Function} func The function to curry.                                                                   // 7526
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7527
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7528
     * @returns {Function} Returns the new curried function.                                                           // 7529
     * @example                                                                                                        // 7530
     *                                                                                                                 // 7531
     * var abc = function(a, b, c) {                                                                                   // 7532
     *   return [a, b, c];                                                                                             // 7533
     * };                                                                                                              // 7534
     *                                                                                                                 // 7535
     * var curried = _.curry(abc);                                                                                     // 7536
     *                                                                                                                 // 7537
     * curried(1)(2)(3);                                                                                               // 7538
     * // => [1, 2, 3]                                                                                                 // 7539
     *                                                                                                                 // 7540
     * curried(1, 2)(3);                                                                                               // 7541
     * // => [1, 2, 3]                                                                                                 // 7542
     *                                                                                                                 // 7543
     * curried(1, 2, 3);                                                                                               // 7544
     * // => [1, 2, 3]                                                                                                 // 7545
     *                                                                                                                 // 7546
     * // using placeholders                                                                                           // 7547
     * curried(1)(_, 3)(2);                                                                                            // 7548
     * // => [1, 2, 3]                                                                                                 // 7549
     */                                                                                                                // 7550
    var curry = createCurry(CURRY_FLAG);                                                                               // 7551
                                                                                                                       // 7552
    /**                                                                                                                // 7553
     * This method is like `_.curry` except that arguments are applied to `func`                                       // 7554
     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 7555
     *                                                                                                                 // 7556
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 7557
     * builds, may be used as a placeholder for provided arguments.                                                    // 7558
     *                                                                                                                 // 7559
     * **Note:** This method does not set the "length" property of curried functions.                                  // 7560
     *                                                                                                                 // 7561
     * @static                                                                                                         // 7562
     * @memberOf _                                                                                                     // 7563
     * @category Function                                                                                              // 7564
     * @param {Function} func The function to curry.                                                                   // 7565
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7566
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7567
     * @returns {Function} Returns the new curried function.                                                           // 7568
     * @example                                                                                                        // 7569
     *                                                                                                                 // 7570
     * var abc = function(a, b, c) {                                                                                   // 7571
     *   return [a, b, c];                                                                                             // 7572
     * };                                                                                                              // 7573
     *                                                                                                                 // 7574
     * var curried = _.curryRight(abc);                                                                                // 7575
     *                                                                                                                 // 7576
     * curried(3)(2)(1);                                                                                               // 7577
     * // => [1, 2, 3]                                                                                                 // 7578
     *                                                                                                                 // 7579
     * curried(2, 3)(1);                                                                                               // 7580
     * // => [1, 2, 3]                                                                                                 // 7581
     *                                                                                                                 // 7582
     * curried(1, 2, 3);                                                                                               // 7583
     * // => [1, 2, 3]                                                                                                 // 7584
     *                                                                                                                 // 7585
     * // using placeholders                                                                                           // 7586
     * curried(3)(1, _)(2);                                                                                            // 7587
     * // => [1, 2, 3]                                                                                                 // 7588
     */                                                                                                                // 7589
    var curryRight = createCurry(CURRY_RIGHT_FLAG);                                                                    // 7590
                                                                                                                       // 7591
    /**                                                                                                                // 7592
     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 7593
     * milliseconds have elapsed since the last time the debounced function was                                        // 7594
     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 7595
     * delayed invocations. Provide an options object to indicate that `func`                                          // 7596
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.                                    // 7597
     * Subsequent calls to the debounced function return the result of the last                                        // 7598
     * `func` invocation.                                                                                              // 7599
     *                                                                                                                 // 7600
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 7601
     * on the trailing edge of the timeout only if the the debounced function is                                       // 7602
     * invoked more than once during the `wait` timeout.                                                               // 7603
     *                                                                                                                 // 7604
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 7605
     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 7606
     *                                                                                                                 // 7607
     * @static                                                                                                         // 7608
     * @memberOf _                                                                                                     // 7609
     * @category Function                                                                                              // 7610
     * @param {Function} func The function to debounce.                                                                // 7611
     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 7612
     * @param {Object} [options] The options object.                                                                   // 7613
     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 7614
     *  edge of the timeout.                                                                                           // 7615
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 7616
     *  delayed before it's invoked.                                                                                   // 7617
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 7618
     *  edge of the timeout.                                                                                           // 7619
     * @returns {Function} Returns the new debounced function.                                                         // 7620
     * @example                                                                                                        // 7621
     *                                                                                                                 // 7622
     * // avoid costly calculations while the window size is in flux                                                   // 7623
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 7624
     *                                                                                                                 // 7625
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls                                 // 7626
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {                                                      // 7627
     *   'leading': true,                                                                                              // 7628
     *   'trailing': false                                                                                             // 7629
     * }));                                                                                                            // 7630
     *                                                                                                                 // 7631
     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 7632
     * var source = new EventSource('/stream');                                                                        // 7633
     * jQuery(source).on('message', _.debounce(batchLog, 250, {                                                        // 7634
     *   'maxWait': 1000                                                                                               // 7635
     * }));                                                                                                            // 7636
     *                                                                                                                 // 7637
     * // cancel a debounced call                                                                                      // 7638
     * var todoChanges = _.debounce(batchLog, 1000);                                                                   // 7639
     * Object.observe(models.todo, todoChanges);                                                                       // 7640
     *                                                                                                                 // 7641
     * Object.observe(models, function(changes) {                                                                      // 7642
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {                                                   // 7643
     *     todoChanges.cancel();                                                                                       // 7644
     *   }                                                                                                             // 7645
     * }, ['delete']);                                                                                                 // 7646
     *                                                                                                                 // 7647
     * // ...at some point `models.todo` is changed                                                                    // 7648
     * models.todo.completed = true;                                                                                   // 7649
     *                                                                                                                 // 7650
     * // ...before 1 second has passed `models.todo` is deleted                                                       // 7651
     * // which cancels the debounced `todoChanges` call                                                               // 7652
     * delete models.todo;                                                                                             // 7653
     */                                                                                                                // 7654
    function debounce(func, wait, options) {                                                                           // 7655
      var args,                                                                                                        // 7656
          maxTimeoutId,                                                                                                // 7657
          result,                                                                                                      // 7658
          stamp,                                                                                                       // 7659
          thisArg,                                                                                                     // 7660
          timeoutId,                                                                                                   // 7661
          trailingCall,                                                                                                // 7662
          lastCalled = 0,                                                                                              // 7663
          maxWait = false,                                                                                             // 7664
          trailing = true;                                                                                             // 7665
                                                                                                                       // 7666
      if (typeof func != 'function') {                                                                                 // 7667
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7668
      }                                                                                                                // 7669
      wait = wait < 0 ? 0 : (+wait || 0);                                                                              // 7670
      if (options === true) {                                                                                          // 7671
        var leading = true;                                                                                            // 7672
        trailing = false;                                                                                              // 7673
      } else if (isObject(options)) {                                                                                  // 7674
        leading = !!options.leading;                                                                                   // 7675
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);                                      // 7676
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 7677
      }                                                                                                                // 7678
                                                                                                                       // 7679
      function cancel() {                                                                                              // 7680
        if (timeoutId) {                                                                                               // 7681
          clearTimeout(timeoutId);                                                                                     // 7682
        }                                                                                                              // 7683
        if (maxTimeoutId) {                                                                                            // 7684
          clearTimeout(maxTimeoutId);                                                                                  // 7685
        }                                                                                                              // 7686
        lastCalled = 0;                                                                                                // 7687
        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7688
      }                                                                                                                // 7689
                                                                                                                       // 7690
      function complete(isCalled, id) {                                                                                // 7691
        if (id) {                                                                                                      // 7692
          clearTimeout(id);                                                                                            // 7693
        }                                                                                                              // 7694
        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7695
        if (isCalled) {                                                                                                // 7696
          lastCalled = now();                                                                                          // 7697
          result = func.apply(thisArg, args);                                                                          // 7698
          if (!timeoutId && !maxTimeoutId) {                                                                           // 7699
            args = thisArg = undefined;                                                                                // 7700
          }                                                                                                            // 7701
        }                                                                                                              // 7702
      }                                                                                                                // 7703
                                                                                                                       // 7704
      function delayed() {                                                                                             // 7705
        var remaining = wait - (now() - stamp);                                                                        // 7706
        if (remaining <= 0 || remaining > wait) {                                                                      // 7707
          complete(trailingCall, maxTimeoutId);                                                                        // 7708
        } else {                                                                                                       // 7709
          timeoutId = setTimeout(delayed, remaining);                                                                  // 7710
        }                                                                                                              // 7711
      }                                                                                                                // 7712
                                                                                                                       // 7713
      function maxDelayed() {                                                                                          // 7714
        complete(trailing, timeoutId);                                                                                 // 7715
      }                                                                                                                // 7716
                                                                                                                       // 7717
      function debounced() {                                                                                           // 7718
        args = arguments;                                                                                              // 7719
        stamp = now();                                                                                                 // 7720
        thisArg = this;                                                                                                // 7721
        trailingCall = trailing && (timeoutId || !leading);                                                            // 7722
                                                                                                                       // 7723
        if (maxWait === false) {                                                                                       // 7724
          var leadingCall = leading && !timeoutId;                                                                     // 7725
        } else {                                                                                                       // 7726
          if (!maxTimeoutId && !leading) {                                                                             // 7727
            lastCalled = stamp;                                                                                        // 7728
          }                                                                                                            // 7729
          var remaining = maxWait - (stamp - lastCalled),                                                              // 7730
              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 7731
                                                                                                                       // 7732
          if (isCalled) {                                                                                              // 7733
            if (maxTimeoutId) {                                                                                        // 7734
              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 7735
            }                                                                                                          // 7736
            lastCalled = stamp;                                                                                        // 7737
            result = func.apply(thisArg, args);                                                                        // 7738
          }                                                                                                            // 7739
          else if (!maxTimeoutId) {                                                                                    // 7740
            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 7741
          }                                                                                                            // 7742
        }                                                                                                              // 7743
        if (isCalled && timeoutId) {                                                                                   // 7744
          timeoutId = clearTimeout(timeoutId);                                                                         // 7745
        }                                                                                                              // 7746
        else if (!timeoutId && wait !== maxWait) {                                                                     // 7747
          timeoutId = setTimeout(delayed, wait);                                                                       // 7748
        }                                                                                                              // 7749
        if (leadingCall) {                                                                                             // 7750
          isCalled = true;                                                                                             // 7751
          result = func.apply(thisArg, args);                                                                          // 7752
        }                                                                                                              // 7753
        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 7754
          args = thisArg = undefined;                                                                                  // 7755
        }                                                                                                              // 7756
        return result;                                                                                                 // 7757
      }                                                                                                                // 7758
      debounced.cancel = cancel;                                                                                       // 7759
      return debounced;                                                                                                // 7760
    }                                                                                                                  // 7761
                                                                                                                       // 7762
    /**                                                                                                                // 7763
     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 7764
     * additional arguments are provided to `func` when it's invoked.                                                  // 7765
     *                                                                                                                 // 7766
     * @static                                                                                                         // 7767
     * @memberOf _                                                                                                     // 7768
     * @category Function                                                                                              // 7769
     * @param {Function} func The function to defer.                                                                   // 7770
     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7771
     * @returns {number} Returns the timer id.                                                                         // 7772
     * @example                                                                                                        // 7773
     *                                                                                                                 // 7774
     * _.defer(function(text) {                                                                                        // 7775
     *   console.log(text);                                                                                            // 7776
     * }, 'deferred');                                                                                                 // 7777
     * // logs 'deferred' after one or more milliseconds                                                               // 7778
     */                                                                                                                // 7779
    var defer = restParam(function(func, args) {                                                                       // 7780
      return baseDelay(func, 1, args);                                                                                 // 7781
    });                                                                                                                // 7782
                                                                                                                       // 7783
    /**                                                                                                                // 7784
     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 7785
     * provided to `func` when it's invoked.                                                                           // 7786
     *                                                                                                                 // 7787
     * @static                                                                                                         // 7788
     * @memberOf _                                                                                                     // 7789
     * @category Function                                                                                              // 7790
     * @param {Function} func The function to delay.                                                                   // 7791
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 7792
     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7793
     * @returns {number} Returns the timer id.                                                                         // 7794
     * @example                                                                                                        // 7795
     *                                                                                                                 // 7796
     * _.delay(function(text) {                                                                                        // 7797
     *   console.log(text);                                                                                            // 7798
     * }, 1000, 'later');                                                                                              // 7799
     * // => logs 'later' after one second                                                                             // 7800
     */                                                                                                                // 7801
    var delay = restParam(function(func, wait, args) {                                                                 // 7802
      return baseDelay(func, wait, args);                                                                              // 7803
    });                                                                                                                // 7804
                                                                                                                       // 7805
    /**                                                                                                                // 7806
     * Creates a function that returns the result of invoking the provided                                             // 7807
     * functions with the `this` binding of the created function, where each                                           // 7808
     * successive invocation is supplied the return value of the previous.                                             // 7809
     *                                                                                                                 // 7810
     * @static                                                                                                         // 7811
     * @memberOf _                                                                                                     // 7812
     * @category Function                                                                                              // 7813
     * @param {...Function} [funcs] Functions to invoke.                                                               // 7814
     * @returns {Function} Returns the new function.                                                                   // 7815
     * @example                                                                                                        // 7816
     *                                                                                                                 // 7817
     * function square(n) {                                                                                            // 7818
     *   return n * n;                                                                                                 // 7819
     * }                                                                                                               // 7820
     *                                                                                                                 // 7821
     * var addSquare = _.flow(_.add, square);                                                                          // 7822
     * addSquare(1, 2);                                                                                                // 7823
     * // => 9                                                                                                         // 7824
     */                                                                                                                // 7825
    var flow = createFlow();                                                                                           // 7826
                                                                                                                       // 7827
    /**                                                                                                                // 7828
     * This method is like `_.flow` except that it creates a function that                                             // 7829
     * invokes the provided functions from right to left.                                                              // 7830
     *                                                                                                                 // 7831
     * @static                                                                                                         // 7832
     * @memberOf _                                                                                                     // 7833
     * @alias backflow, compose                                                                                        // 7834
     * @category Function                                                                                              // 7835
     * @param {...Function} [funcs] Functions to invoke.                                                               // 7836
     * @returns {Function} Returns the new function.                                                                   // 7837
     * @example                                                                                                        // 7838
     *                                                                                                                 // 7839
     * function square(n) {                                                                                            // 7840
     *   return n * n;                                                                                                 // 7841
     * }                                                                                                               // 7842
     *                                                                                                                 // 7843
     * var addSquare = _.flowRight(square, _.add);                                                                     // 7844
     * addSquare(1, 2);                                                                                                // 7845
     * // => 9                                                                                                         // 7846
     */                                                                                                                // 7847
    var flowRight = createFlow(true);                                                                                  // 7848
                                                                                                                       // 7849
    /**                                                                                                                // 7850
     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 7851
     * provided it determines the cache key for storing the result based on the                                        // 7852
     * arguments provided to the memoized function. By default, the first argument                                     // 7853
     * provided to the memoized function is coerced to a string and used as the                                        // 7854
     * cache key. The `func` is invoked with the `this` binding of the memoized                                        // 7855
     * function.                                                                                                       // 7856
     *                                                                                                                 // 7857
     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 7858
     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 7859
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.                                                                    // 7861
     *                                                                                                                 // 7862
     * @static                                                                                                         // 7863
     * @memberOf _                                                                                                     // 7864
     * @category Function                                                                                              // 7865
     * @param {Function} func The function to have its output memoized.                                                // 7866
     * @param {Function} [resolver] The function to resolve the cache key.                                             // 7867
     * @returns {Function} Returns the new memoizing function.                                                         // 7868
     * @example                                                                                                        // 7869
     *                                                                                                                 // 7870
     * var upperCase = _.memoize(function(string) {                                                                    // 7871
     *   return string.toUpperCase();                                                                                  // 7872
     * });                                                                                                             // 7873
     *                                                                                                                 // 7874
     * upperCase('fred');                                                                                              // 7875
     * // => 'FRED'                                                                                                    // 7876
     *                                                                                                                 // 7877
     * // modifying the result cache                                                                                   // 7878
     * upperCase.cache.set('fred', 'BARNEY');                                                                          // 7879
     * upperCase('fred');                                                                                              // 7880
     * // => 'BARNEY'                                                                                                  // 7881
     *                                                                                                                 // 7882
     * // replacing `_.memoize.Cache`                                                                                  // 7883
     * var object = { 'user': 'fred' };                                                                                // 7884
     * var other = { 'user': 'barney' };                                                                               // 7885
     * var identity = _.memoize(_.identity);                                                                           // 7886
     *                                                                                                                 // 7887
     * identity(object);                                                                                               // 7888
     * // => { 'user': 'fred' }                                                                                        // 7889
     * identity(other);                                                                                                // 7890
     * // => { 'user': 'fred' }                                                                                        // 7891
     *                                                                                                                 // 7892
     * _.memoize.Cache = WeakMap;                                                                                      // 7893
     * var identity = _.memoize(_.identity);                                                                           // 7894
     *                                                                                                                 // 7895
     * identity(object);                                                                                               // 7896
     * // => { 'user': 'fred' }                                                                                        // 7897
     * identity(other);                                                                                                // 7898
     * // => { 'user': 'barney' }                                                                                      // 7899
     */                                                                                                                // 7900
    function memoize(func, resolver) {                                                                                 // 7901
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 7902
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7903
      }                                                                                                                // 7904
      var memoized = function() {                                                                                      // 7905
        var args = arguments,                                                                                          // 7906
            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 7907
            cache = memoized.cache;                                                                                    // 7908
                                                                                                                       // 7909
        if (cache.has(key)) {                                                                                          // 7910
          return cache.get(key);                                                                                       // 7911
        }                                                                                                              // 7912
        var result = func.apply(this, args);                                                                           // 7913
        memoized.cache = cache.set(key, result);                                                                       // 7914
        return result;                                                                                                 // 7915
      };                                                                                                               // 7916
      memoized.cache = new memoize.Cache;                                                                              // 7917
      return memoized;                                                                                                 // 7918
    }                                                                                                                  // 7919
                                                                                                                       // 7920
    /**                                                                                                                // 7921
     * Creates a function that runs each argument through a corresponding                                              // 7922
     * transform function.                                                                                             // 7923
     *                                                                                                                 // 7924
     * @static                                                                                                         // 7925
     * @memberOf _                                                                                                     // 7926
     * @category Function                                                                                              // 7927
     * @param {Function} func The function to wrap.                                                                    // 7928
     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 7929
     * arguments, specified as individual functions or arrays of functions.                                            // 7930
     * @returns {Function} Returns the new function.                                                                   // 7931
     * @example                                                                                                        // 7932
     *                                                                                                                 // 7933
     * function doubled(n) {                                                                                           // 7934
     *   return n * 2;                                                                                                 // 7935
     * }                                                                                                               // 7936
     *                                                                                                                 // 7937
     * function square(n) {                                                                                            // 7938
     *   return n * n;                                                                                                 // 7939
     * }                                                                                                               // 7940
     *                                                                                                                 // 7941
     * var modded = _.modArgs(function(x, y) {                                                                         // 7942
     *   return [x, y];                                                                                                // 7943
     * }, square, doubled);                                                                                            // 7944
     *                                                                                                                 // 7945
     * modded(1, 2);                                                                                                   // 7946
     * // => [1, 4]                                                                                                    // 7947
     *                                                                                                                 // 7948
     * modded(5, 10);                                                                                                  // 7949
     * // => [25, 20]                                                                                                  // 7950
     */                                                                                                                // 7951
    var modArgs = restParam(function(func, transforms) {                                                               // 7952
      transforms = baseFlatten(transforms);                                                                            // 7953
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {                                      // 7954
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7955
      }                                                                                                                // 7956
      var length = transforms.length;                                                                                  // 7957
      return restParam(function(args) {                                                                                // 7958
        var index = nativeMin(args.length, length);                                                                    // 7959
        while (index--) {                                                                                              // 7960
          args[index] = transforms[index](args[index]);                                                                // 7961
        }                                                                                                              // 7962
        return func.apply(this, args);                                                                                 // 7963
      });                                                                                                              // 7964
    });                                                                                                                // 7965
                                                                                                                       // 7966
    /**                                                                                                                // 7967
     * Creates a function that negates the result of the predicate `func`. The                                         // 7968
     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 7969
     * created function.                                                                                               // 7970
     *                                                                                                                 // 7971
     * @static                                                                                                         // 7972
     * @memberOf _                                                                                                     // 7973
     * @category Function                                                                                              // 7974
     * @param {Function} predicate The predicate to negate.                                                            // 7975
     * @returns {Function} Returns the new function.                                                                   // 7976
     * @example                                                                                                        // 7977
     *                                                                                                                 // 7978
     * function isEven(n) {                                                                                            // 7979
     *   return n % 2 == 0;                                                                                            // 7980
     * }                                                                                                               // 7981
     *                                                                                                                 // 7982
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 7983
     * // => [1, 3, 5]                                                                                                 // 7984
     */                                                                                                                // 7985
    function negate(predicate) {                                                                                       // 7986
      if (typeof predicate != 'function') {                                                                            // 7987
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7988
      }                                                                                                                // 7989
      return function() {                                                                                              // 7990
        return !predicate.apply(this, arguments);                                                                      // 7991
      };                                                                                                               // 7992
    }                                                                                                                  // 7993
                                                                                                                       // 7994
    /**                                                                                                                // 7995
     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 7996
     * to the function return the value of the first call. The `func` is invoked                                       // 7997
     * with the `this` binding and arguments of the created function.                                                  // 7998
     *                                                                                                                 // 7999
     * @static                                                                                                         // 8000
     * @memberOf _                                                                                                     // 8001
     * @category Function                                                                                              // 8002
     * @param {Function} func The function to restrict.                                                                // 8003
     * @returns {Function} Returns the new restricted function.                                                        // 8004
     * @example                                                                                                        // 8005
     *                                                                                                                 // 8006
     * var initialize = _.once(createApplication);                                                                     // 8007
     * initialize();                                                                                                   // 8008
     * initialize();                                                                                                   // 8009
     * // `initialize` invokes `createApplication` once                                                                // 8010
     */                                                                                                                // 8011
    function once(func) {                                                                                              // 8012
      return before(2, func);                                                                                          // 8013
    }                                                                                                                  // 8014
                                                                                                                       // 8015
    /**                                                                                                                // 8016
     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8017
     * to those provided to the new function. This method is like `_.bind` except                                      // 8018
     * it does **not** alter the `this` binding.                                                                       // 8019
     *                                                                                                                 // 8020
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8021
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8022
     *                                                                                                                 // 8023
     * **Note:** This method does not set the "length" property of partially                                           // 8024
     * applied functions.                                                                                              // 8025
     *                                                                                                                 // 8026
     * @static                                                                                                         // 8027
     * @memberOf _                                                                                                     // 8028
     * @category Function                                                                                              // 8029
     * @param {Function} func The function to partially apply arguments to.                                            // 8030
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8031
     * @returns {Function} Returns the new partially applied function.                                                 // 8032
     * @example                                                                                                        // 8033
     *                                                                                                                 // 8034
     * var greet = function(greeting, name) {                                                                          // 8035
     *   return greeting + ' ' + name;                                                                                 // 8036
     * };                                                                                                              // 8037
     *                                                                                                                 // 8038
     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8039
     * sayHelloTo('fred');                                                                                             // 8040
     * // => 'hello fred'                                                                                              // 8041
     *                                                                                                                 // 8042
     * // using placeholders                                                                                           // 8043
     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8044
     * greetFred('hi');                                                                                                // 8045
     * // => 'hi fred'                                                                                                 // 8046
     */                                                                                                                // 8047
    var partial = createPartial(PARTIAL_FLAG);                                                                         // 8048
                                                                                                                       // 8049
    /**                                                                                                                // 8050
     * This method is like `_.partial` except that partially applied arguments                                         // 8051
     * are appended to those provided to the new function.                                                             // 8052
     *                                                                                                                 // 8053
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8054
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8055
     *                                                                                                                 // 8056
     * **Note:** This method does not set the "length" property of partially                                           // 8057
     * applied functions.                                                                                              // 8058
     *                                                                                                                 // 8059
     * @static                                                                                                         // 8060
     * @memberOf _                                                                                                     // 8061
     * @category Function                                                                                              // 8062
     * @param {Function} func The function to partially apply arguments to.                                            // 8063
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8064
     * @returns {Function} Returns the new partially applied function.                                                 // 8065
     * @example                                                                                                        // 8066
     *                                                                                                                 // 8067
     * var greet = function(greeting, name) {                                                                          // 8068
     *   return greeting + ' ' + name;                                                                                 // 8069
     * };                                                                                                              // 8070
     *                                                                                                                 // 8071
     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8072
     * greetFred('hi');                                                                                                // 8073
     * // => 'hi fred'                                                                                                 // 8074
     *                                                                                                                 // 8075
     * // using placeholders                                                                                           // 8076
     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8077
     * sayHelloTo('fred');                                                                                             // 8078
     * // => 'hello fred'                                                                                              // 8079
     */                                                                                                                // 8080
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);                                                              // 8081
                                                                                                                       // 8082
    /**                                                                                                                // 8083
     * Creates a function that invokes `func` with arguments arranged according                                        // 8084
     * to the specified indexes where the argument value at the first index is                                         // 8085
     * provided as the first argument, the argument value at the second index is                                       // 8086
     * provided as the second argument, and so on.                                                                     // 8087
     *                                                                                                                 // 8088
     * @static                                                                                                         // 8089
     * @memberOf _                                                                                                     // 8090
     * @category Function                                                                                              // 8091
     * @param {Function} func The function to rearrange arguments for.                                                 // 8092
     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8093
     *  specified as individual indexes or arrays of indexes.                                                          // 8094
     * @returns {Function} Returns the new function.                                                                   // 8095
     * @example                                                                                                        // 8096
     *                                                                                                                 // 8097
     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8098
     *   return [a, b, c];                                                                                             // 8099
     * }, 2, 0, 1);                                                                                                    // 8100
     *                                                                                                                 // 8101
     * rearged('b', 'c', 'a')                                                                                          // 8102
     * // => ['a', 'b', 'c']                                                                                           // 8103
     *                                                                                                                 // 8104
     * var map = _.rearg(_.map, [1, 0]);                                                                               // 8105
     * map(function(n) {                                                                                               // 8106
     *   return n * 3;                                                                                                 // 8107
     * }, [1, 2, 3]);                                                                                                  // 8108
     * // => [3, 6, 9]                                                                                                 // 8109
     */                                                                                                                // 8110
    var rearg = restParam(function(func, indexes) {                                                                    // 8111
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8112
    });                                                                                                                // 8113
                                                                                                                       // 8114
    /**                                                                                                                // 8115
     * Creates a function that invokes `func` with the `this` binding of the                                           // 8116
     * created function and arguments from `start` and beyond provided as an array.                                    // 8117
     *                                                                                                                 // 8118
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
     *                                                                                                                 // 8120
     * @static                                                                                                         // 8121
     * @memberOf _                                                                                                     // 8122
     * @category Function                                                                                              // 8123
     * @param {Function} func The function to apply a rest parameter to.                                               // 8124
     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8125
     * @returns {Function} Returns the new function.                                                                   // 8126
     * @example                                                                                                        // 8127
     *                                                                                                                 // 8128
     * var say = _.restParam(function(what, names) {                                                                   // 8129
     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8130
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8131
     * });                                                                                                             // 8132
     *                                                                                                                 // 8133
     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8134
     * // => 'hello fred, barney, & pebbles'                                                                           // 8135
     */                                                                                                                // 8136
    function restParam(func, start) {                                                                                  // 8137
      if (typeof func != 'function') {                                                                                 // 8138
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8139
      }                                                                                                                // 8140
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);                                   // 8141
      return function() {                                                                                              // 8142
        var args = arguments,                                                                                          // 8143
            index = -1,                                                                                                // 8144
            length = nativeMax(args.length - start, 0),                                                                // 8145
            rest = Array(length);                                                                                      // 8146
                                                                                                                       // 8147
        while (++index < length) {                                                                                     // 8148
          rest[index] = args[start + index];                                                                           // 8149
        }                                                                                                              // 8150
        switch (start) {                                                                                               // 8151
          case 0: return func.call(this, rest);                                                                        // 8152
          case 1: return func.call(this, args[0], rest);                                                               // 8153
          case 2: return func.call(this, args[0], args[1], rest);                                                      // 8154
        }                                                                                                              // 8155
        var otherArgs = Array(start + 1);                                                                              // 8156
        index = -1;                                                                                                    // 8157
        while (++index < start) {                                                                                      // 8158
          otherArgs[index] = args[index];                                                                              // 8159
        }                                                                                                              // 8160
        otherArgs[start] = rest;                                                                                       // 8161
        return func.apply(this, otherArgs);                                                                            // 8162
      };                                                                                                               // 8163
    }                                                                                                                  // 8164
                                                                                                                       // 8165
    /**                                                                                                                // 8166
     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8167
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8168
     *                                                                                                                 // 8169
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).
     *                                                                                                                 // 8171
     * @static                                                                                                         // 8172
     * @memberOf _                                                                                                     // 8173
     * @category Function                                                                                              // 8174
     * @param {Function} func The function to spread arguments over.                                                   // 8175
     * @returns {Function} Returns the new function.                                                                   // 8176
     * @example                                                                                                        // 8177
     *                                                                                                                 // 8178
     * var say = _.spread(function(who, what) {                                                                        // 8179
     *   return who + ' says ' + what;                                                                                 // 8180
     * });                                                                                                             // 8181
     *                                                                                                                 // 8182
     * say(['fred', 'hello']);                                                                                         // 8183
     * // => 'fred says hello'                                                                                         // 8184
     *                                                                                                                 // 8185
     * // with a Promise                                                                                               // 8186
     * var numbers = Promise.all([                                                                                     // 8187
     *   Promise.resolve(40),                                                                                          // 8188
     *   Promise.resolve(36)                                                                                           // 8189
     * ]);                                                                                                             // 8190
     *                                                                                                                 // 8191
     * numbers.then(_.spread(function(x, y) {                                                                          // 8192
     *   return x + y;                                                                                                 // 8193
     * }));                                                                                                            // 8194
     * // => a Promise of 76                                                                                           // 8195
     */                                                                                                                // 8196
    function spread(func) {                                                                                            // 8197
      if (typeof func != 'function') {                                                                                 // 8198
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8199
      }                                                                                                                // 8200
      return function(array) {                                                                                         // 8201
        return func.apply(this, array);                                                                                // 8202
      };                                                                                                               // 8203
    }                                                                                                                  // 8204
                                                                                                                       // 8205
    /**                                                                                                                // 8206
     * Creates a throttled function that only invokes `func` at most once per                                          // 8207
     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8208
     * method to cancel delayed invocations. Provide an options object to indicate                                     // 8209
     * that `func` should be invoked on the leading and/or trailing edge of the                                        // 8210
     * `wait` timeout. Subsequent calls to the throttled function return the                                           // 8211
     * result of the last `func` call.                                                                                 // 8212
     *                                                                                                                 // 8213
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8214
     * on the trailing edge of the timeout only if the the throttled function is                                       // 8215
     * invoked more than once during the `wait` timeout.                                                               // 8216
     *                                                                                                                 // 8217
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8218
     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8219
     *                                                                                                                 // 8220
     * @static                                                                                                         // 8221
     * @memberOf _                                                                                                     // 8222
     * @category Function                                                                                              // 8223
     * @param {Function} func The function to throttle.                                                                // 8224
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8225
     * @param {Object} [options] The options object.                                                                   // 8226
     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8227
     *  edge of the timeout.                                                                                           // 8228
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8229
     *  edge of the timeout.                                                                                           // 8230
     * @returns {Function} Returns the new throttled function.                                                         // 8231
     * @example                                                                                                        // 8232
     *                                                                                                                 // 8233
     * // avoid excessively updating the position while scrolling                                                      // 8234
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8235
     *                                                                                                                 // 8236
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8237
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {                                             // 8238
     *   'trailing': false                                                                                             // 8239
     * }));                                                                                                            // 8240
     *                                                                                                                 // 8241
     * // cancel a trailing throttled call                                                                             // 8242
     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8243
     */                                                                                                                // 8244
    function throttle(func, wait, options) {                                                                           // 8245
      var leading = true,                                                                                              // 8246
          trailing = true;                                                                                             // 8247
                                                                                                                       // 8248
      if (typeof func != 'function') {                                                                                 // 8249
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8250
      }                                                                                                                // 8251
      if (options === false) {                                                                                         // 8252
        leading = false;                                                                                               // 8253
      } else if (isObject(options)) {                                                                                  // 8254
        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8255
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8256
      }                                                                                                                // 8257
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });                     // 8258
    }                                                                                                                  // 8259
                                                                                                                       // 8260
    /**                                                                                                                // 8261
     * Creates a function that provides `value` to the wrapper function as its                                         // 8262
     * first argument. Any additional arguments provided to the function are                                           // 8263
     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 8264
     * with the `this` binding of the created function.                                                                // 8265
     *                                                                                                                 // 8266
     * @static                                                                                                         // 8267
     * @memberOf _                                                                                                     // 8268
     * @category Function                                                                                              // 8269
     * @param {*} value The value to wrap.                                                                             // 8270
     * @param {Function} wrapper The wrapper function.                                                                 // 8271
     * @returns {Function} Returns the new function.                                                                   // 8272
     * @example                                                                                                        // 8273
     *                                                                                                                 // 8274
     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 8275
     *   return '<p>' + func(text) + '</p>';                                                                           // 8276
     * });                                                                                                             // 8277
     *                                                                                                                 // 8278
     * p('fred, barney, & pebbles');                                                                                   // 8279
     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 8280
     */                                                                                                                // 8281
    function wrap(value, wrapper) {                                                                                    // 8282
      wrapper = wrapper == null ? identity : wrapper;                                                                  // 8283
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);                                             // 8284
    }                                                                                                                  // 8285
                                                                                                                       // 8286
    /*------------------------------------------------------------------------*/                                       // 8287
                                                                                                                       // 8288
    /**                                                                                                                // 8289
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,                                    // 8290
     * otherwise they are assigned by reference. If `customizer` is provided it's                                      // 8291
     * invoked to produce the cloned values. If `customizer` returns `undefined`                                       // 8292
     * cloning is handled by the method instead. The `customizer` is bound to                                          // 8293
     * `thisArg` and invoked with up to three argument; (value [, index|key, object]).                                 // 8294
     *                                                                                                                 // 8295
     * **Note:** This method is loosely based on the                                                                   // 8296
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by                                         // 8298
     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8299
     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8300
     * Maps, Sets, and WeakMaps.                                                                                       // 8301
     *                                                                                                                 // 8302
     * @static                                                                                                         // 8303
     * @memberOf _                                                                                                     // 8304
     * @category Lang                                                                                                  // 8305
     * @param {*} value The value to clone.                                                                            // 8306
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 8307
     * @param {Function} [customizer] The function to customize cloning values.                                        // 8308
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8309
     * @returns {*} Returns the cloned value.                                                                          // 8310
     * @example                                                                                                        // 8311
     *                                                                                                                 // 8312
     * var users = [                                                                                                   // 8313
     *   { 'user': 'barney' },                                                                                         // 8314
     *   { 'user': 'fred' }                                                                                            // 8315
     * ];                                                                                                              // 8316
     *                                                                                                                 // 8317
     * var shallow = _.clone(users);                                                                                   // 8318
     * shallow[0] === users[0];                                                                                        // 8319
     * // => true                                                                                                      // 8320
     *                                                                                                                 // 8321
     * var deep = _.clone(users, true);                                                                                // 8322
     * deep[0] === users[0];                                                                                           // 8323
     * // => false                                                                                                     // 8324
     *                                                                                                                 // 8325
     * // using a customizer callback                                                                                  // 8326
     * var el = _.clone(document.body, function(value) {                                                               // 8327
     *   if (_.isElement(value)) {                                                                                     // 8328
     *     return value.cloneNode(false);                                                                              // 8329
     *   }                                                                                                             // 8330
     * });                                                                                                             // 8331
     *                                                                                                                 // 8332
     * el === document.body                                                                                            // 8333
     * // => false                                                                                                     // 8334
     * el.nodeName                                                                                                     // 8335
     * // => BODY                                                                                                      // 8336
     * el.childNodes.length;                                                                                           // 8337
     * // => 0                                                                                                         // 8338
     */                                                                                                                // 8339
    function clone(value, isDeep, customizer, thisArg) {                                                               // 8340
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {                         // 8341
        isDeep = false;                                                                                                // 8342
      }                                                                                                                // 8343
      else if (typeof isDeep == 'function') {                                                                          // 8344
        thisArg = customizer;                                                                                          // 8345
        customizer = isDeep;                                                                                           // 8346
        isDeep = false;                                                                                                // 8347
      }                                                                                                                // 8348
      return typeof customizer == 'function'                                                                           // 8349
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))                                               // 8350
        : baseClone(value, isDeep);                                                                                    // 8351
    }                                                                                                                  // 8352
                                                                                                                       // 8353
    /**                                                                                                                // 8354
     * Creates a deep clone of `value`. If `customizer` is provided it's invoked                                       // 8355
     * to produce the cloned values. If `customizer` returns `undefined` cloning                                       // 8356
     * is handled by the method instead. The `customizer` is bound to `thisArg`                                        // 8357
     * and invoked with up to three argument; (value [, index|key, object]).                                           // 8358
     *                                                                                                                 // 8359
     * **Note:** This method is loosely based on the                                                                   // 8360
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by                                         // 8362
     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8363
     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8364
     * Maps, Sets, and WeakMaps.                                                                                       // 8365
     *                                                                                                                 // 8366
     * @static                                                                                                         // 8367
     * @memberOf _                                                                                                     // 8368
     * @category Lang                                                                                                  // 8369
     * @param {*} value The value to deep clone.                                                                       // 8370
     * @param {Function} [customizer] The function to customize cloning values.                                        // 8371
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8372
     * @returns {*} Returns the deep cloned value.                                                                     // 8373
     * @example                                                                                                        // 8374
     *                                                                                                                 // 8375
     * var users = [                                                                                                   // 8376
     *   { 'user': 'barney' },                                                                                         // 8377
     *   { 'user': 'fred' }                                                                                            // 8378
     * ];                                                                                                              // 8379
     *                                                                                                                 // 8380
     * var deep = _.cloneDeep(users);                                                                                  // 8381
     * deep[0] === users[0];                                                                                           // 8382
     * // => false                                                                                                     // 8383
     *                                                                                                                 // 8384
     * // using a customizer callback                                                                                  // 8385
     * var el = _.cloneDeep(document.body, function(value) {                                                           // 8386
     *   if (_.isElement(value)) {                                                                                     // 8387
     *     return value.cloneNode(true);                                                                               // 8388
     *   }                                                                                                             // 8389
     * });                                                                                                             // 8390
     *                                                                                                                 // 8391
     * el === document.body                                                                                            // 8392
     * // => false                                                                                                     // 8393
     * el.nodeName                                                                                                     // 8394
     * // => BODY                                                                                                      // 8395
     * el.childNodes.length;                                                                                           // 8396
     * // => 20                                                                                                        // 8397
     */                                                                                                                // 8398
    function cloneDeep(value, customizer, thisArg) {                                                                   // 8399
      return typeof customizer == 'function'                                                                           // 8400
        ? baseClone(value, true, bindCallback(customizer, thisArg, 3))                                                 // 8401
        : baseClone(value, true);                                                                                      // 8402
    }                                                                                                                  // 8403
                                                                                                                       // 8404
    /**                                                                                                                // 8405
     * Checks if `value` is greater than `other`.                                                                      // 8406
     *                                                                                                                 // 8407
     * @static                                                                                                         // 8408
     * @memberOf _                                                                                                     // 8409
     * @category Lang                                                                                                  // 8410
     * @param {*} value The value to compare.                                                                          // 8411
     * @param {*} other The other value to compare.                                                                    // 8412
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 8413
     * @example                                                                                                        // 8414
     *                                                                                                                 // 8415
     * _.gt(3, 1);                                                                                                     // 8416
     * // => true                                                                                                      // 8417
     *                                                                                                                 // 8418
     * _.gt(3, 3);                                                                                                     // 8419
     * // => false                                                                                                     // 8420
     *                                                                                                                 // 8421
     * _.gt(1, 3);                                                                                                     // 8422
     * // => false                                                                                                     // 8423
     */                                                                                                                // 8424
    function gt(value, other) {                                                                                        // 8425
      return value > other;                                                                                            // 8426
    }                                                                                                                  // 8427
                                                                                                                       // 8428
    /**                                                                                                                // 8429
     * Checks if `value` is greater than or equal to `other`.                                                          // 8430
     *                                                                                                                 // 8431
     * @static                                                                                                         // 8432
     * @memberOf _                                                                                                     // 8433
     * @category Lang                                                                                                  // 8434
     * @param {*} value The value to compare.                                                                          // 8435
     * @param {*} other The other value to compare.                                                                    // 8436
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 8437
     * @example                                                                                                        // 8438
     *                                                                                                                 // 8439
     * _.gte(3, 1);                                                                                                    // 8440
     * // => true                                                                                                      // 8441
     *                                                                                                                 // 8442
     * _.gte(3, 3);                                                                                                    // 8443
     * // => true                                                                                                      // 8444
     *                                                                                                                 // 8445
     * _.gte(1, 3);                                                                                                    // 8446
     * // => false                                                                                                     // 8447
     */                                                                                                                // 8448
    function gte(value, other) {                                                                                       // 8449
      return value >= other;                                                                                           // 8450
    }                                                                                                                  // 8451
                                                                                                                       // 8452
    /**                                                                                                                // 8453
     * Checks if `value` is classified as an `arguments` object.                                                       // 8454
     *                                                                                                                 // 8455
     * @static                                                                                                         // 8456
     * @memberOf _                                                                                                     // 8457
     * @category Lang                                                                                                  // 8458
     * @param {*} value The value to check.                                                                            // 8459
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8460
     * @example                                                                                                        // 8461
     *                                                                                                                 // 8462
     * _.isArguments(function() { return arguments; }());                                                              // 8463
     * // => true                                                                                                      // 8464
     *                                                                                                                 // 8465
     * _.isArguments([1, 2, 3]);                                                                                       // 8466
     * // => false                                                                                                     // 8467
     */                                                                                                                // 8468
    function isArguments(value) {                                                                                      // 8469
      return isObjectLike(value) && isArrayLike(value) &&                                                              // 8470
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');                           // 8471
    }                                                                                                                  // 8472
                                                                                                                       // 8473
    /**                                                                                                                // 8474
     * Checks if `value` is classified as an `Array` object.                                                           // 8475
     *                                                                                                                 // 8476
     * @static                                                                                                         // 8477
     * @memberOf _                                                                                                     // 8478
     * @category Lang                                                                                                  // 8479
     * @param {*} value The value to check.                                                                            // 8480
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8481
     * @example                                                                                                        // 8482
     *                                                                                                                 // 8483
     * _.isArray([1, 2, 3]);                                                                                           // 8484
     * // => true                                                                                                      // 8485
     *                                                                                                                 // 8486
     * _.isArray(function() { return arguments; }());                                                                  // 8487
     * // => false                                                                                                     // 8488
     */                                                                                                                // 8489
    var isArray = nativeIsArray || function(value) {                                                                   // 8490
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;                     // 8491
    };                                                                                                                 // 8492
                                                                                                                       // 8493
    /**                                                                                                                // 8494
     * Checks if `value` is classified as a boolean primitive or object.                                               // 8495
     *                                                                                                                 // 8496
     * @static                                                                                                         // 8497
     * @memberOf _                                                                                                     // 8498
     * @category Lang                                                                                                  // 8499
     * @param {*} value The value to check.                                                                            // 8500
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8501
     * @example                                                                                                        // 8502
     *                                                                                                                 // 8503
     * _.isBoolean(false);                                                                                             // 8504
     * // => true                                                                                                      // 8505
     *                                                                                                                 // 8506
     * _.isBoolean(null);                                                                                              // 8507
     * // => false                                                                                                     // 8508
     */                                                                                                                // 8509
    function isBoolean(value) {                                                                                        // 8510
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);         // 8511
    }                                                                                                                  // 8512
                                                                                                                       // 8513
    /**                                                                                                                // 8514
     * Checks if `value` is classified as a `Date` object.                                                             // 8515
     *                                                                                                                 // 8516
     * @static                                                                                                         // 8517
     * @memberOf _                                                                                                     // 8518
     * @category Lang                                                                                                  // 8519
     * @param {*} value The value to check.                                                                            // 8520
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8521
     * @example                                                                                                        // 8522
     *                                                                                                                 // 8523
     * _.isDate(new Date);                                                                                             // 8524
     * // => true                                                                                                      // 8525
     *                                                                                                                 // 8526
     * _.isDate('Mon April 23 2012');                                                                                  // 8527
     * // => false                                                                                                     // 8528
     */                                                                                                                // 8529
    function isDate(value) {                                                                                           // 8530
      return isObjectLike(value) && objToString.call(value) == dateTag;                                                // 8531
    }                                                                                                                  // 8532
                                                                                                                       // 8533
    /**                                                                                                                // 8534
     * Checks if `value` is a DOM element.                                                                             // 8535
     *                                                                                                                 // 8536
     * @static                                                                                                         // 8537
     * @memberOf _                                                                                                     // 8538
     * @category Lang                                                                                                  // 8539
     * @param {*} value The value to check.                                                                            // 8540
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 8541
     * @example                                                                                                        // 8542
     *                                                                                                                 // 8543
     * _.isElement(document.body);                                                                                     // 8544
     * // => true                                                                                                      // 8545
     *                                                                                                                 // 8546
     * _.isElement('<body>');                                                                                          // 8547
     * // => false                                                                                                     // 8548
     */                                                                                                                // 8549
    function isElement(value) {                                                                                        // 8550
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 8551
    }                                                                                                                  // 8552
                                                                                                                       // 8553
    /**                                                                                                                // 8554
     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 8555
     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 8556
     * greater than `0` or an object with own enumerable properties.                                                   // 8557
     *                                                                                                                 // 8558
     * @static                                                                                                         // 8559
     * @memberOf _                                                                                                     // 8560
     * @category Lang                                                                                                  // 8561
     * @param {Array|Object|string} value The value to inspect.                                                        // 8562
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 8563
     * @example                                                                                                        // 8564
     *                                                                                                                 // 8565
     * _.isEmpty(null);                                                                                                // 8566
     * // => true                                                                                                      // 8567
     *                                                                                                                 // 8568
     * _.isEmpty(true);                                                                                                // 8569
     * // => true                                                                                                      // 8570
     *                                                                                                                 // 8571
     * _.isEmpty(1);                                                                                                   // 8572
     * // => true                                                                                                      // 8573
     *                                                                                                                 // 8574
     * _.isEmpty([1, 2, 3]);                                                                                           // 8575
     * // => false                                                                                                     // 8576
     *                                                                                                                 // 8577
     * _.isEmpty({ 'a': 1 });                                                                                          // 8578
     * // => false                                                                                                     // 8579
     */                                                                                                                // 8580
    function isEmpty(value) {                                                                                          // 8581
      if (value == null) {                                                                                             // 8582
        return true;                                                                                                   // 8583
      }                                                                                                                // 8584
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||                            // 8585
          (isObjectLike(value) && isFunction(value.splice)))) {                                                        // 8586
        return !value.length;                                                                                          // 8587
      }                                                                                                                // 8588
      return !keys(value).length;                                                                                      // 8589
    }                                                                                                                  // 8590
                                                                                                                       // 8591
    /**                                                                                                                // 8592
     * Performs a deep comparison between two values to determine if they are                                          // 8593
     * equivalent. If `customizer` is provided it's invoked to compare values.                                         // 8594
     * If `customizer` returns `undefined` comparisons are handled by the method                                       // 8595
     * instead. The `customizer` is bound to `thisArg` and invoked with up to                                          // 8596
     * three arguments: (value, other [, index|key]).                                                                  // 8597
     *                                                                                                                 // 8598
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 8599
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 8600
     * their own, not inherited, enumerable properties. Functions and DOM nodes                                        // 8601
     * are **not** supported. Provide a customizer function to extend support                                          // 8602
     * for comparing other values.                                                                                     // 8603
     *                                                                                                                 // 8604
     * @static                                                                                                         // 8605
     * @memberOf _                                                                                                     // 8606
     * @alias eq                                                                                                       // 8607
     * @category Lang                                                                                                  // 8608
     * @param {*} value The value to compare.                                                                          // 8609
     * @param {*} other The other value to compare.                                                                    // 8610
     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8611
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8612
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 8613
     * @example                                                                                                        // 8614
     *                                                                                                                 // 8615
     * var object = { 'user': 'fred' };                                                                                // 8616
     * var other = { 'user': 'fred' };                                                                                 // 8617
     *                                                                                                                 // 8618
     * object == other;                                                                                                // 8619
     * // => false                                                                                                     // 8620
     *                                                                                                                 // 8621
     * _.isEqual(object, other);                                                                                       // 8622
     * // => true                                                                                                      // 8623
     *                                                                                                                 // 8624
     * // using a customizer callback                                                                                  // 8625
     * var array = ['hello', 'goodbye'];                                                                               // 8626
     * var other = ['hi', 'goodbye'];                                                                                  // 8627
     *                                                                                                                 // 8628
     * _.isEqual(array, other, function(value, other) {                                                                // 8629
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {                                        // 8630
     *     return true;                                                                                                // 8631
     *   }                                                                                                             // 8632
     * });                                                                                                             // 8633
     * // => true                                                                                                      // 8634
     */                                                                                                                // 8635
    function isEqual(value, other, customizer, thisArg) {                                                              // 8636
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8637
      var result = customizer ? customizer(value, other) : undefined;                                                  // 8638
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                 // 8639
    }                                                                                                                  // 8640
                                                                                                                       // 8641
    /**                                                                                                                // 8642
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 8643
     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 8644
     *                                                                                                                 // 8645
     * @static                                                                                                         // 8646
     * @memberOf _                                                                                                     // 8647
     * @category Lang                                                                                                  // 8648
     * @param {*} value The value to check.                                                                            // 8649
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 8650
     * @example                                                                                                        // 8651
     *                                                                                                                 // 8652
     * _.isError(new Error);                                                                                           // 8653
     * // => true                                                                                                      // 8654
     *                                                                                                                 // 8655
     * _.isError(Error);                                                                                               // 8656
     * // => false                                                                                                     // 8657
     */                                                                                                                // 8658
    function isError(value) {                                                                                          // 8659
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;           // 8660
    }                                                                                                                  // 8661
                                                                                                                       // 8662
    /**                                                                                                                // 8663
     * Checks if `value` is a finite primitive number.                                                                 // 8664
     *                                                                                                                 // 8665
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *                                                                                                                 // 8667
     * @static                                                                                                         // 8668
     * @memberOf _                                                                                                     // 8669
     * @category Lang                                                                                                  // 8670
     * @param {*} value The value to check.                                                                            // 8671
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 8672
     * @example                                                                                                        // 8673
     *                                                                                                                 // 8674
     * _.isFinite(10);                                                                                                 // 8675
     * // => true                                                                                                      // 8676
     *                                                                                                                 // 8677
     * _.isFinite('10');                                                                                               // 8678
     * // => false                                                                                                     // 8679
     *                                                                                                                 // 8680
     * _.isFinite(true);                                                                                               // 8681
     * // => false                                                                                                     // 8682
     *                                                                                                                 // 8683
     * _.isFinite(Object(10));                                                                                         // 8684
     * // => false                                                                                                     // 8685
     *                                                                                                                 // 8686
     * _.isFinite(Infinity);                                                                                           // 8687
     * // => false                                                                                                     // 8688
     */                                                                                                                // 8689
    function isFinite(value) {                                                                                         // 8690
      return typeof value == 'number' && nativeIsFinite(value);                                                        // 8691
    }                                                                                                                  // 8692
                                                                                                                       // 8693
    /**                                                                                                                // 8694
     * Checks if `value` is classified as a `Function` object.                                                         // 8695
     *                                                                                                                 // 8696
     * @static                                                                                                         // 8697
     * @memberOf _                                                                                                     // 8698
     * @category Lang                                                                                                  // 8699
     * @param {*} value The value to check.                                                                            // 8700
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8701
     * @example                                                                                                        // 8702
     *                                                                                                                 // 8703
     * _.isFunction(_);                                                                                                // 8704
     * // => true                                                                                                      // 8705
     *                                                                                                                 // 8706
     * _.isFunction(/abc/);                                                                                            // 8707
     * // => false                                                                                                     // 8708
     */                                                                                                                // 8709
    function isFunction(value) {                                                                                       // 8710
      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 8711
      // in older versions of Chrome and Safari which return 'function' for regexes                                    // 8712
      // and Safari 8 which returns 'object' for typed array constructors.                                             // 8713
      return isObject(value) && objToString.call(value) == funcTag;                                                    // 8714
    }                                                                                                                  // 8715
                                                                                                                       // 8716
    /**                                                                                                                // 8717
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 8718
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 8719
     *                                                                                                                 // 8720
     * @static                                                                                                         // 8721
     * @memberOf _                                                                                                     // 8722
     * @category Lang                                                                                                  // 8723
     * @param {*} value The value to check.                                                                            // 8724
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 8725
     * @example                                                                                                        // 8726
     *                                                                                                                 // 8727
     * _.isObject({});                                                                                                 // 8728
     * // => true                                                                                                      // 8729
     *                                                                                                                 // 8730
     * _.isObject([1, 2, 3]);                                                                                          // 8731
     * // => true                                                                                                      // 8732
     *                                                                                                                 // 8733
     * _.isObject(1);                                                                                                  // 8734
     * // => false                                                                                                     // 8735
     */                                                                                                                // 8736
    function isObject(value) {                                                                                         // 8737
      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 8738
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 8739
      var type = typeof value;                                                                                         // 8740
      return !!value && (type == 'object' || type == 'function');                                                      // 8741
    }                                                                                                                  // 8742
                                                                                                                       // 8743
    /**                                                                                                                // 8744
     * Performs a deep comparison between `object` and `source` to determine if                                        // 8745
     * `object` contains equivalent property values. If `customizer` is provided                                       // 8746
     * it's invoked to compare values. If `customizer` returns `undefined`                                             // 8747
     * comparisons are handled by the method instead. The `customizer` is bound                                        // 8748
     * to `thisArg` and invoked with three arguments: (value, other, index|key).                                       // 8749
     *                                                                                                                 // 8750
     * **Note:** This method supports comparing properties of arrays, booleans,                                        // 8751
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions                                      // 8752
     * and DOM nodes are **not** supported. Provide a customizer function to extend                                    // 8753
     * support for comparing other values.                                                                             // 8754
     *                                                                                                                 // 8755
     * @static                                                                                                         // 8756
     * @memberOf _                                                                                                     // 8757
     * @category Lang                                                                                                  // 8758
     * @param {Object} object The object to inspect.                                                                   // 8759
     * @param {Object} source The object of property values to match.                                                  // 8760
     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8761
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8762
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 8763
     * @example                                                                                                        // 8764
     *                                                                                                                 // 8765
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 8766
     *                                                                                                                 // 8767
     * _.isMatch(object, { 'age': 40 });                                                                               // 8768
     * // => true                                                                                                      // 8769
     *                                                                                                                 // 8770
     * _.isMatch(object, { 'age': 36 });                                                                               // 8771
     * // => false                                                                                                     // 8772
     *                                                                                                                 // 8773
     * // using a customizer callback                                                                                  // 8774
     * var object = { 'greeting': 'hello' };                                                                           // 8775
     * var source = { 'greeting': 'hi' };                                                                              // 8776
     *                                                                                                                 // 8777
     * _.isMatch(object, source, function(value, other) {                                                              // 8778
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;                          // 8779
     * });                                                                                                             // 8780
     * // => true                                                                                                      // 8781
     */                                                                                                                // 8782
    function isMatch(object, source, customizer, thisArg) {                                                            // 8783
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8784
      return baseIsMatch(object, getMatchData(source), customizer);                                                    // 8785
    }                                                                                                                  // 8786
                                                                                                                       // 8787
    /**                                                                                                                // 8788
     * Checks if `value` is `NaN`.                                                                                     // 8789
     *                                                                                                                 // 8790
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 8791
     * which returns `true` for `undefined` and other non-numeric values.                                              // 8792
     *                                                                                                                 // 8793
     * @static                                                                                                         // 8794
     * @memberOf _                                                                                                     // 8795
     * @category Lang                                                                                                  // 8796
     * @param {*} value The value to check.                                                                            // 8797
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 8798
     * @example                                                                                                        // 8799
     *                                                                                                                 // 8800
     * _.isNaN(NaN);                                                                                                   // 8801
     * // => true                                                                                                      // 8802
     *                                                                                                                 // 8803
     * _.isNaN(new Number(NaN));                                                                                       // 8804
     * // => true                                                                                                      // 8805
     *                                                                                                                 // 8806
     * isNaN(undefined);                                                                                               // 8807
     * // => true                                                                                                      // 8808
     *                                                                                                                 // 8809
     * _.isNaN(undefined);                                                                                             // 8810
     * // => false                                                                                                     // 8811
     */                                                                                                                // 8812
    function isNaN(value) {                                                                                            // 8813
      // An `NaN` primitive is the only value that is not equal to itself.                                             // 8814
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.                           // 8815
      return isNumber(value) && value != +value;                                                                       // 8816
    }                                                                                                                  // 8817
                                                                                                                       // 8818
    /**                                                                                                                // 8819
     * Checks if `value` is a native function.                                                                         // 8820
     *                                                                                                                 // 8821
     * @static                                                                                                         // 8822
     * @memberOf _                                                                                                     // 8823
     * @category Lang                                                                                                  // 8824
     * @param {*} value The value to check.                                                                            // 8825
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 8826
     * @example                                                                                                        // 8827
     *                                                                                                                 // 8828
     * _.isNative(Array.prototype.push);                                                                               // 8829
     * // => true                                                                                                      // 8830
     *                                                                                                                 // 8831
     * _.isNative(_);                                                                                                  // 8832
     * // => false                                                                                                     // 8833
     */                                                                                                                // 8834
    function isNative(value) {                                                                                         // 8835
      if (value == null) {                                                                                             // 8836
        return false;                                                                                                  // 8837
      }                                                                                                                // 8838
      if (isFunction(value)) {                                                                                         // 8839
        return reIsNative.test(fnToString.call(value));                                                                // 8840
      }                                                                                                                // 8841
      return isObjectLike(value) && reIsHostCtor.test(value);                                                          // 8842
    }                                                                                                                  // 8843
                                                                                                                       // 8844
    /**                                                                                                                // 8845
     * Checks if `value` is `null`.                                                                                    // 8846
     *                                                                                                                 // 8847
     * @static                                                                                                         // 8848
     * @memberOf _                                                                                                     // 8849
     * @category Lang                                                                                                  // 8850
     * @param {*} value The value to check.                                                                            // 8851
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 8852
     * @example                                                                                                        // 8853
     *                                                                                                                 // 8854
     * _.isNull(null);                                                                                                 // 8855
     * // => true                                                                                                      // 8856
     *                                                                                                                 // 8857
     * _.isNull(void 0);                                                                                               // 8858
     * // => false                                                                                                     // 8859
     */                                                                                                                // 8860
    function isNull(value) {                                                                                           // 8861
      return value === null;                                                                                           // 8862
    }                                                                                                                  // 8863
                                                                                                                       // 8864
    /**                                                                                                                // 8865
     * Checks if `value` is classified as a `Number` primitive or object.                                              // 8866
     *                                                                                                                 // 8867
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 8868
     * as numbers, use the `_.isFinite` method.                                                                        // 8869
     *                                                                                                                 // 8870
     * @static                                                                                                         // 8871
     * @memberOf _                                                                                                     // 8872
     * @category Lang                                                                                                  // 8873
     * @param {*} value The value to check.                                                                            // 8874
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8875
     * @example                                                                                                        // 8876
     *                                                                                                                 // 8877
     * _.isNumber(8.4);                                                                                                // 8878
     * // => true                                                                                                      // 8879
     *                                                                                                                 // 8880
     * _.isNumber(NaN);                                                                                                // 8881
     * // => true                                                                                                      // 8882
     *                                                                                                                 // 8883
     * _.isNumber('8.4');                                                                                              // 8884
     * // => false                                                                                                     // 8885
     */                                                                                                                // 8886
    function isNumber(value) {                                                                                         // 8887
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);                // 8888
    }                                                                                                                  // 8889
                                                                                                                       // 8890
    /**                                                                                                                // 8891
     * Checks if `value` is a plain object, that is, an object created by the                                          // 8892
     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 8893
     *                                                                                                                 // 8894
     * **Note:** This method assumes objects created by the `Object` constructor                                       // 8895
     * have no inherited enumerable properties.                                                                        // 8896
     *                                                                                                                 // 8897
     * @static                                                                                                         // 8898
     * @memberOf _                                                                                                     // 8899
     * @category Lang                                                                                                  // 8900
     * @param {*} value The value to check.                                                                            // 8901
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 8902
     * @example                                                                                                        // 8903
     *                                                                                                                 // 8904
     * function Foo() {                                                                                                // 8905
     *   this.a = 1;                                                                                                   // 8906
     * }                                                                                                               // 8907
     *                                                                                                                 // 8908
     * _.isPlainObject(new Foo);                                                                                       // 8909
     * // => false                                                                                                     // 8910
     *                                                                                                                 // 8911
     * _.isPlainObject([1, 2, 3]);                                                                                     // 8912
     * // => false                                                                                                     // 8913
     *                                                                                                                 // 8914
     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 8915
     * // => true                                                                                                      // 8916
     *                                                                                                                 // 8917
     * _.isPlainObject(Object.create(null));                                                                           // 8918
     * // => true                                                                                                      // 8919
     */                                                                                                                // 8920
    function isPlainObject(value) {                                                                                    // 8921
      var Ctor;                                                                                                        // 8922
                                                                                                                       // 8923
      // Exit early for non `Object` objects.                                                                          // 8924
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||                     // 8925
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;                                                                                                  // 8927
      }                                                                                                                // 8928
      // IE < 9 iterates inherited properties before own properties. If the first                                      // 8929
      // iterated property is an object's own property then there are no inherited                                     // 8930
      // enumerable properties.                                                                                        // 8931
      var result;                                                                                                      // 8932
      // In most environments an object's own properties are iterated before                                           // 8933
      // its inherited properties. If the last iterated property is an object's                                        // 8934
      // own property then there are no inherited enumerable properties.                                               // 8935
      baseForIn(value, function(subValue, key) {                                                                       // 8936
        result = key;                                                                                                  // 8937
      });                                                                                                              // 8938
      return result === undefined || hasOwnProperty.call(value, result);                                               // 8939
    }                                                                                                                  // 8940
                                                                                                                       // 8941
    /**                                                                                                                // 8942
     * Checks if `value` is classified as a `RegExp` object.                                                           // 8943
     *                                                                                                                 // 8944
     * @static                                                                                                         // 8945
     * @memberOf _                                                                                                     // 8946
     * @category Lang                                                                                                  // 8947
     * @param {*} value The value to check.                                                                            // 8948
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8949
     * @example                                                                                                        // 8950
     *                                                                                                                 // 8951
     * _.isRegExp(/abc/);                                                                                              // 8952
     * // => true                                                                                                      // 8953
     *                                                                                                                 // 8954
     * _.isRegExp('/abc/');                                                                                            // 8955
     * // => false                                                                                                     // 8956
     */                                                                                                                // 8957
    function isRegExp(value) {                                                                                         // 8958
      return isObject(value) && objToString.call(value) == regexpTag;                                                  // 8959
    }                                                                                                                  // 8960
                                                                                                                       // 8961
    /**                                                                                                                // 8962
     * Checks if `value` is classified as a `String` primitive or object.                                              // 8963
     *                                                                                                                 // 8964
     * @static                                                                                                         // 8965
     * @memberOf _                                                                                                     // 8966
     * @category Lang                                                                                                  // 8967
     * @param {*} value The value to check.                                                                            // 8968
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8969
     * @example                                                                                                        // 8970
     *                                                                                                                 // 8971
     * _.isString('abc');                                                                                              // 8972
     * // => true                                                                                                      // 8973
     *                                                                                                                 // 8974
     * _.isString(1);                                                                                                  // 8975
     * // => false                                                                                                     // 8976
     */                                                                                                                // 8977
    function isString(value) {                                                                                         // 8978
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);                // 8979
    }                                                                                                                  // 8980
                                                                                                                       // 8981
    /**                                                                                                                // 8982
     * Checks if `value` is classified as a typed array.                                                               // 8983
     *                                                                                                                 // 8984
     * @static                                                                                                         // 8985
     * @memberOf _                                                                                                     // 8986
     * @category Lang                                                                                                  // 8987
     * @param {*} value The value to check.                                                                            // 8988
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8989
     * @example                                                                                                        // 8990
     *                                                                                                                 // 8991
     * _.isTypedArray(new Uint8Array);                                                                                 // 8992
     * // => true                                                                                                      // 8993
     *                                                                                                                 // 8994
     * _.isTypedArray([]);                                                                                             // 8995
     * // => false                                                                                                     // 8996
     */                                                                                                                // 8997
    function isTypedArray(value) {                                                                                     // 8998
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];               // 8999
    }                                                                                                                  // 9000
                                                                                                                       // 9001
    /**                                                                                                                // 9002
     * Checks if `value` is `undefined`.                                                                               // 9003
     *                                                                                                                 // 9004
     * @static                                                                                                         // 9005
     * @memberOf _                                                                                                     // 9006
     * @category Lang                                                                                                  // 9007
     * @param {*} value The value to check.                                                                            // 9008
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 9009
     * @example                                                                                                        // 9010
     *                                                                                                                 // 9011
     * _.isUndefined(void 0);                                                                                          // 9012
     * // => true                                                                                                      // 9013
     *                                                                                                                 // 9014
     * _.isUndefined(null);                                                                                            // 9015
     * // => false                                                                                                     // 9016
     */                                                                                                                // 9017
    function isUndefined(value) {                                                                                      // 9018
      return value === undefined;                                                                                      // 9019
    }                                                                                                                  // 9020
                                                                                                                       // 9021
    /**                                                                                                                // 9022
     * Checks if `value` is less than `other`.                                                                         // 9023
     *                                                                                                                 // 9024
     * @static                                                                                                         // 9025
     * @memberOf _                                                                                                     // 9026
     * @category Lang                                                                                                  // 9027
     * @param {*} value The value to compare.                                                                          // 9028
     * @param {*} other The other value to compare.                                                                    // 9029
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 9030
     * @example                                                                                                        // 9031
     *                                                                                                                 // 9032
     * _.lt(1, 3);                                                                                                     // 9033
     * // => true                                                                                                      // 9034
     *                                                                                                                 // 9035
     * _.lt(3, 3);                                                                                                     // 9036
     * // => false                                                                                                     // 9037
     *                                                                                                                 // 9038
     * _.lt(3, 1);                                                                                                     // 9039
     * // => false                                                                                                     // 9040
     */                                                                                                                // 9041
    function lt(value, other) {                                                                                        // 9042
      return value < other;                                                                                            // 9043
    }                                                                                                                  // 9044
                                                                                                                       // 9045
    /**                                                                                                                // 9046
     * Checks if `value` is less than or equal to `other`.                                                             // 9047
     *                                                                                                                 // 9048
     * @static                                                                                                         // 9049
     * @memberOf _                                                                                                     // 9050
     * @category Lang                                                                                                  // 9051
     * @param {*} value The value to compare.                                                                          // 9052
     * @param {*} other The other value to compare.                                                                    // 9053
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 9054
     * @example                                                                                                        // 9055
     *                                                                                                                 // 9056
     * _.lte(1, 3);                                                                                                    // 9057
     * // => true                                                                                                      // 9058
     *                                                                                                                 // 9059
     * _.lte(3, 3);                                                                                                    // 9060
     * // => true                                                                                                      // 9061
     *                                                                                                                 // 9062
     * _.lte(3, 1);                                                                                                    // 9063
     * // => false                                                                                                     // 9064
     */                                                                                                                // 9065
    function lte(value, other) {                                                                                       // 9066
      return value <= other;                                                                                           // 9067
    }                                                                                                                  // 9068
                                                                                                                       // 9069
    /**                                                                                                                // 9070
     * Converts `value` to an array.                                                                                   // 9071
     *                                                                                                                 // 9072
     * @static                                                                                                         // 9073
     * @memberOf _                                                                                                     // 9074
     * @category Lang                                                                                                  // 9075
     * @param {*} value The value to convert.                                                                          // 9076
     * @returns {Array} Returns the converted array.                                                                   // 9077
     * @example                                                                                                        // 9078
     *                                                                                                                 // 9079
     * (function() {                                                                                                   // 9080
     *   return _.toArray(arguments).slice(1);                                                                         // 9081
     * }(1, 2, 3));                                                                                                    // 9082
     * // => [2, 3]                                                                                                    // 9083
     */                                                                                                                // 9084
    function toArray(value) {                                                                                          // 9085
      var length = value ? getLength(value) : 0;                                                                       // 9086
      if (!isLength(length)) {                                                                                         // 9087
        return values(value);                                                                                          // 9088
      }                                                                                                                // 9089
      if (!length) {                                                                                                   // 9090
        return [];                                                                                                     // 9091
      }                                                                                                                // 9092
      return arrayCopy(value);                                                                                         // 9093
    }                                                                                                                  // 9094
                                                                                                                       // 9095
    /**                                                                                                                // 9096
     * Converts `value` to a plain object flattening inherited enumerable                                              // 9097
     * properties of `value` to own properties of the plain object.                                                    // 9098
     *                                                                                                                 // 9099
     * @static                                                                                                         // 9100
     * @memberOf _                                                                                                     // 9101
     * @category Lang                                                                                                  // 9102
     * @param {*} value The value to convert.                                                                          // 9103
     * @returns {Object} Returns the converted plain object.                                                           // 9104
     * @example                                                                                                        // 9105
     *                                                                                                                 // 9106
     * function Foo() {                                                                                                // 9107
     *   this.b = 2;                                                                                                   // 9108
     * }                                                                                                               // 9109
     *                                                                                                                 // 9110
     * Foo.prototype.c = 3;                                                                                            // 9111
     *                                                                                                                 // 9112
     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 9113
     * // => { 'a': 1, 'b': 2 }                                                                                        // 9114
     *                                                                                                                 // 9115
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 9116
     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 9117
     */                                                                                                                // 9118
    function toPlainObject(value) {                                                                                    // 9119
      return baseCopy(value, keysIn(value));                                                                           // 9120
    }                                                                                                                  // 9121
                                                                                                                       // 9122
    /*------------------------------------------------------------------------*/                                       // 9123
                                                                                                                       // 9124
    /**                                                                                                                // 9125
     * Recursively merges own enumerable properties of the source object(s), that                                      // 9126
     * don't resolve to `undefined` into the destination object. Subsequent sources                                    // 9127
     * overwrite property assignments of previous sources. If `customizer` is                                          // 9128
     * provided it's invoked to produce the merged values of the destination and                                       // 9129
     * source properties. If `customizer` returns `undefined` merging is handled                                       // 9130
     * by the method instead. The `customizer` is bound to `thisArg` and invoked                                       // 9131
     * with five arguments: (objectValue, sourceValue, key, object, source).                                           // 9132
     *                                                                                                                 // 9133
     * @static                                                                                                         // 9134
     * @memberOf _                                                                                                     // 9135
     * @category Object                                                                                                // 9136
     * @param {Object} object The destination object.                                                                  // 9137
     * @param {...Object} [sources] The source objects.                                                                // 9138
     * @param {Function} [customizer] The function to customize assigned values.                                       // 9139
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9140
     * @returns {Object} Returns `object`.                                                                             // 9141
     * @example                                                                                                        // 9142
     *                                                                                                                 // 9143
     * var users = {                                                                                                   // 9144
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 9145
     * };                                                                                                              // 9146
     *                                                                                                                 // 9147
     * var ages = {                                                                                                    // 9148
     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 9149
     * };                                                                                                              // 9150
     *                                                                                                                 // 9151
     * _.merge(users, ages);                                                                                           // 9152
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 9153
     *                                                                                                                 // 9154
     * // using a customizer callback                                                                                  // 9155
     * var object = {                                                                                                  // 9156
     *   'fruits': ['apple'],                                                                                          // 9157
     *   'vegetables': ['beet']                                                                                        // 9158
     * };                                                                                                              // 9159
     *                                                                                                                 // 9160
     * var other = {                                                                                                   // 9161
     *   'fruits': ['banana'],                                                                                         // 9162
     *   'vegetables': ['carrot']                                                                                      // 9163
     * };                                                                                                              // 9164
     *                                                                                                                 // 9165
     * _.merge(object, other, function(a, b) {                                                                         // 9166
     *   if (_.isArray(a)) {                                                                                           // 9167
     *     return a.concat(b);                                                                                         // 9168
     *   }                                                                                                             // 9169
     * });                                                                                                             // 9170
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 9171
     */                                                                                                                // 9172
    var merge = createAssigner(baseMerge);                                                                             // 9173
                                                                                                                       // 9174
    /**                                                                                                                // 9175
     * Assigns own enumerable properties of source object(s) to the destination                                        // 9176
     * object. Subsequent sources overwrite property assignments of previous sources.                                  // 9177
     * If `customizer` is provided it's invoked to produce the assigned values.                                        // 9178
     * The `customizer` is bound to `thisArg` and invoked with five arguments:                                         // 9179
     * (objectValue, sourceValue, key, object, source).                                                                // 9180
     *                                                                                                                 // 9181
     * **Note:** This method mutates `object` and is based on                                                          // 9182
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).                               // 9183
     *                                                                                                                 // 9184
     * @static                                                                                                         // 9185
     * @memberOf _                                                                                                     // 9186
     * @alias extend                                                                                                   // 9187
     * @category Object                                                                                                // 9188
     * @param {Object} object The destination object.                                                                  // 9189
     * @param {...Object} [sources] The source objects.                                                                // 9190
     * @param {Function} [customizer] The function to customize assigned values.                                       // 9191
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9192
     * @returns {Object} Returns `object`.                                                                             // 9193
     * @example                                                                                                        // 9194
     *                                                                                                                 // 9195
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });                                              // 9196
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 9197
     *                                                                                                                 // 9198
     * // using a customizer callback                                                                                  // 9199
     * var defaults = _.partialRight(_.assign, function(value, other) {                                                // 9200
     *   return _.isUndefined(value) ? other : value;                                                                  // 9201
     * });                                                                                                             // 9202
     *                                                                                                                 // 9203
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                              // 9204
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9205
     */                                                                                                                // 9206
    var assign = createAssigner(function(object, source, customizer) {                                                 // 9207
      return customizer                                                                                                // 9208
        ? assignWith(object, source, customizer)                                                                       // 9209
        : baseAssign(object, source);                                                                                  // 9210
    });                                                                                                                // 9211
                                                                                                                       // 9212
    /**                                                                                                                // 9213
     * Creates an object that inherits from the given `prototype` object. If a                                         // 9214
     * `properties` object is provided its own enumerable properties are assigned                                      // 9215
     * to the created object.                                                                                          // 9216
     *                                                                                                                 // 9217
     * @static                                                                                                         // 9218
     * @memberOf _                                                                                                     // 9219
     * @category Object                                                                                                // 9220
     * @param {Object} prototype The object to inherit from.                                                           // 9221
     * @param {Object} [properties] The properties to assign to the object.                                            // 9222
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9223
     * @returns {Object} Returns the new object.                                                                       // 9224
     * @example                                                                                                        // 9225
     *                                                                                                                 // 9226
     * function Shape() {                                                                                              // 9227
     *   this.x = 0;                                                                                                   // 9228
     *   this.y = 0;                                                                                                   // 9229
     * }                                                                                                               // 9230
     *                                                                                                                 // 9231
     * function Circle() {                                                                                             // 9232
     *   Shape.call(this);                                                                                             // 9233
     * }                                                                                                               // 9234
     *                                                                                                                 // 9235
     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 9236
     *   'constructor': Circle                                                                                         // 9237
     * });                                                                                                             // 9238
     *                                                                                                                 // 9239
     * var circle = new Circle;                                                                                        // 9240
     * circle instanceof Circle;                                                                                       // 9241
     * // => true                                                                                                      // 9242
     *                                                                                                                 // 9243
     * circle instanceof Shape;                                                                                        // 9244
     * // => true                                                                                                      // 9245
     */                                                                                                                // 9246
    function create(prototype, properties, guard) {                                                                    // 9247
      var result = baseCreate(prototype);                                                                              // 9248
      if (guard && isIterateeCall(prototype, properties, guard)) {                                                     // 9249
        properties = undefined;                                                                                        // 9250
      }                                                                                                                // 9251
      return properties ? baseAssign(result, properties) : result;                                                     // 9252
    }                                                                                                                  // 9253
                                                                                                                       // 9254
    /**                                                                                                                // 9255
     * Assigns own enumerable properties of source object(s) to the destination                                        // 9256
     * object for all destination properties that resolve to `undefined`. Once a                                       // 9257
     * property is set, additional values of the same property are ignored.                                            // 9258
     *                                                                                                                 // 9259
     * **Note:** This method mutates `object`.                                                                         // 9260
     *                                                                                                                 // 9261
     * @static                                                                                                         // 9262
     * @memberOf _                                                                                                     // 9263
     * @category Object                                                                                                // 9264
     * @param {Object} object The destination object.                                                                  // 9265
     * @param {...Object} [sources] The source objects.                                                                // 9266
     * @returns {Object} Returns `object`.                                                                             // 9267
     * @example                                                                                                        // 9268
     *                                                                                                                 // 9269
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 9270
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9271
     */                                                                                                                // 9272
    var defaults = createDefaults(assign, assignDefaults);                                                             // 9273
                                                                                                                       // 9274
    /**                                                                                                                // 9275
     * This method is like `_.defaults` except that it recursively assigns                                             // 9276
     * default properties.                                                                                             // 9277
     *                                                                                                                 // 9278
     * **Note:** This method mutates `object`.                                                                         // 9279
     *                                                                                                                 // 9280
     * @static                                                                                                         // 9281
     * @memberOf _                                                                                                     // 9282
     * @category Object                                                                                                // 9283
     * @param {Object} object The destination object.                                                                  // 9284
     * @param {...Object} [sources] The source objects.                                                                // 9285
     * @returns {Object} Returns `object`.                                                                             // 9286
     * @example                                                                                                        // 9287
     *                                                                                                                 // 9288
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 9289
     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 9290
     *                                                                                                                 // 9291
     */                                                                                                                // 9292
    var defaultsDeep = createDefaults(merge, mergeDefaults);                                                           // 9293
                                                                                                                       // 9294
    /**                                                                                                                // 9295
     * This method is like `_.find` except that it returns the key of the first                                        // 9296
     * element `predicate` returns truthy for instead of the element itself.                                           // 9297
     *                                                                                                                 // 9298
     * If a property name is provided for `predicate` the created `_.property`                                         // 9299
     * style callback returns the property value of the given element.                                                 // 9300
     *                                                                                                                 // 9301
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9302
     * style callback returns `true` for elements that have a matching property                                        // 9303
     * value, else `false`.                                                                                            // 9304
     *                                                                                                                 // 9305
     * If an object is provided for `predicate` the created `_.matches` style                                          // 9306
     * callback returns `true` for elements that have the properties of the given                                      // 9307
     * object, else `false`.                                                                                           // 9308
     *                                                                                                                 // 9309
     * @static                                                                                                         // 9310
     * @memberOf _                                                                                                     // 9311
     * @category Object                                                                                                // 9312
     * @param {Object} object The object to search.                                                                    // 9313
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9314
     *  per iteration.                                                                                                 // 9315
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9316
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9317
     * @example                                                                                                        // 9318
     *                                                                                                                 // 9319
     * var users = {                                                                                                   // 9320
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9321
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9322
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9323
     * };                                                                                                              // 9324
     *                                                                                                                 // 9325
     * _.findKey(users, function(chr) {                                                                                // 9326
     *   return chr.age < 40;                                                                                          // 9327
     * });                                                                                                             // 9328
     * // => 'barney' (iteration order is not guaranteed)                                                              // 9329
     *                                                                                                                 // 9330
     * // using the `_.matches` callback shorthand                                                                     // 9331
     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 9332
     * // => 'pebbles'                                                                                                 // 9333
     *                                                                                                                 // 9334
     * // using the `_.matchesProperty` callback shorthand                                                             // 9335
     * _.findKey(users, 'active', false);                                                                              // 9336
     * // => 'fred'                                                                                                    // 9337
     *                                                                                                                 // 9338
     * // using the `_.property` callback shorthand                                                                    // 9339
     * _.findKey(users, 'active');                                                                                     // 9340
     * // => 'barney'                                                                                                  // 9341
     */                                                                                                                // 9342
    var findKey = createFindKey(baseForOwn);                                                                           // 9343
                                                                                                                       // 9344
    /**                                                                                                                // 9345
     * This method is like `_.findKey` except that it iterates over elements of                                        // 9346
     * a collection in the opposite order.                                                                             // 9347
     *                                                                                                                 // 9348
     * If a property name is provided for `predicate` the created `_.property`                                         // 9349
     * style callback returns the property value of the given element.                                                 // 9350
     *                                                                                                                 // 9351
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9352
     * style callback returns `true` for elements that have a matching property                                        // 9353
     * value, else `false`.                                                                                            // 9354
     *                                                                                                                 // 9355
     * If an object is provided for `predicate` the created `_.matches` style                                          // 9356
     * callback returns `true` for elements that have the properties of the given                                      // 9357
     * object, else `false`.                                                                                           // 9358
     *                                                                                                                 // 9359
     * @static                                                                                                         // 9360
     * @memberOf _                                                                                                     // 9361
     * @category Object                                                                                                // 9362
     * @param {Object} object The object to search.                                                                    // 9363
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9364
     *  per iteration.                                                                                                 // 9365
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9366
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9367
     * @example                                                                                                        // 9368
     *                                                                                                                 // 9369
     * var users = {                                                                                                   // 9370
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9371
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9372
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9373
     * };                                                                                                              // 9374
     *                                                                                                                 // 9375
     * _.findLastKey(users, function(chr) {                                                                            // 9376
     *   return chr.age < 40;                                                                                          // 9377
     * });                                                                                                             // 9378
     * // => returns `pebbles` assuming `_.findKey` returns `barney`                                                   // 9379
     *                                                                                                                 // 9380
     * // using the `_.matches` callback shorthand                                                                     // 9381
     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 9382
     * // => 'barney'                                                                                                  // 9383
     *                                                                                                                 // 9384
     * // using the `_.matchesProperty` callback shorthand                                                             // 9385
     * _.findLastKey(users, 'active', false);                                                                          // 9386
     * // => 'fred'                                                                                                    // 9387
     *                                                                                                                 // 9388
     * // using the `_.property` callback shorthand                                                                    // 9389
     * _.findLastKey(users, 'active');                                                                                 // 9390
     * // => 'pebbles'                                                                                                 // 9391
     */                                                                                                                // 9392
    var findLastKey = createFindKey(baseForOwnRight);                                                                  // 9393
                                                                                                                       // 9394
    /**                                                                                                                // 9395
     * Iterates over own and inherited enumerable properties of an object invoking                                     // 9396
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked                                  // 9397
     * with three arguments: (value, key, object). Iteratee functions may exit                                         // 9398
     * iteration early by explicitly returning `false`.                                                                // 9399
     *                                                                                                                 // 9400
     * @static                                                                                                         // 9401
     * @memberOf _                                                                                                     // 9402
     * @category Object                                                                                                // 9403
     * @param {Object} object The object to iterate over.                                                              // 9404
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9405
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9406
     * @returns {Object} Returns `object`.                                                                             // 9407
     * @example                                                                                                        // 9408
     *                                                                                                                 // 9409
     * function Foo() {                                                                                                // 9410
     *   this.a = 1;                                                                                                   // 9411
     *   this.b = 2;                                                                                                   // 9412
     * }                                                                                                               // 9413
     *                                                                                                                 // 9414
     * Foo.prototype.c = 3;                                                                                            // 9415
     *                                                                                                                 // 9416
     * _.forIn(new Foo, function(value, key) {                                                                         // 9417
     *   console.log(key);                                                                                             // 9418
     * });                                                                                                             // 9419
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)                                                // 9420
     */                                                                                                                // 9421
    var forIn = createForIn(baseFor);                                                                                  // 9422
                                                                                                                       // 9423
    /**                                                                                                                // 9424
     * This method is like `_.forIn` except that it iterates over properties of                                        // 9425
     * `object` in the opposite order.                                                                                 // 9426
     *                                                                                                                 // 9427
     * @static                                                                                                         // 9428
     * @memberOf _                                                                                                     // 9429
     * @category Object                                                                                                // 9430
     * @param {Object} object The object to iterate over.                                                              // 9431
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9432
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9433
     * @returns {Object} Returns `object`.                                                                             // 9434
     * @example                                                                                                        // 9435
     *                                                                                                                 // 9436
     * function Foo() {                                                                                                // 9437
     *   this.a = 1;                                                                                                   // 9438
     *   this.b = 2;                                                                                                   // 9439
     * }                                                                                                               // 9440
     *                                                                                                                 // 9441
     * Foo.prototype.c = 3;                                                                                            // 9442
     *                                                                                                                 // 9443
     * _.forInRight(new Foo, function(value, key) {                                                                    // 9444
     *   console.log(key);                                                                                             // 9445
     * });                                                                                                             // 9446
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'                                         // 9447
     */                                                                                                                // 9448
    var forInRight = createForIn(baseForRight);                                                                        // 9449
                                                                                                                       // 9450
    /**                                                                                                                // 9451
     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 9452
     * for each property. The `iteratee` is bound to `thisArg` and invoked with                                        // 9453
     * three arguments: (value, key, object). Iteratee functions may exit iteration                                    // 9454
     * early by explicitly returning `false`.                                                                          // 9455
     *                                                                                                                 // 9456
     * @static                                                                                                         // 9457
     * @memberOf _                                                                                                     // 9458
     * @category Object                                                                                                // 9459
     * @param {Object} object The object to iterate over.                                                              // 9460
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9461
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9462
     * @returns {Object} Returns `object`.                                                                             // 9463
     * @example                                                                                                        // 9464
     *                                                                                                                 // 9465
     * function Foo() {                                                                                                // 9466
     *   this.a = 1;                                                                                                   // 9467
     *   this.b = 2;                                                                                                   // 9468
     * }                                                                                                               // 9469
     *                                                                                                                 // 9470
     * Foo.prototype.c = 3;                                                                                            // 9471
     *                                                                                                                 // 9472
     * _.forOwn(new Foo, function(value, key) {                                                                        // 9473
     *   console.log(key);                                                                                             // 9474
     * });                                                                                                             // 9475
     * // => logs 'a' and 'b' (iteration order is not guaranteed)                                                      // 9476
     */                                                                                                                // 9477
    var forOwn = createForOwn(baseForOwn);                                                                             // 9478
                                                                                                                       // 9479
    /**                                                                                                                // 9480
     * This method is like `_.forOwn` except that it iterates over properties of                                       // 9481
     * `object` in the opposite order.                                                                                 // 9482
     *                                                                                                                 // 9483
     * @static                                                                                                         // 9484
     * @memberOf _                                                                                                     // 9485
     * @category Object                                                                                                // 9486
     * @param {Object} object The object to iterate over.                                                              // 9487
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9488
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9489
     * @returns {Object} Returns `object`.                                                                             // 9490
     * @example                                                                                                        // 9491
     *                                                                                                                 // 9492
     * function Foo() {                                                                                                // 9493
     *   this.a = 1;                                                                                                   // 9494
     *   this.b = 2;                                                                                                   // 9495
     * }                                                                                                               // 9496
     *                                                                                                                 // 9497
     * Foo.prototype.c = 3;                                                                                            // 9498
     *                                                                                                                 // 9499
     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 9500
     *   console.log(key);                                                                                             // 9501
     * });                                                                                                             // 9502
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'                                                     // 9503
     */                                                                                                                // 9504
    var forOwnRight = createForOwn(baseForOwnRight);                                                                   // 9505
                                                                                                                       // 9506
    /**                                                                                                                // 9507
     * Creates an array of function property names from all enumerable properties,                                     // 9508
     * own and inherited, of `object`.                                                                                 // 9509
     *                                                                                                                 // 9510
     * @static                                                                                                         // 9511
     * @memberOf _                                                                                                     // 9512
     * @alias methods                                                                                                  // 9513
     * @category Object                                                                                                // 9514
     * @param {Object} object The object to inspect.                                                                   // 9515
     * @returns {Array} Returns the new array of property names.                                                       // 9516
     * @example                                                                                                        // 9517
     *                                                                                                                 // 9518
     * _.functions(_);                                                                                                 // 9519
     * // => ['after', 'ary', 'assign', ...]                                                                           // 9520
     */                                                                                                                // 9521
    function functions(object) {                                                                                       // 9522
      return baseFunctions(object, keysIn(object));                                                                    // 9523
    }                                                                                                                  // 9524
                                                                                                                       // 9525
    /**                                                                                                                // 9526
     * Gets the property value at `path` of `object`. If the resolved value is                                         // 9527
     * `undefined` the `defaultValue` is used in its place.                                                            // 9528
     *                                                                                                                 // 9529
     * @static                                                                                                         // 9530
     * @memberOf _                                                                                                     // 9531
     * @category Object                                                                                                // 9532
     * @param {Object} object The object to query.                                                                     // 9533
     * @param {Array|string} path The path of the property to get.                                                     // 9534
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9535
     * @returns {*} Returns the resolved value.                                                                        // 9536
     * @example                                                                                                        // 9537
     *                                                                                                                 // 9538
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9539
     *                                                                                                                 // 9540
     * _.get(object, 'a[0].b.c');                                                                                      // 9541
     * // => 3                                                                                                         // 9542
     *                                                                                                                 // 9543
     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 9544
     * // => 3                                                                                                         // 9545
     *                                                                                                                 // 9546
     * _.get(object, 'a.b.c', 'default');                                                                              // 9547
     * // => 'default'                                                                                                 // 9548
     */                                                                                                                // 9549
    function get(object, path, defaultValue) {                                                                         // 9550
      var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));                            // 9551
      return result === undefined ? defaultValue : result;                                                             // 9552
    }                                                                                                                  // 9553
                                                                                                                       // 9554
    /**                                                                                                                // 9555
     * Checks if `path` is a direct property.                                                                          // 9556
     *                                                                                                                 // 9557
     * @static                                                                                                         // 9558
     * @memberOf _                                                                                                     // 9559
     * @category Object                                                                                                // 9560
     * @param {Object} object The object to query.                                                                     // 9561
     * @param {Array|string} path The path to check.                                                                   // 9562
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.                                 // 9563
     * @example                                                                                                        // 9564
     *                                                                                                                 // 9565
     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 9566
     *                                                                                                                 // 9567
     * _.has(object, 'a');                                                                                             // 9568
     * // => true                                                                                                      // 9569
     *                                                                                                                 // 9570
     * _.has(object, 'a.b.c');                                                                                         // 9571
     * // => true                                                                                                      // 9572
     *                                                                                                                 // 9573
     * _.has(object, ['a', 'b', 'c']);                                                                                 // 9574
     * // => true                                                                                                      // 9575
     */                                                                                                                // 9576
    function has(object, path) {                                                                                       // 9577
      if (object == null) {                                                                                            // 9578
        return false;                                                                                                  // 9579
      }                                                                                                                // 9580
      var result = hasOwnProperty.call(object, path);                                                                  // 9581
      if (!result && !isKey(path)) {                                                                                   // 9582
        path = toPath(path);                                                                                           // 9583
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 9584
        if (object == null) {                                                                                          // 9585
          return false;                                                                                                // 9586
        }                                                                                                              // 9587
        path = last(path);                                                                                             // 9588
        result = hasOwnProperty.call(object, path);                                                                    // 9589
      }                                                                                                                // 9590
      return result || (isLength(object.length) && isIndex(path, object.length) &&                                     // 9591
        (isArray(object) || isArguments(object)));                                                                     // 9592
    }                                                                                                                  // 9593
                                                                                                                       // 9594
    /**                                                                                                                // 9595
     * Creates an object composed of the inverted keys and values of `object`.                                         // 9596
     * If `object` contains duplicate values, subsequent values overwrite property                                     // 9597
     * assignments of previous values unless `multiValue` is `true`.                                                   // 9598
     *                                                                                                                 // 9599
     * @static                                                                                                         // 9600
     * @memberOf _                                                                                                     // 9601
     * @category Object                                                                                                // 9602
     * @param {Object} object The object to invert.                                                                    // 9603
     * @param {boolean} [multiValue] Allow multiple values per key.                                                    // 9604
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9605
     * @returns {Object} Returns the new inverted object.                                                              // 9606
     * @example                                                                                                        // 9607
     *                                                                                                                 // 9608
     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 9609
     *                                                                                                                 // 9610
     * _.invert(object);                                                                                               // 9611
     * // => { '1': 'c', '2': 'b' }                                                                                    // 9612
     *                                                                                                                 // 9613
     * // with `multiValue`                                                                                            // 9614
     * _.invert(object, true);                                                                                         // 9615
     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 9616
     */                                                                                                                // 9617
    function invert(object, multiValue, guard) {                                                                       // 9618
      if (guard && isIterateeCall(object, multiValue, guard)) {                                                        // 9619
        multiValue = undefined;                                                                                        // 9620
      }                                                                                                                // 9621
      var index = -1,                                                                                                  // 9622
          props = keys(object),                                                                                        // 9623
          length = props.length,                                                                                       // 9624
          result = {};                                                                                                 // 9625
                                                                                                                       // 9626
      while (++index < length) {                                                                                       // 9627
        var key = props[index],                                                                                        // 9628
            value = object[key];                                                                                       // 9629
                                                                                                                       // 9630
        if (multiValue) {                                                                                              // 9631
          if (hasOwnProperty.call(result, value)) {                                                                    // 9632
            result[value].push(key);                                                                                   // 9633
          } else {                                                                                                     // 9634
            result[value] = [key];                                                                                     // 9635
          }                                                                                                            // 9636
        }                                                                                                              // 9637
        else {                                                                                                         // 9638
          result[value] = key;                                                                                         // 9639
        }                                                                                                              // 9640
      }                                                                                                                // 9641
      return result;                                                                                                   // 9642
    }                                                                                                                  // 9643
                                                                                                                       // 9644
    /**                                                                                                                // 9645
     * Creates an array of the own enumerable property names of `object`.                                              // 9646
     *                                                                                                                 // 9647
     * **Note:** Non-object values are coerced to objects. See the                                                     // 9648
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 9649
     * for more details.                                                                                               // 9650
     *                                                                                                                 // 9651
     * @static                                                                                                         // 9652
     * @memberOf _                                                                                                     // 9653
     * @category Object                                                                                                // 9654
     * @param {Object} object The object to query.                                                                     // 9655
     * @returns {Array} Returns the array of property names.                                                           // 9656
     * @example                                                                                                        // 9657
     *                                                                                                                 // 9658
     * function Foo() {                                                                                                // 9659
     *   this.a = 1;                                                                                                   // 9660
     *   this.b = 2;                                                                                                   // 9661
     * }                                                                                                               // 9662
     *                                                                                                                 // 9663
     * Foo.prototype.c = 3;                                                                                            // 9664
     *                                                                                                                 // 9665
     * _.keys(new Foo);                                                                                                // 9666
     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 9667
     *                                                                                                                 // 9668
     * _.keys('hi');                                                                                                   // 9669
     * // => ['0', '1']                                                                                                // 9670
     */                                                                                                                // 9671
    var keys = !nativeKeys ? shimKeys : function(object) {                                                             // 9672
      var Ctor = object == null ? undefined : object.constructor;                                                      // 9673
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                  // 9674
          (typeof object != 'function' && isArrayLike(object))) {                                                      // 9675
        return shimKeys(object);                                                                                       // 9676
      }                                                                                                                // 9677
      return isObject(object) ? nativeKeys(object) : [];                                                               // 9678
    };                                                                                                                 // 9679
                                                                                                                       // 9680
    /**                                                                                                                // 9681
     * Creates an array of the own and inherited enumerable property names of `object`.                                // 9682
     *                                                                                                                 // 9683
     * **Note:** Non-object values are coerced to objects.                                                             // 9684
     *                                                                                                                 // 9685
     * @static                                                                                                         // 9686
     * @memberOf _                                                                                                     // 9687
     * @category Object                                                                                                // 9688
     * @param {Object} object The object to query.                                                                     // 9689
     * @returns {Array} Returns the array of property names.                                                           // 9690
     * @example                                                                                                        // 9691
     *                                                                                                                 // 9692
     * function Foo() {                                                                                                // 9693
     *   this.a = 1;                                                                                                   // 9694
     *   this.b = 2;                                                                                                   // 9695
     * }                                                                                                               // 9696
     *                                                                                                                 // 9697
     * Foo.prototype.c = 3;                                                                                            // 9698
     *                                                                                                                 // 9699
     * _.keysIn(new Foo);                                                                                              // 9700
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 9701
     */                                                                                                                // 9702
    function keysIn(object) {                                                                                          // 9703
      if (object == null) {                                                                                            // 9704
        return [];                                                                                                     // 9705
      }                                                                                                                // 9706
      if (!isObject(object)) {                                                                                         // 9707
        object = Object(object);                                                                                       // 9708
      }                                                                                                                // 9709
      var length = object.length;                                                                                      // 9710
      length = (length && isLength(length) &&                                                                          // 9711
        (isArray(object) || isArguments(object)) && length) || 0;                                                      // 9712
                                                                                                                       // 9713
      var Ctor = object.constructor,                                                                                   // 9714
          index = -1,                                                                                                  // 9715
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,                                            // 9716
          result = Array(length),                                                                                      // 9717
          skipIndexes = length > 0;                                                                                    // 9718
                                                                                                                       // 9719
      while (++index < length) {                                                                                       // 9720
        result[index] = (index + '');                                                                                  // 9721
      }                                                                                                                // 9722
      for (var key in object) {                                                                                        // 9723
        if (!(skipIndexes && isIndex(key, length)) &&                                                                  // 9724
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 9725
          result.push(key);                                                                                            // 9726
        }                                                                                                              // 9727
      }                                                                                                                // 9728
      return result;                                                                                                   // 9729
    }                                                                                                                  // 9730
                                                                                                                       // 9731
    /**                                                                                                                // 9732
     * The opposite of `_.mapValues`; this method creates an object with the                                           // 9733
     * same values as `object` and keys generated by running each own enumerable                                       // 9734
     * property of `object` through `iteratee`.                                                                        // 9735
     *                                                                                                                 // 9736
     * @static                                                                                                         // 9737
     * @memberOf _                                                                                                     // 9738
     * @category Object                                                                                                // 9739
     * @param {Object} object The object to iterate over.                                                              // 9740
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9741
     *  per iteration.                                                                                                 // 9742
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9743
     * @returns {Object} Returns the new mapped object.                                                                // 9744
     * @example                                                                                                        // 9745
     *                                                                                                                 // 9746
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 9747
     *   return key + value;                                                                                           // 9748
     * });                                                                                                             // 9749
     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 9750
     */                                                                                                                // 9751
    var mapKeys = createObjectMapper(true);                                                                            // 9752
                                                                                                                       // 9753
    /**                                                                                                                // 9754
     * Creates an object with the same keys as `object` and values generated by                                        // 9755
     * running each own enumerable property of `object` through `iteratee`. The                                        // 9756
     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 9757
     * (value, key, object).                                                                                           // 9758
     *                                                                                                                 // 9759
     * If a property name is provided for `iteratee` the created `_.property`                                          // 9760
     * style callback returns the property value of the given element.                                                 // 9761
     *                                                                                                                 // 9762
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9763
     * style callback returns `true` for elements that have a matching property                                        // 9764
     * value, else `false`.                                                                                            // 9765
     *                                                                                                                 // 9766
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 9767
     * callback returns `true` for elements that have the properties of the given                                      // 9768
     * object, else `false`.                                                                                           // 9769
     *                                                                                                                 // 9770
     * @static                                                                                                         // 9771
     * @memberOf _                                                                                                     // 9772
     * @category Object                                                                                                // 9773
     * @param {Object} object The object to iterate over.                                                              // 9774
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9775
     *  per iteration.                                                                                                 // 9776
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9777
     * @returns {Object} Returns the new mapped object.                                                                // 9778
     * @example                                                                                                        // 9779
     *                                                                                                                 // 9780
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {                                                                   // 9781
     *   return n * 3;                                                                                                 // 9782
     * });                                                                                                             // 9783
     * // => { 'a': 3, 'b': 6 }                                                                                        // 9784
     *                                                                                                                 // 9785
     * var users = {                                                                                                   // 9786
     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 9787
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 9788
     * };                                                                                                              // 9789
     *                                                                                                                 // 9790
     * // using the `_.property` callback shorthand                                                                    // 9791
     * _.mapValues(users, 'age');                                                                                      // 9792
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 9793
     */                                                                                                                // 9794
    var mapValues = createObjectMapper();                                                                              // 9795
                                                                                                                       // 9796
    /**                                                                                                                // 9797
     * The opposite of `_.pick`; this method creates an object composed of the                                         // 9798
     * own and inherited enumerable properties of `object` that are not omitted.                                       // 9799
     *                                                                                                                 // 9800
     * @static                                                                                                         // 9801
     * @memberOf _                                                                                                     // 9802
     * @category Object                                                                                                // 9803
     * @param {Object} object The source object.                                                                       // 9804
     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9805
     *  iteration or property names to omit, specified as individual property                                          // 9806
     *  names or arrays of property names.                                                                             // 9807
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9808
     * @returns {Object} Returns the new object.                                                                       // 9809
     * @example                                                                                                        // 9810
     *                                                                                                                 // 9811
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9812
     *                                                                                                                 // 9813
     * _.omit(object, 'age');                                                                                          // 9814
     * // => { 'user': 'fred' }                                                                                        // 9815
     *                                                                                                                 // 9816
     * _.omit(object, _.isNumber);                                                                                     // 9817
     * // => { 'user': 'fred' }                                                                                        // 9818
     */                                                                                                                // 9819
    var omit = restParam(function(object, props) {                                                                     // 9820
      if (object == null) {                                                                                            // 9821
        return {};                                                                                                     // 9822
      }                                                                                                                // 9823
      if (typeof props[0] != 'function') {                                                                             // 9824
        var props = arrayMap(baseFlatten(props), String);                                                              // 9825
        return pickByArray(object, baseDifference(keysIn(object), props));                                             // 9826
      }                                                                                                                // 9827
      var predicate = bindCallback(props[0], props[1], 3);                                                             // 9828
      return pickByCallback(object, function(value, key, object) {                                                     // 9829
        return !predicate(value, key, object);                                                                         // 9830
      });                                                                                                              // 9831
    });                                                                                                                // 9832
                                                                                                                       // 9833
    /**                                                                                                                // 9834
     * Creates a two dimensional array of the key-value pairs for `object`,                                            // 9835
     * e.g. `[[key1, value1], [key2, value2]]`.                                                                        // 9836
     *                                                                                                                 // 9837
     * @static                                                                                                         // 9838
     * @memberOf _                                                                                                     // 9839
     * @category Object                                                                                                // 9840
     * @param {Object} object The object to query.                                                                     // 9841
     * @returns {Array} Returns the new array of key-value pairs.                                                      // 9842
     * @example                                                                                                        // 9843
     *                                                                                                                 // 9844
     * _.pairs({ 'barney': 36, 'fred': 40 });                                                                          // 9845
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)                                        // 9846
     */                                                                                                                // 9847
    function pairs(object) {                                                                                           // 9848
      object = toObject(object);                                                                                       // 9849
                                                                                                                       // 9850
      var index = -1,                                                                                                  // 9851
          props = keys(object),                                                                                        // 9852
          length = props.length,                                                                                       // 9853
          result = Array(length);                                                                                      // 9854
                                                                                                                       // 9855
      while (++index < length) {                                                                                       // 9856
        var key = props[index];                                                                                        // 9857
        result[index] = [key, object[key]];                                                                            // 9858
      }                                                                                                                // 9859
      return result;                                                                                                   // 9860
    }                                                                                                                  // 9861
                                                                                                                       // 9862
    /**                                                                                                                // 9863
     * Creates an object composed of the picked `object` properties. Property                                          // 9864
     * names may be specified as individual arguments or as arrays of property                                         // 9865
     * names. If `predicate` is provided it's invoked for each property of `object`                                    // 9866
     * picking the properties `predicate` returns truthy for. The predicate is                                         // 9867
     * bound to `thisArg` and invoked with three arguments: (value, key, object).                                      // 9868
     *                                                                                                                 // 9869
     * @static                                                                                                         // 9870
     * @memberOf _                                                                                                     // 9871
     * @category Object                                                                                                // 9872
     * @param {Object} object The source object.                                                                       // 9873
     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9874
     *  iteration or property names to pick, specified as individual property                                          // 9875
     *  names or arrays of property names.                                                                             // 9876
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9877
     * @returns {Object} Returns the new object.                                                                       // 9878
     * @example                                                                                                        // 9879
     *                                                                                                                 // 9880
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 9881
     *                                                                                                                 // 9882
     * _.pick(object, 'user');                                                                                         // 9883
     * // => { 'user': 'fred' }                                                                                        // 9884
     *                                                                                                                 // 9885
     * _.pick(object, _.isString);                                                                                     // 9886
     * // => { 'user': 'fred' }                                                                                        // 9887
     */                                                                                                                // 9888
    var pick = restParam(function(object, props) {                                                                     // 9889
      if (object == null) {                                                                                            // 9890
        return {};                                                                                                     // 9891
      }                                                                                                                // 9892
      return typeof props[0] == 'function'                                                                             // 9893
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))                                                  // 9894
        : pickByArray(object, baseFlatten(props));                                                                     // 9895
    });                                                                                                                // 9896
                                                                                                                       // 9897
    /**                                                                                                                // 9898
     * This method is like `_.get` except that if the resolved value is a function                                     // 9899
     * it's invoked with the `this` binding of its parent object and its result                                        // 9900
     * is returned.                                                                                                    // 9901
     *                                                                                                                 // 9902
     * @static                                                                                                         // 9903
     * @memberOf _                                                                                                     // 9904
     * @category Object                                                                                                // 9905
     * @param {Object} object The object to query.                                                                     // 9906
     * @param {Array|string} path The path of the property to resolve.                                                 // 9907
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9908
     * @returns {*} Returns the resolved value.                                                                        // 9909
     * @example                                                                                                        // 9910
     *                                                                                                                 // 9911
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 9912
     *                                                                                                                 // 9913
     * _.result(object, 'a[0].b.c1');                                                                                  // 9914
     * // => 3                                                                                                         // 9915
     *                                                                                                                 // 9916
     * _.result(object, 'a[0].b.c2');                                                                                  // 9917
     * // => 4                                                                                                         // 9918
     *                                                                                                                 // 9919
     * _.result(object, 'a.b.c', 'default');                                                                           // 9920
     * // => 'default'                                                                                                 // 9921
     *                                                                                                                 // 9922
     * _.result(object, 'a.b.c', _.constant('default'));                                                               // 9923
     * // => 'default'                                                                                                 // 9924
     */                                                                                                                // 9925
    function result(object, path, defaultValue) {                                                                      // 9926
      var result = object == null ? undefined : object[path];                                                          // 9927
      if (result === undefined) {                                                                                      // 9928
        if (object != null && !isKey(path, object)) {                                                                  // 9929
          path = toPath(path);                                                                                         // 9930
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 9931
          result = object == null ? undefined : object[last(path)];                                                    // 9932
        }                                                                                                              // 9933
        result = result === undefined ? defaultValue : result;                                                         // 9934
      }                                                                                                                // 9935
      return isFunction(result) ? result.call(object) : result;                                                        // 9936
    }                                                                                                                  // 9937
                                                                                                                       // 9938
    /**                                                                                                                // 9939
     * Sets the property value of `path` on `object`. If a portion of `path`                                           // 9940
     * does not exist it's created.                                                                                    // 9941
     *                                                                                                                 // 9942
     * @static                                                                                                         // 9943
     * @memberOf _                                                                                                     // 9944
     * @category Object                                                                                                // 9945
     * @param {Object} object The object to augment.                                                                   // 9946
     * @param {Array|string} path The path of the property to set.                                                     // 9947
     * @param {*} value The value to set.                                                                              // 9948
     * @returns {Object} Returns `object`.                                                                             // 9949
     * @example                                                                                                        // 9950
     *                                                                                                                 // 9951
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9952
     *                                                                                                                 // 9953
     * _.set(object, 'a[0].b.c', 4);                                                                                   // 9954
     * console.log(object.a[0].b.c);                                                                                   // 9955
     * // => 4                                                                                                         // 9956
     *                                                                                                                 // 9957
     * _.set(object, 'x[0].y.z', 5);                                                                                   // 9958
     * console.log(object.x[0].y.z);                                                                                   // 9959
     * // => 5                                                                                                         // 9960
     */                                                                                                                // 9961
    function set(object, path, value) {                                                                                // 9962
      if (object == null) {                                                                                            // 9963
        return object;                                                                                                 // 9964
      }                                                                                                                // 9965
      var pathKey = (path + '');                                                                                       // 9966
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);                              // 9967
                                                                                                                       // 9968
      var index = -1,                                                                                                  // 9969
          length = path.length,                                                                                        // 9970
          lastIndex = length - 1,                                                                                      // 9971
          nested = object;                                                                                             // 9972
                                                                                                                       // 9973
      while (nested != null && ++index < length) {                                                                     // 9974
        var key = path[index];                                                                                         // 9975
        if (isObject(nested)) {                                                                                        // 9976
          if (index == lastIndex) {                                                                                    // 9977
            nested[key] = value;                                                                                       // 9978
          } else if (nested[key] == null) {                                                                            // 9979
            nested[key] = isIndex(path[index + 1]) ? [] : {};                                                          // 9980
          }                                                                                                            // 9981
        }                                                                                                              // 9982
        nested = nested[key];                                                                                          // 9983
      }                                                                                                                // 9984
      return object;                                                                                                   // 9985
    }                                                                                                                  // 9986
                                                                                                                       // 9987
    /**                                                                                                                // 9988
     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 9989
     * `accumulator` object which is the result of running each of its own enumerable                                  // 9990
     * properties through `iteratee`, with each invocation potentially mutating                                        // 9991
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked                                      // 9992
     * with four arguments: (accumulator, value, key, object). Iteratee functions                                      // 9993
     * may exit iteration early by explicitly returning `false`.                                                       // 9994
     *                                                                                                                 // 9995
     * @static                                                                                                         // 9996
     * @memberOf _                                                                                                     // 9997
     * @category Object                                                                                                // 9998
     * @param {Array|Object} object The object to iterate over.                                                        // 9999
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10000
     * @param {*} [accumulator] The custom accumulator value.                                                          // 10001
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 10002
     * @returns {*} Returns the accumulated value.                                                                     // 10003
     * @example                                                                                                        // 10004
     *                                                                                                                 // 10005
     * _.transform([2, 3, 4], function(result, n) {                                                                    // 10006
     *   result.push(n *= n);                                                                                          // 10007
     *   return n % 2 == 0;                                                                                            // 10008
     * });                                                                                                             // 10009
     * // => [4, 9]                                                                                                    // 10010
     *                                                                                                                 // 10011
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                      // 10012
     *   result[key] = n * 3;                                                                                          // 10013
     * });                                                                                                             // 10014
     * // => { 'a': 3, 'b': 6 }                                                                                        // 10015
     */                                                                                                                // 10016
    function transform(object, iteratee, accumulator, thisArg) {                                                       // 10017
      var isArr = isArray(object) || isTypedArray(object);                                                             // 10018
      iteratee = getCallback(iteratee, thisArg, 4);                                                                    // 10019
                                                                                                                       // 10020
      if (accumulator == null) {                                                                                       // 10021
        if (isArr || isObject(object)) {                                                                               // 10022
          var Ctor = object.constructor;                                                                               // 10023
          if (isArr) {                                                                                                 // 10024
            accumulator = isArray(object) ? new Ctor : [];                                                             // 10025
          } else {                                                                                                     // 10026
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 10027
          }                                                                                                            // 10028
        } else {                                                                                                       // 10029
          accumulator = {};                                                                                            // 10030
        }                                                                                                              // 10031
      }                                                                                                                // 10032
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 10033
        return iteratee(accumulator, value, index, object);                                                            // 10034
      });                                                                                                              // 10035
      return accumulator;                                                                                              // 10036
    }                                                                                                                  // 10037
                                                                                                                       // 10038
    /**                                                                                                                // 10039
     * Creates an array of the own enumerable property values of `object`.                                             // 10040
     *                                                                                                                 // 10041
     * **Note:** Non-object values are coerced to objects.                                                             // 10042
     *                                                                                                                 // 10043
     * @static                                                                                                         // 10044
     * @memberOf _                                                                                                     // 10045
     * @category Object                                                                                                // 10046
     * @param {Object} object The object to query.                                                                     // 10047
     * @returns {Array} Returns the array of property values.                                                          // 10048
     * @example                                                                                                        // 10049
     *                                                                                                                 // 10050
     * function Foo() {                                                                                                // 10051
     *   this.a = 1;                                                                                                   // 10052
     *   this.b = 2;                                                                                                   // 10053
     * }                                                                                                               // 10054
     *                                                                                                                 // 10055
     * Foo.prototype.c = 3;                                                                                            // 10056
     *                                                                                                                 // 10057
     * _.values(new Foo);                                                                                              // 10058
     * // => [1, 2] (iteration order is not guaranteed)                                                                // 10059
     *                                                                                                                 // 10060
     * _.values('hi');                                                                                                 // 10061
     * // => ['h', 'i']                                                                                                // 10062
     */                                                                                                                // 10063
    function values(object) {                                                                                          // 10064
      return baseValues(object, keys(object));                                                                         // 10065
    }                                                                                                                  // 10066
                                                                                                                       // 10067
    /**                                                                                                                // 10068
     * Creates an array of the own and inherited enumerable property values                                            // 10069
     * of `object`.                                                                                                    // 10070
     *                                                                                                                 // 10071
     * **Note:** Non-object values are coerced to objects.                                                             // 10072
     *                                                                                                                 // 10073
     * @static                                                                                                         // 10074
     * @memberOf _                                                                                                     // 10075
     * @category Object                                                                                                // 10076
     * @param {Object} object The object to query.                                                                     // 10077
     * @returns {Array} Returns the array of property values.                                                          // 10078
     * @example                                                                                                        // 10079
     *                                                                                                                 // 10080
     * function Foo() {                                                                                                // 10081
     *   this.a = 1;                                                                                                   // 10082
     *   this.b = 2;                                                                                                   // 10083
     * }                                                                                                               // 10084
     *                                                                                                                 // 10085
     * Foo.prototype.c = 3;                                                                                            // 10086
     *                                                                                                                 // 10087
     * _.valuesIn(new Foo);                                                                                            // 10088
     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 10089
     */                                                                                                                // 10090
    function valuesIn(object) {                                                                                        // 10091
      return baseValues(object, keysIn(object));                                                                       // 10092
    }                                                                                                                  // 10093
                                                                                                                       // 10094
    /*------------------------------------------------------------------------*/                                       // 10095
                                                                                                                       // 10096
    /**                                                                                                                // 10097
     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 10098
     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 10099
     *                                                                                                                 // 10100
     * @static                                                                                                         // 10101
     * @memberOf _                                                                                                     // 10102
     * @category Number                                                                                                // 10103
     * @param {number} n The number to check.                                                                          // 10104
     * @param {number} [start=0] The start of the range.                                                               // 10105
     * @param {number} end The end of the range.                                                                       // 10106
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.                                         // 10107
     * @example                                                                                                        // 10108
     *                                                                                                                 // 10109
     * _.inRange(3, 2, 4);                                                                                             // 10110
     * // => true                                                                                                      // 10111
     *                                                                                                                 // 10112
     * _.inRange(4, 8);                                                                                                // 10113
     * // => true                                                                                                      // 10114
     *                                                                                                                 // 10115
     * _.inRange(4, 2);                                                                                                // 10116
     * // => false                                                                                                     // 10117
     *                                                                                                                 // 10118
     * _.inRange(2, 2);                                                                                                // 10119
     * // => false                                                                                                     // 10120
     *                                                                                                                 // 10121
     * _.inRange(1.2, 2);                                                                                              // 10122
     * // => true                                                                                                      // 10123
     *                                                                                                                 // 10124
     * _.inRange(5.2, 4);                                                                                              // 10125
     * // => false                                                                                                     // 10126
     */                                                                                                                // 10127
    function inRange(value, start, end) {                                                                              // 10128
      start = +start || 0;                                                                                             // 10129
      if (end === undefined) {                                                                                         // 10130
        end = start;                                                                                                   // 10131
        start = 0;                                                                                                     // 10132
      } else {                                                                                                         // 10133
        end = +end || 0;                                                                                               // 10134
      }                                                                                                                // 10135
      return value >= nativeMin(start, end) && value < nativeMax(start, end);                                          // 10136
    }                                                                                                                  // 10137
                                                                                                                       // 10138
    /**                                                                                                                // 10139
     * Produces a random number between `min` and `max` (inclusive). If only one                                       // 10140
     * argument is provided a number between `0` and the given number is returned.                                     // 10141
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point                                  // 10142
     * number is returned instead of an integer.                                                                       // 10143
     *                                                                                                                 // 10144
     * @static                                                                                                         // 10145
     * @memberOf _                                                                                                     // 10146
     * @category Number                                                                                                // 10147
     * @param {number} [min=0] The minimum possible value.                                                             // 10148
     * @param {number} [max=1] The maximum possible value.                                                             // 10149
     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 10150
     * @returns {number} Returns the random number.                                                                    // 10151
     * @example                                                                                                        // 10152
     *                                                                                                                 // 10153
     * _.random(0, 5);                                                                                                 // 10154
     * // => an integer between 0 and 5                                                                                // 10155
     *                                                                                                                 // 10156
     * _.random(5);                                                                                                    // 10157
     * // => also an integer between 0 and 5                                                                           // 10158
     *                                                                                                                 // 10159
     * _.random(5, true);                                                                                              // 10160
     * // => a floating-point number between 0 and 5                                                                   // 10161
     *                                                                                                                 // 10162
     * _.random(1.2, 5.2);                                                                                             // 10163
     * // => a floating-point number between 1.2 and 5.2                                                               // 10164
     */                                                                                                                // 10165
    function random(min, max, floating) {                                                                              // 10166
      if (floating && isIterateeCall(min, max, floating)) {                                                            // 10167
        max = floating = undefined;                                                                                    // 10168
      }                                                                                                                // 10169
      var noMin = min == null,                                                                                         // 10170
          noMax = max == null;                                                                                         // 10171
                                                                                                                       // 10172
      if (floating == null) {                                                                                          // 10173
        if (noMax && typeof min == 'boolean') {                                                                        // 10174
          floating = min;                                                                                              // 10175
          min = 1;                                                                                                     // 10176
        }                                                                                                              // 10177
        else if (typeof max == 'boolean') {                                                                            // 10178
          floating = max;                                                                                              // 10179
          noMax = true;                                                                                                // 10180
        }                                                                                                              // 10181
      }                                                                                                                // 10182
      if (noMin && noMax) {                                                                                            // 10183
        max = 1;                                                                                                       // 10184
        noMax = false;                                                                                                 // 10185
      }                                                                                                                // 10186
      min = +min || 0;                                                                                                 // 10187
      if (noMax) {                                                                                                     // 10188
        max = min;                                                                                                     // 10189
        min = 0;                                                                                                       // 10190
      } else {                                                                                                         // 10191
        max = +max || 0;                                                                                               // 10192
      }                                                                                                                // 10193
      if (floating || min % 1 || max % 1) {                                                                            // 10194
        var rand = nativeRandom();                                                                                     // 10195
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);              // 10196
      }                                                                                                                // 10197
      return baseRandom(min, max);                                                                                     // 10198
    }                                                                                                                  // 10199
                                                                                                                       // 10200
    /*------------------------------------------------------------------------*/                                       // 10201
                                                                                                                       // 10202
    /**                                                                                                                // 10203
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 10204
     *                                                                                                                 // 10205
     * @static                                                                                                         // 10206
     * @memberOf _                                                                                                     // 10207
     * @category String                                                                                                // 10208
     * @param {string} [string=''] The string to convert.                                                              // 10209
     * @returns {string} Returns the camel cased string.                                                               // 10210
     * @example                                                                                                        // 10211
     *                                                                                                                 // 10212
     * _.camelCase('Foo Bar');                                                                                         // 10213
     * // => 'fooBar'                                                                                                  // 10214
     *                                                                                                                 // 10215
     * _.camelCase('--foo-bar');                                                                                       // 10216
     * // => 'fooBar'                                                                                                  // 10217
     *                                                                                                                 // 10218
     * _.camelCase('__foo_bar__');                                                                                     // 10219
     * // => 'fooBar'                                                                                                  // 10220
     */                                                                                                                // 10221
    var camelCase = createCompounder(function(result, word, index) {                                                   // 10222
      word = word.toLowerCase();                                                                                       // 10223
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);                                 // 10224
    });                                                                                                                // 10225
                                                                                                                       // 10226
    /**                                                                                                                // 10227
     * Capitalizes the first character of `string`.                                                                    // 10228
     *                                                                                                                 // 10229
     * @static                                                                                                         // 10230
     * @memberOf _                                                                                                     // 10231
     * @category String                                                                                                // 10232
     * @param {string} [string=''] The string to capitalize.                                                           // 10233
     * @returns {string} Returns the capitalized string.                                                               // 10234
     * @example                                                                                                        // 10235
     *                                                                                                                 // 10236
     * _.capitalize('fred');                                                                                           // 10237
     * // => 'Fred'                                                                                                    // 10238
     */                                                                                                                // 10239
    function capitalize(string) {                                                                                      // 10240
      string = baseToString(string);                                                                                   // 10241
      return string && (string.charAt(0).toUpperCase() + string.slice(1));                                             // 10242
    }                                                                                                                  // 10243
                                                                                                                       // 10244
    /**                                                                                                                // 10245
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *                                                                                                                 // 10248
     * @static                                                                                                         // 10249
     * @memberOf _                                                                                                     // 10250
     * @category String                                                                                                // 10251
     * @param {string} [string=''] The string to deburr.                                                               // 10252
     * @returns {string} Returns the deburred string.                                                                  // 10253
     * @example                                                                                                        // 10254
     *                                                                                                                 // 10255
     * _.deburr('déjà vu');                                                                                            // 10256
     * // => 'deja vu'                                                                                                 // 10257
     */                                                                                                                // 10258
    function deburr(string) {                                                                                          // 10259
      string = baseToString(string);                                                                                   // 10260
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 10261
    }                                                                                                                  // 10262
                                                                                                                       // 10263
    /**                                                                                                                // 10264
     * Checks if `string` ends with the given target string.                                                           // 10265
     *                                                                                                                 // 10266
     * @static                                                                                                         // 10267
     * @memberOf _                                                                                                     // 10268
     * @category String                                                                                                // 10269
     * @param {string} [string=''] The string to search.                                                               // 10270
     * @param {string} [target] The string to search for.                                                              // 10271
     * @param {number} [position=string.length] The position to search from.                                           // 10272
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 10273
     * @example                                                                                                        // 10274
     *                                                                                                                 // 10275
     * _.endsWith('abc', 'c');                                                                                         // 10276
     * // => true                                                                                                      // 10277
     *                                                                                                                 // 10278
     * _.endsWith('abc', 'b');                                                                                         // 10279
     * // => false                                                                                                     // 10280
     *                                                                                                                 // 10281
     * _.endsWith('abc', 'b', 2);                                                                                      // 10282
     * // => true                                                                                                      // 10283
     */                                                                                                                // 10284
    function endsWith(string, target, position) {                                                                      // 10285
      string = baseToString(string);                                                                                   // 10286
      target = (target + '');                                                                                          // 10287
                                                                                                                       // 10288
      var length = string.length;                                                                                      // 10289
      position = position === undefined                                                                                // 10290
        ? length                                                                                                       // 10291
        : nativeMin(position < 0 ? 0 : (+position || 0), length);                                                      // 10292
                                                                                                                       // 10293
      position -= target.length;                                                                                       // 10294
      return position >= 0 && string.indexOf(target, position) == position;                                            // 10295
    }                                                                                                                  // 10296
                                                                                                                       // 10297
    /**                                                                                                                // 10298
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to                                       // 10299
     * their corresponding HTML entities.                                                                              // 10300
     *                                                                                                                 // 10301
     * **Note:** No other characters are escaped. To escape additional characters                                      // 10302
     * use a third-party library like [_he_](https://mths.be/he).                                                      // 10303
     *                                                                                                                 // 10304
     * Though the ">" character is escaped for symmetry, characters like                                               // 10305
     * ">" and "/" don't need escaping in HTML and have no special meaning                                             // 10306
     * unless they're part of a tag or unquoted attribute value.                                                       // 10307
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 10308
     * (under "semi-related fun fact") for more details.                                                               // 10309
     *                                                                                                                 // 10310
     * Backticks are escaped because in Internet Explorer < 9, they can break out                                      // 10311
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                      // 10312
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 10313
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 10314
     * for more details.                                                                                               // 10315
     *                                                                                                                 // 10316
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 10317
     * to reduce XSS vectors.                                                                                          // 10318
     *                                                                                                                 // 10319
     * @static                                                                                                         // 10320
     * @memberOf _                                                                                                     // 10321
     * @category String                                                                                                // 10322
     * @param {string} [string=''] The string to escape.                                                               // 10323
     * @returns {string} Returns the escaped string.                                                                   // 10324
     * @example                                                                                                        // 10325
     *                                                                                                                 // 10326
     * _.escape('fred, barney, & pebbles');                                                                            // 10327
     * // => 'fred, barney, &amp; pebbles'                                                                             // 10328
     */                                                                                                                // 10329
    function escape(string) {                                                                                          // 10330
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.                                                // 10331
      string = baseToString(string);                                                                                   // 10332
      return (string && reHasUnescapedHtml.test(string))                                                               // 10333
        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 10334
        : string;                                                                                                      // 10335
    }                                                                                                                  // 10336
                                                                                                                       // 10337
    /**                                                                                                                // 10338
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",                                      // 10339
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.                                                          // 10340
     *                                                                                                                 // 10341
     * @static                                                                                                         // 10342
     * @memberOf _                                                                                                     // 10343
     * @category String                                                                                                // 10344
     * @param {string} [string=''] The string to escape.                                                               // 10345
     * @returns {string} Returns the escaped string.                                                                   // 10346
     * @example                                                                                                        // 10347
     *                                                                                                                 // 10348
     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 10349
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'                                                                   // 10350
     */                                                                                                                // 10351
    function escapeRegExp(string) {                                                                                    // 10352
      string = baseToString(string);                                                                                   // 10353
      return (string && reHasRegExpChars.test(string))                                                                 // 10354
        ? string.replace(reRegExpChars, escapeRegExpChar)                                                              // 10355
        : (string || '(?:)');                                                                                          // 10356
    }                                                                                                                  // 10357
                                                                                                                       // 10358
    /**                                                                                                                // 10359
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 10360
     *                                                                                                                 // 10361
     * @static                                                                                                         // 10362
     * @memberOf _                                                                                                     // 10363
     * @category String                                                                                                // 10364
     * @param {string} [string=''] The string to convert.                                                              // 10365
     * @returns {string} Returns the kebab cased string.                                                               // 10366
     * @example                                                                                                        // 10367
     *                                                                                                                 // 10368
     * _.kebabCase('Foo Bar');                                                                                         // 10369
     * // => 'foo-bar'                                                                                                 // 10370
     *                                                                                                                 // 10371
     * _.kebabCase('fooBar');                                                                                          // 10372
     * // => 'foo-bar'                                                                                                 // 10373
     *                                                                                                                 // 10374
     * _.kebabCase('__foo_bar__');                                                                                     // 10375
     * // => 'foo-bar'                                                                                                 // 10376
     */                                                                                                                // 10377
    var kebabCase = createCompounder(function(result, word, index) {                                                   // 10378
      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 10379
    });                                                                                                                // 10380
                                                                                                                       // 10381
    /**                                                                                                                // 10382
     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 10383
     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 10384
     *                                                                                                                 // 10385
     * @static                                                                                                         // 10386
     * @memberOf _                                                                                                     // 10387
     * @category String                                                                                                // 10388
     * @param {string} [string=''] The string to pad.                                                                  // 10389
     * @param {number} [length=0] The padding length.                                                                  // 10390
     * @param {string} [chars=' '] The string used as padding.                                                         // 10391
     * @returns {string} Returns the padded string.                                                                    // 10392
     * @example                                                                                                        // 10393
     *                                                                                                                 // 10394
     * _.pad('abc', 8);                                                                                                // 10395
     * // => '  abc   '                                                                                                // 10396
     *                                                                                                                 // 10397
     * _.pad('abc', 8, '_-');                                                                                          // 10398
     * // => '_-abc_-_'                                                                                                // 10399
     *                                                                                                                 // 10400
     * _.pad('abc', 3);                                                                                                // 10401
     * // => 'abc'                                                                                                     // 10402
     */                                                                                                                // 10403
    function pad(string, length, chars) {                                                                              // 10404
      string = baseToString(string);                                                                                   // 10405
      length = +length;                                                                                                // 10406
                                                                                                                       // 10407
      var strLength = string.length;                                                                                   // 10408
      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 10409
        return string;                                                                                                 // 10410
      }                                                                                                                // 10411
      var mid = (length - strLength) / 2,                                                                              // 10412
          leftLength = nativeFloor(mid),                                                                               // 10413
          rightLength = nativeCeil(mid);                                                                               // 10414
                                                                                                                       // 10415
      chars = createPadding('', rightLength, chars);                                                                   // 10416
      return chars.slice(0, leftLength) + string + chars;                                                              // 10417
    }                                                                                                                  // 10418
                                                                                                                       // 10419
    /**                                                                                                                // 10420
     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 10421
     * characters are truncated if they exceed `length`.                                                               // 10422
     *                                                                                                                 // 10423
     * @static                                                                                                         // 10424
     * @memberOf _                                                                                                     // 10425
     * @category String                                                                                                // 10426
     * @param {string} [string=''] The string to pad.                                                                  // 10427
     * @param {number} [length=0] The padding length.                                                                  // 10428
     * @param {string} [chars=' '] The string used as padding.                                                         // 10429
     * @returns {string} Returns the padded string.                                                                    // 10430
     * @example                                                                                                        // 10431
     *                                                                                                                 // 10432
     * _.padLeft('abc', 6);                                                                                            // 10433
     * // => '   abc'                                                                                                  // 10434
     *                                                                                                                 // 10435
     * _.padLeft('abc', 6, '_-');                                                                                      // 10436
     * // => '_-_abc'                                                                                                  // 10437
     *                                                                                                                 // 10438
     * _.padLeft('abc', 3);                                                                                            // 10439
     * // => 'abc'                                                                                                     // 10440
     */                                                                                                                // 10441
    var padLeft = createPadDir();                                                                                      // 10442
                                                                                                                       // 10443
    /**                                                                                                                // 10444
     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 10445
     * characters are truncated if they exceed `length`.                                                               // 10446
     *                                                                                                                 // 10447
     * @static                                                                                                         // 10448
     * @memberOf _                                                                                                     // 10449
     * @category String                                                                                                // 10450
     * @param {string} [string=''] The string to pad.                                                                  // 10451
     * @param {number} [length=0] The padding length.                                                                  // 10452
     * @param {string} [chars=' '] The string used as padding.                                                         // 10453
     * @returns {string} Returns the padded string.                                                                    // 10454
     * @example                                                                                                        // 10455
     *                                                                                                                 // 10456
     * _.padRight('abc', 6);                                                                                           // 10457
     * // => 'abc   '                                                                                                  // 10458
     *                                                                                                                 // 10459
     * _.padRight('abc', 6, '_-');                                                                                     // 10460
     * // => 'abc_-_'                                                                                                  // 10461
     *                                                                                                                 // 10462
     * _.padRight('abc', 3);                                                                                           // 10463
     * // => 'abc'                                                                                                     // 10464
     */                                                                                                                // 10465
    var padRight = createPadDir(true);                                                                                 // 10466
                                                                                                                       // 10467
    /**                                                                                                                // 10468
     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 10469
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 10470
     * in which case a `radix` of `16` is used.                                                                        // 10471
     *                                                                                                                 // 10472
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 10473
     * of `parseInt`.                                                                                                  // 10474
     *                                                                                                                 // 10475
     * @static                                                                                                         // 10476
     * @memberOf _                                                                                                     // 10477
     * @category String                                                                                                // 10478
     * @param {string} string The string to convert.                                                                   // 10479
     * @param {number} [radix] The radix to interpret `value` by.                                                      // 10480
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10481
     * @returns {number} Returns the converted integer.                                                                // 10482
     * @example                                                                                                        // 10483
     *                                                                                                                 // 10484
     * _.parseInt('08');                                                                                               // 10485
     * // => 8                                                                                                         // 10486
     *                                                                                                                 // 10487
     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 10488
     * // => [6, 8, 10]                                                                                                // 10489
     */                                                                                                                // 10490
    function parseInt(string, radix, guard) {                                                                          // 10491
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.                                                        // 10492
      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 10493
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 10494
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {                                              // 10495
        radix = 0;                                                                                                     // 10496
      } else if (radix) {                                                                                              // 10497
        radix = +radix;                                                                                                // 10498
      }                                                                                                                // 10499
      string = trim(string);                                                                                           // 10500
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 10501
    }                                                                                                                  // 10502
                                                                                                                       // 10503
    /**                                                                                                                // 10504
     * Repeats the given string `n` times.                                                                             // 10505
     *                                                                                                                 // 10506
     * @static                                                                                                         // 10507
     * @memberOf _                                                                                                     // 10508
     * @category String                                                                                                // 10509
     * @param {string} [string=''] The string to repeat.                                                               // 10510
     * @param {number} [n=0] The number of times to repeat the string.                                                 // 10511
     * @returns {string} Returns the repeated string.                                                                  // 10512
     * @example                                                                                                        // 10513
     *                                                                                                                 // 10514
     * _.repeat('*', 3);                                                                                               // 10515
     * // => '***'                                                                                                     // 10516
     *                                                                                                                 // 10517
     * _.repeat('abc', 2);                                                                                             // 10518
     * // => 'abcabc'                                                                                                  // 10519
     *                                                                                                                 // 10520
     * _.repeat('abc', 0);                                                                                             // 10521
     * // => ''                                                                                                        // 10522
     */                                                                                                                // 10523
    function repeat(string, n) {                                                                                       // 10524
      var result = '';                                                                                                 // 10525
      string = baseToString(string);                                                                                   // 10526
      n = +n;                                                                                                          // 10527
      if (n < 1 || !string || !nativeIsFinite(n)) {                                                                    // 10528
        return result;                                                                                                 // 10529
      }                                                                                                                // 10530
      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 10531
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 10532
      do {                                                                                                             // 10533
        if (n % 2) {                                                                                                   // 10534
          result += string;                                                                                            // 10535
        }                                                                                                              // 10536
        n = nativeFloor(n / 2);                                                                                        // 10537
        string += string;                                                                                              // 10538
      } while (n);                                                                                                     // 10539
                                                                                                                       // 10540
      return result;                                                                                                   // 10541
    }                                                                                                                  // 10542
                                                                                                                       // 10543
    /**                                                                                                                // 10544
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 10545
     *                                                                                                                 // 10546
     * @static                                                                                                         // 10547
     * @memberOf _                                                                                                     // 10548
     * @category String                                                                                                // 10549
     * @param {string} [string=''] The string to convert.                                                              // 10550
     * @returns {string} Returns the snake cased string.                                                               // 10551
     * @example                                                                                                        // 10552
     *                                                                                                                 // 10553
     * _.snakeCase('Foo Bar');                                                                                         // 10554
     * // => 'foo_bar'                                                                                                 // 10555
     *                                                                                                                 // 10556
     * _.snakeCase('fooBar');                                                                                          // 10557
     * // => 'foo_bar'                                                                                                 // 10558
     *                                                                                                                 // 10559
     * _.snakeCase('--foo-bar');                                                                                       // 10560
     * // => 'foo_bar'                                                                                                 // 10561
     */                                                                                                                // 10562
    var snakeCase = createCompounder(function(result, word, index) {                                                   // 10563
      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 10564
    });                                                                                                                // 10565
                                                                                                                       // 10566
    /**                                                                                                                // 10567
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 10568
     *                                                                                                                 // 10569
     * @static                                                                                                         // 10570
     * @memberOf _                                                                                                     // 10571
     * @category String                                                                                                // 10572
     * @param {string} [string=''] The string to convert.                                                              // 10573
     * @returns {string} Returns the start cased string.                                                               // 10574
     * @example                                                                                                        // 10575
     *                                                                                                                 // 10576
     * _.startCase('--foo-bar');                                                                                       // 10577
     * // => 'Foo Bar'                                                                                                 // 10578
     *                                                                                                                 // 10579
     * _.startCase('fooBar');                                                                                          // 10580
     * // => 'Foo Bar'                                                                                                 // 10581
     *                                                                                                                 // 10582
     * _.startCase('__foo_bar__');                                                                                     // 10583
     * // => 'Foo Bar'                                                                                                 // 10584
     */                                                                                                                // 10585
    var startCase = createCompounder(function(result, word, index) {                                                   // 10586
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));                             // 10587
    });                                                                                                                // 10588
                                                                                                                       // 10589
    /**                                                                                                                // 10590
     * Checks if `string` starts with the given target string.                                                         // 10591
     *                                                                                                                 // 10592
     * @static                                                                                                         // 10593
     * @memberOf _                                                                                                     // 10594
     * @category String                                                                                                // 10595
     * @param {string} [string=''] The string to search.                                                               // 10596
     * @param {string} [target] The string to search for.                                                              // 10597
     * @param {number} [position=0] The position to search from.                                                       // 10598
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 10599
     * @example                                                                                                        // 10600
     *                                                                                                                 // 10601
     * _.startsWith('abc', 'a');                                                                                       // 10602
     * // => true                                                                                                      // 10603
     *                                                                                                                 // 10604
     * _.startsWith('abc', 'b');                                                                                       // 10605
     * // => false                                                                                                     // 10606
     *                                                                                                                 // 10607
     * _.startsWith('abc', 'b', 1);                                                                                    // 10608
     * // => true                                                                                                      // 10609
     */                                                                                                                // 10610
    function startsWith(string, target, position) {                                                                    // 10611
      string = baseToString(string);                                                                                   // 10612
      position = position == null                                                                                      // 10613
        ? 0                                                                                                            // 10614
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);                                               // 10615
                                                                                                                       // 10616
      return string.lastIndexOf(target, position) == position;                                                         // 10617
    }                                                                                                                  // 10618
                                                                                                                       // 10619
    /**                                                                                                                // 10620
     * Creates a compiled template function that can interpolate data properties                                       // 10621
     * in "interpolate" delimiters, HTML-escape interpolated data properties in                                        // 10622
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data                                      // 10623
     * properties may be accessed as free variables in the template. If a setting                                      // 10624
     * object is provided it takes precedence over `_.templateSettings` values.                                        // 10625
     *                                                                                                                 // 10626
     * **Note:** In the development build `_.template` utilizes                                                        // 10627
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 10628
     * for easier debugging.                                                                                           // 10629
     *                                                                                                                 // 10630
     * For more information on precompiling templates see                                                              // 10631
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 10632
     *                                                                                                                 // 10633
     * For more information on Chrome extension sandboxes see                                                          // 10634
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 10635
     *                                                                                                                 // 10636
     * @static                                                                                                         // 10637
     * @memberOf _                                                                                                     // 10638
     * @category String                                                                                                // 10639
     * @param {string} [string=''] The template string.                                                                // 10640
     * @param {Object} [options] The options object.                                                                   // 10641
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.                                                   // 10642
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.                                                    // 10643
     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 10644
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.                                              // 10645
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 10646
     * @param {string} [options.variable] The data object variable name.                                               // 10647
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.                                   // 10648
     * @returns {Function} Returns the compiled template function.                                                     // 10649
     * @example                                                                                                        // 10650
     *                                                                                                                 // 10651
     * // using the "interpolate" delimiter to create a compiled template                                              // 10652
     * var compiled = _.template('hello <%= user %>!');                                                                // 10653
     * compiled({ 'user': 'fred' });                                                                                   // 10654
     * // => 'hello fred!'                                                                                             // 10655
     *                                                                                                                 // 10656
     * // using the HTML "escape" delimiter to escape data property values                                             // 10657
     * var compiled = _.template('<b><%- value %></b>');                                                               // 10658
     * compiled({ 'value': '<script>' });                                                                              // 10659
     * // => '<b>&lt;script&gt;</b>'                                                                                   // 10660
     *                                                                                                                 // 10661
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML                                       // 10662
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 10663
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10664
     * // => '<li>fred</li><li>barney</li>'                                                                            // 10665
     *                                                                                                                 // 10666
     * // using the internal `print` function in "evaluate" delimiters                                                 // 10667
     * var compiled = _.template('<% print("hello " + user); %>!');                                                    // 10668
     * compiled({ 'user': 'barney' });                                                                                 // 10669
     * // => 'hello barney!'                                                                                           // 10670
     *                                                                                                                 // 10671
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter                              // 10672
     * var compiled = _.template('hello ${ user }!');                                                                  // 10673
     * compiled({ 'user': 'pebbles' });                                                                                // 10674
     * // => 'hello pebbles!'                                                                                          // 10675
     *                                                                                                                 // 10676
     * // using custom template delimiters                                                                             // 10677
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;                                                             // 10678
     * var compiled = _.template('hello {{ user }}!');                                                                 // 10679
     * compiled({ 'user': 'mustache' });                                                                               // 10680
     * // => 'hello mustache!'                                                                                         // 10681
     *                                                                                                                 // 10682
     * // using backslashes to treat delimiters as plain text                                                          // 10683
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');                                                         // 10684
     * compiled({ 'value': 'ignored' });                                                                               // 10685
     * // => '<%- value %>'                                                                                            // 10686
     *                                                                                                                 // 10687
     * // using the `imports` option to import `jQuery` as `jq`                                                        // 10688
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 10689
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 10690
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10691
     * // => '<li>fred</li><li>barney</li>'                                                                            // 10692
     *                                                                                                                 // 10693
     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 10694
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 10695
     * compiled(data);                                                                                                 // 10696
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector           // 10697
     *                                                                                                                 // 10698
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 10699
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 10700
     * compiled.source;                                                                                                // 10701
     * // => function(data) {                                                                                          // 10702
     * //   var __t, __p = '';                                                                                         // 10703
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 10704
     * //   return __p;                                                                                                // 10705
     * // }                                                                                                            // 10706
     *                                                                                                                 // 10707
     * // using the `source` property to inline compiled templates for meaningful                                      // 10708
     * // line numbers in error messages and a stack trace                                                             // 10709
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');                                                                                                             // 10714
     */                                                                                                                // 10715
    function template(string, options, otherOptions) {                                                                 // 10716
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 10717
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 10718
      var settings = lodash.templateSettings;                                                                          // 10719
                                                                                                                       // 10720
      if (otherOptions && isIterateeCall(string, options, otherOptions)) {                                             // 10721
        options = otherOptions = undefined;                                                                            // 10722
      }                                                                                                                // 10723
      string = baseToString(string);                                                                                   // 10724
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);                      // 10725
                                                                                                                       // 10726
      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),                  // 10727
          importsKeys = keys(imports),                                                                                 // 10728
          importsValues = baseValues(imports, importsKeys);                                                            // 10729
                                                                                                                       // 10730
      var isEscaping,                                                                                                  // 10731
          isEvaluating,                                                                                                // 10732
          index = 0,                                                                                                   // 10733
          interpolate = options.interpolate || reNoMatch,                                                              // 10734
          source = "__p += '";                                                                                         // 10735
                                                                                                                       // 10736
      // Compile the regexp to match each delimiter.                                                                   // 10737
      var reDelimiters = RegExp(                                                                                       // 10738
        (options.escape || reNoMatch).source + '|' +                                                                   // 10739
        interpolate.source + '|' +                                                                                     // 10740
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 10741
        (options.evaluate || reNoMatch).source + '|$'                                                                  // 10742
      , 'g');                                                                                                          // 10743
                                                                                                                       // 10744
      // Use a sourceURL for easier debugging.                                                                         // 10745
      var sourceURL = '//# sourceURL=' +                                                                               // 10746
        ('sourceURL' in options                                                                                        // 10747
          ? options.sourceURL                                                                                          // 10748
          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 10749
        ) + '\n';                                                                                                      // 10750
                                                                                                                       // 10751
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 10753
                                                                                                                       // 10754
        // Escape characters that can't be included in string literals.                                                // 10755
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 10756
                                                                                                                       // 10757
        // Replace delimiters with snippets.                                                                           // 10758
        if (escapeValue) {                                                                                             // 10759
          isEscaping = true;                                                                                           // 10760
          source += "' +\n__e(" + escapeValue + ") +\n'";                                                              // 10761
        }                                                                                                              // 10762
        if (evaluateValue) {                                                                                           // 10763
          isEvaluating = true;                                                                                         // 10764
          source += "';\n" + evaluateValue + ";\n__p += '";                                                            // 10765
        }                                                                                                              // 10766
        if (interpolateValue) {                                                                                        // 10767
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";                               // 10768
        }                                                                                                              // 10769
        index = offset + match.length;                                                                                 // 10770
                                                                                                                       // 10771
        // The JS engine embedded in Adobe products requires returning the `match`                                     // 10772
        // string in order to produce the correct `offset` value.                                                      // 10773
        return match;                                                                                                  // 10774
      });                                                                                                              // 10775
                                                                                                                       // 10776
      source += "';\n";                                                                                                // 10777
                                                                                                                       // 10778
      // If `variable` is not specified wrap a with-statement around the generated                                     // 10779
      // code to add the data object to the top of the scope chain.                                                    // 10780
      var variable = options.variable;                                                                                 // 10781
      if (!variable) {                                                                                                 // 10782
        source = 'with (obj) {\n' + source + '\n}\n';                                                                  // 10783
      }                                                                                                                // 10784
      // Cleanup code by stripping empty strings.                                                                      // 10785
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 10786
        .replace(reEmptyStringMiddle, '$1')                                                                            // 10787
        .replace(reEmptyStringTrailing, '$1;');                                                                        // 10788
                                                                                                                       // 10789
      // Frame code as the function body.                                                                              // 10790
      source = 'function(' + (variable || 'obj') + ') {\n' +                                                           // 10791
        (variable                                                                                                      // 10792
          ? ''                                                                                                         // 10793
          : 'obj || (obj = {});\n'                                                                                     // 10794
        ) +                                                                                                            // 10795
        "var __t, __p = ''" +                                                                                          // 10796
        (isEscaping                                                                                                    // 10797
           ? ', __e = _.escape'                                                                                        // 10798
           : ''                                                                                                        // 10799
        ) +                                                                                                            // 10800
        (isEvaluating                                                                                                  // 10801
          ? ', __j = Array.prototype.join;\n' +                                                                        // 10802
            "function print() { __p += __j.call(arguments, '') }\n"                                                    // 10803
          : ';\n'                                                                                                      // 10804
        ) +                                                                                                            // 10805
        source +                                                                                                       // 10806
        'return __p\n}';                                                                                               // 10807
                                                                                                                       // 10808
      var result = attempt(function() {                                                                                // 10809
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 10810
      });                                                                                                              // 10811
                                                                                                                       // 10812
      // Provide the compiled function's source by its `toString` method or                                            // 10813
      // the `source` property as a convenience for inlining compiled templates.                                       // 10814
      result.source = source;                                                                                          // 10815
      if (isError(result)) {                                                                                           // 10816
        throw result;                                                                                                  // 10817
      }                                                                                                                // 10818
      return result;                                                                                                   // 10819
    }                                                                                                                  // 10820
                                                                                                                       // 10821
    /**                                                                                                                // 10822
     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 10823
     *                                                                                                                 // 10824
     * @static                                                                                                         // 10825
     * @memberOf _                                                                                                     // 10826
     * @category String                                                                                                // 10827
     * @param {string} [string=''] The string to trim.                                                                 // 10828
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10829
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10830
     * @returns {string} Returns the trimmed string.                                                                   // 10831
     * @example                                                                                                        // 10832
     *                                                                                                                 // 10833
     * _.trim('  abc  ');                                                                                              // 10834
     * // => 'abc'                                                                                                     // 10835
     *                                                                                                                 // 10836
     * _.trim('-_-abc-_-', '_-');                                                                                      // 10837
     * // => 'abc'                                                                                                     // 10838
     *                                                                                                                 // 10839
     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 10840
     * // => ['foo', 'bar']                                                                                            // 10841
     */                                                                                                                // 10842
    function trim(string, chars, guard) {                                                                              // 10843
      var value = string;                                                                                              // 10844
      string = baseToString(string);                                                                                   // 10845
      if (!string) {                                                                                                   // 10846
        return string;                                                                                                 // 10847
      }                                                                                                                // 10848
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10849
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);                                  // 10850
      }                                                                                                                // 10851
      chars = (chars + '');                                                                                            // 10852
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);                          // 10853
    }                                                                                                                  // 10854
                                                                                                                       // 10855
    /**                                                                                                                // 10856
     * Removes leading whitespace or specified characters from `string`.                                               // 10857
     *                                                                                                                 // 10858
     * @static                                                                                                         // 10859
     * @memberOf _                                                                                                     // 10860
     * @category String                                                                                                // 10861
     * @param {string} [string=''] The string to trim.                                                                 // 10862
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10863
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10864
     * @returns {string} Returns the trimmed string.                                                                   // 10865
     * @example                                                                                                        // 10866
     *                                                                                                                 // 10867
     * _.trimLeft('  abc  ');                                                                                          // 10868
     * // => 'abc  '                                                                                                   // 10869
     *                                                                                                                 // 10870
     * _.trimLeft('-_-abc-_-', '_-');                                                                                  // 10871
     * // => 'abc-_-'                                                                                                  // 10872
     */                                                                                                                // 10873
    function trimLeft(string, chars, guard) {                                                                          // 10874
      var value = string;                                                                                              // 10875
      string = baseToString(string);                                                                                   // 10876
      if (!string) {                                                                                                   // 10877
        return string;                                                                                                 // 10878
      }                                                                                                                // 10879
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10880
        return string.slice(trimmedLeftIndex(string));                                                                 // 10881
      }                                                                                                                // 10882
      return string.slice(charsLeftIndex(string, (chars + '')));                                                       // 10883
    }                                                                                                                  // 10884
                                                                                                                       // 10885
    /**                                                                                                                // 10886
     * Removes trailing whitespace or specified characters from `string`.                                              // 10887
     *                                                                                                                 // 10888
     * @static                                                                                                         // 10889
     * @memberOf _                                                                                                     // 10890
     * @category String                                                                                                // 10891
     * @param {string} [string=''] The string to trim.                                                                 // 10892
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 10893
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10894
     * @returns {string} Returns the trimmed string.                                                                   // 10895
     * @example                                                                                                        // 10896
     *                                                                                                                 // 10897
     * _.trimRight('  abc  ');                                                                                         // 10898
     * // => '  abc'                                                                                                   // 10899
     *                                                                                                                 // 10900
     * _.trimRight('-_-abc-_-', '_-');                                                                                 // 10901
     * // => '-_-abc'                                                                                                  // 10902
     */                                                                                                                // 10903
    function trimRight(string, chars, guard) {                                                                         // 10904
      var value = string;                                                                                              // 10905
      string = baseToString(string);                                                                                   // 10906
      if (!string) {                                                                                                   // 10907
        return string;                                                                                                 // 10908
      }                                                                                                                // 10909
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 10910
        return string.slice(0, trimmedRightIndex(string) + 1);                                                         // 10911
      }                                                                                                                // 10912
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);                                               // 10913
    }                                                                                                                  // 10914
                                                                                                                       // 10915
    /**                                                                                                                // 10916
     * Truncates `string` if it's longer than the given maximum string length.                                         // 10917
     * The last characters of the truncated string are replaced with the omission                                      // 10918
     * string which defaults to "...".                                                                                 // 10919
     *                                                                                                                 // 10920
     * @static                                                                                                         // 10921
     * @memberOf _                                                                                                     // 10922
     * @category String                                                                                                // 10923
     * @param {string} [string=''] The string to truncate.                                                             // 10924
     * @param {Object|number} [options] The options object or maximum string length.                                   // 10925
     * @param {number} [options.length=30] The maximum string length.                                                  // 10926
     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 10927
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 10928
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10929
     * @returns {string} Returns the truncated string.                                                                 // 10930
     * @example                                                                                                        // 10931
     *                                                                                                                 // 10932
     * _.trunc('hi-diddly-ho there, neighborino');                                                                     // 10933
     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 10934
     *                                                                                                                 // 10935
     * _.trunc('hi-diddly-ho there, neighborino', 24);                                                                 // 10936
     * // => 'hi-diddly-ho there, n...'                                                                                // 10937
     *                                                                                                                 // 10938
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10939
     *   'length': 24,                                                                                                 // 10940
     *   'separator': ' '                                                                                              // 10941
     * });                                                                                                             // 10942
     * // => 'hi-diddly-ho there,...'                                                                                  // 10943
     *                                                                                                                 // 10944
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10945
     *   'length': 24,                                                                                                 // 10946
     *   'separator': /,? +/                                                                                           // 10947
     * });                                                                                                             // 10948
     * // => 'hi-diddly-ho there...'                                                                                   // 10949
     *                                                                                                                 // 10950
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 10951
     *   'omission': ' [...]'                                                                                          // 10952
     * });                                                                                                             // 10953
     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 10954
     */                                                                                                                // 10955
    function trunc(string, options, guard) {                                                                           // 10956
      if (guard && isIterateeCall(string, options, guard)) {                                                           // 10957
        options = undefined;                                                                                           // 10958
      }                                                                                                                // 10959
      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 10960
          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 10961
                                                                                                                       // 10962
      if (options != null) {                                                                                           // 10963
        if (isObject(options)) {                                                                                       // 10964
          var separator = 'separator' in options ? options.separator : separator;                                      // 10965
          length = 'length' in options ? (+options.length || 0) : length;                                              // 10966
          omission = 'omission' in options ? baseToString(options.omission) : omission;                                // 10967
        } else {                                                                                                       // 10968
          length = +options || 0;                                                                                      // 10969
        }                                                                                                              // 10970
      }                                                                                                                // 10971
      string = baseToString(string);                                                                                   // 10972
      if (length >= string.length) {                                                                                   // 10973
        return string;                                                                                                 // 10974
      }                                                                                                                // 10975
      var end = length - omission.length;                                                                              // 10976
      if (end < 1) {                                                                                                   // 10977
        return omission;                                                                                               // 10978
      }                                                                                                                // 10979
      var result = string.slice(0, end);                                                                               // 10980
      if (separator == null) {                                                                                         // 10981
        return result + omission;                                                                                      // 10982
      }                                                                                                                // 10983
      if (isRegExp(separator)) {                                                                                       // 10984
        if (string.slice(end).search(separator)) {                                                                     // 10985
          var match,                                                                                                   // 10986
              newEnd,                                                                                                  // 10987
              substring = string.slice(0, end);                                                                        // 10988
                                                                                                                       // 10989
          if (!separator.global) {                                                                                     // 10990
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');                               // 10991
          }                                                                                                            // 10992
          separator.lastIndex = 0;                                                                                     // 10993
          while ((match = separator.exec(substring))) {                                                                // 10994
            newEnd = match.index;                                                                                      // 10995
          }                                                                                                            // 10996
          result = result.slice(0, newEnd == null ? end : newEnd);                                                     // 10997
        }                                                                                                              // 10998
      } else if (string.indexOf(separator, end) != end) {                                                              // 10999
        var index = result.lastIndexOf(separator);                                                                     // 11000
        if (index > -1) {                                                                                              // 11001
          result = result.slice(0, index);                                                                             // 11002
        }                                                                                                              // 11003
      }                                                                                                                // 11004
      return result + omission;                                                                                        // 11005
    }                                                                                                                  // 11006
                                                                                                                       // 11007
    /**                                                                                                                // 11008
     * The inverse of `_.escape`; this method converts the HTML entities                                               // 11009
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 11010
     * corresponding characters.                                                                                       // 11011
     *                                                                                                                 // 11012
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 11013
     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 11014
     *                                                                                                                 // 11015
     * @static                                                                                                         // 11016
     * @memberOf _                                                                                                     // 11017
     * @category String                                                                                                // 11018
     * @param {string} [string=''] The string to unescape.                                                             // 11019
     * @returns {string} Returns the unescaped string.                                                                 // 11020
     * @example                                                                                                        // 11021
     *                                                                                                                 // 11022
     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 11023
     * // => 'fred, barney, & pebbles'                                                                                 // 11024
     */                                                                                                                // 11025
    function unescape(string) {                                                                                        // 11026
      string = baseToString(string);                                                                                   // 11027
      return (string && reHasEscapedHtml.test(string))                                                                 // 11028
        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 11029
        : string;                                                                                                      // 11030
    }                                                                                                                  // 11031
                                                                                                                       // 11032
    /**                                                                                                                // 11033
     * Splits `string` into an array of its words.                                                                     // 11034
     *                                                                                                                 // 11035
     * @static                                                                                                         // 11036
     * @memberOf _                                                                                                     // 11037
     * @category String                                                                                                // 11038
     * @param {string} [string=''] The string to inspect.                                                              // 11039
     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 11040
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11041
     * @returns {Array} Returns the words of `string`.                                                                 // 11042
     * @example                                                                                                        // 11043
     *                                                                                                                 // 11044
     * _.words('fred, barney, & pebbles');                                                                             // 11045
     * // => ['fred', 'barney', 'pebbles']                                                                             // 11046
     *                                                                                                                 // 11047
     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 11048
     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 11049
     */                                                                                                                // 11050
    function words(string, pattern, guard) {                                                                           // 11051
      if (guard && isIterateeCall(string, pattern, guard)) {                                                           // 11052
        pattern = undefined;                                                                                           // 11053
      }                                                                                                                // 11054
      string = baseToString(string);                                                                                   // 11055
      return string.match(pattern || reWords) || [];                                                                   // 11056
    }                                                                                                                  // 11057
                                                                                                                       // 11058
    /*------------------------------------------------------------------------*/                                       // 11059
                                                                                                                       // 11060
    /**                                                                                                                // 11061
     * Attempts to invoke `func`, returning either the result or the caught error                                      // 11062
     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 11063
     *                                                                                                                 // 11064
     * @static                                                                                                         // 11065
     * @memberOf _                                                                                                     // 11066
     * @category Utility                                                                                               // 11067
     * @param {Function} func The function to attempt.                                                                 // 11068
     * @returns {*} Returns the `func` result or error object.                                                         // 11069
     * @example                                                                                                        // 11070
     *                                                                                                                 // 11071
     * // avoid throwing errors for invalid selectors                                                                  // 11072
     * var elements = _.attempt(function(selector) {                                                                   // 11073
     *   return document.querySelectorAll(selector);                                                                   // 11074
     * }, '>_>');                                                                                                      // 11075
     *                                                                                                                 // 11076
     * if (_.isError(elements)) {                                                                                      // 11077
     *   elements = [];                                                                                                // 11078
     * }                                                                                                               // 11079
     */                                                                                                                // 11080
    var attempt = restParam(function(func, args) {                                                                     // 11081
      try {                                                                                                            // 11082
        return func.apply(undefined, args);                                                                            // 11083
      } catch(e) {                                                                                                     // 11084
        return isError(e) ? e : new Error(e);                                                                          // 11085
      }                                                                                                                // 11086
    });                                                                                                                // 11087
                                                                                                                       // 11088
    /**                                                                                                                // 11089
     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 11090
     * and arguments of the created function. If `func` is a property name the                                         // 11091
     * created callback returns the property value for a given element. If `func`                                      // 11092
     * is an object the created callback returns `true` for elements that contain                                      // 11093
     * the equivalent object properties, otherwise it returns `false`.                                                 // 11094
     *                                                                                                                 // 11095
     * @static                                                                                                         // 11096
     * @memberOf _                                                                                                     // 11097
     * @alias iteratee                                                                                                 // 11098
     * @category Utility                                                                                               // 11099
     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 11100
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 11101
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11102
     * @returns {Function} Returns the callback.                                                                       // 11103
     * @example                                                                                                        // 11104
     *                                                                                                                 // 11105
     * var users = [                                                                                                   // 11106
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11107
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11108
     * ];                                                                                                              // 11109
     *                                                                                                                 // 11110
     * // wrap to create custom callback shorthands                                                                    // 11111
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {                                             // 11112
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);                                                                // 11113
     *   if (!match) {                                                                                                 // 11114
     *     return callback(func, thisArg);                                                                             // 11115
     *   }                                                                                                             // 11116
     *   return function(object) {                                                                                     // 11117
     *     return match[2] == 'gt'                                                                                     // 11118
     *       ? object[match[1]] > match[3]                                                                             // 11119
     *       : object[match[1]] < match[3];                                                                            // 11120
     *   };                                                                                                            // 11121
     * });                                                                                                             // 11122
     *                                                                                                                 // 11123
     * _.filter(users, 'age__gt36');                                                                                   // 11124
     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 11125
     */                                                                                                                // 11126
    function callback(func, thisArg, guard) {                                                                          // 11127
      if (guard && isIterateeCall(func, thisArg, guard)) {                                                             // 11128
        thisArg = undefined;                                                                                           // 11129
      }                                                                                                                // 11130
      return isObjectLike(func)                                                                                        // 11131
        ? matches(func)                                                                                                // 11132
        : baseCallback(func, thisArg);                                                                                 // 11133
    }                                                                                                                  // 11134
                                                                                                                       // 11135
    /**                                                                                                                // 11136
     * Creates a function that returns `value`.                                                                        // 11137
     *                                                                                                                 // 11138
     * @static                                                                                                         // 11139
     * @memberOf _                                                                                                     // 11140
     * @category Utility                                                                                               // 11141
     * @param {*} value The value to return from the new function.                                                     // 11142
     * @returns {Function} Returns the new function.                                                                   // 11143
     * @example                                                                                                        // 11144
     *                                                                                                                 // 11145
     * var object = { 'user': 'fred' };                                                                                // 11146
     * var getter = _.constant(object);                                                                                // 11147
     *                                                                                                                 // 11148
     * getter() === object;                                                                                            // 11149
     * // => true                                                                                                      // 11150
     */                                                                                                                // 11151
    function constant(value) {                                                                                         // 11152
      return function() {                                                                                              // 11153
        return value;                                                                                                  // 11154
      };                                                                                                               // 11155
    }                                                                                                                  // 11156
                                                                                                                       // 11157
    /**                                                                                                                // 11158
     * This method returns the first argument provided to it.                                                          // 11159
     *                                                                                                                 // 11160
     * @static                                                                                                         // 11161
     * @memberOf _                                                                                                     // 11162
     * @category Utility                                                                                               // 11163
     * @param {*} value Any value.                                                                                     // 11164
     * @returns {*} Returns `value`.                                                                                   // 11165
     * @example                                                                                                        // 11166
     *                                                                                                                 // 11167
     * var object = { 'user': 'fred' };                                                                                // 11168
     *                                                                                                                 // 11169
     * _.identity(object) === object;                                                                                  // 11170
     * // => true                                                                                                      // 11171
     */                                                                                                                // 11172
    function identity(value) {                                                                                         // 11173
      return value;                                                                                                    // 11174
    }                                                                                                                  // 11175
                                                                                                                       // 11176
    /**                                                                                                                // 11177
     * Creates a function that performs a deep comparison between a given object                                       // 11178
     * and `source`, returning `true` if the given object has equivalent property                                      // 11179
     * values, else `false`.                                                                                           // 11180
     *                                                                                                                 // 11181
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11182
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11183
     * their own, not inherited, enumerable properties. For comparing a single                                         // 11184
     * own or inherited property value see `_.matchesProperty`.                                                        // 11185
     *                                                                                                                 // 11186
     * @static                                                                                                         // 11187
     * @memberOf _                                                                                                     // 11188
     * @category Utility                                                                                               // 11189
     * @param {Object} source The object of property values to match.                                                  // 11190
     * @returns {Function} Returns the new function.                                                                   // 11191
     * @example                                                                                                        // 11192
     *                                                                                                                 // 11193
     * var users = [                                                                                                   // 11194
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 11195
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 11196
     * ];                                                                                                              // 11197
     *                                                                                                                 // 11198
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 11199
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 11200
     */                                                                                                                // 11201
    function matches(source) {                                                                                         // 11202
      return baseMatches(baseClone(source, true));                                                                     // 11203
    }                                                                                                                  // 11204
                                                                                                                       // 11205
    /**                                                                                                                // 11206
     * Creates a function that compares the property value of `path` on a given                                        // 11207
     * object to `value`.                                                                                              // 11208
     *                                                                                                                 // 11209
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11210
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11211
     * their own, not inherited, enumerable properties.                                                                // 11212
     *                                                                                                                 // 11213
     * @static                                                                                                         // 11214
     * @memberOf _                                                                                                     // 11215
     * @category Utility                                                                                               // 11216
     * @param {Array|string} path The path of the property to get.                                                     // 11217
     * @param {*} srcValue The value to match.                                                                         // 11218
     * @returns {Function} Returns the new function.                                                                   // 11219
     * @example                                                                                                        // 11220
     *                                                                                                                 // 11221
     * var users = [                                                                                                   // 11222
     *   { 'user': 'barney' },                                                                                         // 11223
     *   { 'user': 'fred' }                                                                                            // 11224
     * ];                                                                                                              // 11225
     *                                                                                                                 // 11226
     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 11227
     * // => { 'user': 'fred' }                                                                                        // 11228
     */                                                                                                                // 11229
    function matchesProperty(path, srcValue) {                                                                         // 11230
      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 11231
    }                                                                                                                  // 11232
                                                                                                                       // 11233
    /**                                                                                                                // 11234
     * Creates a function that invokes the method at `path` on a given object.                                         // 11235
     * Any additional arguments are provided to the invoked method.                                                    // 11236
     *                                                                                                                 // 11237
     * @static                                                                                                         // 11238
     * @memberOf _                                                                                                     // 11239
     * @category Utility                                                                                               // 11240
     * @param {Array|string} path The path of the method to invoke.                                                    // 11241
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11242
     * @returns {Function} Returns the new function.                                                                   // 11243
     * @example                                                                                                        // 11244
     *                                                                                                                 // 11245
     * var objects = [                                                                                                 // 11246
     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 11247
     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 11248
     * ];                                                                                                              // 11249
     *                                                                                                                 // 11250
     * _.map(objects, _.method('a.b.c'));                                                                              // 11251
     * // => [2, 1]                                                                                                    // 11252
     *                                                                                                                 // 11253
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                                // 11254
     * // => [1, 2]                                                                                                    // 11255
     */                                                                                                                // 11256
    var method = restParam(function(path, args) {                                                                      // 11257
      return function(object) {                                                                                        // 11258
        return invokePath(object, path, args);                                                                         // 11259
      };                                                                                                               // 11260
    });                                                                                                                // 11261
                                                                                                                       // 11262
    /**                                                                                                                // 11263
     * The opposite of `_.method`; this method creates a function that invokes                                         // 11264
     * the method at a given path on `object`. Any additional arguments are                                            // 11265
     * provided to the invoked method.                                                                                 // 11266
     *                                                                                                                 // 11267
     * @static                                                                                                         // 11268
     * @memberOf _                                                                                                     // 11269
     * @category Utility                                                                                               // 11270
     * @param {Object} object The object to query.                                                                     // 11271
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11272
     * @returns {Function} Returns the new function.                                                                   // 11273
     * @example                                                                                                        // 11274
     *                                                                                                                 // 11275
     * var array = _.times(3, _.constant),                                                                             // 11276
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11277
     *                                                                                                                 // 11278
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 11279
     * // => [2, 0]                                                                                                    // 11280
     *                                                                                                                 // 11281
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 11282
     * // => [2, 0]                                                                                                    // 11283
     */                                                                                                                // 11284
    var methodOf = restParam(function(object, args) {                                                                  // 11285
      return function(path) {                                                                                          // 11286
        return invokePath(object, path, args);                                                                         // 11287
      };                                                                                                               // 11288
    });                                                                                                                // 11289
                                                                                                                       // 11290
    /**                                                                                                                // 11291
     * Adds all own enumerable function properties of a source object to the                                           // 11292
     * destination object. If `object` is a function then methods are added to                                         // 11293
     * its prototype as well.                                                                                          // 11294
     *                                                                                                                 // 11295
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 11296
     * avoid conflicts caused by modifying the original.                                                               // 11297
     *                                                                                                                 // 11298
     * @static                                                                                                         // 11299
     * @memberOf _                                                                                                     // 11300
     * @category Utility                                                                                               // 11301
     * @param {Function|Object} [object=lodash] The destination object.                                                // 11302
     * @param {Object} source The object of functions to add.                                                          // 11303
     * @param {Object} [options] The options object.                                                                   // 11304
     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 11305
     *  are chainable.                                                                                                 // 11306
     * @returns {Function|Object} Returns `object`.                                                                    // 11307
     * @example                                                                                                        // 11308
     *                                                                                                                 // 11309
     * function vowels(string) {                                                                                       // 11310
     *   return _.filter(string, function(v) {                                                                         // 11311
     *     return /[aeiou]/i.test(v);                                                                                  // 11312
     *   });                                                                                                           // 11313
     * }                                                                                                               // 11314
     *                                                                                                                 // 11315
     * _.mixin({ 'vowels': vowels });                                                                                  // 11316
     * _.vowels('fred');                                                                                               // 11317
     * // => ['e']                                                                                                     // 11318
     *                                                                                                                 // 11319
     * _('fred').vowels().value();                                                                                     // 11320
     * // => ['e']                                                                                                     // 11321
     *                                                                                                                 // 11322
     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 11323
     * _('fred').vowels();                                                                                             // 11324
     * // => ['e']                                                                                                     // 11325
     */                                                                                                                // 11326
    function mixin(object, source, options) {                                                                          // 11327
      if (options == null) {                                                                                           // 11328
        var isObj = isObject(source),                                                                                  // 11329
            props = isObj ? keys(source) : undefined,                                                                  // 11330
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;                          // 11331
                                                                                                                       // 11332
        if (!(methodNames ? methodNames.length : isObj)) {                                                             // 11333
          methodNames = false;                                                                                         // 11334
          options = source;                                                                                            // 11335
          source = object;                                                                                             // 11336
          object = this;                                                                                               // 11337
        }                                                                                                              // 11338
      }                                                                                                                // 11339
      if (!methodNames) {                                                                                              // 11340
        methodNames = baseFunctions(source, keys(source));                                                             // 11341
      }                                                                                                                // 11342
      var chain = true,                                                                                                // 11343
          index = -1,                                                                                                  // 11344
          isFunc = isFunction(object),                                                                                 // 11345
          length = methodNames.length;                                                                                 // 11346
                                                                                                                       // 11347
      if (options === false) {                                                                                         // 11348
        chain = false;                                                                                                 // 11349
      } else if (isObject(options) && 'chain' in options) {                                                            // 11350
        chain = options.chain;                                                                                         // 11351
      }                                                                                                                // 11352
      while (++index < length) {                                                                                       // 11353
        var methodName = methodNames[index],                                                                           // 11354
            func = source[methodName];                                                                                 // 11355
                                                                                                                       // 11356
        object[methodName] = func;                                                                                     // 11357
        if (isFunc) {                                                                                                  // 11358
          object.prototype[methodName] = (function(func) {                                                             // 11359
            return function() {                                                                                        // 11360
              var chainAll = this.__chain__;                                                                           // 11361
              if (chain || chainAll) {                                                                                 // 11362
                var result = object(this.__wrapped__),                                                                 // 11363
                    actions = result.__actions__ = arrayCopy(this.__actions__);                                        // 11364
                                                                                                                       // 11365
                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                  // 11366
                result.__chain__ = chainAll;                                                                           // 11367
                return result;                                                                                         // 11368
              }                                                                                                        // 11369
              return func.apply(object, arrayPush([this.value()], arguments));                                         // 11370
            };                                                                                                         // 11371
          }(func));                                                                                                    // 11372
        }                                                                                                              // 11373
      }                                                                                                                // 11374
      return object;                                                                                                   // 11375
    }                                                                                                                  // 11376
                                                                                                                       // 11377
    /**                                                                                                                // 11378
     * Reverts the `_` variable to its previous value and returns a reference to                                       // 11379
     * the `lodash` function.                                                                                          // 11380
     *                                                                                                                 // 11381
     * @static                                                                                                         // 11382
     * @memberOf _                                                                                                     // 11383
     * @category Utility                                                                                               // 11384
     * @returns {Function} Returns the `lodash` function.                                                              // 11385
     * @example                                                                                                        // 11386
     *                                                                                                                 // 11387
     * var lodash = _.noConflict();                                                                                    // 11388
     */                                                                                                                // 11389
    function noConflict() {                                                                                            // 11390
      root._ = oldDash;                                                                                                // 11391
      return this;                                                                                                     // 11392
    }                                                                                                                  // 11393
                                                                                                                       // 11394
    /**                                                                                                                // 11395
     * A no-operation function that returns `undefined` regardless of the                                              // 11396
     * arguments it receives.                                                                                          // 11397
     *                                                                                                                 // 11398
     * @static                                                                                                         // 11399
     * @memberOf _                                                                                                     // 11400
     * @category Utility                                                                                               // 11401
     * @example                                                                                                        // 11402
     *                                                                                                                 // 11403
     * var object = { 'user': 'fred' };                                                                                // 11404
     *                                                                                                                 // 11405
     * _.noop(object) === undefined;                                                                                   // 11406
     * // => true                                                                                                      // 11407
     */                                                                                                                // 11408
    function noop() {                                                                                                  // 11409
      // No operation performed.                                                                                       // 11410
    }                                                                                                                  // 11411
                                                                                                                       // 11412
    /**                                                                                                                // 11413
     * Creates a function that returns the property value at `path` on a                                               // 11414
     * given object.                                                                                                   // 11415
     *                                                                                                                 // 11416
     * @static                                                                                                         // 11417
     * @memberOf _                                                                                                     // 11418
     * @category Utility                                                                                               // 11419
     * @param {Array|string} path The path of the property to get.                                                     // 11420
     * @returns {Function} Returns the new function.                                                                   // 11421
     * @example                                                                                                        // 11422
     *                                                                                                                 // 11423
     * var objects = [                                                                                                 // 11424
     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 11425
     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 11426
     * ];                                                                                                              // 11427
     *                                                                                                                 // 11428
     * _.map(objects, _.property('a.b.c'));                                                                            // 11429
     * // => [2, 1]                                                                                                    // 11430
     *                                                                                                                 // 11431
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                               // 11432
     * // => [1, 2]                                                                                                    // 11433
     */                                                                                                                // 11434
    function property(path) {                                                                                          // 11435
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 11436
    }                                                                                                                  // 11437
                                                                                                                       // 11438
    /**                                                                                                                // 11439
     * The opposite of `_.property`; this method creates a function that returns                                       // 11440
     * the property value at a given path on `object`.                                                                 // 11441
     *                                                                                                                 // 11442
     * @static                                                                                                         // 11443
     * @memberOf _                                                                                                     // 11444
     * @category Utility                                                                                               // 11445
     * @param {Object} object The object to query.                                                                     // 11446
     * @returns {Function} Returns the new function.                                                                   // 11447
     * @example                                                                                                        // 11448
     *                                                                                                                 // 11449
     * var array = [0, 1, 2],                                                                                          // 11450
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11451
     *                                                                                                                 // 11452
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 11453
     * // => [2, 0]                                                                                                    // 11454
     *                                                                                                                 // 11455
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 11456
     * // => [2, 0]                                                                                                    // 11457
     */                                                                                                                // 11458
    function propertyOf(object) {                                                                                      // 11459
      return function(path) {                                                                                          // 11460
        return baseGet(object, toPath(path), (path + ''));                                                             // 11461
      };                                                                                                               // 11462
    }                                                                                                                  // 11463
                                                                                                                       // 11464
    /**                                                                                                                // 11465
     * Creates an array of numbers (positive and/or negative) progressing from                                         // 11466
     * `start` up to, but not including, `end`. If `end` is not specified it's                                         // 11467
     * set to `start` with `start` then set to `0`. If `end` is less than `start`                                      // 11468
     * a zero-length range is created unless a negative `step` is specified.                                           // 11469
     *                                                                                                                 // 11470
     * @static                                                                                                         // 11471
     * @memberOf _                                                                                                     // 11472
     * @category Utility                                                                                               // 11473
     * @param {number} [start=0] The start of the range.                                                               // 11474
     * @param {number} end The end of the range.                                                                       // 11475
     * @param {number} [step=1] The value to increment or decrement by.                                                // 11476
     * @returns {Array} Returns the new array of numbers.                                                              // 11477
     * @example                                                                                                        // 11478
     *                                                                                                                 // 11479
     * _.range(4);                                                                                                     // 11480
     * // => [0, 1, 2, 3]                                                                                              // 11481
     *                                                                                                                 // 11482
     * _.range(1, 5);                                                                                                  // 11483
     * // => [1, 2, 3, 4]                                                                                              // 11484
     *                                                                                                                 // 11485
     * _.range(0, 20, 5);                                                                                              // 11486
     * // => [0, 5, 10, 15]                                                                                            // 11487
     *                                                                                                                 // 11488
     * _.range(0, -4, -1);                                                                                             // 11489
     * // => [0, -1, -2, -3]                                                                                           // 11490
     *                                                                                                                 // 11491
     * _.range(1, 4, 0);                                                                                               // 11492
     * // => [1, 1, 1]                                                                                                 // 11493
     *                                                                                                                 // 11494
     * _.range(0);                                                                                                     // 11495
     * // => []                                                                                                        // 11496
     */                                                                                                                // 11497
    function range(start, end, step) {                                                                                 // 11498
      if (step && isIterateeCall(start, end, step)) {                                                                  // 11499
        end = step = undefined;                                                                                        // 11500
      }                                                                                                                // 11501
      start = +start || 0;                                                                                             // 11502
      step = step == null ? 1 : (+step || 0);                                                                          // 11503
                                                                                                                       // 11504
      if (end == null) {                                                                                               // 11505
        end = start;                                                                                                   // 11506
        start = 0;                                                                                                     // 11507
      } else {                                                                                                         // 11508
        end = +end || 0;                                                                                               // 11509
      }                                                                                                                // 11510
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.                                         // 11511
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.                                                   // 11512
      var index = -1,                                                                                                  // 11513
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 11514
          result = Array(length);                                                                                      // 11515
                                                                                                                       // 11516
      while (++index < length) {                                                                                       // 11517
        result[index] = start;                                                                                         // 11518
        start += step;                                                                                                 // 11519
      }                                                                                                                // 11520
      return result;                                                                                                   // 11521
    }                                                                                                                  // 11522
                                                                                                                       // 11523
    /**                                                                                                                // 11524
     * Invokes the iteratee function `n` times, returning an array of the results                                      // 11525
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with                                       // 11526
     * one argument; (index).                                                                                          // 11527
     *                                                                                                                 // 11528
     * @static                                                                                                         // 11529
     * @memberOf _                                                                                                     // 11530
     * @category Utility                                                                                               // 11531
     * @param {number} n The number of times to invoke `iteratee`.                                                     // 11532
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11533
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11534
     * @returns {Array} Returns the array of results.                                                                  // 11535
     * @example                                                                                                        // 11536
     *                                                                                                                 // 11537
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));                                                   // 11538
     * // => [3, 6, 4]                                                                                                 // 11539
     *                                                                                                                 // 11540
     * _.times(3, function(n) {                                                                                        // 11541
     *   mage.castSpell(n);                                                                                            // 11542
     * });                                                                                                             // 11543
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`                                     // 11544
     *                                                                                                                 // 11545
     * _.times(3, function(n) {                                                                                        // 11546
     *   this.cast(n);                                                                                                 // 11547
     * }, mage);                                                                                                       // 11548
     * // => also invokes `mage.castSpell(n)` three times                                                              // 11549
     */                                                                                                                // 11550
    function times(n, iteratee, thisArg) {                                                                             // 11551
      n = nativeFloor(n);                                                                                              // 11552
                                                                                                                       // 11553
      // Exit early to avoid a JSC JIT bug in Safari 8                                                                 // 11554
      // where `Array(0)` is treated as `Array(1)`.                                                                    // 11555
      if (n < 1 || !nativeIsFinite(n)) {                                                                               // 11556
        return [];                                                                                                     // 11557
      }                                                                                                                // 11558
      var index = -1,                                                                                                  // 11559
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));                                                              // 11560
                                                                                                                       // 11561
      iteratee = bindCallback(iteratee, thisArg, 1);                                                                   // 11562
      while (++index < n) {                                                                                            // 11563
        if (index < MAX_ARRAY_LENGTH) {                                                                                // 11564
          result[index] = iteratee(index);                                                                             // 11565
        } else {                                                                                                       // 11566
          iteratee(index);                                                                                             // 11567
        }                                                                                                              // 11568
      }                                                                                                                // 11569
      return result;                                                                                                   // 11570
    }                                                                                                                  // 11571
                                                                                                                       // 11572
    /**                                                                                                                // 11573
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 11574
     *                                                                                                                 // 11575
     * @static                                                                                                         // 11576
     * @memberOf _                                                                                                     // 11577
     * @category Utility                                                                                               // 11578
     * @param {string} [prefix] The value to prefix the ID with.                                                       // 11579
     * @returns {string} Returns the unique ID.                                                                        // 11580
     * @example                                                                                                        // 11581
     *                                                                                                                 // 11582
     * _.uniqueId('contact_');                                                                                         // 11583
     * // => 'contact_104'                                                                                             // 11584
     *                                                                                                                 // 11585
     * _.uniqueId();                                                                                                   // 11586
     * // => '105'                                                                                                     // 11587
     */                                                                                                                // 11588
    function uniqueId(prefix) {                                                                                        // 11589
      var id = ++idCounter;                                                                                            // 11590
      return baseToString(prefix) + id;                                                                                // 11591
    }                                                                                                                  // 11592
                                                                                                                       // 11593
    /*------------------------------------------------------------------------*/                                       // 11594
                                                                                                                       // 11595
    /**                                                                                                                // 11596
     * Adds two numbers.                                                                                               // 11597
     *                                                                                                                 // 11598
     * @static                                                                                                         // 11599
     * @memberOf _                                                                                                     // 11600
     * @category Math                                                                                                  // 11601
     * @param {number} augend The first number to add.                                                                 // 11602
     * @param {number} addend The second number to add.                                                                // 11603
     * @returns {number} Returns the sum.                                                                              // 11604
     * @example                                                                                                        // 11605
     *                                                                                                                 // 11606
     * _.add(6, 4);                                                                                                    // 11607
     * // => 10                                                                                                        // 11608
     */                                                                                                                // 11609
    function add(augend, addend) {                                                                                     // 11610
      return (+augend || 0) + (+addend || 0);                                                                          // 11611
    }                                                                                                                  // 11612
                                                                                                                       // 11613
    /**                                                                                                                // 11614
     * Calculates `n` rounded up to `precision`.                                                                       // 11615
     *                                                                                                                 // 11616
     * @static                                                                                                         // 11617
     * @memberOf _                                                                                                     // 11618
     * @category Math                                                                                                  // 11619
     * @param {number} n The number to round up.                                                                       // 11620
     * @param {number} [precision=0] The precision to round up to.                                                     // 11621
     * @returns {number} Returns the rounded up number.                                                                // 11622
     * @example                                                                                                        // 11623
     *                                                                                                                 // 11624
     * _.ceil(4.006);                                                                                                  // 11625
     * // => 5                                                                                                         // 11626
     *                                                                                                                 // 11627
     * _.ceil(6.004, 2);                                                                                               // 11628
     * // => 6.01                                                                                                      // 11629
     *                                                                                                                 // 11630
     * _.ceil(6040, -2);                                                                                               // 11631
     * // => 6100                                                                                                      // 11632
     */                                                                                                                // 11633
    var ceil = createRound('ceil');                                                                                    // 11634
                                                                                                                       // 11635
    /**                                                                                                                // 11636
     * Calculates `n` rounded down to `precision`.                                                                     // 11637
     *                                                                                                                 // 11638
     * @static                                                                                                         // 11639
     * @memberOf _                                                                                                     // 11640
     * @category Math                                                                                                  // 11641
     * @param {number} n The number to round down.                                                                     // 11642
     * @param {number} [precision=0] The precision to round down to.                                                   // 11643
     * @returns {number} Returns the rounded down number.                                                              // 11644
     * @example                                                                                                        // 11645
     *                                                                                                                 // 11646
     * _.floor(4.006);                                                                                                 // 11647
     * // => 4                                                                                                         // 11648
     *                                                                                                                 // 11649
     * _.floor(0.046, 2);                                                                                              // 11650
     * // => 0.04                                                                                                      // 11651
     *                                                                                                                 // 11652
     * _.floor(4060, -2);                                                                                              // 11653
     * // => 4000                                                                                                      // 11654
     */                                                                                                                // 11655
    var floor = createRound('floor');                                                                                  // 11656
                                                                                                                       // 11657
    /**                                                                                                                // 11658
     * Gets the maximum value of `collection`. If `collection` is empty or falsey                                      // 11659
     * `-Infinity` is returned. If an iteratee function is provided it's invoked                                       // 11660
     * for each value in `collection` to generate the criterion by which the value                                     // 11661
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11662
     * arguments: (value, index, collection).                                                                          // 11663
     *                                                                                                                 // 11664
     * If a property name is provided for `iteratee` the created `_.property`                                          // 11665
     * style callback returns the property value of the given element.                                                 // 11666
     *                                                                                                                 // 11667
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11668
     * style callback returns `true` for elements that have a matching property                                        // 11669
     * value, else `false`.                                                                                            // 11670
     *                                                                                                                 // 11671
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11672
     * callback returns `true` for elements that have the properties of the given                                      // 11673
     * object, else `false`.                                                                                           // 11674
     *                                                                                                                 // 11675
     * @static                                                                                                         // 11676
     * @memberOf _                                                                                                     // 11677
     * @category Math                                                                                                  // 11678
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11679
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11680
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11681
     * @returns {*} Returns the maximum value.                                                                         // 11682
     * @example                                                                                                        // 11683
     *                                                                                                                 // 11684
     * _.max([4, 2, 8, 6]);                                                                                            // 11685
     * // => 8                                                                                                         // 11686
     *                                                                                                                 // 11687
     * _.max([]);                                                                                                      // 11688
     * // => -Infinity                                                                                                 // 11689
     *                                                                                                                 // 11690
     * var users = [                                                                                                   // 11691
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11692
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11693
     * ];                                                                                                              // 11694
     *                                                                                                                 // 11695
     * _.max(users, function(chr) {                                                                                    // 11696
     *   return chr.age;                                                                                               // 11697
     * });                                                                                                             // 11698
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11699
     *                                                                                                                 // 11700
     * // using the `_.property` callback shorthand                                                                    // 11701
     * _.max(users, 'age');                                                                                            // 11702
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11703
     */                                                                                                                // 11704
    var max = createExtremum(gt, NEGATIVE_INFINITY);                                                                   // 11705
                                                                                                                       // 11706
    /**                                                                                                                // 11707
     * Gets the minimum value of `collection`. If `collection` is empty or falsey                                      // 11708
     * `Infinity` is returned. If an iteratee function is provided it's invoked                                        // 11709
     * for each value in `collection` to generate the criterion by which the value                                     // 11710
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11711
     * arguments: (value, index, collection).                                                                          // 11712
     *                                                                                                                 // 11713
     * If a property name is provided for `iteratee` the created `_.property`                                          // 11714
     * style callback returns the property value of the given element.                                                 // 11715
     *                                                                                                                 // 11716
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11717
     * style callback returns `true` for elements that have a matching property                                        // 11718
     * value, else `false`.                                                                                            // 11719
     *                                                                                                                 // 11720
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11721
     * callback returns `true` for elements that have the properties of the given                                      // 11722
     * object, else `false`.                                                                                           // 11723
     *                                                                                                                 // 11724
     * @static                                                                                                         // 11725
     * @memberOf _                                                                                                     // 11726
     * @category Math                                                                                                  // 11727
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11728
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11729
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11730
     * @returns {*} Returns the minimum value.                                                                         // 11731
     * @example                                                                                                        // 11732
     *                                                                                                                 // 11733
     * _.min([4, 2, 8, 6]);                                                                                            // 11734
     * // => 2                                                                                                         // 11735
     *                                                                                                                 // 11736
     * _.min([]);                                                                                                      // 11737
     * // => Infinity                                                                                                  // 11738
     *                                                                                                                 // 11739
     * var users = [                                                                                                   // 11740
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11741
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11742
     * ];                                                                                                              // 11743
     *                                                                                                                 // 11744
     * _.min(users, function(chr) {                                                                                    // 11745
     *   return chr.age;                                                                                               // 11746
     * });                                                                                                             // 11747
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11748
     *                                                                                                                 // 11749
     * // using the `_.property` callback shorthand                                                                    // 11750
     * _.min(users, 'age');                                                                                            // 11751
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11752
     */                                                                                                                // 11753
    var min = createExtremum(lt, POSITIVE_INFINITY);                                                                   // 11754
                                                                                                                       // 11755
    /**                                                                                                                // 11756
     * Calculates `n` rounded to `precision`.                                                                          // 11757
     *                                                                                                                 // 11758
     * @static                                                                                                         // 11759
     * @memberOf _                                                                                                     // 11760
     * @category Math                                                                                                  // 11761
     * @param {number} n The number to round.                                                                          // 11762
     * @param {number} [precision=0] The precision to round to.                                                        // 11763
     * @returns {number} Returns the rounded number.                                                                   // 11764
     * @example                                                                                                        // 11765
     *                                                                                                                 // 11766
     * _.round(4.006);                                                                                                 // 11767
     * // => 4                                                                                                         // 11768
     *                                                                                                                 // 11769
     * _.round(4.006, 2);                                                                                              // 11770
     * // => 4.01                                                                                                      // 11771
     *                                                                                                                 // 11772
     * _.round(4060, -2);                                                                                              // 11773
     * // => 4100                                                                                                      // 11774
     */                                                                                                                // 11775
    var round = createRound('round');                                                                                  // 11776
                                                                                                                       // 11777
    /**                                                                                                                // 11778
     * Gets the sum of the values in `collection`.                                                                     // 11779
     *                                                                                                                 // 11780
     * @static                                                                                                         // 11781
     * @memberOf _                                                                                                     // 11782
     * @category Math                                                                                                  // 11783
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11784
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11785
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11786
     * @returns {number} Returns the sum.                                                                              // 11787
     * @example                                                                                                        // 11788
     *                                                                                                                 // 11789
     * _.sum([4, 6]);                                                                                                  // 11790
     * // => 10                                                                                                        // 11791
     *                                                                                                                 // 11792
     * _.sum({ 'a': 4, 'b': 6 });                                                                                      // 11793
     * // => 10                                                                                                        // 11794
     *                                                                                                                 // 11795
     * var objects = [                                                                                                 // 11796
     *   { 'n': 4 },                                                                                                   // 11797
     *   { 'n': 6 }                                                                                                    // 11798
     * ];                                                                                                              // 11799
     *                                                                                                                 // 11800
     * _.sum(objects, function(object) {                                                                               // 11801
     *   return object.n;                                                                                              // 11802
     * });                                                                                                             // 11803
     * // => 10                                                                                                        // 11804
     *                                                                                                                 // 11805
     * // using the `_.property` callback shorthand                                                                    // 11806
     * _.sum(objects, 'n');                                                                                            // 11807
     * // => 10                                                                                                        // 11808
     */                                                                                                                // 11809
    function sum(collection, iteratee, thisArg) {                                                                      // 11810
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 11811
        iteratee = undefined;                                                                                          // 11812
      }                                                                                                                // 11813
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 11814
      return iteratee.length == 1                                                                                      // 11815
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)                                // 11816
        : baseSum(collection, iteratee);                                                                               // 11817
    }                                                                                                                  // 11818
                                                                                                                       // 11819
    /*------------------------------------------------------------------------*/                                       // 11820
                                                                                                                       // 11821
    // Ensure wrappers are instances of `baseLodash`.                                                                  // 11822
    lodash.prototype = baseLodash.prototype;                                                                           // 11823
                                                                                                                       // 11824
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 11825
    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 11826
                                                                                                                       // 11827
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 11828
    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 11829
                                                                                                                       // 11830
    // Add functions to the `Map` cache.                                                                               // 11831
    MapCache.prototype['delete'] = mapDelete;                                                                          // 11832
    MapCache.prototype.get = mapGet;                                                                                   // 11833
    MapCache.prototype.has = mapHas;                                                                                   // 11834
    MapCache.prototype.set = mapSet;                                                                                   // 11835
                                                                                                                       // 11836
    // Add functions to the `Set` cache.                                                                               // 11837
    SetCache.prototype.push = cachePush;                                                                               // 11838
                                                                                                                       // 11839
    // Assign cache to `_.memoize`.                                                                                    // 11840
    memoize.Cache = MapCache;                                                                                          // 11841
                                                                                                                       // 11842
    // Add functions that return wrapped values when chaining.                                                         // 11843
    lodash.after = after;                                                                                              // 11844
    lodash.ary = ary;                                                                                                  // 11845
    lodash.assign = assign;                                                                                            // 11846
    lodash.at = at;                                                                                                    // 11847
    lodash.before = before;                                                                                            // 11848
    lodash.bind = bind;                                                                                                // 11849
    lodash.bindAll = bindAll;                                                                                          // 11850
    lodash.bindKey = bindKey;                                                                                          // 11851
    lodash.callback = callback;                                                                                        // 11852
    lodash.chain = chain;                                                                                              // 11853
    lodash.chunk = chunk;                                                                                              // 11854
    lodash.compact = compact;                                                                                          // 11855
    lodash.constant = constant;                                                                                        // 11856
    lodash.countBy = countBy;                                                                                          // 11857
    lodash.create = create;                                                                                            // 11858
    lodash.curry = curry;                                                                                              // 11859
    lodash.curryRight = curryRight;                                                                                    // 11860
    lodash.debounce = debounce;                                                                                        // 11861
    lodash.defaults = defaults;                                                                                        // 11862
    lodash.defaultsDeep = defaultsDeep;                                                                                // 11863
    lodash.defer = defer;                                                                                              // 11864
    lodash.delay = delay;                                                                                              // 11865
    lodash.difference = difference;                                                                                    // 11866
    lodash.drop = drop;                                                                                                // 11867
    lodash.dropRight = dropRight;                                                                                      // 11868
    lodash.dropRightWhile = dropRightWhile;                                                                            // 11869
    lodash.dropWhile = dropWhile;                                                                                      // 11870
    lodash.fill = fill;                                                                                                // 11871
    lodash.filter = filter;                                                                                            // 11872
    lodash.flatten = flatten;                                                                                          // 11873
    lodash.flattenDeep = flattenDeep;                                                                                  // 11874
    lodash.flow = flow;                                                                                                // 11875
    lodash.flowRight = flowRight;                                                                                      // 11876
    lodash.forEach = forEach;                                                                                          // 11877
    lodash.forEachRight = forEachRight;                                                                                // 11878
    lodash.forIn = forIn;                                                                                              // 11879
    lodash.forInRight = forInRight;                                                                                    // 11880
    lodash.forOwn = forOwn;                                                                                            // 11881
    lodash.forOwnRight = forOwnRight;                                                                                  // 11882
    lodash.functions = functions;                                                                                      // 11883
    lodash.groupBy = groupBy;                                                                                          // 11884
    lodash.indexBy = indexBy;                                                                                          // 11885
    lodash.initial = initial;                                                                                          // 11886
    lodash.intersection = intersection;                                                                                // 11887
    lodash.invert = invert;                                                                                            // 11888
    lodash.invoke = invoke;                                                                                            // 11889
    lodash.keys = keys;                                                                                                // 11890
    lodash.keysIn = keysIn;                                                                                            // 11891
    lodash.map = map;                                                                                                  // 11892
    lodash.mapKeys = mapKeys;                                                                                          // 11893
    lodash.mapValues = mapValues;                                                                                      // 11894
    lodash.matches = matches;                                                                                          // 11895
    lodash.matchesProperty = matchesProperty;                                                                          // 11896
    lodash.memoize = memoize;                                                                                          // 11897
    lodash.merge = merge;                                                                                              // 11898
    lodash.method = method;                                                                                            // 11899
    lodash.methodOf = methodOf;                                                                                        // 11900
    lodash.mixin = mixin;                                                                                              // 11901
    lodash.modArgs = modArgs;                                                                                          // 11902
    lodash.negate = negate;                                                                                            // 11903
    lodash.omit = omit;                                                                                                // 11904
    lodash.once = once;                                                                                                // 11905
    lodash.pairs = pairs;                                                                                              // 11906
    lodash.partial = partial;                                                                                          // 11907
    lodash.partialRight = partialRight;                                                                                // 11908
    lodash.partition = partition;                                                                                      // 11909
    lodash.pick = pick;                                                                                                // 11910
    lodash.pluck = pluck;                                                                                              // 11911
    lodash.property = property;                                                                                        // 11912
    lodash.propertyOf = propertyOf;                                                                                    // 11913
    lodash.pull = pull;                                                                                                // 11914
    lodash.pullAt = pullAt;                                                                                            // 11915
    lodash.range = range;                                                                                              // 11916
    lodash.rearg = rearg;                                                                                              // 11917
    lodash.reject = reject;                                                                                            // 11918
    lodash.remove = remove;                                                                                            // 11919
    lodash.rest = rest;                                                                                                // 11920
    lodash.restParam = restParam;                                                                                      // 11921
    lodash.set = set;                                                                                                  // 11922
    lodash.shuffle = shuffle;                                                                                          // 11923
    lodash.slice = slice;                                                                                              // 11924
    lodash.sortBy = sortBy;                                                                                            // 11925
    lodash.sortByAll = sortByAll;                                                                                      // 11926
    lodash.sortByOrder = sortByOrder;                                                                                  // 11927
    lodash.spread = spread;                                                                                            // 11928
    lodash.take = take;                                                                                                // 11929
    lodash.takeRight = takeRight;                                                                                      // 11930
    lodash.takeRightWhile = takeRightWhile;                                                                            // 11931
    lodash.takeWhile = takeWhile;                                                                                      // 11932
    lodash.tap = tap;                                                                                                  // 11933
    lodash.throttle = throttle;                                                                                        // 11934
    lodash.thru = thru;                                                                                                // 11935
    lodash.times = times;                                                                                              // 11936
    lodash.toArray = toArray;                                                                                          // 11937
    lodash.toPlainObject = toPlainObject;                                                                              // 11938
    lodash.transform = transform;                                                                                      // 11939
    lodash.union = union;                                                                                              // 11940
    lodash.uniq = uniq;                                                                                                // 11941
    lodash.unzip = unzip;                                                                                              // 11942
    lodash.unzipWith = unzipWith;                                                                                      // 11943
    lodash.values = values;                                                                                            // 11944
    lodash.valuesIn = valuesIn;                                                                                        // 11945
    lodash.where = where;                                                                                              // 11946
    lodash.without = without;                                                                                          // 11947
    lodash.wrap = wrap;                                                                                                // 11948
    lodash.xor = xor;                                                                                                  // 11949
    lodash.zip = zip;                                                                                                  // 11950
    lodash.zipObject = zipObject;                                                                                      // 11951
    lodash.zipWith = zipWith;                                                                                          // 11952
                                                                                                                       // 11953
    // Add aliases.                                                                                                    // 11954
    lodash.backflow = flowRight;                                                                                       // 11955
    lodash.collect = map;                                                                                              // 11956
    lodash.compose = flowRight;                                                                                        // 11957
    lodash.each = forEach;                                                                                             // 11958
    lodash.eachRight = forEachRight;                                                                                   // 11959
    lodash.extend = assign;                                                                                            // 11960
    lodash.iteratee = callback;                                                                                        // 11961
    lodash.methods = functions;                                                                                        // 11962
    lodash.object = zipObject;                                                                                         // 11963
    lodash.select = filter;                                                                                            // 11964
    lodash.tail = rest;                                                                                                // 11965
    lodash.unique = uniq;                                                                                              // 11966
                                                                                                                       // 11967
    // Add functions to `lodash.prototype`.                                                                            // 11968
    mixin(lodash, lodash);                                                                                             // 11969
                                                                                                                       // 11970
    /*------------------------------------------------------------------------*/                                       // 11971
                                                                                                                       // 11972
    // Add functions that return unwrapped values when chaining.                                                       // 11973
    lodash.add = add;                                                                                                  // 11974
    lodash.attempt = attempt;                                                                                          // 11975
    lodash.camelCase = camelCase;                                                                                      // 11976
    lodash.capitalize = capitalize;                                                                                    // 11977
    lodash.ceil = ceil;                                                                                                // 11978
    lodash.clone = clone;                                                                                              // 11979
    lodash.cloneDeep = cloneDeep;                                                                                      // 11980
    lodash.deburr = deburr;                                                                                            // 11981
    lodash.endsWith = endsWith;                                                                                        // 11982
    lodash.escape = escape;                                                                                            // 11983
    lodash.escapeRegExp = escapeRegExp;                                                                                // 11984
    lodash.every = every;                                                                                              // 11985
    lodash.find = find;                                                                                                // 11986
    lodash.findIndex = findIndex;                                                                                      // 11987
    lodash.findKey = findKey;                                                                                          // 11988
    lodash.findLast = findLast;                                                                                        // 11989
    lodash.findLastIndex = findLastIndex;                                                                              // 11990
    lodash.findLastKey = findLastKey;                                                                                  // 11991
    lodash.findWhere = findWhere;                                                                                      // 11992
    lodash.first = first;                                                                                              // 11993
    lodash.floor = floor;                                                                                              // 11994
    lodash.get = get;                                                                                                  // 11995
    lodash.gt = gt;                                                                                                    // 11996
    lodash.gte = gte;                                                                                                  // 11997
    lodash.has = has;                                                                                                  // 11998
    lodash.identity = identity;                                                                                        // 11999
    lodash.includes = includes;                                                                                        // 12000
    lodash.indexOf = indexOf;                                                                                          // 12001
    lodash.inRange = inRange;                                                                                          // 12002
    lodash.isArguments = isArguments;                                                                                  // 12003
    lodash.isArray = isArray;                                                                                          // 12004
    lodash.isBoolean = isBoolean;                                                                                      // 12005
    lodash.isDate = isDate;                                                                                            // 12006
    lodash.isElement = isElement;                                                                                      // 12007
    lodash.isEmpty = isEmpty;                                                                                          // 12008
    lodash.isEqual = isEqual;                                                                                          // 12009
    lodash.isError = isError;                                                                                          // 12010
    lodash.isFinite = isFinite;                                                                                        // 12011
    lodash.isFunction = isFunction;                                                                                    // 12012
    lodash.isMatch = isMatch;                                                                                          // 12013
    lodash.isNaN = isNaN;                                                                                              // 12014
    lodash.isNative = isNative;                                                                                        // 12015
    lodash.isNull = isNull;                                                                                            // 12016
    lodash.isNumber = isNumber;                                                                                        // 12017
    lodash.isObject = isObject;                                                                                        // 12018
    lodash.isPlainObject = isPlainObject;                                                                              // 12019
    lodash.isRegExp = isRegExp;                                                                                        // 12020
    lodash.isString = isString;                                                                                        // 12021
    lodash.isTypedArray = isTypedArray;                                                                                // 12022
    lodash.isUndefined = isUndefined;                                                                                  // 12023
    lodash.kebabCase = kebabCase;                                                                                      // 12024
    lodash.last = last;                                                                                                // 12025
    lodash.lastIndexOf = lastIndexOf;                                                                                  // 12026
    lodash.lt = lt;                                                                                                    // 12027
    lodash.lte = lte;                                                                                                  // 12028
    lodash.max = max;                                                                                                  // 12029
    lodash.min = min;                                                                                                  // 12030
    lodash.noConflict = noConflict;                                                                                    // 12031
    lodash.noop = noop;                                                                                                // 12032
    lodash.now = now;                                                                                                  // 12033
    lodash.pad = pad;                                                                                                  // 12034
    lodash.padLeft = padLeft;                                                                                          // 12035
    lodash.padRight = padRight;                                                                                        // 12036
    lodash.parseInt = parseInt;                                                                                        // 12037
    lodash.random = random;                                                                                            // 12038
    lodash.reduce = reduce;                                                                                            // 12039
    lodash.reduceRight = reduceRight;                                                                                  // 12040
    lodash.repeat = repeat;                                                                                            // 12041
    lodash.result = result;                                                                                            // 12042
    lodash.round = round;                                                                                              // 12043
    lodash.runInContext = runInContext;                                                                                // 12044
    lodash.size = size;                                                                                                // 12045
    lodash.snakeCase = snakeCase;                                                                                      // 12046
    lodash.some = some;                                                                                                // 12047
    lodash.sortedIndex = sortedIndex;                                                                                  // 12048
    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 12049
    lodash.startCase = startCase;                                                                                      // 12050
    lodash.startsWith = startsWith;                                                                                    // 12051
    lodash.sum = sum;                                                                                                  // 12052
    lodash.template = template;                                                                                        // 12053
    lodash.trim = trim;                                                                                                // 12054
    lodash.trimLeft = trimLeft;                                                                                        // 12055
    lodash.trimRight = trimRight;                                                                                      // 12056
    lodash.trunc = trunc;                                                                                              // 12057
    lodash.unescape = unescape;                                                                                        // 12058
    lodash.uniqueId = uniqueId;                                                                                        // 12059
    lodash.words = words;                                                                                              // 12060
                                                                                                                       // 12061
    // Add aliases.                                                                                                    // 12062
    lodash.all = every;                                                                                                // 12063
    lodash.any = some;                                                                                                 // 12064
    lodash.contains = includes;                                                                                        // 12065
    lodash.eq = isEqual;                                                                                               // 12066
    lodash.detect = find;                                                                                              // 12067
    lodash.foldl = reduce;                                                                                             // 12068
    lodash.foldr = reduceRight;                                                                                        // 12069
    lodash.head = first;                                                                                               // 12070
    lodash.include = includes;                                                                                         // 12071
    lodash.inject = reduce;                                                                                            // 12072
                                                                                                                       // 12073
    mixin(lodash, (function() {                                                                                        // 12074
      var source = {};                                                                                                 // 12075
      baseForOwn(lodash, function(func, methodName) {                                                                  // 12076
        if (!lodash.prototype[methodName]) {                                                                           // 12077
          source[methodName] = func;                                                                                   // 12078
        }                                                                                                              // 12079
      });                                                                                                              // 12080
      return source;                                                                                                   // 12081
    }()), false);                                                                                                      // 12082
                                                                                                                       // 12083
    /*------------------------------------------------------------------------*/                                       // 12084
                                                                                                                       // 12085
    // Add functions capable of returning wrapped and unwrapped values when chaining.                                  // 12086
    lodash.sample = sample;                                                                                            // 12087
                                                                                                                       // 12088
    lodash.prototype.sample = function(n) {                                                                            // 12089
      if (!this.__chain__ && n == null) {                                                                              // 12090
        return sample(this.value());                                                                                   // 12091
      }                                                                                                                // 12092
      return this.thru(function(value) {                                                                               // 12093
        return sample(value, n);                                                                                       // 12094
      });                                                                                                              // 12095
    };                                                                                                                 // 12096
                                                                                                                       // 12097
    /*------------------------------------------------------------------------*/                                       // 12098
                                                                                                                       // 12099
    /**                                                                                                                // 12100
     * The semantic version number.                                                                                    // 12101
     *                                                                                                                 // 12102
     * @static                                                                                                         // 12103
     * @memberOf _                                                                                                     // 12104
     * @type string                                                                                                    // 12105
     */                                                                                                                // 12106
    lodash.VERSION = VERSION;                                                                                          // 12107
                                                                                                                       // 12108
    // Assign default placeholders.                                                                                    // 12109
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 12110
      lodash[methodName].placeholder = lodash;                                                                         // 12111
    });                                                                                                                // 12112
                                                                                                                       // 12113
    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 12114
    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 12115
      LazyWrapper.prototype[methodName] = function(n) {                                                                // 12116
        var filtered = this.__filtered__;                                                                              // 12117
        if (filtered && !index) {                                                                                      // 12118
          return new LazyWrapper(this);                                                                                // 12119
        }                                                                                                              // 12120
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);                                                         // 12121
                                                                                                                       // 12122
        var result = this.clone();                                                                                     // 12123
        if (filtered) {                                                                                                // 12124
          result.__takeCount__ = nativeMin(result.__takeCount__, n);                                                   // 12125
        } else {                                                                                                       // 12126
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });              // 12127
        }                                                                                                              // 12128
        return result;                                                                                                 // 12129
      };                                                                                                               // 12130
                                                                                                                       // 12131
      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 12132
        return this.reverse()[methodName](n).reverse();                                                                // 12133
      };                                                                                                               // 12134
    });                                                                                                                // 12135
                                                                                                                       // 12136
    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 12137
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 12138
      var type = index + 1,                                                                                            // 12139
          isFilter = type != LAZY_MAP_FLAG;                                                                            // 12140
                                                                                                                       // 12141
      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {                                                // 12142
        var result = this.clone();                                                                                     // 12143
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });                    // 12144
        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 12145
        return result;                                                                                                 // 12146
      };                                                                                                               // 12147
    });                                                                                                                // 12148
                                                                                                                       // 12149
    // Add `LazyWrapper` methods for `_.first` and `_.last`.                                                           // 12150
    arrayEach(['first', 'last'], function(methodName, index) {                                                         // 12151
      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 12152
                                                                                                                       // 12153
      LazyWrapper.prototype[methodName] = function() {                                                                 // 12154
        return this[takeName](1).value()[0];                                                                           // 12155
      };                                                                                                               // 12156
    });                                                                                                                // 12157
                                                                                                                       // 12158
    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.                                                         // 12159
    arrayEach(['initial', 'rest'], function(methodName, index) {                                                       // 12160
      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 12161
                                                                                                                       // 12162
      LazyWrapper.prototype[methodName] = function() {                                                                 // 12163
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 12164
      };                                                                                                               // 12165
    });                                                                                                                // 12166
                                                                                                                       // 12167
    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.                                                          // 12168
    arrayEach(['pluck', 'where'], function(methodName, index) {                                                        // 12169
      var operationName = index ? 'filter' : 'map',                                                                    // 12170
          createCallback = index ? baseMatches : property;                                                             // 12171
                                                                                                                       // 12172
      LazyWrapper.prototype[methodName] = function(value) {                                                            // 12173
        return this[operationName](createCallback(value));                                                             // 12174
      };                                                                                                               // 12175
    });                                                                                                                // 12176
                                                                                                                       // 12177
    LazyWrapper.prototype.compact = function() {                                                                       // 12178
      return this.filter(identity);                                                                                    // 12179
    };                                                                                                                 // 12180
                                                                                                                       // 12181
    LazyWrapper.prototype.reject = function(predicate, thisArg) {                                                      // 12182
      predicate = getCallback(predicate, thisArg, 1);                                                                  // 12183
      return this.filter(function(value) {                                                                             // 12184
        return !predicate(value);                                                                                      // 12185
      });                                                                                                              // 12186
    };                                                                                                                 // 12187
                                                                                                                       // 12188
    LazyWrapper.prototype.slice = function(start, end) {                                                               // 12189
      start = start == null ? 0 : (+start || 0);                                                                       // 12190
                                                                                                                       // 12191
      var result = this;                                                                                               // 12192
      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 12193
        return new LazyWrapper(result);                                                                                // 12194
      }                                                                                                                // 12195
      if (start < 0) {                                                                                                 // 12196
        result = result.takeRight(-start);                                                                             // 12197
      } else if (start) {                                                                                              // 12198
        result = result.drop(start);                                                                                   // 12199
      }                                                                                                                // 12200
      if (end !== undefined) {                                                                                         // 12201
        end = (+end || 0);                                                                                             // 12202
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 12203
      }                                                                                                                // 12204
      return result;                                                                                                   // 12205
    };                                                                                                                 // 12206
                                                                                                                       // 12207
    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {                                              // 12208
      return this.reverse().takeWhile(predicate, thisArg).reverse();                                                   // 12209
    };                                                                                                                 // 12210
                                                                                                                       // 12211
    LazyWrapper.prototype.toArray = function() {                                                                       // 12212
      return this.take(POSITIVE_INFINITY);                                                                             // 12213
    };                                                                                                                 // 12214
                                                                                                                       // 12215
    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 12216
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12217
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),                                            // 12218
          retUnwrapped = /^(?:first|last)$/.test(methodName),                                                          // 12219
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];           // 12220
                                                                                                                       // 12221
      if (!lodashFunc) {                                                                                               // 12222
        return;                                                                                                        // 12223
      }                                                                                                                // 12224
      lodash.prototype[methodName] = function() {                                                                      // 12225
        var args = retUnwrapped ? [1] : arguments,                                                                     // 12226
            chainAll = this.__chain__,                                                                                 // 12227
            value = this.__wrapped__,                                                                                  // 12228
            isHybrid = !!this.__actions__.length,                                                                      // 12229
            isLazy = value instanceof LazyWrapper,                                                                     // 12230
            iteratee = args[0],                                                                                        // 12231
            useLazy = isLazy || isArray(value);                                                                        // 12232
                                                                                                                       // 12233
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 12234
          // Avoid lazy use if the iteratee has a "length" value other than `1`.                                       // 12235
          isLazy = useLazy = false;                                                                                    // 12236
        }                                                                                                              // 12237
        var interceptor = function(value) {                                                                            // 12238
          return (retUnwrapped && chainAll)                                                                            // 12239
            ? lodashFunc(value, 1)[0]                                                                                  // 12240
            : lodashFunc.apply(undefined, arrayPush([value], args));                                                   // 12241
        };                                                                                                             // 12242
                                                                                                                       // 12243
        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },                                    // 12244
            onlyLazy = isLazy && !isHybrid;                                                                            // 12245
                                                                                                                       // 12246
        if (retUnwrapped && !chainAll) {                                                                               // 12247
          if (onlyLazy) {                                                                                              // 12248
            value = value.clone();                                                                                     // 12249
            value.__actions__.push(action);                                                                            // 12250
            return func.call(value);                                                                                   // 12251
          }                                                                                                            // 12252
          return lodashFunc.call(undefined, this.value())[0];                                                          // 12253
        }                                                                                                              // 12254
        if (!retUnwrapped && useLazy) {                                                                                // 12255
          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 12256
          var result = func.apply(value, args);                                                                        // 12257
          result.__actions__.push(action);                                                                             // 12258
          return new LodashWrapper(result, chainAll);                                                                  // 12259
        }                                                                                                              // 12260
        return this.thru(interceptor);                                                                                 // 12261
      };                                                                                                               // 12262
    });                                                                                                                // 12263
                                                                                                                       // 12264
    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 12265
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],                      // 12267
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 12268
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);                                              // 12269
                                                                                                                       // 12270
      lodash.prototype[methodName] = function() {                                                                      // 12271
        var args = arguments;                                                                                          // 12272
        if (retUnwrapped && !this.__chain__) {                                                                         // 12273
          return func.apply(this.value(), args);                                                                       // 12274
        }                                                                                                              // 12275
        return this[chainName](function(value) {                                                                       // 12276
          return func.apply(value, args);                                                                              // 12277
        });                                                                                                            // 12278
      };                                                                                                               // 12279
    });                                                                                                                // 12280
                                                                                                                       // 12281
    // Map minified function names to their real names.                                                                // 12282
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12283
      var lodashFunc = lodash[methodName];                                                                             // 12284
      if (lodashFunc) {                                                                                                // 12285
        var key = (lodashFunc.name + ''),                                                                              // 12286
            names = realNames[key] || (realNames[key] = []);                                                           // 12287
                                                                                                                       // 12288
        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 12289
      }                                                                                                                // 12290
    });                                                                                                                // 12291
                                                                                                                       // 12292
    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 12293
                                                                                                                       // 12294
    // Add functions to the lazy wrapper.                                                                              // 12295
    LazyWrapper.prototype.clone = lazyClone;                                                                           // 12296
    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 12297
    LazyWrapper.prototype.value = lazyValue;                                                                           // 12298
                                                                                                                       // 12299
    // Add chaining functions to the `lodash` wrapper.                                                                 // 12300
    lodash.prototype.chain = wrapperChain;                                                                             // 12301
    lodash.prototype.commit = wrapperCommit;                                                                           // 12302
    lodash.prototype.concat = wrapperConcat;                                                                           // 12303
    lodash.prototype.plant = wrapperPlant;                                                                             // 12304
    lodash.prototype.reverse = wrapperReverse;                                                                         // 12305
    lodash.prototype.toString = wrapperToString;                                                                       // 12306
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // 12307
                                                                                                                       // 12308
    // Add function aliases to the `lodash` wrapper.                                                                   // 12309
    lodash.prototype.collect = lodash.prototype.map;                                                                   // 12310
    lodash.prototype.head = lodash.prototype.first;                                                                    // 12311
    lodash.prototype.select = lodash.prototype.filter;                                                                 // 12312
    lodash.prototype.tail = lodash.prototype.rest;                                                                     // 12313
                                                                                                                       // 12314
    return lodash;                                                                                                     // 12315
  }                                                                                                                    // 12316
                                                                                                                       // 12317
  /*--------------------------------------------------------------------------*/                                       // 12318
                                                                                                                       // 12319
  // Export lodash.                                                                                                    // 12320
  var _ = runInContext();                                                                                              // 12321
                                                                                                                       // 12322
  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 12323
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 12324
    // Expose lodash to the global object when an AMD loader is present to avoid                                       // 12325
    // errors in cases where lodash is loaded by a script tag and not intended                                         // 12326
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for                                        // 12327
    // more details.                                                                                                   // 12328
    root._ = _;                                                                                                        // 12329
                                                                                                                       // 12330
    // Define as an anonymous module so, through path mapping, it can be                                               // 12331
    // referenced as the "underscore" module.                                                                          // 12332
    define(function() {                                                                                                // 12333
      return _;                                                                                                        // 12334
    });                                                                                                                // 12335
  }                                                                                                                    // 12336
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 12337
  else if (freeExports && freeModule) {                                                                                // 12338
    // Export for Node.js or RingoJS.                                                                                  // 12339
    if (moduleExports) {                                                                                               // 12340
      (freeModule.exports = _)._ = _;                                                                                  // 12341
    }                                                                                                                  // 12342
    // Export for Rhino with CommonJS support.                                                                         // 12343
    else {                                                                                                             // 12344
      freeExports._ = _;                                                                                               // 12345
    }                                                                                                                  // 12346
  }                                                                                                                    // 12347
  else {                                                                                                               // 12348
    // Export for a browser or Rhino.                                                                                  // 12349
    root._ = _;                                                                                                        // 12350
  }                                                                                                                    // 12351
}.call(this));                                                                                                         // 12352
                                                                                                                       // 12353
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 12363
}).call(this);                                                       // 12364
                                                                     // 12365
                                                                     // 12366
                                                                     // 12367
                                                                     // 12368
                                                                     // 12369
                                                                     // 12370
(function () {                                                       // 12371
                                                                     // 12372
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/erasaur:meteor-lodash/export.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
lodash = this._;                                                                                                       // 1
_ = lodash;                                                                                                            // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                     // 12383
}).call(this);                                                       // 12384
                                                                     // 12385
///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['erasaur:meteor-lodash'] = {
  lodash: lodash,
  _: _
};

})();

//# sourceMappingURL=erasaur_meteor-lodash.js.map
