{"version":3,"sources":["users.js"],"names":[],"mappings":"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","file":"users-compiled.js","sourcesContent":["/*\n * Users Schema:\n */\n\n\nMeteor.users.allow({\n  insert: () => false,\n  update: () => false,\n  remove: () => false\n});\n\nMeteor.users.deny({\n  insert: () => true,\n  update: () => true,\n  remove: () => true\n});\n\n\nlet userProfile = new SimpleSchema({\n\n  //User basic\n  description: {\n    type: String,\n    label: \"Description\",\n    optional: true\n  },\n  profileDotId:{\n    type: String,\n    label: \"Profile Dot Id\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  createdByUserDots:{\n    type:[String],\n    label: \"Created By User Dots\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n\n\n  //User Counters:\n  dotsCounter:{\n    type: String,\n    label: \"Dots\",\n    defaultValue: \"0\",\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  connectionsCounter:{\n    type: String,\n    label: \"Connections\",\n    defaultValue: \"0\",\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n\n  //User Images:\n  profileImage:{\n    type: String,\n    label: \"Profile Image\",\n    defaultValue: \"wwwwwwwwwwwwwwww\", //TBD\n    //optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  coverImage:{\n    type: String,\n    label: \"Cover Image\",\n    defaultValue: \"wwwwwwwwwwwwwwww\", //TBD\n    //optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  userImagesUrls:{\n    type: [String],\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n\n  //User Links and Location:\n  userAddress:{\n    type: String,\n    label: \"Home Address\",\n    optional: true\n  },\n  websiteUrl:{\n    type: String,\n    label: \"Website\",\n    optional: true,\n    defaultValue: \"\"\n  },\n  facebookAccountUrl:{\n    type: String,\n    label: \"Facebook\",\n    optional: true\n  },\n  twitterAccountUrl:{\n    type: String,\n    label: \"Twitter\",\n    optional: true\n  },\n  googleAccountUrl:{\n    type: String,\n    label: \"Google+\",\n    optional: true\n  },\n  pinterestAccountUrl:{\n    type: String,\n    label: \"Pinterest\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  tripAdvisorAccountUrl:{\n    type: String,\n    label: \"Pinterest\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  foursquareAccountUrl:{\n    type: String,\n    label: \"Pinterest\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  spareAccountsUrlArray:{\n    type: [String],\n    label: \"Pinterest\",\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n\n  //User feed and following/followers\n  following:{\n    type: [String],\n    optional: true,\n    autoform:{\n      type:\"hidden\",\n      label: false\n    }\n  },\n  followers:{\n    type: [String],\n    optional: true,\n    autoform:{\n      type:\"hidden\",\n      label: false\n    }\n  },\n  feedDotz:{\n    type: [String],\n    optional: true,\n    autoform:{\n      type:\"hidden\",\n      label: false\n    }\n  },\n\n  // TBD!!\n  //Flexible Fields:\n  flexibleString: {\n    type: String,\n    optional: true,\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n  flexibleArray:{\n    type: [String],\n    optional: true,\n    autoform:{\n      type:\"hidden\",\n      label: false\n    }\n  }\n});\n\n//OTNI: TBD\nlet user = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"emails.$.verified\": {\n    type: Boolean\n  },\n  createdAt: {\n    type: Date\n  },\n  profile: {\n    type: userProfile,\n    optional: true\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  roles: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n  //// Option 2: [String] type\n  //// If you are sure you will never need to use role groups, then\n  //// you can specify [String] as the type\n  //roles: {\n  //  type: [String],\n  //  optional: true\n  //}\n});\n\nMeteor.users.attachSchema(user);\n"]}